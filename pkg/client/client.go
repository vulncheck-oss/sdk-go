// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ParamsIdxReqParamsOrder.
const (
	Asc  ParamsIdxReqParamsOrder = "asc"
	Desc ParamsIdxReqParamsOrder = "desc"
)

// Defines values for ParamsIdxReqParamsSort.
const (
	DateAdded ParamsIdxReqParamsSort = "date_added"
	Timestamp ParamsIdxReqParamsSort = "_timestamp"
)

// Defines values for GetBackupIndexParamsIndex.
const (
	A10                        GetBackupIndexParamsIndex = "a10"
	Abb                        GetBackupIndexParamsIndex = "abb"
	Abbott                     GetBackupIndexParamsIndex = "abbott"
	Absolute                   GetBackupIndexParamsIndex = "absolute"
	Acronis                    GetBackupIndexParamsIndex = "acronis"
	Adobe                      GetBackupIndexParamsIndex = "adobe"
	Advisories                 GetBackupIndexParamsIndex = "advisories"
	AlephResearch              GetBackupIndexParamsIndex = "aleph-research"
	Alma                       GetBackupIndexParamsIndex = "alma"
	Alpine                     GetBackupIndexParamsIndex = "alpine"
	Amazon                     GetBackupIndexParamsIndex = "amazon"
	Amd                        GetBackupIndexParamsIndex = "amd"
	Ami                        GetBackupIndexParamsIndex = "ami"
	AnchoreNvdOverride         GetBackupIndexParamsIndex = "anchore-nvd-override"
	Android                    GetBackupIndexParamsIndex = "android"
	ApacheActivemq             GetBackupIndexParamsIndex = "apache-activemq"
	ApacheArchiva              GetBackupIndexParamsIndex = "apache-archiva"
	ApacheArrow                GetBackupIndexParamsIndex = "apache-arrow"
	ApacheCamel                GetBackupIndexParamsIndex = "apache-camel"
	ApacheCommons              GetBackupIndexParamsIndex = "apache-commons"
	ApacheCouchdb              GetBackupIndexParamsIndex = "apache-couchdb"
	ApacheFlink                GetBackupIndexParamsIndex = "apache-flink"
	ApacheGuacamole            GetBackupIndexParamsIndex = "apache-guacamole"
	ApacheHadoop               GetBackupIndexParamsIndex = "apache-hadoop"
	ApacheHttp                 GetBackupIndexParamsIndex = "apache-http"
	ApacheJspwiki              GetBackupIndexParamsIndex = "apache-jspwiki"
	ApacheKafka                GetBackupIndexParamsIndex = "apache-kafka"
	ApacheLoggingservices      GetBackupIndexParamsIndex = "apache-loggingservices"
	ApacheNifi                 GetBackupIndexParamsIndex = "apache-nifi"
	ApacheOfbiz                GetBackupIndexParamsIndex = "apache-ofbiz"
	ApacheOpenmeetings         GetBackupIndexParamsIndex = "apache-openmeetings"
	ApacheOpenoffice           GetBackupIndexParamsIndex = "apache-openoffice"
	ApachePulsar               GetBackupIndexParamsIndex = "apache-pulsar"
	ApacheShiro                GetBackupIndexParamsIndex = "apache-shiro"
	ApacheSpark                GetBackupIndexParamsIndex = "apache-spark"
	ApacheStruts               GetBackupIndexParamsIndex = "apache-struts"
	ApacheSubversion           GetBackupIndexParamsIndex = "apache-subversion"
	ApacheSuperset             GetBackupIndexParamsIndex = "apache-superset"
	ApacheTomcat               GetBackupIndexParamsIndex = "apache-tomcat"
	ApacheZookeeper            GetBackupIndexParamsIndex = "apache-zookeeper"
	Appcheck                   GetBackupIndexParamsIndex = "appcheck"
	Appgate                    GetBackupIndexParamsIndex = "appgate"
	Apple                      GetBackupIndexParamsIndex = "apple"
	Arch                       GetBackupIndexParamsIndex = "arch"
	Arista                     GetBackupIndexParamsIndex = "arista"
	Aruba                      GetBackupIndexParamsIndex = "aruba"
	Asrg                       GetBackupIndexParamsIndex = "asrg"
	Assetnote                  GetBackupIndexParamsIndex = "assetnote"
	Asterisk                   GetBackupIndexParamsIndex = "asterisk"
	Asus                       GetBackupIndexParamsIndex = "asus"
	Atlassian                  GetBackupIndexParamsIndex = "atlassian"
	AtlassianVulns             GetBackupIndexParamsIndex = "atlassian-vulns"
	Atredis                    GetBackupIndexParamsIndex = "atredis"
	Auscert                    GetBackupIndexParamsIndex = "auscert"
	Autodesk                   GetBackupIndexParamsIndex = "autodesk"
	Avaya                      GetBackupIndexParamsIndex = "avaya"
	Aveva                      GetBackupIndexParamsIndex = "aveva"
	Avigilon                   GetBackupIndexParamsIndex = "avigilon"
	Aws                        GetBackupIndexParamsIndex = "aws"
	Axis                       GetBackupIndexParamsIndex = "axis"
	Azul                       GetBackupIndexParamsIndex = "azul"
	Bandr                      GetBackupIndexParamsIndex = "bandr"
	Baxter                     GetBackupIndexParamsIndex = "baxter"
	Bbraun                     GetBackupIndexParamsIndex = "bbraun"
	Bd                         GetBackupIndexParamsIndex = "bd"
	Bdu                        GetBackupIndexParamsIndex = "bdu"
	Beckhoff                   GetBackupIndexParamsIndex = "beckhoff"
	Belden                     GetBackupIndexParamsIndex = "belden"
	BeyondTrust                GetBackupIndexParamsIndex = "beyond-trust"
	Binarly                    GetBackupIndexParamsIndex = "binarly"
	Bitdefender                GetBackupIndexParamsIndex = "bitdefender"
	Blackberry                 GetBackupIndexParamsIndex = "blackberry"
	Bls                        GetBackupIndexParamsIndex = "bls"
	Bosch                      GetBackupIndexParamsIndex = "bosch"
	BostonScientific           GetBackupIndexParamsIndex = "boston-scientific"
	Botnets                    GetBackupIndexParamsIndex = "botnets"
	CaCyberCentre              GetBackupIndexParamsIndex = "ca-cyber-centre"
	Canvas                     GetBackupIndexParamsIndex = "canvas"
	Carestream                 GetBackupIndexParamsIndex = "carestream"
	Cargo                      GetBackupIndexParamsIndex = "cargo"
	Carrier                    GetBackupIndexParamsIndex = "carrier"
	CblMariner                 GetBackupIndexParamsIndex = "cbl-mariner"
	Centos                     GetBackupIndexParamsIndex = "centos"
	CertBe                     GetBackupIndexParamsIndex = "cert-be"
	CertIn                     GetBackupIndexParamsIndex = "cert-in"
	CertIrSecurityAlerts       GetBackupIndexParamsIndex = "cert-ir-security-alerts"
	CertSe                     GetBackupIndexParamsIndex = "cert-se"
	CertUa                     GetBackupIndexParamsIndex = "cert-ua"
	Certeu                     GetBackupIndexParamsIndex = "certeu"
	Certfr                     GetBackupIndexParamsIndex = "certfr"
	Chainguard                 GetBackupIndexParamsIndex = "chainguard"
	Checkpoint                 GetBackupIndexParamsIndex = "checkpoint"
	Chrome                     GetBackupIndexParamsIndex = "chrome"
	CisaAlerts                 GetBackupIndexParamsIndex = "cisa-alerts"
	CisaKev                    GetBackupIndexParamsIndex = "cisa-kev"
	Cisco                      GetBackupIndexParamsIndex = "cisco"
	CiscoTalos                 GetBackupIndexParamsIndex = "cisco-talos"
	Citrix                     GetBackupIndexParamsIndex = "citrix"
	Claroty                    GetBackupIndexParamsIndex = "claroty"
	Cloudbees                  GetBackupIndexParamsIndex = "cloudbees"
	Cloudvulndb                GetBackupIndexParamsIndex = "cloudvulndb"
	Cnnvd                      GetBackupIndexParamsIndex = "cnnvd"
	CnvdBulletins              GetBackupIndexParamsIndex = "cnvd-bulletins"
	CnvdFlaws                  GetBackupIndexParamsIndex = "cnvd-flaws"
	Cocoapods                  GetBackupIndexParamsIndex = "cocoapods"
	Codesys                    GetBackupIndexParamsIndex = "codesys"
	CompassSecurity            GetBackupIndexParamsIndex = "compass-security"
	Composer                   GetBackupIndexParamsIndex = "composer"
	Conan                      GetBackupIndexParamsIndex = "conan"
	Crestron                   GetBackupIndexParamsIndex = "crestron"
	Curl                       GetBackupIndexParamsIndex = "curl"
	Cwe                        GetBackupIndexParamsIndex = "cwe"
	Dahua                      GetBackupIndexParamsIndex = "dahua"
	Dassault                   GetBackupIndexParamsIndex = "dassault"
	Debian                     GetBackupIndexParamsIndex = "debian"
	DebianDsa                  GetBackupIndexParamsIndex = "debian-dsa"
	Dell                       GetBackupIndexParamsIndex = "dell"
	Delta                      GetBackupIndexParamsIndex = "delta"
	Django                     GetBackupIndexParamsIndex = "django"
	Dnn                        GetBackupIndexParamsIndex = "dnn"
	Dotcms                     GetBackupIndexParamsIndex = "dotcms"
	Dragos                     GetBackupIndexParamsIndex = "dragos"
	Draytek                    GetBackupIndexParamsIndex = "draytek"
	Eaton                      GetBackupIndexParamsIndex = "eaton"
	Elastic                    GetBackupIndexParamsIndex = "elastic"
	Elspec                     GetBackupIndexParamsIndex = "elspec"
	EmergingThreatsSnort       GetBackupIndexParamsIndex = "emerging-threats-snort"
	Emerson                    GetBackupIndexParamsIndex = "emerson"
	Eol                        GetBackupIndexParamsIndex = "eol"
	Epss                       GetBackupIndexParamsIndex = "epss"
	ExodusIntel                GetBackupIndexParamsIndex = "exodus-intel"
	ExploitChains              GetBackupIndexParamsIndex = "exploit-chains"
	Exploitdb                  GetBackupIndexParamsIndex = "exploitdb"
	Exploits                   GetBackupIndexParamsIndex = "exploits"
	ExploitsChangelog          GetBackupIndexParamsIndex = "exploits-changelog"
	FSecure                    GetBackupIndexParamsIndex = "f-secure"
	Fanuc                      GetBackupIndexParamsIndex = "fanuc"
	Fastly                     GetBackupIndexParamsIndex = "fastly"
	Fedora                     GetBackupIndexParamsIndex = "fedora"
	Filecloud                  GetBackupIndexParamsIndex = "filecloud"
	FlattSecurity              GetBackupIndexParamsIndex = "flatt-security"
	Forgerock                  GetBackupIndexParamsIndex = "forgerock"
	Fortinet                   GetBackupIndexParamsIndex = "fortinet"
	FortinetIps                GetBackupIndexParamsIndex = "fortinet-ips"
	Foxit                      GetBackupIndexParamsIndex = "foxit"
	Freebsd                    GetBackupIndexParamsIndex = "freebsd"
	Gallagher                  GetBackupIndexParamsIndex = "gallagher"
	Gcp                        GetBackupIndexParamsIndex = "gcp"
	GeGas                      GetBackupIndexParamsIndex = "ge-gas"
	GeHealthcare               GetBackupIndexParamsIndex = "ge-healthcare"
	Gem                        GetBackupIndexParamsIndex = "gem"
	Genetec                    GetBackupIndexParamsIndex = "genetec"
	Gigabyte                   GetBackupIndexParamsIndex = "gigabyte"
	GiteeExploits              GetBackupIndexParamsIndex = "gitee-exploits"
	GithubExploits             GetBackupIndexParamsIndex = "github-exploits"
	GithubSecurityAdvisories   GetBackupIndexParamsIndex = "github-security-advisories"
	GitlabAdvisoriesCommunity  GetBackupIndexParamsIndex = "gitlab-advisories-community"
	GitlabExploits             GetBackupIndexParamsIndex = "gitlab-exploits"
	Gnutls                     GetBackupIndexParamsIndex = "gnutls"
	Golang                     GetBackupIndexParamsIndex = "golang"
	Google0dayItw              GetBackupIndexParamsIndex = "google-0day-itw"
	GoogleContainerOptimizedOs GetBackupIndexParamsIndex = "google-container-optimized-os"
	Grafana                    GetBackupIndexParamsIndex = "grafana"
	GreynoiseMetadata          GetBackupIndexParamsIndex = "greynoise-metadata"
	Hackage                    GetBackupIndexParamsIndex = "hackage"
	Harmonyos                  GetBackupIndexParamsIndex = "harmonyos"
	Hashicorp                  GetBackupIndexParamsIndex = "hashicorp"
	HaskellSadb                GetBackupIndexParamsIndex = "haskell-sadb"
	Hcl                        GetBackupIndexParamsIndex = "hcl"
	Hex                        GetBackupIndexParamsIndex = "hex"
	Hikvision                  GetBackupIndexParamsIndex = "hikvision"
	Hillrom                    GetBackupIndexParamsIndex = "hillrom"
	Hitachi                    GetBackupIndexParamsIndex = "hitachi"
	HitachiEnergy              GetBackupIndexParamsIndex = "hitachi-energy"
	Hkcert                     GetBackupIndexParamsIndex = "hkcert"
	Honeywell                  GetBackupIndexParamsIndex = "honeywell"
	Hp                         GetBackupIndexParamsIndex = "hp"
	HuaweiEuleros              GetBackupIndexParamsIndex = "huawei-euleros"
	HuaweiIps                  GetBackupIndexParamsIndex = "huawei-ips"
	HuaweiPsirt                GetBackupIndexParamsIndex = "huawei-psirt"
	Iava                       GetBackupIndexParamsIndex = "iava"
	Ibm                        GetBackupIndexParamsIndex = "ibm"
	Idemia                     GetBackupIndexParamsIndex = "idemia"
	IlAlerts                   GetBackupIndexParamsIndex = "il-alerts"
	IlVulnerabilities          GetBackupIndexParamsIndex = "il-vulnerabilities"
	Incibe                     GetBackupIndexParamsIndex = "incibe"
	InitialAccess              GetBackupIndexParamsIndex = "initial-access"
	InitialAccessGit           GetBackupIndexParamsIndex = "initial-access-git"
	Intel                      GetBackupIndexParamsIndex = "intel"
	Ipintel10d                 GetBackupIndexParamsIndex = "ipintel-10d"
	Ipintel30d                 GetBackupIndexParamsIndex = "ipintel-30d"
	Ipintel3d                  GetBackupIndexParamsIndex = "ipintel-3d"
	Ipintel90d                 GetBackupIndexParamsIndex = "ipintel-90d"
	Istio                      GetBackupIndexParamsIndex = "istio"
	Ivanti                     GetBackupIndexParamsIndex = "ivanti"
	IvantiRss                  GetBackupIndexParamsIndex = "ivanti-rss"
	Jenkins                    GetBackupIndexParamsIndex = "jenkins"
	Jetbrains                  GetBackupIndexParamsIndex = "jetbrains"
	Jfrog                      GetBackupIndexParamsIndex = "jfrog"
	Jnj                        GetBackupIndexParamsIndex = "jnj"
	Jvn                        GetBackupIndexParamsIndex = "jvn"
	Jvndb                      GetBackupIndexParamsIndex = "jvndb"
	KasperskyIcsCert           GetBackupIndexParamsIndex = "kaspersky-ics-cert"
	Korelogic                  GetBackupIndexParamsIndex = "korelogic"
	KrcertSecurityNotices      GetBackupIndexParamsIndex = "krcert-security-notices"
	KrcertVulnerabilities      GetBackupIndexParamsIndex = "krcert-vulnerabilities"
	Kubernetes                 GetBackupIndexParamsIndex = "kubernetes"
	Lenovo                     GetBackupIndexParamsIndex = "lenovo"
	Lexmark                    GetBackupIndexParamsIndex = "lexmark"
	Lg                         GetBackupIndexParamsIndex = "lg"
	LibreOffice                GetBackupIndexParamsIndex = "libre-office"
	Linux                      GetBackupIndexParamsIndex = "linux"
	MFiles                     GetBackupIndexParamsIndex = "m-files"
	Macert                     GetBackupIndexParamsIndex = "macert"
	Manageengine               GetBackupIndexParamsIndex = "manageengine"
	Maven                      GetBackupIndexParamsIndex = "maven"
	MbedTls                    GetBackupIndexParamsIndex = "mbed-tls"
	Mediatek                   GetBackupIndexParamsIndex = "mediatek"
	Medtronic                  GetBackupIndexParamsIndex = "medtronic"
	Mendix                     GetBackupIndexParamsIndex = "mendix"
	Metasploit                 GetBackupIndexParamsIndex = "metasploit"
	MicrosoftCvrf              GetBackupIndexParamsIndex = "microsoft-cvrf"
	MicrosoftKb                GetBackupIndexParamsIndex = "microsoft-kb"
	Mikrotik                   GetBackupIndexParamsIndex = "mikrotik"
	Mindray                    GetBackupIndexParamsIndex = "mindray"
	MispThreatActors           GetBackupIndexParamsIndex = "misp-threat-actors"
	Mitel                      GetBackupIndexParamsIndex = "mitel"
	MitreAttackCve             GetBackupIndexParamsIndex = "mitre-attack-cve"
	MitreCvelistV5             GetBackupIndexParamsIndex = "mitre-cvelist-v5"
	MitsubishiElectric         GetBackupIndexParamsIndex = "mitsubishi-electric"
	Mongodb                    GetBackupIndexParamsIndex = "mongodb"
	Moxa                       GetBackupIndexParamsIndex = "moxa"
	Mozilla                    GetBackupIndexParamsIndex = "mozilla"
	Naver                      GetBackupIndexParamsIndex = "naver"
	Ncsc                       GetBackupIndexParamsIndex = "ncsc"
	NcscCves                   GetBackupIndexParamsIndex = "ncsc-cves"
	Nec                        GetBackupIndexParamsIndex = "nec"
	Netapp                     GetBackupIndexParamsIndex = "netapp"
	Netgate                    GetBackupIndexParamsIndex = "netgate"
	Netgear                    GetBackupIndexParamsIndex = "netgear"
	Netskope                   GetBackupIndexParamsIndex = "netskope"
	Nginx                      GetBackupIndexParamsIndex = "nginx"
	Nhs                        GetBackupIndexParamsIndex = "nhs"
	Ni                         GetBackupIndexParamsIndex = "ni"
	NistNvd                    GetBackupIndexParamsIndex = "nist-nvd"
	NistNvd2                   GetBackupIndexParamsIndex = "nist-nvd2"
	NistNvd2Cpematch           GetBackupIndexParamsIndex = "nist-nvd2-cpematch"
	NodeSecurity               GetBackupIndexParamsIndex = "node-security"
	Nodejs                     GetBackupIndexParamsIndex = "nodejs"
	Nokia                      GetBackupIndexParamsIndex = "nokia"
	Nozomi                     GetBackupIndexParamsIndex = "nozomi"
	Npm                        GetBackupIndexParamsIndex = "npm"
	Ntp                        GetBackupIndexParamsIndex = "ntp"
	Nuget                      GetBackupIndexParamsIndex = "nuget"
	Nvidia                     GetBackupIndexParamsIndex = "nvidia"
	NzAdvisories               GetBackupIndexParamsIndex = "nz-advisories"
	OctopusDeploy              GetBackupIndexParamsIndex = "octopus-deploy"
	Okta                       GetBackupIndexParamsIndex = "okta"
	Omron                      GetBackupIndexParamsIndex = "omron"
	OneE                       GetBackupIndexParamsIndex = "one-e"
	Opam                       GetBackupIndexParamsIndex = "opam"
	OpenCvdb                   GetBackupIndexParamsIndex = "open-cvdb"
	Openbsd                    GetBackupIndexParamsIndex = "openbsd"
	Openssh                    GetBackupIndexParamsIndex = "openssh"
	OpensslSecadv              GetBackupIndexParamsIndex = "openssl-secadv"
	Openstack                  GetBackupIndexParamsIndex = "openstack"
	Openwrt                    GetBackupIndexParamsIndex = "openwrt"
	Oracle                     GetBackupIndexParamsIndex = "oracle"
	OracleCpu                  GetBackupIndexParamsIndex = "oracle-cpu"
	OracleCpuCsaf              GetBackupIndexParamsIndex = "oracle-cpu-csaf"
	Osv                        GetBackupIndexParamsIndex = "osv"
	Otrs                       GetBackupIndexParamsIndex = "otrs"
	Owncloud                   GetBackupIndexParamsIndex = "owncloud"
	Palantir                   GetBackupIndexParamsIndex = "palantir"
	PaloAlto                   GetBackupIndexParamsIndex = "palo-alto"
	Panasonic                  GetBackupIndexParamsIndex = "panasonic"
	Papercut                   GetBackupIndexParamsIndex = "papercut"
	Pega                       GetBackupIndexParamsIndex = "pega"
	Philips                    GetBackupIndexParamsIndex = "philips"
	PhoenixContact             GetBackupIndexParamsIndex = "phoenix-contact"
	PhpMyAdmin                 GetBackupIndexParamsIndex = "php-my-admin"
	Postgressql                GetBackupIndexParamsIndex = "postgressql"
	Powerdns                   GetBackupIndexParamsIndex = "powerdns"
	Progress                   GetBackupIndexParamsIndex = "progress"
	Proofpoint                 GetBackupIndexParamsIndex = "proofpoint"
	Ptc                        GetBackupIndexParamsIndex = "ptc"
	Pub                        GetBackupIndexParamsIndex = "pub"
	PureStorage                GetBackupIndexParamsIndex = "pure-storage"
	PypaAdvisories             GetBackupIndexParamsIndex = "pypa-advisories"
	Pypi                       GetBackupIndexParamsIndex = "pypi"
	Qnap                       GetBackupIndexParamsIndex = "qnap"
	Qualcomm                   GetBackupIndexParamsIndex = "qualcomm"
	Qualys                     GetBackupIndexParamsIndex = "qualys"
	QubesQsb                   GetBackupIndexParamsIndex = "qubes-qsb"
	Ransomware                 GetBackupIndexParamsIndex = "ransomware"
	Redhat                     GetBackupIndexParamsIndex = "redhat"
	Renesas                    GetBackupIndexParamsIndex = "renesas"
	Revive                     GetBackupIndexParamsIndex = "revive"
	Rockwell                   GetBackupIndexParamsIndex = "rockwell"
	Rocky                      GetBackupIndexParamsIndex = "rocky"
	RockyErrata                GetBackupIndexParamsIndex = "rocky-errata"
	Ruckus                     GetBackupIndexParamsIndex = "ruckus"
	RustsecAdvisories          GetBackupIndexParamsIndex = "rustsec-advisories"
	Sacert                     GetBackupIndexParamsIndex = "sacert"
	Saint                      GetBackupIndexParamsIndex = "saint"
	Salesforce                 GetBackupIndexParamsIndex = "salesforce"
	Samba                      GetBackupIndexParamsIndex = "samba"
	Sap                        GetBackupIndexParamsIndex = "sap"
	SchneiderElectric          GetBackupIndexParamsIndex = "schneider-electric"
	SecConsult                 GetBackupIndexParamsIndex = "sec-consult"
	Securitylab                GetBackupIndexParamsIndex = "securitylab"
	Seebug                     GetBackupIndexParamsIndex = "seebug"
	Sel                        GetBackupIndexParamsIndex = "sel"
	Sentinelone                GetBackupIndexParamsIndex = "sentinelone"
	Servicenow                 GetBackupIndexParamsIndex = "servicenow"
	ShadowserverExploited      GetBackupIndexParamsIndex = "shadowserver-exploited"
	Shielder                   GetBackupIndexParamsIndex = "shielder"
	Sick                       GetBackupIndexParamsIndex = "sick"
	Siemens                    GetBackupIndexParamsIndex = "siemens"
	SierraWireless             GetBackupIndexParamsIndex = "sierra-wireless"
	SigmaRules                 GetBackupIndexParamsIndex = "sigma-rules"
	Singcert                   GetBackupIndexParamsIndex = "singcert"
	Slackware                  GetBackupIndexParamsIndex = "slackware"
	Solarwinds                 GetBackupIndexParamsIndex = "solarwinds"
	Solr                       GetBackupIndexParamsIndex = "solr"
	Sonicwall                  GetBackupIndexParamsIndex = "sonicwall"
	SpacelabsHealthcare        GetBackupIndexParamsIndex = "spacelabs-healthcare"
	Splunk                     GetBackupIndexParamsIndex = "splunk"
	Spring                     GetBackupIndexParamsIndex = "spring"
	Ssd                        GetBackupIndexParamsIndex = "ssd"
	Stormshield                GetBackupIndexParamsIndex = "stormshield"
	Stryker                    GetBackupIndexParamsIndex = "stryker"
	Sudo                       GetBackupIndexParamsIndex = "sudo"
	Suse                       GetBackupIndexParamsIndex = "suse"
	Swift                      GetBackupIndexParamsIndex = "swift"
	SwisslogHealthcare         GetBackupIndexParamsIndex = "swisslog-healthcare"
	Symfony                    GetBackupIndexParamsIndex = "symfony"
	Synacktiv                  GetBackupIndexParamsIndex = "synacktiv"
	Syncrosoft                 GetBackupIndexParamsIndex = "syncrosoft"
	Synology                   GetBackupIndexParamsIndex = "synology"
	Teamviewer                 GetBackupIndexParamsIndex = "teamviewer"
	TenableResearchAdvisories  GetBackupIndexParamsIndex = "tenable-research-advisories"
	Tencent                    GetBackupIndexParamsIndex = "tencent"
	Thales                     GetBackupIndexParamsIndex = "thales"
	Themissinglink             GetBackupIndexParamsIndex = "themissinglink"
	ThreatActors               GetBackupIndexParamsIndex = "threat-actors"
	Ti                         GetBackupIndexParamsIndex = "ti"
	Tibco                      GetBackupIndexParamsIndex = "tibco"
	TpLink                     GetBackupIndexParamsIndex = "tp-link"
	TraneTechnology            GetBackupIndexParamsIndex = "trane-technology"
	Trendmicro                 GetBackupIndexParamsIndex = "trendmicro"
	Trustwave                  GetBackupIndexParamsIndex = "trustwave"
	Twcert                     GetBackupIndexParamsIndex = "twcert"
	Ubiquiti                   GetBackupIndexParamsIndex = "ubiquiti"
	Ubuntu                     GetBackupIndexParamsIndex = "ubuntu"
	Unify                      GetBackupIndexParamsIndex = "unify"
	Unisoc                     GetBackupIndexParamsIndex = "unisoc"
	Usd                        GetBackupIndexParamsIndex = "usd"
	Usom                       GetBackupIndexParamsIndex = "usom"
	Vandyke                    GetBackupIndexParamsIndex = "vandyke"
	Vapidlabs                  GetBackupIndexParamsIndex = "vapidlabs"
	VcCpeDictionary            GetBackupIndexParamsIndex = "vc-cpe-dictionary"
	Vde                        GetBackupIndexParamsIndex = "vde"
	Veeam                      GetBackupIndexParamsIndex = "veeam"
	Veritas                    GetBackupIndexParamsIndex = "veritas"
	Vmware                     GetBackupIndexParamsIndex = "vmware"
	Voidsec                    GetBackupIndexParamsIndex = "voidsec"
	Vulncheck                  GetBackupIndexParamsIndex = "vulncheck"
	VulncheckConfig            GetBackupIndexParamsIndex = "vulncheck-config"
	VulncheckCvelistV5         GetBackupIndexParamsIndex = "vulncheck-cvelist-v5"
	VulncheckKev               GetBackupIndexParamsIndex = "vulncheck-kev"
	VulncheckNvd               GetBackupIndexParamsIndex = "vulncheck-nvd"
	VulncheckNvd2              GetBackupIndexParamsIndex = "vulncheck-nvd2"
	VulnerabilityAliases       GetBackupIndexParamsIndex = "vulnerability-aliases"
	Vulnrichment               GetBackupIndexParamsIndex = "vulnrichment"
	Vyaire                     GetBackupIndexParamsIndex = "vyaire"
	Watchguard                 GetBackupIndexParamsIndex = "watchguard"
	Whatsapp                   GetBackupIndexParamsIndex = "whatsapp"
	Wibu                       GetBackupIndexParamsIndex = "wibu"
	Wireshark                  GetBackupIndexParamsIndex = "wireshark"
	WithSecure                 GetBackupIndexParamsIndex = "with-secure"
	Wolfi                      GetBackupIndexParamsIndex = "wolfi"
	Wolfssl                    GetBackupIndexParamsIndex = "wolfssl"
	Wordfence                  GetBackupIndexParamsIndex = "wordfence"
	Xen                        GetBackupIndexParamsIndex = "xen"
	Xerox                      GetBackupIndexParamsIndex = "xerox"
	Xiaomi                     GetBackupIndexParamsIndex = "xiaomi"
	Xylem                      GetBackupIndexParamsIndex = "xylem"
	Yokogawa                   GetBackupIndexParamsIndex = "yokogawa"
	Yubico                     GetBackupIndexParamsIndex = "yubico"
	Zdi                        GetBackupIndexParamsIndex = "zdi"
	Zebra                      GetBackupIndexParamsIndex = "zebra"
	Zeroscience                GetBackupIndexParamsIndex = "zeroscience"
	Zimbra                     GetBackupIndexParamsIndex = "zimbra"
	Zoom                       GetBackupIndexParamsIndex = "zoom"
	Zscaler                    GetBackupIndexParamsIndex = "zscaler"
	Zuso                       GetBackupIndexParamsIndex = "zuso"
	Zyxel                      GetBackupIndexParamsIndex = "zyxel"
)

// Defines values for GetIndexA10ParamsStartCursor.
const (
	GetIndexA10ParamsStartCursorTrue GetIndexA10ParamsStartCursor = "true"
)

// Defines values for GetIndexAbbParamsStartCursor.
const (
	GetIndexAbbParamsStartCursorTrue GetIndexAbbParamsStartCursor = "true"
)

// Defines values for GetIndexAbbottParamsStartCursor.
const (
	GetIndexAbbottParamsStartCursorTrue GetIndexAbbottParamsStartCursor = "true"
)

// Defines values for GetIndexAbsoluteParamsStartCursor.
const (
	GetIndexAbsoluteParamsStartCursorTrue GetIndexAbsoluteParamsStartCursor = "true"
)

// Defines values for GetIndexAcronisParamsStartCursor.
const (
	GetIndexAcronisParamsStartCursorTrue GetIndexAcronisParamsStartCursor = "true"
)

// Defines values for GetIndexAdobeParamsStartCursor.
const (
	GetIndexAdobeParamsStartCursorTrue GetIndexAdobeParamsStartCursor = "true"
)

// Defines values for GetIndexAdvisoriesParamsStartCursor.
const (
	GetIndexAdvisoriesParamsStartCursorTrue GetIndexAdvisoriesParamsStartCursor = "true"
)

// Defines values for GetIndexAlephResearchParamsStartCursor.
const (
	GetIndexAlephResearchParamsStartCursorTrue GetIndexAlephResearchParamsStartCursor = "true"
)

// Defines values for GetIndexAlmaParamsStartCursor.
const (
	GetIndexAlmaParamsStartCursorTrue GetIndexAlmaParamsStartCursor = "true"
)

// Defines values for GetIndexAlpineParamsStartCursor.
const (
	GetIndexAlpineParamsStartCursorTrue GetIndexAlpineParamsStartCursor = "true"
)

// Defines values for GetIndexAmazonParamsStartCursor.
const (
	GetIndexAmazonParamsStartCursorTrue GetIndexAmazonParamsStartCursor = "true"
)

// Defines values for GetIndexAmdParamsStartCursor.
const (
	GetIndexAmdParamsStartCursorTrue GetIndexAmdParamsStartCursor = "true"
)

// Defines values for GetIndexAmiParamsStartCursor.
const (
	GetIndexAmiParamsStartCursorTrue GetIndexAmiParamsStartCursor = "true"
)

// Defines values for GetIndexAnchoreNvdOverrideParamsStartCursor.
const (
	GetIndexAnchoreNvdOverrideParamsStartCursorTrue GetIndexAnchoreNvdOverrideParamsStartCursor = "true"
)

// Defines values for GetIndexAndroidParamsStartCursor.
const (
	GetIndexAndroidParamsStartCursorTrue GetIndexAndroidParamsStartCursor = "true"
)

// Defines values for GetIndexApacheActivemqParamsStartCursor.
const (
	GetIndexApacheActivemqParamsStartCursorTrue GetIndexApacheActivemqParamsStartCursor = "true"
)

// Defines values for GetIndexApacheArchivaParamsStartCursor.
const (
	GetIndexApacheArchivaParamsStartCursorTrue GetIndexApacheArchivaParamsStartCursor = "true"
)

// Defines values for GetIndexApacheArrowParamsStartCursor.
const (
	GetIndexApacheArrowParamsStartCursorTrue GetIndexApacheArrowParamsStartCursor = "true"
)

// Defines values for GetIndexApacheCamelParamsStartCursor.
const (
	GetIndexApacheCamelParamsStartCursorTrue GetIndexApacheCamelParamsStartCursor = "true"
)

// Defines values for GetIndexApacheCommonsParamsStartCursor.
const (
	GetIndexApacheCommonsParamsStartCursorTrue GetIndexApacheCommonsParamsStartCursor = "true"
)

// Defines values for GetIndexApacheCouchdbParamsStartCursor.
const (
	GetIndexApacheCouchdbParamsStartCursorTrue GetIndexApacheCouchdbParamsStartCursor = "true"
)

// Defines values for GetIndexApacheFlinkParamsStartCursor.
const (
	GetIndexApacheFlinkParamsStartCursorTrue GetIndexApacheFlinkParamsStartCursor = "true"
)

// Defines values for GetIndexApacheGuacamoleParamsStartCursor.
const (
	GetIndexApacheGuacamoleParamsStartCursorTrue GetIndexApacheGuacamoleParamsStartCursor = "true"
)

// Defines values for GetIndexApacheHadoopParamsStartCursor.
const (
	GetIndexApacheHadoopParamsStartCursorTrue GetIndexApacheHadoopParamsStartCursor = "true"
)

// Defines values for GetIndexApacheHttpParamsStartCursor.
const (
	GetIndexApacheHttpParamsStartCursorTrue GetIndexApacheHttpParamsStartCursor = "true"
)

// Defines values for GetIndexApacheJspwikiParamsStartCursor.
const (
	GetIndexApacheJspwikiParamsStartCursorTrue GetIndexApacheJspwikiParamsStartCursor = "true"
)

// Defines values for GetIndexApacheKafkaParamsStartCursor.
const (
	GetIndexApacheKafkaParamsStartCursorTrue GetIndexApacheKafkaParamsStartCursor = "true"
)

// Defines values for GetIndexApacheLoggingservicesParamsStartCursor.
const (
	GetIndexApacheLoggingservicesParamsStartCursorTrue GetIndexApacheLoggingservicesParamsStartCursor = "true"
)

// Defines values for GetIndexApacheNifiParamsStartCursor.
const (
	GetIndexApacheNifiParamsStartCursorTrue GetIndexApacheNifiParamsStartCursor = "true"
)

// Defines values for GetIndexApacheOfbizParamsStartCursor.
const (
	GetIndexApacheOfbizParamsStartCursorTrue GetIndexApacheOfbizParamsStartCursor = "true"
)

// Defines values for GetIndexApacheOpenmeetingsParamsStartCursor.
const (
	GetIndexApacheOpenmeetingsParamsStartCursorTrue GetIndexApacheOpenmeetingsParamsStartCursor = "true"
)

// Defines values for GetIndexApacheOpenofficeParamsStartCursor.
const (
	GetIndexApacheOpenofficeParamsStartCursorTrue GetIndexApacheOpenofficeParamsStartCursor = "true"
)

// Defines values for GetIndexApachePulsarParamsStartCursor.
const (
	GetIndexApachePulsarParamsStartCursorTrue GetIndexApachePulsarParamsStartCursor = "true"
)

// Defines values for GetIndexApacheShiroParamsStartCursor.
const (
	GetIndexApacheShiroParamsStartCursorTrue GetIndexApacheShiroParamsStartCursor = "true"
)

// Defines values for GetIndexApacheSparkParamsStartCursor.
const (
	GetIndexApacheSparkParamsStartCursorTrue GetIndexApacheSparkParamsStartCursor = "true"
)

// Defines values for GetIndexApacheStrutsParamsStartCursor.
const (
	GetIndexApacheStrutsParamsStartCursorTrue GetIndexApacheStrutsParamsStartCursor = "true"
)

// Defines values for GetIndexApacheSubversionParamsStartCursor.
const (
	GetIndexApacheSubversionParamsStartCursorTrue GetIndexApacheSubversionParamsStartCursor = "true"
)

// Defines values for GetIndexApacheSupersetParamsStartCursor.
const (
	GetIndexApacheSupersetParamsStartCursorTrue GetIndexApacheSupersetParamsStartCursor = "true"
)

// Defines values for GetIndexApacheTomcatParamsStartCursor.
const (
	GetIndexApacheTomcatParamsStartCursorTrue GetIndexApacheTomcatParamsStartCursor = "true"
)

// Defines values for GetIndexApacheZookeeperParamsStartCursor.
const (
	GetIndexApacheZookeeperParamsStartCursorTrue GetIndexApacheZookeeperParamsStartCursor = "true"
)

// Defines values for GetIndexAppcheckParamsStartCursor.
const (
	GetIndexAppcheckParamsStartCursorTrue GetIndexAppcheckParamsStartCursor = "true"
)

// Defines values for GetIndexAppgateParamsStartCursor.
const (
	GetIndexAppgateParamsStartCursorTrue GetIndexAppgateParamsStartCursor = "true"
)

// Defines values for GetIndexAppleParamsStartCursor.
const (
	GetIndexAppleParamsStartCursorTrue GetIndexAppleParamsStartCursor = "true"
)

// Defines values for GetIndexArchParamsStartCursor.
const (
	GetIndexArchParamsStartCursorTrue GetIndexArchParamsStartCursor = "true"
)

// Defines values for GetIndexAristaParamsStartCursor.
const (
	GetIndexAristaParamsStartCursorTrue GetIndexAristaParamsStartCursor = "true"
)

// Defines values for GetIndexArubaParamsStartCursor.
const (
	GetIndexArubaParamsStartCursorTrue GetIndexArubaParamsStartCursor = "true"
)

// Defines values for GetIndexAsrgParamsStartCursor.
const (
	GetIndexAsrgParamsStartCursorTrue GetIndexAsrgParamsStartCursor = "true"
)

// Defines values for GetIndexAssetnoteParamsStartCursor.
const (
	GetIndexAssetnoteParamsStartCursorTrue GetIndexAssetnoteParamsStartCursor = "true"
)

// Defines values for GetIndexAsteriskParamsStartCursor.
const (
	GetIndexAsteriskParamsStartCursorTrue GetIndexAsteriskParamsStartCursor = "true"
)

// Defines values for GetIndexAsusParamsStartCursor.
const (
	GetIndexAsusParamsStartCursorTrue GetIndexAsusParamsStartCursor = "true"
)

// Defines values for GetIndexAtlassianParamsStartCursor.
const (
	GetIndexAtlassianParamsStartCursorTrue GetIndexAtlassianParamsStartCursor = "true"
)

// Defines values for GetIndexAtlassianVulnsParamsStartCursor.
const (
	GetIndexAtlassianVulnsParamsStartCursorTrue GetIndexAtlassianVulnsParamsStartCursor = "true"
)

// Defines values for GetIndexAtredisParamsStartCursor.
const (
	GetIndexAtredisParamsStartCursorTrue GetIndexAtredisParamsStartCursor = "true"
)

// Defines values for GetIndexAuscertParamsStartCursor.
const (
	GetIndexAuscertParamsStartCursorTrue GetIndexAuscertParamsStartCursor = "true"
)

// Defines values for GetIndexAutodeskParamsStartCursor.
const (
	GetIndexAutodeskParamsStartCursorTrue GetIndexAutodeskParamsStartCursor = "true"
)

// Defines values for GetIndexAvayaParamsStartCursor.
const (
	GetIndexAvayaParamsStartCursorTrue GetIndexAvayaParamsStartCursor = "true"
)

// Defines values for GetIndexAvevaParamsStartCursor.
const (
	GetIndexAvevaParamsStartCursorTrue GetIndexAvevaParamsStartCursor = "true"
)

// Defines values for GetIndexAvigilonParamsStartCursor.
const (
	GetIndexAvigilonParamsStartCursorTrue GetIndexAvigilonParamsStartCursor = "true"
)

// Defines values for GetIndexAwsParamsStartCursor.
const (
	GetIndexAwsParamsStartCursorTrue GetIndexAwsParamsStartCursor = "true"
)

// Defines values for GetIndexAxisParamsStartCursor.
const (
	GetIndexAxisParamsStartCursorTrue GetIndexAxisParamsStartCursor = "true"
)

// Defines values for GetIndexAzulParamsStartCursor.
const (
	GetIndexAzulParamsStartCursorTrue GetIndexAzulParamsStartCursor = "true"
)

// Defines values for GetIndexBandrParamsStartCursor.
const (
	GetIndexBandrParamsStartCursorTrue GetIndexBandrParamsStartCursor = "true"
)

// Defines values for GetIndexBaxterParamsStartCursor.
const (
	GetIndexBaxterParamsStartCursorTrue GetIndexBaxterParamsStartCursor = "true"
)

// Defines values for GetIndexBbraunParamsStartCursor.
const (
	GetIndexBbraunParamsStartCursorTrue GetIndexBbraunParamsStartCursor = "true"
)

// Defines values for GetIndexBdParamsStartCursor.
const (
	GetIndexBdParamsStartCursorTrue GetIndexBdParamsStartCursor = "true"
)

// Defines values for GetIndexBduParamsStartCursor.
const (
	GetIndexBduParamsStartCursorTrue GetIndexBduParamsStartCursor = "true"
)

// Defines values for GetIndexBeckhoffParamsStartCursor.
const (
	GetIndexBeckhoffParamsStartCursorTrue GetIndexBeckhoffParamsStartCursor = "true"
)

// Defines values for GetIndexBeldenParamsStartCursor.
const (
	GetIndexBeldenParamsStartCursorTrue GetIndexBeldenParamsStartCursor = "true"
)

// Defines values for GetIndexBeyondTrustParamsStartCursor.
const (
	GetIndexBeyondTrustParamsStartCursorTrue GetIndexBeyondTrustParamsStartCursor = "true"
)

// Defines values for GetIndexBinarlyParamsStartCursor.
const (
	GetIndexBinarlyParamsStartCursorTrue GetIndexBinarlyParamsStartCursor = "true"
)

// Defines values for GetIndexBitdefenderParamsStartCursor.
const (
	GetIndexBitdefenderParamsStartCursorTrue GetIndexBitdefenderParamsStartCursor = "true"
)

// Defines values for GetIndexBlackberryParamsStartCursor.
const (
	GetIndexBlackberryParamsStartCursorTrue GetIndexBlackberryParamsStartCursor = "true"
)

// Defines values for GetIndexBlsParamsStartCursor.
const (
	GetIndexBlsParamsStartCursorTrue GetIndexBlsParamsStartCursor = "true"
)

// Defines values for GetIndexBoschParamsStartCursor.
const (
	GetIndexBoschParamsStartCursorTrue GetIndexBoschParamsStartCursor = "true"
)

// Defines values for GetIndexBostonScientificParamsStartCursor.
const (
	GetIndexBostonScientificParamsStartCursorTrue GetIndexBostonScientificParamsStartCursor = "true"
)

// Defines values for GetIndexBotnetsParamsStartCursor.
const (
	GetIndexBotnetsParamsStartCursorTrue GetIndexBotnetsParamsStartCursor = "true"
)

// Defines values for GetIndexCaCyberCentreParamsStartCursor.
const (
	GetIndexCaCyberCentreParamsStartCursorTrue GetIndexCaCyberCentreParamsStartCursor = "true"
)

// Defines values for GetIndexCanvasParamsStartCursor.
const (
	GetIndexCanvasParamsStartCursorTrue GetIndexCanvasParamsStartCursor = "true"
)

// Defines values for GetIndexCarestreamParamsStartCursor.
const (
	GetIndexCarestreamParamsStartCursorTrue GetIndexCarestreamParamsStartCursor = "true"
)

// Defines values for GetIndexCargoParamsStartCursor.
const (
	GetIndexCargoParamsStartCursorTrue GetIndexCargoParamsStartCursor = "true"
)

// Defines values for GetIndexCarrierParamsStartCursor.
const (
	GetIndexCarrierParamsStartCursorTrue GetIndexCarrierParamsStartCursor = "true"
)

// Defines values for GetIndexCblMarinerParamsStartCursor.
const (
	GetIndexCblMarinerParamsStartCursorTrue GetIndexCblMarinerParamsStartCursor = "true"
)

// Defines values for GetIndexCentosParamsStartCursor.
const (
	GetIndexCentosParamsStartCursorTrue GetIndexCentosParamsStartCursor = "true"
)

// Defines values for GetIndexCertBeParamsStartCursor.
const (
	GetIndexCertBeParamsStartCursorTrue GetIndexCertBeParamsStartCursor = "true"
)

// Defines values for GetIndexCertInParamsStartCursor.
const (
	GetIndexCertInParamsStartCursorTrue GetIndexCertInParamsStartCursor = "true"
)

// Defines values for GetIndexCertIrSecurityAlertsParamsStartCursor.
const (
	GetIndexCertIrSecurityAlertsParamsStartCursorTrue GetIndexCertIrSecurityAlertsParamsStartCursor = "true"
)

// Defines values for GetIndexCertSeParamsStartCursor.
const (
	GetIndexCertSeParamsStartCursorTrue GetIndexCertSeParamsStartCursor = "true"
)

// Defines values for GetIndexCertUaParamsStartCursor.
const (
	GetIndexCertUaParamsStartCursorTrue GetIndexCertUaParamsStartCursor = "true"
)

// Defines values for GetIndexCerteuParamsStartCursor.
const (
	GetIndexCerteuParamsStartCursorTrue GetIndexCerteuParamsStartCursor = "true"
)

// Defines values for GetIndexCertfrParamsStartCursor.
const (
	GetIndexCertfrParamsStartCursorTrue GetIndexCertfrParamsStartCursor = "true"
)

// Defines values for GetIndexChainguardParamsStartCursor.
const (
	GetIndexChainguardParamsStartCursorTrue GetIndexChainguardParamsStartCursor = "true"
)

// Defines values for GetIndexCheckpointParamsStartCursor.
const (
	GetIndexCheckpointParamsStartCursorTrue GetIndexCheckpointParamsStartCursor = "true"
)

// Defines values for GetIndexChromeParamsStartCursor.
const (
	GetIndexChromeParamsStartCursorTrue GetIndexChromeParamsStartCursor = "true"
)

// Defines values for GetIndexCisaAlertsParamsStartCursor.
const (
	GetIndexCisaAlertsParamsStartCursorTrue GetIndexCisaAlertsParamsStartCursor = "true"
)

// Defines values for GetIndexCisaKevParamsStartCursor.
const (
	GetIndexCisaKevParamsStartCursorTrue GetIndexCisaKevParamsStartCursor = "true"
)

// Defines values for GetIndexCiscoParamsStartCursor.
const (
	GetIndexCiscoParamsStartCursorTrue GetIndexCiscoParamsStartCursor = "true"
)

// Defines values for GetIndexCiscoTalosParamsStartCursor.
const (
	GetIndexCiscoTalosParamsStartCursorTrue GetIndexCiscoTalosParamsStartCursor = "true"
)

// Defines values for GetIndexCitrixParamsStartCursor.
const (
	GetIndexCitrixParamsStartCursorTrue GetIndexCitrixParamsStartCursor = "true"
)

// Defines values for GetIndexClarotyParamsStartCursor.
const (
	GetIndexClarotyParamsStartCursorTrue GetIndexClarotyParamsStartCursor = "true"
)

// Defines values for GetIndexCloudbeesParamsStartCursor.
const (
	GetIndexCloudbeesParamsStartCursorTrue GetIndexCloudbeesParamsStartCursor = "true"
)

// Defines values for GetIndexCloudvulndbParamsStartCursor.
const (
	GetIndexCloudvulndbParamsStartCursorTrue GetIndexCloudvulndbParamsStartCursor = "true"
)

// Defines values for GetIndexCnnvdParamsStartCursor.
const (
	GetIndexCnnvdParamsStartCursorTrue GetIndexCnnvdParamsStartCursor = "true"
)

// Defines values for GetIndexCnvdBulletinsParamsStartCursor.
const (
	GetIndexCnvdBulletinsParamsStartCursorTrue GetIndexCnvdBulletinsParamsStartCursor = "true"
)

// Defines values for GetIndexCnvdFlawsParamsStartCursor.
const (
	GetIndexCnvdFlawsParamsStartCursorTrue GetIndexCnvdFlawsParamsStartCursor = "true"
)

// Defines values for GetIndexCocoapodsParamsStartCursor.
const (
	GetIndexCocoapodsParamsStartCursorTrue GetIndexCocoapodsParamsStartCursor = "true"
)

// Defines values for GetIndexCodesysParamsStartCursor.
const (
	GetIndexCodesysParamsStartCursorTrue GetIndexCodesysParamsStartCursor = "true"
)

// Defines values for GetIndexCompassSecurityParamsStartCursor.
const (
	GetIndexCompassSecurityParamsStartCursorTrue GetIndexCompassSecurityParamsStartCursor = "true"
)

// Defines values for GetIndexComposerParamsStartCursor.
const (
	GetIndexComposerParamsStartCursorTrue GetIndexComposerParamsStartCursor = "true"
)

// Defines values for GetIndexConanParamsStartCursor.
const (
	GetIndexConanParamsStartCursorTrue GetIndexConanParamsStartCursor = "true"
)

// Defines values for GetIndexCrestronParamsStartCursor.
const (
	GetIndexCrestronParamsStartCursorTrue GetIndexCrestronParamsStartCursor = "true"
)

// Defines values for GetIndexCurlParamsStartCursor.
const (
	GetIndexCurlParamsStartCursorTrue GetIndexCurlParamsStartCursor = "true"
)

// Defines values for GetIndexCweParamsStartCursor.
const (
	GetIndexCweParamsStartCursorTrue GetIndexCweParamsStartCursor = "true"
)

// Defines values for GetIndexDahuaParamsStartCursor.
const (
	GetIndexDahuaParamsStartCursorTrue GetIndexDahuaParamsStartCursor = "true"
)

// Defines values for GetIndexDassaultParamsStartCursor.
const (
	GetIndexDassaultParamsStartCursorTrue GetIndexDassaultParamsStartCursor = "true"
)

// Defines values for GetIndexDebianParamsStartCursor.
const (
	GetIndexDebianParamsStartCursorTrue GetIndexDebianParamsStartCursor = "true"
)

// Defines values for GetIndexDebianDsaParamsStartCursor.
const (
	GetIndexDebianDsaParamsStartCursorTrue GetIndexDebianDsaParamsStartCursor = "true"
)

// Defines values for GetIndexDellParamsStartCursor.
const (
	GetIndexDellParamsStartCursorTrue GetIndexDellParamsStartCursor = "true"
)

// Defines values for GetIndexDeltaParamsStartCursor.
const (
	GetIndexDeltaParamsStartCursorTrue GetIndexDeltaParamsStartCursor = "true"
)

// Defines values for GetIndexDjangoParamsStartCursor.
const (
	GetIndexDjangoParamsStartCursorTrue GetIndexDjangoParamsStartCursor = "true"
)

// Defines values for GetIndexDnnParamsStartCursor.
const (
	GetIndexDnnParamsStartCursorTrue GetIndexDnnParamsStartCursor = "true"
)

// Defines values for GetIndexDotcmsParamsStartCursor.
const (
	GetIndexDotcmsParamsStartCursorTrue GetIndexDotcmsParamsStartCursor = "true"
)

// Defines values for GetIndexDragosParamsStartCursor.
const (
	GetIndexDragosParamsStartCursorTrue GetIndexDragosParamsStartCursor = "true"
)

// Defines values for GetIndexDraytekParamsStartCursor.
const (
	GetIndexDraytekParamsStartCursorTrue GetIndexDraytekParamsStartCursor = "true"
)

// Defines values for GetIndexEatonParamsStartCursor.
const (
	GetIndexEatonParamsStartCursorTrue GetIndexEatonParamsStartCursor = "true"
)

// Defines values for GetIndexElasticParamsStartCursor.
const (
	GetIndexElasticParamsStartCursorTrue GetIndexElasticParamsStartCursor = "true"
)

// Defines values for GetIndexElspecParamsStartCursor.
const (
	GetIndexElspecParamsStartCursorTrue GetIndexElspecParamsStartCursor = "true"
)

// Defines values for GetIndexEmergingThreatsSnortParamsStartCursor.
const (
	GetIndexEmergingThreatsSnortParamsStartCursorTrue GetIndexEmergingThreatsSnortParamsStartCursor = "true"
)

// Defines values for GetIndexEmersonParamsStartCursor.
const (
	GetIndexEmersonParamsStartCursorTrue GetIndexEmersonParamsStartCursor = "true"
)

// Defines values for GetIndexEolParamsStartCursor.
const (
	GetIndexEolParamsStartCursorTrue GetIndexEolParamsStartCursor = "true"
)

// Defines values for GetIndexEpssParamsStartCursor.
const (
	GetIndexEpssParamsStartCursorTrue GetIndexEpssParamsStartCursor = "true"
)

// Defines values for GetIndexExodusIntelParamsStartCursor.
const (
	GetIndexExodusIntelParamsStartCursorTrue GetIndexExodusIntelParamsStartCursor = "true"
)

// Defines values for GetIndexExploitChainsParamsStartCursor.
const (
	GetIndexExploitChainsParamsStartCursorTrue GetIndexExploitChainsParamsStartCursor = "true"
)

// Defines values for GetIndexExploitdbParamsStartCursor.
const (
	GetIndexExploitdbParamsStartCursorTrue GetIndexExploitdbParamsStartCursor = "true"
)

// Defines values for GetIndexExploitsParamsStartCursor.
const (
	GetIndexExploitsParamsStartCursorTrue GetIndexExploitsParamsStartCursor = "true"
)

// Defines values for GetIndexExploitsChangelogParamsStartCursor.
const (
	GetIndexExploitsChangelogParamsStartCursorTrue GetIndexExploitsChangelogParamsStartCursor = "true"
)

// Defines values for GetIndexFSecureParamsStartCursor.
const (
	GetIndexFSecureParamsStartCursorTrue GetIndexFSecureParamsStartCursor = "true"
)

// Defines values for GetIndexFanucParamsStartCursor.
const (
	GetIndexFanucParamsStartCursorTrue GetIndexFanucParamsStartCursor = "true"
)

// Defines values for GetIndexFastlyParamsStartCursor.
const (
	GetIndexFastlyParamsStartCursorTrue GetIndexFastlyParamsStartCursor = "true"
)

// Defines values for GetIndexFedoraParamsStartCursor.
const (
	GetIndexFedoraParamsStartCursorTrue GetIndexFedoraParamsStartCursor = "true"
)

// Defines values for GetIndexFilecloudParamsStartCursor.
const (
	GetIndexFilecloudParamsStartCursorTrue GetIndexFilecloudParamsStartCursor = "true"
)

// Defines values for GetIndexFlattSecurityParamsStartCursor.
const (
	GetIndexFlattSecurityParamsStartCursorTrue GetIndexFlattSecurityParamsStartCursor = "true"
)

// Defines values for GetIndexForgerockParamsStartCursor.
const (
	GetIndexForgerockParamsStartCursorTrue GetIndexForgerockParamsStartCursor = "true"
)

// Defines values for GetIndexFortinetParamsStartCursor.
const (
	GetIndexFortinetParamsStartCursorTrue GetIndexFortinetParamsStartCursor = "true"
)

// Defines values for GetIndexFortinetIpsParamsStartCursor.
const (
	GetIndexFortinetIpsParamsStartCursorTrue GetIndexFortinetIpsParamsStartCursor = "true"
)

// Defines values for GetIndexFoxitParamsStartCursor.
const (
	GetIndexFoxitParamsStartCursorTrue GetIndexFoxitParamsStartCursor = "true"
)

// Defines values for GetIndexFreebsdParamsStartCursor.
const (
	GetIndexFreebsdParamsStartCursorTrue GetIndexFreebsdParamsStartCursor = "true"
)

// Defines values for GetIndexGallagherParamsStartCursor.
const (
	GetIndexGallagherParamsStartCursorTrue GetIndexGallagherParamsStartCursor = "true"
)

// Defines values for GetIndexGcpParamsStartCursor.
const (
	GetIndexGcpParamsStartCursorTrue GetIndexGcpParamsStartCursor = "true"
)

// Defines values for GetIndexGeGasParamsStartCursor.
const (
	GetIndexGeGasParamsStartCursorTrue GetIndexGeGasParamsStartCursor = "true"
)

// Defines values for GetIndexGeHealthcareParamsStartCursor.
const (
	GetIndexGeHealthcareParamsStartCursorTrue GetIndexGeHealthcareParamsStartCursor = "true"
)

// Defines values for GetIndexGemParamsStartCursor.
const (
	GetIndexGemParamsStartCursorTrue GetIndexGemParamsStartCursor = "true"
)

// Defines values for GetIndexGenetecParamsStartCursor.
const (
	GetIndexGenetecParamsStartCursorTrue GetIndexGenetecParamsStartCursor = "true"
)

// Defines values for GetIndexGigabyteParamsStartCursor.
const (
	GetIndexGigabyteParamsStartCursorTrue GetIndexGigabyteParamsStartCursor = "true"
)

// Defines values for GetIndexGiteeExploitsParamsStartCursor.
const (
	GetIndexGiteeExploitsParamsStartCursorTrue GetIndexGiteeExploitsParamsStartCursor = "true"
)

// Defines values for GetIndexGithubExploitsParamsStartCursor.
const (
	GetIndexGithubExploitsParamsStartCursorTrue GetIndexGithubExploitsParamsStartCursor = "true"
)

// Defines values for GetIndexGithubSecurityAdvisoriesParamsStartCursor.
const (
	GetIndexGithubSecurityAdvisoriesParamsStartCursorTrue GetIndexGithubSecurityAdvisoriesParamsStartCursor = "true"
)

// Defines values for GetIndexGitlabAdvisoriesCommunityParamsStartCursor.
const (
	GetIndexGitlabAdvisoriesCommunityParamsStartCursorTrue GetIndexGitlabAdvisoriesCommunityParamsStartCursor = "true"
)

// Defines values for GetIndexGitlabExploitsParamsStartCursor.
const (
	GetIndexGitlabExploitsParamsStartCursorTrue GetIndexGitlabExploitsParamsStartCursor = "true"
)

// Defines values for GetIndexGnutlsParamsStartCursor.
const (
	GetIndexGnutlsParamsStartCursorTrue GetIndexGnutlsParamsStartCursor = "true"
)

// Defines values for GetIndexGolangParamsStartCursor.
const (
	GetIndexGolangParamsStartCursorTrue GetIndexGolangParamsStartCursor = "true"
)

// Defines values for GetIndexGoogle0dayItwParamsStartCursor.
const (
	GetIndexGoogle0dayItwParamsStartCursorTrue GetIndexGoogle0dayItwParamsStartCursor = "true"
)

// Defines values for GetIndexGoogleContainerOptimizedOsParamsStartCursor.
const (
	GetIndexGoogleContainerOptimizedOsParamsStartCursorTrue GetIndexGoogleContainerOptimizedOsParamsStartCursor = "true"
)

// Defines values for GetIndexGrafanaParamsStartCursor.
const (
	GetIndexGrafanaParamsStartCursorTrue GetIndexGrafanaParamsStartCursor = "true"
)

// Defines values for GetIndexGreynoiseMetadataParamsStartCursor.
const (
	GetIndexGreynoiseMetadataParamsStartCursorTrue GetIndexGreynoiseMetadataParamsStartCursor = "true"
)

// Defines values for GetIndexHackageParamsStartCursor.
const (
	GetIndexHackageParamsStartCursorTrue GetIndexHackageParamsStartCursor = "true"
)

// Defines values for GetIndexHarmonyosParamsStartCursor.
const (
	GetIndexHarmonyosParamsStartCursorTrue GetIndexHarmonyosParamsStartCursor = "true"
)

// Defines values for GetIndexHashicorpParamsStartCursor.
const (
	GetIndexHashicorpParamsStartCursorTrue GetIndexHashicorpParamsStartCursor = "true"
)

// Defines values for GetIndexHaskellSadbParamsStartCursor.
const (
	GetIndexHaskellSadbParamsStartCursorTrue GetIndexHaskellSadbParamsStartCursor = "true"
)

// Defines values for GetIndexHclParamsStartCursor.
const (
	GetIndexHclParamsStartCursorTrue GetIndexHclParamsStartCursor = "true"
)

// Defines values for GetIndexHexParamsStartCursor.
const (
	GetIndexHexParamsStartCursorTrue GetIndexHexParamsStartCursor = "true"
)

// Defines values for GetIndexHikvisionParamsStartCursor.
const (
	GetIndexHikvisionParamsStartCursorTrue GetIndexHikvisionParamsStartCursor = "true"
)

// Defines values for GetIndexHillromParamsStartCursor.
const (
	GetIndexHillromParamsStartCursorTrue GetIndexHillromParamsStartCursor = "true"
)

// Defines values for GetIndexHitachiParamsStartCursor.
const (
	GetIndexHitachiParamsStartCursorTrue GetIndexHitachiParamsStartCursor = "true"
)

// Defines values for GetIndexHitachiEnergyParamsStartCursor.
const (
	GetIndexHitachiEnergyParamsStartCursorTrue GetIndexHitachiEnergyParamsStartCursor = "true"
)

// Defines values for GetIndexHkcertParamsStartCursor.
const (
	GetIndexHkcertParamsStartCursorTrue GetIndexHkcertParamsStartCursor = "true"
)

// Defines values for GetIndexHoneywellParamsStartCursor.
const (
	GetIndexHoneywellParamsStartCursorTrue GetIndexHoneywellParamsStartCursor = "true"
)

// Defines values for GetIndexHpParamsStartCursor.
const (
	GetIndexHpParamsStartCursorTrue GetIndexHpParamsStartCursor = "true"
)

// Defines values for GetIndexHuaweiEulerosParamsStartCursor.
const (
	GetIndexHuaweiEulerosParamsStartCursorTrue GetIndexHuaweiEulerosParamsStartCursor = "true"
)

// Defines values for GetIndexHuaweiIpsParamsStartCursor.
const (
	GetIndexHuaweiIpsParamsStartCursorTrue GetIndexHuaweiIpsParamsStartCursor = "true"
)

// Defines values for GetIndexHuaweiPsirtParamsStartCursor.
const (
	GetIndexHuaweiPsirtParamsStartCursorTrue GetIndexHuaweiPsirtParamsStartCursor = "true"
)

// Defines values for GetIndexIavaParamsStartCursor.
const (
	GetIndexIavaParamsStartCursorTrue GetIndexIavaParamsStartCursor = "true"
)

// Defines values for GetIndexIbmParamsStartCursor.
const (
	GetIndexIbmParamsStartCursorTrue GetIndexIbmParamsStartCursor = "true"
)

// Defines values for GetIndexIdemiaParamsStartCursor.
const (
	GetIndexIdemiaParamsStartCursorTrue GetIndexIdemiaParamsStartCursor = "true"
)

// Defines values for GetIndexIlAlertsParamsStartCursor.
const (
	GetIndexIlAlertsParamsStartCursorTrue GetIndexIlAlertsParamsStartCursor = "true"
)

// Defines values for GetIndexIlVulnerabilitiesParamsStartCursor.
const (
	GetIndexIlVulnerabilitiesParamsStartCursorTrue GetIndexIlVulnerabilitiesParamsStartCursor = "true"
)

// Defines values for GetIndexIncibeParamsStartCursor.
const (
	GetIndexIncibeParamsStartCursorTrue GetIndexIncibeParamsStartCursor = "true"
)

// Defines values for GetIndexInitialAccessParamsStartCursor.
const (
	GetIndexInitialAccessParamsStartCursorTrue GetIndexInitialAccessParamsStartCursor = "true"
)

// Defines values for GetIndexInitialAccessGitParamsStartCursor.
const (
	GetIndexInitialAccessGitParamsStartCursorTrue GetIndexInitialAccessGitParamsStartCursor = "true"
)

// Defines values for GetIndexIntelParamsStartCursor.
const (
	GetIndexIntelParamsStartCursorTrue GetIndexIntelParamsStartCursor = "true"
)

// Defines values for GetIndexIpintel10dParamsStartCursor.
const (
	GetIndexIpintel10dParamsStartCursorTrue GetIndexIpintel10dParamsStartCursor = "true"
)

// Defines values for GetIndexIpintel30dParamsStartCursor.
const (
	GetIndexIpintel30dParamsStartCursorTrue GetIndexIpintel30dParamsStartCursor = "true"
)

// Defines values for GetIndexIpintel3dParamsStartCursor.
const (
	GetIndexIpintel3dParamsStartCursorTrue GetIndexIpintel3dParamsStartCursor = "true"
)

// Defines values for GetIndexIpintel90dParamsStartCursor.
const (
	GetIndexIpintel90dParamsStartCursorTrue GetIndexIpintel90dParamsStartCursor = "true"
)

// Defines values for GetIndexIstioParamsStartCursor.
const (
	GetIndexIstioParamsStartCursorTrue GetIndexIstioParamsStartCursor = "true"
)

// Defines values for GetIndexIvantiParamsStartCursor.
const (
	GetIndexIvantiParamsStartCursorTrue GetIndexIvantiParamsStartCursor = "true"
)

// Defines values for GetIndexIvantiRssParamsStartCursor.
const (
	GetIndexIvantiRssParamsStartCursorTrue GetIndexIvantiRssParamsStartCursor = "true"
)

// Defines values for GetIndexJenkinsParamsStartCursor.
const (
	GetIndexJenkinsParamsStartCursorTrue GetIndexJenkinsParamsStartCursor = "true"
)

// Defines values for GetIndexJetbrainsParamsStartCursor.
const (
	GetIndexJetbrainsParamsStartCursorTrue GetIndexJetbrainsParamsStartCursor = "true"
)

// Defines values for GetIndexJfrogParamsStartCursor.
const (
	GetIndexJfrogParamsStartCursorTrue GetIndexJfrogParamsStartCursor = "true"
)

// Defines values for GetIndexJnjParamsStartCursor.
const (
	GetIndexJnjParamsStartCursorTrue GetIndexJnjParamsStartCursor = "true"
)

// Defines values for GetIndexJvnParamsStartCursor.
const (
	GetIndexJvnParamsStartCursorTrue GetIndexJvnParamsStartCursor = "true"
)

// Defines values for GetIndexJvndbParamsStartCursor.
const (
	GetIndexJvndbParamsStartCursorTrue GetIndexJvndbParamsStartCursor = "true"
)

// Defines values for GetIndexKasperskyIcsCertParamsStartCursor.
const (
	GetIndexKasperskyIcsCertParamsStartCursorTrue GetIndexKasperskyIcsCertParamsStartCursor = "true"
)

// Defines values for GetIndexKorelogicParamsStartCursor.
const (
	GetIndexKorelogicParamsStartCursorTrue GetIndexKorelogicParamsStartCursor = "true"
)

// Defines values for GetIndexKrcertSecurityNoticesParamsStartCursor.
const (
	GetIndexKrcertSecurityNoticesParamsStartCursorTrue GetIndexKrcertSecurityNoticesParamsStartCursor = "true"
)

// Defines values for GetIndexKrcertVulnerabilitiesParamsStartCursor.
const (
	GetIndexKrcertVulnerabilitiesParamsStartCursorTrue GetIndexKrcertVulnerabilitiesParamsStartCursor = "true"
)

// Defines values for GetIndexKubernetesParamsStartCursor.
const (
	GetIndexKubernetesParamsStartCursorTrue GetIndexKubernetesParamsStartCursor = "true"
)

// Defines values for GetIndexLenovoParamsStartCursor.
const (
	GetIndexLenovoParamsStartCursorTrue GetIndexLenovoParamsStartCursor = "true"
)

// Defines values for GetIndexLexmarkParamsStartCursor.
const (
	GetIndexLexmarkParamsStartCursorTrue GetIndexLexmarkParamsStartCursor = "true"
)

// Defines values for GetIndexLgParamsStartCursor.
const (
	GetIndexLgParamsStartCursorTrue GetIndexLgParamsStartCursor = "true"
)

// Defines values for GetIndexLibreOfficeParamsStartCursor.
const (
	GetIndexLibreOfficeParamsStartCursorTrue GetIndexLibreOfficeParamsStartCursor = "true"
)

// Defines values for GetIndexLinuxParamsStartCursor.
const (
	GetIndexLinuxParamsStartCursorTrue GetIndexLinuxParamsStartCursor = "true"
)

// Defines values for GetIndexMFilesParamsStartCursor.
const (
	GetIndexMFilesParamsStartCursorTrue GetIndexMFilesParamsStartCursor = "true"
)

// Defines values for GetIndexMacertParamsStartCursor.
const (
	GetIndexMacertParamsStartCursorTrue GetIndexMacertParamsStartCursor = "true"
)

// Defines values for GetIndexManageengineParamsStartCursor.
const (
	GetIndexManageengineParamsStartCursorTrue GetIndexManageengineParamsStartCursor = "true"
)

// Defines values for GetIndexMavenParamsStartCursor.
const (
	GetIndexMavenParamsStartCursorTrue GetIndexMavenParamsStartCursor = "true"
)

// Defines values for GetIndexMbedTlsParamsStartCursor.
const (
	GetIndexMbedTlsParamsStartCursorTrue GetIndexMbedTlsParamsStartCursor = "true"
)

// Defines values for GetIndexMediatekParamsStartCursor.
const (
	GetIndexMediatekParamsStartCursorTrue GetIndexMediatekParamsStartCursor = "true"
)

// Defines values for GetIndexMedtronicParamsStartCursor.
const (
	GetIndexMedtronicParamsStartCursorTrue GetIndexMedtronicParamsStartCursor = "true"
)

// Defines values for GetIndexMendixParamsStartCursor.
const (
	GetIndexMendixParamsStartCursorTrue GetIndexMendixParamsStartCursor = "true"
)

// Defines values for GetIndexMetasploitParamsStartCursor.
const (
	GetIndexMetasploitParamsStartCursorTrue GetIndexMetasploitParamsStartCursor = "true"
)

// Defines values for GetIndexMicrosoftCvrfParamsStartCursor.
const (
	GetIndexMicrosoftCvrfParamsStartCursorTrue GetIndexMicrosoftCvrfParamsStartCursor = "true"
)

// Defines values for GetIndexMicrosoftKbParamsStartCursor.
const (
	GetIndexMicrosoftKbParamsStartCursorTrue GetIndexMicrosoftKbParamsStartCursor = "true"
)

// Defines values for GetIndexMikrotikParamsStartCursor.
const (
	GetIndexMikrotikParamsStartCursorTrue GetIndexMikrotikParamsStartCursor = "true"
)

// Defines values for GetIndexMindrayParamsStartCursor.
const (
	GetIndexMindrayParamsStartCursorTrue GetIndexMindrayParamsStartCursor = "true"
)

// Defines values for GetIndexMispThreatActorsParamsStartCursor.
const (
	GetIndexMispThreatActorsParamsStartCursorTrue GetIndexMispThreatActorsParamsStartCursor = "true"
)

// Defines values for GetIndexMitelParamsStartCursor.
const (
	GetIndexMitelParamsStartCursorTrue GetIndexMitelParamsStartCursor = "true"
)

// Defines values for GetIndexMitreAttackCveParamsStartCursor.
const (
	GetIndexMitreAttackCveParamsStartCursorTrue GetIndexMitreAttackCveParamsStartCursor = "true"
)

// Defines values for GetIndexMitreCvelistV5ParamsStartCursor.
const (
	GetIndexMitreCvelistV5ParamsStartCursorTrue GetIndexMitreCvelistV5ParamsStartCursor = "true"
)

// Defines values for GetIndexMitsubishiElectricParamsStartCursor.
const (
	GetIndexMitsubishiElectricParamsStartCursorTrue GetIndexMitsubishiElectricParamsStartCursor = "true"
)

// Defines values for GetIndexMongodbParamsStartCursor.
const (
	GetIndexMongodbParamsStartCursorTrue GetIndexMongodbParamsStartCursor = "true"
)

// Defines values for GetIndexMoxaParamsStartCursor.
const (
	GetIndexMoxaParamsStartCursorTrue GetIndexMoxaParamsStartCursor = "true"
)

// Defines values for GetIndexMozillaParamsStartCursor.
const (
	GetIndexMozillaParamsStartCursorTrue GetIndexMozillaParamsStartCursor = "true"
)

// Defines values for GetIndexNaverParamsStartCursor.
const (
	GetIndexNaverParamsStartCursorTrue GetIndexNaverParamsStartCursor = "true"
)

// Defines values for GetIndexNcscParamsStartCursor.
const (
	GetIndexNcscParamsStartCursorTrue GetIndexNcscParamsStartCursor = "true"
)

// Defines values for GetIndexNcscCvesParamsStartCursor.
const (
	GetIndexNcscCvesParamsStartCursorTrue GetIndexNcscCvesParamsStartCursor = "true"
)

// Defines values for GetIndexNecParamsStartCursor.
const (
	GetIndexNecParamsStartCursorTrue GetIndexNecParamsStartCursor = "true"
)

// Defines values for GetIndexNetappParamsStartCursor.
const (
	GetIndexNetappParamsStartCursorTrue GetIndexNetappParamsStartCursor = "true"
)

// Defines values for GetIndexNetgateParamsStartCursor.
const (
	GetIndexNetgateParamsStartCursorTrue GetIndexNetgateParamsStartCursor = "true"
)

// Defines values for GetIndexNetgearParamsStartCursor.
const (
	GetIndexNetgearParamsStartCursorTrue GetIndexNetgearParamsStartCursor = "true"
)

// Defines values for GetIndexNetskopeParamsStartCursor.
const (
	GetIndexNetskopeParamsStartCursorTrue GetIndexNetskopeParamsStartCursor = "true"
)

// Defines values for GetIndexNginxParamsStartCursor.
const (
	GetIndexNginxParamsStartCursorTrue GetIndexNginxParamsStartCursor = "true"
)

// Defines values for GetIndexNhsParamsStartCursor.
const (
	GetIndexNhsParamsStartCursorTrue GetIndexNhsParamsStartCursor = "true"
)

// Defines values for GetIndexNiParamsStartCursor.
const (
	GetIndexNiParamsStartCursorTrue GetIndexNiParamsStartCursor = "true"
)

// Defines values for GetIndexNistNvdParamsStartCursor.
const (
	GetIndexNistNvdParamsStartCursorTrue GetIndexNistNvdParamsStartCursor = "true"
)

// Defines values for GetIndexNistNvd2ParamsStartCursor.
const (
	GetIndexNistNvd2ParamsStartCursorTrue GetIndexNistNvd2ParamsStartCursor = "true"
)

// Defines values for GetIndexNistNvd2CpematchParamsStartCursor.
const (
	GetIndexNistNvd2CpematchParamsStartCursorTrue GetIndexNistNvd2CpematchParamsStartCursor = "true"
)

// Defines values for GetIndexNodeSecurityParamsStartCursor.
const (
	GetIndexNodeSecurityParamsStartCursorTrue GetIndexNodeSecurityParamsStartCursor = "true"
)

// Defines values for GetIndexNodejsParamsStartCursor.
const (
	GetIndexNodejsParamsStartCursorTrue GetIndexNodejsParamsStartCursor = "true"
)

// Defines values for GetIndexNokiaParamsStartCursor.
const (
	GetIndexNokiaParamsStartCursorTrue GetIndexNokiaParamsStartCursor = "true"
)

// Defines values for GetIndexNozomiParamsStartCursor.
const (
	GetIndexNozomiParamsStartCursorTrue GetIndexNozomiParamsStartCursor = "true"
)

// Defines values for GetIndexNpmParamsStartCursor.
const (
	GetIndexNpmParamsStartCursorTrue GetIndexNpmParamsStartCursor = "true"
)

// Defines values for GetIndexNtpParamsStartCursor.
const (
	GetIndexNtpParamsStartCursorTrue GetIndexNtpParamsStartCursor = "true"
)

// Defines values for GetIndexNugetParamsStartCursor.
const (
	GetIndexNugetParamsStartCursorTrue GetIndexNugetParamsStartCursor = "true"
)

// Defines values for GetIndexNvidiaParamsStartCursor.
const (
	GetIndexNvidiaParamsStartCursorTrue GetIndexNvidiaParamsStartCursor = "true"
)

// Defines values for GetIndexNzAdvisoriesParamsStartCursor.
const (
	GetIndexNzAdvisoriesParamsStartCursorTrue GetIndexNzAdvisoriesParamsStartCursor = "true"
)

// Defines values for GetIndexOctopusDeployParamsStartCursor.
const (
	GetIndexOctopusDeployParamsStartCursorTrue GetIndexOctopusDeployParamsStartCursor = "true"
)

// Defines values for GetIndexOktaParamsStartCursor.
const (
	GetIndexOktaParamsStartCursorTrue GetIndexOktaParamsStartCursor = "true"
)

// Defines values for GetIndexOmronParamsStartCursor.
const (
	GetIndexOmronParamsStartCursorTrue GetIndexOmronParamsStartCursor = "true"
)

// Defines values for GetIndexOneEParamsStartCursor.
const (
	GetIndexOneEParamsStartCursorTrue GetIndexOneEParamsStartCursor = "true"
)

// Defines values for GetIndexOpamParamsStartCursor.
const (
	GetIndexOpamParamsStartCursorTrue GetIndexOpamParamsStartCursor = "true"
)

// Defines values for GetIndexOpenCvdbParamsStartCursor.
const (
	GetIndexOpenCvdbParamsStartCursorTrue GetIndexOpenCvdbParamsStartCursor = "true"
)

// Defines values for GetIndexOpenbsdParamsStartCursor.
const (
	GetIndexOpenbsdParamsStartCursorTrue GetIndexOpenbsdParamsStartCursor = "true"
)

// Defines values for GetIndexOpensshParamsStartCursor.
const (
	GetIndexOpensshParamsStartCursorTrue GetIndexOpensshParamsStartCursor = "true"
)

// Defines values for GetIndexOpensslSecadvParamsStartCursor.
const (
	GetIndexOpensslSecadvParamsStartCursorTrue GetIndexOpensslSecadvParamsStartCursor = "true"
)

// Defines values for GetIndexOpenstackParamsStartCursor.
const (
	GetIndexOpenstackParamsStartCursorTrue GetIndexOpenstackParamsStartCursor = "true"
)

// Defines values for GetIndexOpenwrtParamsStartCursor.
const (
	GetIndexOpenwrtParamsStartCursorTrue GetIndexOpenwrtParamsStartCursor = "true"
)

// Defines values for GetIndexOracleParamsStartCursor.
const (
	GetIndexOracleParamsStartCursorTrue GetIndexOracleParamsStartCursor = "true"
)

// Defines values for GetIndexOracleCpuParamsStartCursor.
const (
	GetIndexOracleCpuParamsStartCursorTrue GetIndexOracleCpuParamsStartCursor = "true"
)

// Defines values for GetIndexOracleCpuCsafParamsStartCursor.
const (
	GetIndexOracleCpuCsafParamsStartCursorTrue GetIndexOracleCpuCsafParamsStartCursor = "true"
)

// Defines values for GetIndexOsvParamsStartCursor.
const (
	GetIndexOsvParamsStartCursorTrue GetIndexOsvParamsStartCursor = "true"
)

// Defines values for GetIndexOtrsParamsStartCursor.
const (
	GetIndexOtrsParamsStartCursorTrue GetIndexOtrsParamsStartCursor = "true"
)

// Defines values for GetIndexOwncloudParamsStartCursor.
const (
	GetIndexOwncloudParamsStartCursorTrue GetIndexOwncloudParamsStartCursor = "true"
)

// Defines values for GetIndexPalantirParamsStartCursor.
const (
	GetIndexPalantirParamsStartCursorTrue GetIndexPalantirParamsStartCursor = "true"
)

// Defines values for GetIndexPaloAltoParamsStartCursor.
const (
	GetIndexPaloAltoParamsStartCursorTrue GetIndexPaloAltoParamsStartCursor = "true"
)

// Defines values for GetIndexPanasonicParamsStartCursor.
const (
	GetIndexPanasonicParamsStartCursorTrue GetIndexPanasonicParamsStartCursor = "true"
)

// Defines values for GetIndexPapercutParamsStartCursor.
const (
	GetIndexPapercutParamsStartCursorTrue GetIndexPapercutParamsStartCursor = "true"
)

// Defines values for GetIndexPegaParamsStartCursor.
const (
	GetIndexPegaParamsStartCursorTrue GetIndexPegaParamsStartCursor = "true"
)

// Defines values for GetIndexPhilipsParamsStartCursor.
const (
	GetIndexPhilipsParamsStartCursorTrue GetIndexPhilipsParamsStartCursor = "true"
)

// Defines values for GetIndexPhoenixContactParamsStartCursor.
const (
	GetIndexPhoenixContactParamsStartCursorTrue GetIndexPhoenixContactParamsStartCursor = "true"
)

// Defines values for GetIndexPhpMyAdminParamsStartCursor.
const (
	GetIndexPhpMyAdminParamsStartCursorTrue GetIndexPhpMyAdminParamsStartCursor = "true"
)

// Defines values for GetIndexPostgressqlParamsStartCursor.
const (
	GetIndexPostgressqlParamsStartCursorTrue GetIndexPostgressqlParamsStartCursor = "true"
)

// Defines values for GetIndexPowerdnsParamsStartCursor.
const (
	GetIndexPowerdnsParamsStartCursorTrue GetIndexPowerdnsParamsStartCursor = "true"
)

// Defines values for GetIndexProgressParamsStartCursor.
const (
	GetIndexProgressParamsStartCursorTrue GetIndexProgressParamsStartCursor = "true"
)

// Defines values for GetIndexProofpointParamsStartCursor.
const (
	GetIndexProofpointParamsStartCursorTrue GetIndexProofpointParamsStartCursor = "true"
)

// Defines values for GetIndexPtcParamsStartCursor.
const (
	GetIndexPtcParamsStartCursorTrue GetIndexPtcParamsStartCursor = "true"
)

// Defines values for GetIndexPubParamsStartCursor.
const (
	GetIndexPubParamsStartCursorTrue GetIndexPubParamsStartCursor = "true"
)

// Defines values for GetIndexPureStorageParamsStartCursor.
const (
	GetIndexPureStorageParamsStartCursorTrue GetIndexPureStorageParamsStartCursor = "true"
)

// Defines values for GetIndexPypaAdvisoriesParamsStartCursor.
const (
	GetIndexPypaAdvisoriesParamsStartCursorTrue GetIndexPypaAdvisoriesParamsStartCursor = "true"
)

// Defines values for GetIndexPypiParamsStartCursor.
const (
	GetIndexPypiParamsStartCursorTrue GetIndexPypiParamsStartCursor = "true"
)

// Defines values for GetIndexQnapParamsStartCursor.
const (
	GetIndexQnapParamsStartCursorTrue GetIndexQnapParamsStartCursor = "true"
)

// Defines values for GetIndexQualcommParamsStartCursor.
const (
	GetIndexQualcommParamsStartCursorTrue GetIndexQualcommParamsStartCursor = "true"
)

// Defines values for GetIndexQualysParamsStartCursor.
const (
	GetIndexQualysParamsStartCursorTrue GetIndexQualysParamsStartCursor = "true"
)

// Defines values for GetIndexQubesQsbParamsStartCursor.
const (
	GetIndexQubesQsbParamsStartCursorTrue GetIndexQubesQsbParamsStartCursor = "true"
)

// Defines values for GetIndexRansomwareParamsStartCursor.
const (
	GetIndexRansomwareParamsStartCursorTrue GetIndexRansomwareParamsStartCursor = "true"
)

// Defines values for GetIndexRedhatParamsStartCursor.
const (
	GetIndexRedhatParamsStartCursorTrue GetIndexRedhatParamsStartCursor = "true"
)

// Defines values for GetIndexRenesasParamsStartCursor.
const (
	GetIndexRenesasParamsStartCursorTrue GetIndexRenesasParamsStartCursor = "true"
)

// Defines values for GetIndexReviveParamsStartCursor.
const (
	GetIndexReviveParamsStartCursorTrue GetIndexReviveParamsStartCursor = "true"
)

// Defines values for GetIndexRockwellParamsStartCursor.
const (
	GetIndexRockwellParamsStartCursorTrue GetIndexRockwellParamsStartCursor = "true"
)

// Defines values for GetIndexRockyParamsStartCursor.
const (
	GetIndexRockyParamsStartCursorTrue GetIndexRockyParamsStartCursor = "true"
)

// Defines values for GetIndexRockyErrataParamsStartCursor.
const (
	GetIndexRockyErrataParamsStartCursorTrue GetIndexRockyErrataParamsStartCursor = "true"
)

// Defines values for GetIndexRuckusParamsStartCursor.
const (
	GetIndexRuckusParamsStartCursorTrue GetIndexRuckusParamsStartCursor = "true"
)

// Defines values for GetIndexRustsecAdvisoriesParamsStartCursor.
const (
	GetIndexRustsecAdvisoriesParamsStartCursorTrue GetIndexRustsecAdvisoriesParamsStartCursor = "true"
)

// Defines values for GetIndexSacertParamsStartCursor.
const (
	GetIndexSacertParamsStartCursorTrue GetIndexSacertParamsStartCursor = "true"
)

// Defines values for GetIndexSaintParamsStartCursor.
const (
	GetIndexSaintParamsStartCursorTrue GetIndexSaintParamsStartCursor = "true"
)

// Defines values for GetIndexSalesforceParamsStartCursor.
const (
	GetIndexSalesforceParamsStartCursorTrue GetIndexSalesforceParamsStartCursor = "true"
)

// Defines values for GetIndexSambaParamsStartCursor.
const (
	GetIndexSambaParamsStartCursorTrue GetIndexSambaParamsStartCursor = "true"
)

// Defines values for GetIndexSapParamsStartCursor.
const (
	GetIndexSapParamsStartCursorTrue GetIndexSapParamsStartCursor = "true"
)

// Defines values for GetIndexSchneiderElectricParamsStartCursor.
const (
	GetIndexSchneiderElectricParamsStartCursorTrue GetIndexSchneiderElectricParamsStartCursor = "true"
)

// Defines values for GetIndexSecConsultParamsStartCursor.
const (
	GetIndexSecConsultParamsStartCursorTrue GetIndexSecConsultParamsStartCursor = "true"
)

// Defines values for GetIndexSecuritylabParamsStartCursor.
const (
	GetIndexSecuritylabParamsStartCursorTrue GetIndexSecuritylabParamsStartCursor = "true"
)

// Defines values for GetIndexSeebugParamsStartCursor.
const (
	GetIndexSeebugParamsStartCursorTrue GetIndexSeebugParamsStartCursor = "true"
)

// Defines values for GetIndexSelParamsStartCursor.
const (
	GetIndexSelParamsStartCursorTrue GetIndexSelParamsStartCursor = "true"
)

// Defines values for GetIndexSentineloneParamsStartCursor.
const (
	GetIndexSentineloneParamsStartCursorTrue GetIndexSentineloneParamsStartCursor = "true"
)

// Defines values for GetIndexServicenowParamsStartCursor.
const (
	GetIndexServicenowParamsStartCursorTrue GetIndexServicenowParamsStartCursor = "true"
)

// Defines values for GetIndexShadowserverExploitedParamsStartCursor.
const (
	GetIndexShadowserverExploitedParamsStartCursorTrue GetIndexShadowserverExploitedParamsStartCursor = "true"
)

// Defines values for GetIndexShielderParamsStartCursor.
const (
	GetIndexShielderParamsStartCursorTrue GetIndexShielderParamsStartCursor = "true"
)

// Defines values for GetIndexSickParamsStartCursor.
const (
	GetIndexSickParamsStartCursorTrue GetIndexSickParamsStartCursor = "true"
)

// Defines values for GetIndexSiemensParamsStartCursor.
const (
	GetIndexSiemensParamsStartCursorTrue GetIndexSiemensParamsStartCursor = "true"
)

// Defines values for GetIndexSierraWirelessParamsStartCursor.
const (
	GetIndexSierraWirelessParamsStartCursorTrue GetIndexSierraWirelessParamsStartCursor = "true"
)

// Defines values for GetIndexSigmaRulesParamsStartCursor.
const (
	GetIndexSigmaRulesParamsStartCursorTrue GetIndexSigmaRulesParamsStartCursor = "true"
)

// Defines values for GetIndexSingcertParamsStartCursor.
const (
	GetIndexSingcertParamsStartCursorTrue GetIndexSingcertParamsStartCursor = "true"
)

// Defines values for GetIndexSlackwareParamsStartCursor.
const (
	GetIndexSlackwareParamsStartCursorTrue GetIndexSlackwareParamsStartCursor = "true"
)

// Defines values for GetIndexSolarwindsParamsStartCursor.
const (
	GetIndexSolarwindsParamsStartCursorTrue GetIndexSolarwindsParamsStartCursor = "true"
)

// Defines values for GetIndexSolrParamsStartCursor.
const (
	GetIndexSolrParamsStartCursorTrue GetIndexSolrParamsStartCursor = "true"
)

// Defines values for GetIndexSonicwallParamsStartCursor.
const (
	GetIndexSonicwallParamsStartCursorTrue GetIndexSonicwallParamsStartCursor = "true"
)

// Defines values for GetIndexSpacelabsHealthcareParamsStartCursor.
const (
	GetIndexSpacelabsHealthcareParamsStartCursorTrue GetIndexSpacelabsHealthcareParamsStartCursor = "true"
)

// Defines values for GetIndexSplunkParamsStartCursor.
const (
	GetIndexSplunkParamsStartCursorTrue GetIndexSplunkParamsStartCursor = "true"
)

// Defines values for GetIndexSpringParamsStartCursor.
const (
	GetIndexSpringParamsStartCursorTrue GetIndexSpringParamsStartCursor = "true"
)

// Defines values for GetIndexSsdParamsStartCursor.
const (
	GetIndexSsdParamsStartCursorTrue GetIndexSsdParamsStartCursor = "true"
)

// Defines values for GetIndexStormshieldParamsStartCursor.
const (
	GetIndexStormshieldParamsStartCursorTrue GetIndexStormshieldParamsStartCursor = "true"
)

// Defines values for GetIndexStrykerParamsStartCursor.
const (
	GetIndexStrykerParamsStartCursorTrue GetIndexStrykerParamsStartCursor = "true"
)

// Defines values for GetIndexSudoParamsStartCursor.
const (
	GetIndexSudoParamsStartCursorTrue GetIndexSudoParamsStartCursor = "true"
)

// Defines values for GetIndexSuseParamsStartCursor.
const (
	GetIndexSuseParamsStartCursorTrue GetIndexSuseParamsStartCursor = "true"
)

// Defines values for GetIndexSwiftParamsStartCursor.
const (
	GetIndexSwiftParamsStartCursorTrue GetIndexSwiftParamsStartCursor = "true"
)

// Defines values for GetIndexSwisslogHealthcareParamsStartCursor.
const (
	GetIndexSwisslogHealthcareParamsStartCursorTrue GetIndexSwisslogHealthcareParamsStartCursor = "true"
)

// Defines values for GetIndexSymfonyParamsStartCursor.
const (
	GetIndexSymfonyParamsStartCursorTrue GetIndexSymfonyParamsStartCursor = "true"
)

// Defines values for GetIndexSynacktivParamsStartCursor.
const (
	GetIndexSynacktivParamsStartCursorTrue GetIndexSynacktivParamsStartCursor = "true"
)

// Defines values for GetIndexSyncrosoftParamsStartCursor.
const (
	GetIndexSyncrosoftParamsStartCursorTrue GetIndexSyncrosoftParamsStartCursor = "true"
)

// Defines values for GetIndexSynologyParamsStartCursor.
const (
	GetIndexSynologyParamsStartCursorTrue GetIndexSynologyParamsStartCursor = "true"
)

// Defines values for GetIndexTeamviewerParamsStartCursor.
const (
	GetIndexTeamviewerParamsStartCursorTrue GetIndexTeamviewerParamsStartCursor = "true"
)

// Defines values for GetIndexTenableResearchAdvisoriesParamsStartCursor.
const (
	GetIndexTenableResearchAdvisoriesParamsStartCursorTrue GetIndexTenableResearchAdvisoriesParamsStartCursor = "true"
)

// Defines values for GetIndexTencentParamsStartCursor.
const (
	GetIndexTencentParamsStartCursorTrue GetIndexTencentParamsStartCursor = "true"
)

// Defines values for GetIndexThalesParamsStartCursor.
const (
	GetIndexThalesParamsStartCursorTrue GetIndexThalesParamsStartCursor = "true"
)

// Defines values for GetIndexThemissinglinkParamsStartCursor.
const (
	GetIndexThemissinglinkParamsStartCursorTrue GetIndexThemissinglinkParamsStartCursor = "true"
)

// Defines values for GetIndexThreatActorsParamsStartCursor.
const (
	GetIndexThreatActorsParamsStartCursorTrue GetIndexThreatActorsParamsStartCursor = "true"
)

// Defines values for GetIndexTiParamsStartCursor.
const (
	GetIndexTiParamsStartCursorTrue GetIndexTiParamsStartCursor = "true"
)

// Defines values for GetIndexTibcoParamsStartCursor.
const (
	GetIndexTibcoParamsStartCursorTrue GetIndexTibcoParamsStartCursor = "true"
)

// Defines values for GetIndexTpLinkParamsStartCursor.
const (
	GetIndexTpLinkParamsStartCursorTrue GetIndexTpLinkParamsStartCursor = "true"
)

// Defines values for GetIndexTraneTechnologyParamsStartCursor.
const (
	GetIndexTraneTechnologyParamsStartCursorTrue GetIndexTraneTechnologyParamsStartCursor = "true"
)

// Defines values for GetIndexTrendmicroParamsStartCursor.
const (
	GetIndexTrendmicroParamsStartCursorTrue GetIndexTrendmicroParamsStartCursor = "true"
)

// Defines values for GetIndexTrustwaveParamsStartCursor.
const (
	GetIndexTrustwaveParamsStartCursorTrue GetIndexTrustwaveParamsStartCursor = "true"
)

// Defines values for GetIndexTwcertParamsStartCursor.
const (
	GetIndexTwcertParamsStartCursorTrue GetIndexTwcertParamsStartCursor = "true"
)

// Defines values for GetIndexUbiquitiParamsStartCursor.
const (
	GetIndexUbiquitiParamsStartCursorTrue GetIndexUbiquitiParamsStartCursor = "true"
)

// Defines values for GetIndexUbuntuParamsStartCursor.
const (
	GetIndexUbuntuParamsStartCursorTrue GetIndexUbuntuParamsStartCursor = "true"
)

// Defines values for GetIndexUnifyParamsStartCursor.
const (
	GetIndexUnifyParamsStartCursorTrue GetIndexUnifyParamsStartCursor = "true"
)

// Defines values for GetIndexUnisocParamsStartCursor.
const (
	GetIndexUnisocParamsStartCursorTrue GetIndexUnisocParamsStartCursor = "true"
)

// Defines values for GetIndexUsdParamsStartCursor.
const (
	GetIndexUsdParamsStartCursorTrue GetIndexUsdParamsStartCursor = "true"
)

// Defines values for GetIndexUsomParamsStartCursor.
const (
	GetIndexUsomParamsStartCursorTrue GetIndexUsomParamsStartCursor = "true"
)

// Defines values for GetIndexVandykeParamsStartCursor.
const (
	GetIndexVandykeParamsStartCursorTrue GetIndexVandykeParamsStartCursor = "true"
)

// Defines values for GetIndexVapidlabsParamsStartCursor.
const (
	GetIndexVapidlabsParamsStartCursorTrue GetIndexVapidlabsParamsStartCursor = "true"
)

// Defines values for GetIndexVcCpeDictionaryParamsStartCursor.
const (
	GetIndexVcCpeDictionaryParamsStartCursorTrue GetIndexVcCpeDictionaryParamsStartCursor = "true"
)

// Defines values for GetIndexVdeParamsStartCursor.
const (
	GetIndexVdeParamsStartCursorTrue GetIndexVdeParamsStartCursor = "true"
)

// Defines values for GetIndexVeeamParamsStartCursor.
const (
	GetIndexVeeamParamsStartCursorTrue GetIndexVeeamParamsStartCursor = "true"
)

// Defines values for GetIndexVeritasParamsStartCursor.
const (
	GetIndexVeritasParamsStartCursorTrue GetIndexVeritasParamsStartCursor = "true"
)

// Defines values for GetIndexVmwareParamsStartCursor.
const (
	GetIndexVmwareParamsStartCursorTrue GetIndexVmwareParamsStartCursor = "true"
)

// Defines values for GetIndexVoidsecParamsStartCursor.
const (
	GetIndexVoidsecParamsStartCursorTrue GetIndexVoidsecParamsStartCursor = "true"
)

// Defines values for GetIndexVulncheckParamsStartCursor.
const (
	GetIndexVulncheckParamsStartCursorTrue GetIndexVulncheckParamsStartCursor = "true"
)

// Defines values for GetIndexVulncheckConfigParamsStartCursor.
const (
	GetIndexVulncheckConfigParamsStartCursorTrue GetIndexVulncheckConfigParamsStartCursor = "true"
)

// Defines values for GetIndexVulncheckCvelistV5ParamsStartCursor.
const (
	GetIndexVulncheckCvelistV5ParamsStartCursorTrue GetIndexVulncheckCvelistV5ParamsStartCursor = "true"
)

// Defines values for GetIndexVulncheckKevParamsStartCursor.
const (
	GetIndexVulncheckKevParamsStartCursorTrue GetIndexVulncheckKevParamsStartCursor = "true"
)

// Defines values for GetIndexVulncheckNvdParamsStartCursor.
const (
	GetIndexVulncheckNvdParamsStartCursorTrue GetIndexVulncheckNvdParamsStartCursor = "true"
)

// Defines values for GetIndexVulncheckNvd2ParamsStartCursor.
const (
	GetIndexVulncheckNvd2ParamsStartCursorTrue GetIndexVulncheckNvd2ParamsStartCursor = "true"
)

// Defines values for GetIndexVulnerabilityAliasesParamsStartCursor.
const (
	GetIndexVulnerabilityAliasesParamsStartCursorTrue GetIndexVulnerabilityAliasesParamsStartCursor = "true"
)

// Defines values for GetIndexVulnrichmentParamsStartCursor.
const (
	GetIndexVulnrichmentParamsStartCursorTrue GetIndexVulnrichmentParamsStartCursor = "true"
)

// Defines values for GetIndexVyaireParamsStartCursor.
const (
	GetIndexVyaireParamsStartCursorTrue GetIndexVyaireParamsStartCursor = "true"
)

// Defines values for GetIndexWatchguardParamsStartCursor.
const (
	GetIndexWatchguardParamsStartCursorTrue GetIndexWatchguardParamsStartCursor = "true"
)

// Defines values for GetIndexWhatsappParamsStartCursor.
const (
	GetIndexWhatsappParamsStartCursorTrue GetIndexWhatsappParamsStartCursor = "true"
)

// Defines values for GetIndexWibuParamsStartCursor.
const (
	GetIndexWibuParamsStartCursorTrue GetIndexWibuParamsStartCursor = "true"
)

// Defines values for GetIndexWiresharkParamsStartCursor.
const (
	GetIndexWiresharkParamsStartCursorTrue GetIndexWiresharkParamsStartCursor = "true"
)

// Defines values for GetIndexWithSecureParamsStartCursor.
const (
	GetIndexWithSecureParamsStartCursorTrue GetIndexWithSecureParamsStartCursor = "true"
)

// Defines values for GetIndexWolfiParamsStartCursor.
const (
	GetIndexWolfiParamsStartCursorTrue GetIndexWolfiParamsStartCursor = "true"
)

// Defines values for GetIndexWolfsslParamsStartCursor.
const (
	GetIndexWolfsslParamsStartCursorTrue GetIndexWolfsslParamsStartCursor = "true"
)

// Defines values for GetIndexWordfenceParamsStartCursor.
const (
	GetIndexWordfenceParamsStartCursorTrue GetIndexWordfenceParamsStartCursor = "true"
)

// Defines values for GetIndexXenParamsStartCursor.
const (
	GetIndexXenParamsStartCursorTrue GetIndexXenParamsStartCursor = "true"
)

// Defines values for GetIndexXeroxParamsStartCursor.
const (
	GetIndexXeroxParamsStartCursorTrue GetIndexXeroxParamsStartCursor = "true"
)

// Defines values for GetIndexXiaomiParamsStartCursor.
const (
	GetIndexXiaomiParamsStartCursorTrue GetIndexXiaomiParamsStartCursor = "true"
)

// Defines values for GetIndexXylemParamsStartCursor.
const (
	GetIndexXylemParamsStartCursorTrue GetIndexXylemParamsStartCursor = "true"
)

// Defines values for GetIndexYokogawaParamsStartCursor.
const (
	GetIndexYokogawaParamsStartCursorTrue GetIndexYokogawaParamsStartCursor = "true"
)

// Defines values for GetIndexYubicoParamsStartCursor.
const (
	GetIndexYubicoParamsStartCursorTrue GetIndexYubicoParamsStartCursor = "true"
)

// Defines values for GetIndexZdiParamsStartCursor.
const (
	GetIndexZdiParamsStartCursorTrue GetIndexZdiParamsStartCursor = "true"
)

// Defines values for GetIndexZebraParamsStartCursor.
const (
	GetIndexZebraParamsStartCursorTrue GetIndexZebraParamsStartCursor = "true"
)

// Defines values for GetIndexZeroscienceParamsStartCursor.
const (
	GetIndexZeroscienceParamsStartCursorTrue GetIndexZeroscienceParamsStartCursor = "true"
)

// Defines values for GetIndexZimbraParamsStartCursor.
const (
	GetIndexZimbraParamsStartCursorTrue GetIndexZimbraParamsStartCursor = "true"
)

// Defines values for GetIndexZoomParamsStartCursor.
const (
	GetIndexZoomParamsStartCursorTrue GetIndexZoomParamsStartCursor = "true"
)

// Defines values for GetIndexZscalerParamsStartCursor.
const (
	GetIndexZscalerParamsStartCursorTrue GetIndexZscalerParamsStartCursor = "true"
)

// Defines values for GetIndexZusoParamsStartCursor.
const (
	GetIndexZusoParamsStartCursorTrue GetIndexZusoParamsStartCursor = "true"
)

// Defines values for GetIndexZyxelParamsStartCursor.
const (
	GetIndexZyxelParamsStartCursorTrue GetIndexZyxelParamsStartCursor = "true"
)

// Defines values for GetPdnsVulncheckC2ParamsFormat.
const (
	GetPdnsVulncheckC2ParamsFormatJson GetPdnsVulncheckC2ParamsFormat = "json"
	GetPdnsVulncheckC2ParamsFormatText GetPdnsVulncheckC2ParamsFormat = "text"
	GetPdnsVulncheckC2ParamsFormatTxt  GetPdnsVulncheckC2ParamsFormat = "txt"
)

// Defines values for GetRulesInitialAccessTypeParamsType.
const (
	Snort    GetRulesInitialAccessTypeParamsType = "snort"
	Suricata GetRulesInitialAccessTypeParamsType = "suricata"
)

// Defines values for GetTagsVulncheckC2ParamsFormat.
const (
	GetTagsVulncheckC2ParamsFormatJson GetTagsVulncheckC2ParamsFormat = "json"
	GetTagsVulncheckC2ParamsFormatText GetTagsVulncheckC2ParamsFormat = "text"
	GetTagsVulncheckC2ParamsFormatTxt  GetTagsVulncheckC2ParamsFormat = "txt"
)

// AdvisoryA10 defines model for advisory.A10.
type AdvisoryA10 struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Reference *[]string `json:"reference,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryABBAdvisory defines model for advisory.ABBAdvisory.
type AdvisoryABBAdvisory struct {
	AbbVulnerabilityId *[]string `json:"abb_vulnerability_id,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisoryADP defines model for advisory.ADP.
type AdvisoryADP struct {
	Affected         *[]AdvisoryMAffected          `json:"affected,omitempty"`
	Metrics          *[]AdvisoryVulnrichmentMetric `json:"metrics,omitempty"`
	ProviderMetadata *AdvisoryMProviderMetadata    `json:"providerMetadata,omitempty"`
}

// AdvisoryAMD defines model for advisory.AMD.
type AdvisoryAMD struct {
	BulletinId  *string   `json:"bulletin_id,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	DateUpdated *string   `json:"date_updated,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryAMI defines model for advisory.AMI.
type AdvisoryAMI struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryASRG defines model for advisory.ASRG.
type AdvisoryASRG struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Capec            *string   `json:"capec,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	Cvss             *string   `json:"cvss,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	ProblemType      *string   `json:"problem_type,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryAVEVAAdvisory defines model for advisory.AVEVAAdvisory.
type AdvisoryAVEVAAdvisory struct {
	AvevaVulnerabilityId *string   `json:"aveva_vulnerability_id,omitempty"`
	Cve                  *[]string `json:"cve,omitempty"`
	Cwe                  *[]string `json:"cwe,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	PublishedBy          *string   `json:"published_by,omitempty"`
	Rating               *string   `json:"rating,omitempty"`
	Title                *string   `json:"title,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryAWS defines model for advisory.AWS.
type AdvisoryAWS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAbbott defines model for advisory.Abbott.
type AdvisoryAbbott struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAbsolute defines model for advisory.Absolute.
type AdvisoryAbsolute struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAcknowledgement defines model for advisory.Acknowledgement.
type AdvisoryAcknowledgement struct {
	Name *[]AdvisoryIVal `json:"name,omitempty"`
	Url  *[]string       `json:"url,omitempty"`
}

// AdvisoryAcronis defines model for advisory.Acronis.
type AdvisoryAcronis struct {
	Cve         *[]string `json:"cve,omitempty"`
	Cvss        *string   `json:"cvss,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryAdobeAdvisory defines model for advisory.AdobeAdvisory.
type AdvisoryAdobeAdvisory struct {
	Affected   *[]AdvisoryAdobeAffected `json:"affected,omitempty"`
	BulletinId *string                  `json:"bulletinId,omitempty"`
	Cve        *[]string                `json:"cve,omitempty"`
	DateAdded  *string                  `json:"date_added,omitempty"`
	Link       *string                  `json:"link,omitempty"`
	Solutions  *[]AdvisoryAdobeSolution `json:"solutions,omitempty"`
}

// AdvisoryAdobeAffected defines model for advisory.AdobeAffected.
type AdvisoryAdobeAffected struct {
	Platform *string `json:"platform,omitempty"`
	Product  *string `json:"product,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryAdobeSolution defines model for advisory.AdobeSolution.
type AdvisoryAdobeSolution struct {
	Platform *string `json:"platform,omitempty"`
	Product  *string `json:"product,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryAdvisory defines model for advisory.Advisory.
type AdvisoryAdvisory struct {
	Affects     *string               `json:"affects,omitempty"`
	Announced   *string               `json:"announced,omitempty"`
	Category    *string               `json:"category,omitempty"`
	Corrections *[]AdvisoryCorrection `json:"corrections,omitempty"`
	Credits     *string               `json:"credits,omitempty"`
	Cve         *[]string             `json:"cve,omitempty"`
	DateAdded   *string               `json:"date_added,omitempty"`
	Module      *string               `json:"module,omitempty"`
	Name        *string               `json:"name,omitempty"`
	Topic       *string               `json:"topic,omitempty"`
	Url         *string               `json:"url,omitempty"`
}

// AdvisoryAdvisoryDetails defines model for advisory.AdvisoryDetails.
type AdvisoryAdvisoryDetails struct {
	Bugzilla *AdvisoryBugzilla `json:"bugzilla,omitempty"`
	Cve      *AdvisoryOvalCVE  `json:"cve,omitempty"`
	Issued   *AdvisoryIssued   `json:"issued,omitempty"`
	Severity *string           `json:"severity,omitempty"`
	Updated  *AdvisoryUpdated  `json:"updated,omitempty"`
}

// AdvisoryAdvisoryRecord defines model for advisory.AdvisoryRecord.
type AdvisoryAdvisoryRecord struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	ExternalId *[]string `json:"external_id,omitempty"`
	Lang       *string   `json:"lang,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Refsource  *string   `json:"refsource,omitempty"`
	Tags       *[]string `json:"tags,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAffected defines model for advisory.Affected.
type AdvisoryAffected struct {
	// DatabaseSpecific The meaning of the values within the object is entirely defined by the database
	DatabaseSpecific *interface{} `json:"database_specific,omitempty"`

	// EcosystemSpecific The meaning of the values within the object is entirely defined by the ecosystem
	EcosystemSpecific *interface{}        `json:"ecosystem_specific,omitempty"`
	Package           *AdvisoryOSVPackage `json:"package,omitempty"`
	Ranges            *[]AdvisoryRange    `json:"ranges,omitempty"`
	Severity          *[]AdvisorySeverity `json:"severity,omitempty"`
	Versions          *[]string           `json:"versions,omitempty"`
}

// AdvisoryAffectedDebianPackage defines model for advisory.AffectedDebianPackage.
type AdvisoryAffectedDebianPackage struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryAffectedDebianRelease defines model for advisory.AffectedDebianRelease.
type AdvisoryAffectedDebianRelease struct {
	FixedVersion *string                             `json:"fixed_version,omitempty"`
	Nodsa        *string                             `json:"nodsa,omitempty"`
	NodsaReason  *string                             `json:"nodsa_reason,omitempty"`
	ReleaseName  *string                             `json:"release_name,omitempty"`
	Repositories *[]AdvisoryAffectedDebianRepository `json:"repositories,omitempty"`
	Status       *string                             `json:"status,omitempty"`
	Urgency      *string                             `json:"urgency,omitempty"`
}

// AdvisoryAffectedDebianRepository defines model for advisory.AffectedDebianRepository.
type AdvisoryAffectedDebianRepository struct {
	RepositoryName *string `json:"repository_name,omitempty"`
	Version        *string `json:"version,omitempty"`
}

// AdvisoryAffectedFile defines model for advisory.AffectedFile.
type AdvisoryAffectedFile struct {
	FileLastModified *string `json:"file_last_modified,omitempty"`
	FileName         *string `json:"file_name,omitempty"`
}

// AdvisoryAffectedProduct defines model for advisory.AffectedProduct.
type AdvisoryAffectedProduct struct {
	AffectedReleases *string `json:"affectedReleases,omitempty"`
	FixedReleases    *string `json:"fixedReleases,omitempty"`
	LexmarkModels    *string `json:"lexmarkModels,omitempty"`
}

// AdvisoryAffectedRel defines model for advisory.AffectedRel.
type AdvisoryAffectedRel struct {
	Advisory    *string `json:"advisory,omitempty"`
	Cpe         *string `json:"cpe,omitempty"`
	Package     *string `json:"package,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
	ReleaseDate *string `json:"release_date,omitempty"`
}

// AdvisoryAffectedUbuntuPackage defines model for advisory.AffectedUbuntuPackage.
type AdvisoryAffectedUbuntuPackage struct {
	BreakCommitUrl       *[]string                             `json:"break_commit_url,omitempty"`
	FixCommitUrl         *[]string                             `json:"fix_commit_url,omitempty"`
	PackageName          *string                               `json:"package_name,omitempty"`
	PackageReleaseStatus *[]AdvisoryUbuntuPackageReleaseStatus `json:"package_release_status,omitempty"`
	UpstreamFixUrl       *[]string                             `json:"upstream_fix_url,omitempty"`
}

// AdvisoryAlephResearch defines model for advisory.AlephResearch.
type AdvisoryAlephResearch struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAlmaDate defines model for advisory.AlmaDate.
type AdvisoryAlmaDate struct {
	Date *int `json:"$date,omitempty"`
}

// AdvisoryAlmaLinuxUpdate defines model for advisory.AlmaLinuxUpdate.
type AdvisoryAlmaLinuxUpdate struct {
	BsRepoId     *AdvisoryAlmaObjectID    `json:"bs_repo_id,omitempty"`
	Cve          *[]string                `json:"cve,omitempty"`
	DateAdded    *string                  `json:"date_added,omitempty"`
	Description  *string                  `json:"description,omitempty"`
	Fromstr      *string                  `json:"fromstr,omitempty"`
	Id           *AdvisoryAlmaObjectID    `json:"id,omitempty"`
	IssuedDate   *AdvisoryAlmaDate        `json:"issued_date,omitempty"`
	Pkglist      *AdvisoryAlmaPackageList `json:"pkglist,omitempty"`
	Pushcount    *string                  `json:"pushcount,omitempty"`
	References   *[]AdvisoryAlmaReference `json:"references,omitempty"`
	Release      *string                  `json:"release,omitempty"`
	Rights       *string                  `json:"rights,omitempty"`
	Severity     *string                  `json:"severity,omitempty"`
	Solution     *string                  `json:"solution,omitempty"`
	Status       *string                  `json:"status,omitempty"`
	Summary      *string                  `json:"summary,omitempty"`
	Title        *string                  `json:"title,omitempty"`
	Type         *string                  `json:"type,omitempty"`
	UpdateUrl    *string                  `json:"update_url,omitempty"`
	UpdatedDate  *AdvisoryAlmaDate        `json:"updated_date,omitempty"`
	UpdateinfoId *string                  `json:"updateinfo_id,omitempty"`
	Version      *string                  `json:"version,omitempty"`
}

// AdvisoryAlmaObjectID defines model for advisory.AlmaObjectID.
type AdvisoryAlmaObjectID struct {
	Oid *string `json:"$oid,omitempty"`
}

// AdvisoryAlmaPackage defines model for advisory.AlmaPackage.
type AdvisoryAlmaPackage struct {
	Arch            *string `json:"arch,omitempty"`
	Epoch           *string `json:"epoch,omitempty"`
	Filename        *string `json:"filename,omitempty"`
	Name            *string `json:"name,omitempty"`
	RebootSuggested *int    `json:"reboot_suggested,omitempty"`
	Release         *string `json:"release,omitempty"`
	Source          *string `json:"source,omitempty"`
	Sum             *string `json:"sum,omitempty"`
	Version         *string `json:"version,omitempty"`
}

// AdvisoryAlmaPackageList defines model for advisory.AlmaPackageList.
type AdvisoryAlmaPackageList struct {
	Name      *string                `json:"name,omitempty"`
	Packages  *[]AdvisoryAlmaPackage `json:"packages,omitempty"`
	Shortname *string                `json:"shortname,omitempty"`
}

// AdvisoryAlmaReference defines model for advisory.AlmaReference.
type AdvisoryAlmaReference struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryAlpineLinuxSecDB defines model for advisory.AlpineLinuxSecDB.
type AdvisoryAlpineLinuxSecDB struct {
	Apkurl        *string                            `json:"apkurl,omitempty"`
	Archs         *[]string                          `json:"archs,omitempty"`
	Cve           *[]string                          `json:"cve,omitempty"`
	DateAdded     *string                            `json:"date_added,omitempty"`
	Distroversion *string                            `json:"distroversion,omitempty"`
	Packages      *[]AdvisoryAlpineLinuxSecDBPackage `json:"packages,omitempty"`
	Reponame      *string                            `json:"reponame,omitempty"`
	Urlprefix     *string                            `json:"urlprefix,omitempty"`
}

// AdvisoryAlpineLinuxSecDBPackage defines model for advisory.AlpineLinuxSecDBPackage.
type AdvisoryAlpineLinuxSecDBPackage struct {
	PackageName *string                           `json:"package_name,omitempty"`
	Secfixes    *[]AdvisoryAlpineLinuxSecurityFix `json:"secfixes,omitempty"`
}

// AdvisoryAlpineLinuxSecurityFix defines model for advisory.AlpineLinuxSecurityFix.
type AdvisoryAlpineLinuxSecurityFix struct {
	Cve          *string `json:"cve,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
}

// AdvisoryAnchoreNVDOverride defines model for advisory.AnchoreNVDOverride.
type AdvisoryAnchoreNVDOverride struct {
	Cve       *[]string         `json:"cve,omitempty"`
	DateAdded *string           `json:"date_added,omitempty"`
	Override  *AdvisoryOverride `json:"override,omitempty"`
	Url       *string           `json:"url,omitempty"`
}

// AdvisoryAndroidAdvisory defines model for advisory.AndroidAdvisory.
type AdvisoryAndroidAdvisory struct {
	Affected   *[]AdvisoryAndroidAffected  `json:"affected,omitempty"`
	Aliases    *[]string                   `json:"aliases,omitempty"`
	Cve        *[]string                   `json:"cve,omitempty"`
	DateAdded  *string                     `json:"date_added,omitempty"`
	Id         *string                     `json:"id,omitempty"`
	Modified   *string                     `json:"modified,omitempty"`
	Published  *string                     `json:"published,omitempty"`
	References *[]AdvisoryAndroidReference `json:"references,omitempty"`
	Summary    *string                     `json:"summary,omitempty"`
}

// AdvisoryAndroidAffected defines model for advisory.AndroidAffected.
type AdvisoryAndroidAffected struct {
	EcosystemSpecific *AdvisoryEcoSystem      `json:"ecosystem_specific,omitempty"`
	Package           *AdvisoryAndroidPackage `json:"package,omitempty"`
	Ranges            *[]AdvisoryAndroidRange `json:"ranges,omitempty"`
	Versions          *[]string               `json:"versions,omitempty"`
}

// AdvisoryAndroidEvent defines model for advisory.AndroidEvent.
type AdvisoryAndroidEvent struct {
	Fixed      *string `json:"fixed,omitempty"`
	Introduced *string `json:"introduced,omitempty"`
}

// AdvisoryAndroidPackage defines model for advisory.AndroidPackage.
type AdvisoryAndroidPackage struct {
	Ecosystem *string `json:"ecosystem,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// AdvisoryAndroidRange defines model for advisory.AndroidRange.
type AdvisoryAndroidRange struct {
	Events *[]AdvisoryAndroidEvent `json:"events,omitempty"`
	Type   *string                 `json:"type,omitempty"`
}

// AdvisoryAndroidReference defines model for advisory.AndroidReference.
type AdvisoryAndroidReference struct {
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// AdvisoryApacheActiveMQ defines model for advisory.ApacheActiveMQ.
type AdvisoryApacheActiveMQ struct {
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryApacheArchiva defines model for advisory.ApacheArchiva.
type AdvisoryApacheArchiva struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheArrow defines model for advisory.ApacheArrow.
type AdvisoryApacheArrow struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheCamel defines model for advisory.ApacheCamel.
type AdvisoryApacheCamel struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheCommons defines model for advisory.ApacheCommons.
type AdvisoryApacheCommons struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheCouchDB defines model for advisory.ApacheCouchDB.
type AdvisoryApacheCouchDB struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheFlink defines model for advisory.ApacheFlink.
type AdvisoryApacheFlink struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheGuacamole defines model for advisory.ApacheGuacamole.
type AdvisoryApacheGuacamole struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheHTTP defines model for advisory.ApacheHTTP.
type AdvisoryApacheHTTP struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheHadoop defines model for advisory.ApacheHadoop.
type AdvisoryApacheHadoop struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheJSPWiki defines model for advisory.ApacheJSPWiki.
type AdvisoryApacheJSPWiki struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheKafka defines model for advisory.ApacheKafka.
type AdvisoryApacheKafka struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheLoggingServices defines model for advisory.ApacheLoggingServices.
type AdvisoryApacheLoggingServices struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheNiFi defines model for advisory.ApacheNiFi.
type AdvisoryApacheNiFi struct {
	AffectedVersion *string   `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	FixedVersions   *string   `json:"fixed_versions,omitempty"`
	References      *[]string `json:"references,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryApacheOFBiz defines model for advisory.ApacheOFBiz.
type AdvisoryApacheOFBiz struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheOpenMeetings defines model for advisory.ApacheOpenMeetings.
type AdvisoryApacheOpenMeetings struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheOpenOffice defines model for advisory.ApacheOpenOffice.
type AdvisoryApacheOpenOffice struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApachePulsar defines model for advisory.ApachePulsar.
type AdvisoryApachePulsar struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheShiro defines model for advisory.ApacheShiro.
type AdvisoryApacheShiro struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheSpark defines model for advisory.ApacheSpark.
type AdvisoryApacheSpark struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheStruts defines model for advisory.ApacheStruts.
type AdvisoryApacheStruts struct {
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Id                *string   `json:"id,omitempty"`
	Impact            *string   `json:"impact,omitempty"`
	Rating            *string   `json:"rating,omitempty"`
	Remediation       *string   `json:"remediation,omitempty"`
	Summary           *string   `json:"summary,omitempty"`
	Title             *string   `json:"title,omitempty"`
	Url               *string   `json:"url,omitempty"`
	VulnerableVersion *[]string `json:"vulnerable_version,omitempty"`
}

// AdvisoryApacheSubversion defines model for advisory.ApacheSubversion.
type AdvisoryApacheSubversion struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheSuperset defines model for advisory.ApacheSuperset.
type AdvisoryApacheSuperset struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheTomcat defines model for advisory.ApacheTomcat.
type AdvisoryApacheTomcat struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheZooKeeper defines model for advisory.ApacheZooKeeper.
type AdvisoryApacheZooKeeper struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAppCheck defines model for advisory.AppCheck.
type AdvisoryAppCheck struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAppgate defines model for advisory.Appgate.
type AdvisoryAppgate struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAppleAdvisory defines model for advisory.AppleAdvisory.
type AdvisoryAppleAdvisory struct {
	Components *[]AdvisoryAppleComponent `json:"components,omitempty"`
	Cve        *[]string                 `json:"cve,omitempty"`
	DateAdded  *string                   `json:"date_added,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Url        *string                   `json:"url,omitempty"`
}

// AdvisoryAppleComponent defines model for advisory.AppleComponent.
type AdvisoryAppleComponent struct {
	AvailableFor *string   `json:"available_for,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Impact       *string   `json:"impact,omitempty"`
	ItwExploit   *bool     `json:"itw_exploit,omitempty"`
	Name         *string   `json:"name,omitempty"`
}

// AdvisoryArchIssue defines model for advisory.ArchIssue.
type AdvisoryArchIssue struct {
	Advisories *[]string `json:"advisories,omitempty"`
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`

	// Issues cves
	Issues     *[]string `json:"issues,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Packages   *[]string `json:"packages,omitempty"`
	References *[]string `json:"references,omitempty"`
	Severity   *string   `json:"severity,omitempty"`
	Status     *string   `json:"status,omitempty"`
	Ticket     *string   `json:"ticket,omitempty"`
	Type       *string   `json:"type,omitempty"`
}

// AdvisoryArista defines model for advisory.Arista.
type AdvisoryArista struct {
	CsafUrl    *string   `json:"csaf_url,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAruba defines model for advisory.Aruba.
type AdvisoryAruba struct {
	Csaf      *string   `json:"csaf,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAssetNote defines model for advisory.AssetNote.
type AdvisoryAssetNote struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAsterisk defines model for advisory.Asterisk.
type AdvisoryAsterisk struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAsus defines model for advisory.Asus.
type AdvisoryAsus struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Details   *string   `json:"details,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryAtlassianAdvisory defines model for advisory.AtlassianAdvisory.
type AdvisoryAtlassianAdvisory struct {
	AffectedVersion *[]string `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`

	// DetailedSummary overloading in places with 'RiskAssessment' and other places with
	// 'Description'
	DetailedSummary *string   `json:"detailed_summary,omitempty"`
	FixedVersion    *string   `json:"fixed_version,omitempty"`
	Link            *string   `json:"link,omitempty"`
	Products        *[]string `json:"products,omitempty"`
	References      *[]string `json:"references,omitempty"`
	ReleaseDate     *string   `json:"release_date,omitempty"`
	Severity        *string   `json:"severity,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
}

// AdvisoryAtlassianProducts defines model for advisory.AtlassianProducts.
type AdvisoryAtlassianProducts struct {
	Affected *[]string `json:"affected,omitempty"`
	Fixed    *[]string `json:"fixed,omitempty"`
	Name     *string   `json:"name,omitempty"`
}

// AdvisoryAtlassianVuln defines model for advisory.AtlassianVuln.
type AdvisoryAtlassianVuln struct {
	Cve       *[]string                    `json:"cve,omitempty"`
	DateAdded *string                      `json:"date_added,omitempty"`
	Products  *[]AdvisoryAtlassianProducts `json:"products,omitempty"`
	Summary   *string                      `json:"summary,omitempty"`
	Title     *string                      `json:"title,omitempty"`
	Url       *string                      `json:"url,omitempty"`
}

// AdvisoryAtredis defines model for advisory.Atredis.
type AdvisoryAtredis struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Products   *[]string `json:"products,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Vendors    *[]string `json:"vendors,omitempty"`
}

// AdvisoryAusCert defines model for advisory.AusCert.
type AdvisoryAusCert struct {
	Body            *string   `json:"body,omitempty"`
	BulletinId      *string   `json:"bulletinId,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cvss            *string   `json:"cvss,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Link            *string   `json:"link,omitempty"`
	OperatingSystem *string   `json:"operatingSystem,omitempty"`
	Product         *string   `json:"product,omitempty"`
	Publisher       *string   `json:"publisher,omitempty"`
	Resolution      *string   `json:"resolution,omitempty"`
}

// AdvisoryAutodesk defines model for advisory.Autodesk.
type AdvisoryAutodesk struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAvaya defines model for advisory.Avaya.
type AdvisoryAvaya struct {
	AdvisoryNumber *string   `json:"advisory_number,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	LastRevised    *string   `json:"last_revised,omitempty"`
	Overview       *string   `json:"overview,omitempty"`
	Severity       *string   `json:"severity,omitempty"`
	Title          *string   `json:"title,omitempty"`
	Url            *string   `json:"url,omitempty"`
}

// AdvisoryAvigilon defines model for advisory.Avigilon.
type AdvisoryAvigilon struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAward defines model for advisory.Award.
type AdvisoryAward struct {
	Amount   *string `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
}

// AdvisoryAxis defines model for advisory.Axis.
type AdvisoryAxis struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAzul defines model for advisory.Azul.
type AdvisoryAzul struct {
	BaseScore    *string                 `json:"base_score,omitempty"`
	Cve          *[]string               `json:"cve,omitempty"`
	DateAdded    *string                 `json:"date_added,omitempty"`
	PrimeVersion *[]AdvisoryPrimeVersion `json:"prime_version,omitempty"`
	Release      *string                 `json:"release,omitempty"`
	Url          *string                 `json:"url,omitempty"`
	ZuluVersion  *[]AdvisoryZuluVersion  `json:"zulu_version,omitempty"`
}

// AdvisoryBBraunAdvisory defines model for advisory.BBraunAdvisory.
type AdvisoryBBraunAdvisory struct {
	Attention       *string   `json:"attention,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Equipment       *[]string `json:"equipment,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Vendor          *string   `json:"vendor,omitempty"`
	Vulnerabilities *[]string `json:"vulnerabilities,omitempty"`
}

// AdvisoryBDUAdvisory defines model for advisory.BDUAdvisory.
type AdvisoryBDUAdvisory struct {
	// BduId BDU:2022-03833
	BduId *string `json:"bdu_id,omitempty"`

	// Cve []string{"CVE-2022-28194"}
	Cve   *[]string         `json:"cve,omitempty"`
	Cvss  *AdvisoryBDUCvss  `json:"cvss,omitempty"`
	Cvss3 *AdvisoryBDUCvss3 `json:"cvss3,omitempty"`

	// Cwe CWE-119
	Cwe       *string `json:"cwe,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`

	// DescriptionRu Библиотека libxml2 до версии 2.9.12 не корректно обрабатывает XML-документы, содержащие определенные сущности. В результате могут быть выполнены произвольные команды.
	DescriptionRu *string                 `json:"description_ru,omitempty"`
	Environment   *AdvisoryBDUEnvironment `json:"environment,omitempty"`

	// ExploitStatusEn Exploited
	ExploitStatusEn *string `json:"exploit_status_en,omitempty"`

	// ExploitStatusRu Exploited
	ExploitStatusRu *string `json:"exploit_status_ru,omitempty"`

	// FixStatusEn Fixed
	FixStatusEn *string `json:"fix_status_en,omitempty"`

	// FixStatusRu Fixed
	FixStatusRu *string `json:"fix_status_ru,omitempty"`

	// IdentifyDate 2022-09-01
	IdentifyDate *string `json:"identify_date,omitempty"`

	// NameRu BDU:2022-03833: Уязвимость модуля Cboot (tegrabl_cbo.c) пакета драйверов микропрограммного обеспечения вычислительных плат NVIDIA Jetson, позволяющая нарушителю выполнить произвольный код или вызвать частичный отказ в обслуживании
	NameRu *string `json:"name_ru,omitempty"`

	// SeverityRu High
	SeverityRu *string `json:"severity_ru,omitempty"`

	// SolutionRu Обновите драйверы микропрограммного обеспечения вычислительных плат NVIDIA Jetson до версии 32.6.1 или более поздней
	SolutionRu *string `json:"solution_ru,omitempty"`

	// Sources https://nvd.nist.gov/vuln/detail/CVE-2022-28194
	Sources *[]string `json:"sources,omitempty"`

	// TextRu Библиотека libxml2 до версии 2.9.12 не корректно обрабатывает XML-документы, содержащие определенные сущности. В результате могут быть выполнены произвольные команды.
	TextRu *string `json:"text_ru,omitempty"`

	// Url https://bdu.fstec.ru/vul/2022-03833
	Url *string `json:"url,omitempty"`

	// VulStatusEn Exploitable
	VulStatusEn *string `json:"vul_status_en,omitempty"`

	// VulStatusRu Exploitable
	VulStatusRu        *string                        `json:"vul_status_ru,omitempty"`
	VulnerableSoftware *AdvisoryBDUVulnerableSoftware `json:"vulnerable_software,omitempty"`
}

// AdvisoryBDUCvss defines model for advisory.BDUCvss.
type AdvisoryBDUCvss struct {
	Vector *AdvisoryBDUVector `json:"vector,omitempty"`
}

// AdvisoryBDUCvss3 defines model for advisory.BDUCvss3.
type AdvisoryBDUCvss3 struct {
	Vector *AdvisoryBDUVector `json:"vector,omitempty"`
}

// AdvisoryBDUEnvironment defines model for advisory.BDUEnvironment.
type AdvisoryBDUEnvironment struct {
	Os *AdvisoryBDUOs `json:"os,omitempty"`
}

// AdvisoryBDUOs defines model for advisory.BDUOs.
type AdvisoryBDUOs struct {
	Name     *string `json:"name,omitempty"`
	Platform *string `json:"platform,omitempty"`
	Text     *string `json:"text,omitempty"`
	Vendor   *string `json:"vendor,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryBDUSoft defines model for advisory.BDUSoft.
type AdvisoryBDUSoft struct {
	Name     *string           `json:"name,omitempty"`
	Platform *string           `json:"platform,omitempty"`
	Text     *string           `json:"text,omitempty"`
	Types    *AdvisoryBDUTypes `json:"types,omitempty"`
	Vendor   *string           `json:"vendor,omitempty"`
	Version  *string           `json:"version,omitempty"`
}

// AdvisoryBDUTypes defines model for advisory.BDUTypes.
type AdvisoryBDUTypes struct {
	Text *string `json:"text,omitempty"`
	Type *string `json:"type,omitempty"`
}

// AdvisoryBDUVector defines model for advisory.BDUVector.
type AdvisoryBDUVector struct {
	Score *string `json:"score,omitempty"`
	Text  *string `json:"text,omitempty"`
}

// AdvisoryBDUVulnerableSoftware defines model for advisory.BDUVulnerableSoftware.
type AdvisoryBDUVulnerableSoftware struct {
	Soft *AdvisoryBDUSoft `json:"soft,omitempty"`
}

// AdvisoryBLS defines model for advisory.BLS.
type AdvisoryBLS struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Prodcut   *string   `json:"prodcut,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Vendor    *string   `json:"vendor,omitempty"`
}

// AdvisoryBandr defines model for advisory.Bandr.
type AdvisoryBandr struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	DocumentId *string   `json:"document_id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryBaxterAdvisory defines model for advisory.BaxterAdvisory.
type AdvisoryBaxterAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryBeckhoffAdvisory defines model for advisory.BeckhoffAdvisory.
type AdvisoryBeckhoffAdvisory struct {
	BeckhoffId      *string   `json:"beckhoff_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Vde             *[]string `json:"vde,omitempty"`
}

// AdvisoryBectonDickinsonAdvisory defines model for advisory.BectonDickinsonAdvisory.
type AdvisoryBectonDickinsonAdvisory struct {
	Cve              *[]string                   `json:"cve,omitempty"`
	DateAdded        *string                     `json:"date_added,omitempty"`
	ProductsAffected *[]AdvisoryProductsAffected `json:"products_affected,omitempty"`
	Title            *string                     `json:"title,omitempty"`
	Url              *string                     `json:"url,omitempty"`
}

// AdvisoryBeldenAdvisory defines model for advisory.BeldenAdvisory.
type AdvisoryBeldenAdvisory struct {
	BeldenId        *string   `json:"belden_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Version         *string   `json:"version,omitempty"`
}

// AdvisoryBeyondTrust defines model for advisory.BeyondTrust.
type AdvisoryBeyondTrust struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBinarly defines model for advisory.Binarly.
type AdvisoryBinarly struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryBitDefender defines model for advisory.BitDefender.
type AdvisoryBitDefender struct {
	AdditionalDetails *string   `json:"additional_details,omitempty"`
	AffectedProducts  *string   `json:"affected_products,omitempty"`
	AffectedVendors   *string   `json:"affected_vendors,omitempty"`
	Credit            *string   `json:"credit,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	Cvss              *string   `json:"cvss,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Details           *string   `json:"details,omitempty"`
	Timeline          *string   `json:"timeline,omitempty"`
	Title             *string   `json:"title,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// AdvisoryBlackBerry defines model for advisory.BlackBerry.
type AdvisoryBlackBerry struct {
	Bsrt      *string   `json:"bsrt,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBoschAdvisory defines model for advisory.BoschAdvisory.
type AdvisoryBoschAdvisory struct {
	BoschId         *string   `json:"bosch_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryBostonScientificAdvisory defines model for advisory.BostonScientificAdvisory.
type AdvisoryBostonScientificAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBotnet defines model for advisory.Botnet.
type AdvisoryBotnet struct {
	BotnetName    *string                 `json:"botnet_name,omitempty"`
	Cve           *[]string               `json:"cve,omitempty"`
	CveReferences *[]AdvisoryCVEReference `json:"cve_references,omitempty"`
	DateAdded     *string                 `json:"date_added,omitempty"`
	MalpediaUrl   *string                 `json:"malpedia_url,omitempty"`
}

// AdvisoryBugzilla defines model for advisory.Bugzilla.
type AdvisoryBugzilla struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// AdvisoryCACyberCentreAdvisory defines model for advisory.CACyberCentreAdvisory.
type AdvisoryCACyberCentreAdvisory struct {
	ControlSystems *bool     `json:"control_systems,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	HtmlUrl        *string   `json:"html_url,omitempty"`
	SerialNumber   *string   `json:"serial_number,omitempty"`
	Title          *string   `json:"title,omitempty"`
}

// AdvisoryCBLMariner defines model for advisory.CBLMariner.
type AdvisoryCBLMariner struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Package    *string   `json:"package,omitempty"`
	Severity   *string   `json:"severity,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Version    *string   `json:"version,omitempty"`
}

// AdvisoryCERTEUAdvisory defines model for advisory.CERTEUAdvisory.
type AdvisoryCERTEUAdvisory struct {
	AdvisoryId       *string   `json:"advisoryId,omitempty"`
	AffectedProducts *string   `json:"affectedProducts,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	History          *[]string `json:"history,omitempty"`
	Link             *string   `json:"link,omitempty"`
	Recommendations  *string   `json:"recommendations,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	TechnicalDetails *string   `json:"technicalDetails,omitempty"`
	Title            *string   `json:"title,omitempty"`
}

// AdvisoryCESA defines model for advisory.CESA.
type AdvisoryCESA struct {
	Arch       *[]string                `json:"arch,omitempty"`
	Cve        *[]string                `json:"cve,omitempty"`
	DateAdded  *string                  `json:"date_added,omitempty"`
	Id         *string                  `json:"id,omitempty"`
	IssueDate  *string                  `json:"issueDate,omitempty"`
	OsRelease  *string                  `json:"osRelease,omitempty"`
	Packages   *[]AdvisoryCentosPackage `json:"packages,omitempty"`
	References *[]string                `json:"references,omitempty"`
	Title      *string                  `json:"title,omitempty"`
}

// AdvisoryCISAAlert defines model for advisory.CISAAlert.
type AdvisoryCISAAlert struct {
	AffectedProducts *string   `json:"affectedProducts,omitempty"`
	AlertID          *string   `json:"alertID,omitempty"`
	Archived         *bool     `json:"archived,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	CveexploitedITW  *bool     `json:"cveexploitedITW,omitempty"`
	Cvss             *string   `json:"cvss,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Icsa             *bool     `json:"icsa,omitempty"`
	Icsma            *bool     `json:"icsma,omitempty"`
	Mitigations      *string   `json:"mitigations,omitempty"`
	ReleaseDate      *string   `json:"releaseDate,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
	Vendor           *string   `json:"vendor,omitempty"`
}

// AdvisoryCNNVDEntryJSON defines model for advisory.CNNVDEntryJSON.
type AdvisoryCNNVDEntryJSON struct {
	BugtraqId         *string   `json:"bugtraq-id,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Id                *string   `json:"id,omitempty"`
	ModifiedDate      *string   `json:"modified-date,omitempty"`
	NameCn            *string   `json:"name_cn,omitempty"`
	PublishedDate     *string   `json:"published-date,omitempty"`
	SeverityCn        *string   `json:"severity_cn,omitempty"`
	SeverityEn        *string   `json:"severity_en,omitempty"`
	Source            *string   `json:"source,omitempty"`
	Url               *string   `json:"url,omitempty"`
	VulnDescriptionCn *string   `json:"vuln-description_cn,omitempty"`
	VulnSolution      *string   `json:"vuln-solution,omitempty"`
	VulnTypeCn        *string   `json:"vuln-type_cn,omitempty"`
	VulnTypeEn        *string   `json:"vuln-type_en,omitempty"`
}

// AdvisoryCNVDBulletin defines model for advisory.CNVDBulletin.
type AdvisoryCNVDBulletin struct {
	Cnta          *string   `json:"cnta,omitempty"`
	Cnvd          *[]string `json:"cnvd,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	Date          *string   `json:"date,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Id            *string   `json:"id,omitempty"`
	ReferenceUrls *[]string `json:"reference_urls,omitempty"`
	Title         *string   `json:"title,omitempty"`
	Url           *string   `json:"url,omitempty"`
}

// AdvisoryCNVDFlaw defines model for advisory.CNVDFlaw.
type AdvisoryCNVDFlaw struct {
	AffectedProductsCn *string   `json:"affected_products_cn,omitempty"`
	BugtraqId          *string   `json:"bugtraq_id,omitempty"`
	Cnvd               *string   `json:"cnvd,omitempty"`
	CollectionTime     *string   `json:"collection_time,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	HarmLevel          *string   `json:"harm_level,omitempty"`
	Id                 *string   `json:"id,omitempty"`
	PublicDate         *string   `json:"public_date,omitempty"`
	ReferenceUrls      *[]string `json:"reference_urls,omitempty"`
	SubmissionTime     *string   `json:"submission_time,omitempty"`
	TitleCn            *string   `json:"title_cn,omitempty"`
	UpdateTime         *string   `json:"update_time,omitempty"`
	Url                *string   `json:"url,omitempty"`
	ValidationInfoCn   *string   `json:"validation_info_cn,omitempty"`
	ValidationInfoEn   *string   `json:"validation_info_en,omitempty"`
	VendorPatchCn      *string   `json:"vendor_patch_cn,omitempty"`
	VulnAttachments    *[]string `json:"vuln_attachments,omitempty"`
	VulnDescriptionCn  *string   `json:"vuln_description_cn,omitempty"`
	VulnSolutionCn     *string   `json:"vuln_solution_cn,omitempty"`
	VulnTypeCn         *string   `json:"vuln_type_cn,omitempty"`
}

// AdvisoryCOSUpdate defines model for advisory.COSUpdate.
type AdvisoryCOSUpdate struct {
	Changed   *[]string `json:"changed,omitempty"`
	Featured  *[]string `json:"featured,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Reference *string   `json:"reference,omitempty"`
	Security  *[]string `json:"security,omitempty"`
	Updated   *string   `json:"updated,omitempty"`
}

// AdvisoryCPEMatch defines model for advisory.CPEMatch.
type AdvisoryCPEMatch struct {
	Criteria        *string `json:"criteria,omitempty"`
	MatchCriteriaId *string `json:"matchCriteriaId,omitempty"`
	Vulnerable      *bool   `json:"vulnerable,omitempty"`
}

// AdvisoryCPENode defines model for advisory.CPENode.
type AdvisoryCPENode struct {
	CpeMatch *[]AdvisoryCPEMatch `json:"cpeMatch,omitempty"`
	Negate   *bool               `json:"negate,omitempty"`
	Operator *string             `json:"operator,omitempty"`
}

// AdvisoryCSAF defines model for advisory.CSAF.
type AdvisoryCSAF struct {
	// Document Document contains metadata about the CSAF document itself.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#321-document-property
	Document *AdvisoryDocumentMetadata `json:"document,omitempty"`

	// Notes Notes holds notes associated with the whole document.
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3217-document-property---notes
	Notes *[]AdvisoryCSAFNote `json:"notes,omitempty"`

	// ProductTree ProductTree contains information about the product tree (branches only).
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#322-product-tree-property
	ProductTree *AdvisoryProductBranch `json:"product_tree,omitempty"`

	// Vulnerabilities Vulnerabilities contains information about the vulnerabilities,
	// (i.e. CVEs), associated threats, and product status.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#323-vulnerabilities-property
	Vulnerabilities *[]AdvisoryCSAFVulnerability `json:"vulnerabilities,omitempty"`
}

// AdvisoryCSAFDistribution defines model for advisory.CSAFDistribution.
type AdvisoryCSAFDistribution = map[string]interface{}

// AdvisoryCSAFNote defines model for advisory.CSAFNote.
type AdvisoryCSAFNote struct {
	Audience *string `json:"audience,omitempty"`
	Category *string `json:"category,omitempty"`
	Text     *string `json:"text,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// AdvisoryCSAFReference defines model for advisory.CSAFReference.
type AdvisoryCSAFReference struct {
	Category *string `json:"category,omitempty"`
	Summary  *string `json:"summary,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// AdvisoryCSAFRelationship defines model for advisory.CSAFRelationship.
type AdvisoryCSAFRelationship struct {
	Category                  *string          `json:"category,omitempty"`
	FullProductName           *AdvisoryProduct `json:"full_product_name,omitempty"`
	ProductReference          *string          `json:"product_reference,omitempty"`
	RelatesToProductReference *string          `json:"relates_to_product_reference,omitempty"`
}

// AdvisoryCSAFVulnerability defines model for advisory.CSAFVulnerability.
type AdvisoryCSAFVulnerability struct {
	// Cve MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3232-vulnerabilities-property---cve
	Cve *string `json:"cve,omitempty"`

	// Flags Machine readable flags for products related to vulnerability
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3235-vulnerabilities-property---flags
	Flags *[]AdvisoryFlag `json:"flags,omitempty"`

	// Ids List of IDs represents a list of unique labels or tracking IDs for the vulnerability (if such information exists).
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3236-vulnerabilities-property---ids
	Ids *[]AdvisoryTrackingID `json:"ids,omitempty"`

	// Notes Notes holds notes associated with the Vulnerability object.
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3238-vulnerabilities-property---notes
	Notes *[]AdvisoryCSAFNote `json:"notes,omitempty"`

	// ProductStatus Provide details on the status of the referenced product related to the vulnerability.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3239-vulnerabilities-property---product-status
	ProductStatus *map[string][]string `json:"product_status,omitempty"`

	// References Vulnerability references holds a list of references associated with this vulnerability item.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32310-vulnerabilities-property---references
	References  *[]AdvisoryCSAFReference `json:"references,omitempty"`
	ReleaseDate *string                  `json:"release_date,omitempty"`

	// Remediations Provide details of remediations associated with a Vulnerability
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32312-vulnerabilities-property---remediations
	Remediations *[]AdvisoryRemediationData `json:"remediations,omitempty"`

	// Scores Scores holds the scores associated with the Vulnerability object.
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32313-vulnerabilities-property---scores
	// Currently only CVSS v3 is supported.
	Scores *[]AdvisoryScore `json:"scores,omitempty"`

	// Threats Provide details of threats associated with a vulnerability.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32314-vulnerabilities-property---threats
	Threats *[]AdvisoryThreatData `json:"threats,omitempty"`
}

// AdvisoryCVEDetail defines model for advisory.CVEDetail.
type AdvisoryCVEDetail struct {
	BaseScore   *string `json:"baseScore,omitempty"`
	Cveid       *string `json:"cveid,omitempty"`
	Description *string `json:"description,omitempty"`
	Vector      *string `json:"vector,omitempty"`
}

// AdvisoryCVEDetailsLink defines model for advisory.CVEDetailsLink.
type AdvisoryCVEDetailsLink struct {
	Url   *string `json:"url,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryCVEReference defines model for advisory.CVEReference.
type AdvisoryCVEReference struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCVRFReference defines model for advisory.CVRFReference.
type AdvisoryCVRFReference struct {
	Description *string `json:"description,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// AdvisoryCVSS defines model for advisory.CVSS.
type AdvisoryCVSS struct {
	Score    *string `json:"score,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Type     *string `json:"type,omitempty"`
	Vector   *string `json:"vector,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryCVSSV40 defines model for advisory.CVSSV40.
type AdvisoryCVSSV40 struct {
	AttackComplexity   *string `json:"attackComplexity,omitempty"`
	AttackRequirements *string `json:"attackRequirements,omitempty"`
	AttackVector       *string `json:"attackVector,omitempty"`

	// Automatable mod NVD
	Automatable *string `json:"automatable,omitempty"`

	// AvailabilityRequirements mod NVD
	AvailabilityRequirements *string  `json:"availabilityRequirements,omitempty"`
	BaseScore                *float32 `json:"baseScore,omitempty"`
	BaseSeverity             *string  `json:"baseSeverity,omitempty"`

	// ConfidentialityRequirements mod NVD
	ConfidentialityRequirements *string `json:"confidentialityRequirements,omitempty"`
	ExploitMaturity             *string `json:"exploitMaturity,omitempty"`

	// IntegrityRequirements mod NVD
	IntegrityRequirements      *string `json:"integrityRequirements,omitempty"`
	ModifiedAttackComplexity   *string `json:"modifiedAttackComplexity,omitempty"`
	ModifiedAttackRequirements *string `json:"modifiedAttackRequirements,omitempty"`
	ModifiedAttackVector       *string `json:"modifiedAttackVector,omitempty"`
	ModifiedPrivilegesRequired *string `json:"modifiedPrivilegesRequired,omitempty"`

	// ModifiedSubsequentSystemAvailability mod NVD
	ModifiedSubsequentSystemAvailability *string `json:"modifiedSubsequentSystemAvailability,omitempty"`

	// ModifiedSubsequentSystemConfidentiality mod NVD
	ModifiedSubsequentSystemConfidentiality *string `json:"modifiedSubsequentSystemConfidentiality,omitempty"`

	// ModifiedSubsequentSystemIntegrity mod NVD
	ModifiedSubsequentSystemIntegrity *string `json:"modifiedSubsequentSystemIntegrity,omitempty"`
	ModifiedUserInteraction           *string `json:"modifiedUserInteraction,omitempty"`

	// ModifiedVulnerableSystemAvailability mod NVD
	ModifiedVulnerableSystemAvailability *string `json:"modifiedVulnerableSystemAvailability,omitempty"`

	// ModifiedVulnerableSystemConfidentiality mod NVD
	ModifiedVulnerableSystemConfidentiality *string `json:"modifiedVulnerableSystemConfidentiality,omitempty"`

	// ModifiedVulnerableSystemIntegrity mod NVD
	ModifiedVulnerableSystemIntegrity *string `json:"modifiedVulnerableSystemIntegrity,omitempty"`
	PrivilegesRequired                *string `json:"privilegesRequired,omitempty"`
	ProviderUrgency                   *string `json:"providerUrgency,omitempty"`

	// Recovery mod NVD
	Recovery *string `json:"recovery,omitempty"`

	// Safety mod NVD
	Safety *string `json:"safety,omitempty"`

	// SubsequentSystemAvailability mod NVD
	SubsequentSystemAvailability *string `json:"subsequentSystemAvailability,omitempty"`

	// SubsequentSystemConfidentiality mod NVD
	SubsequentSystemConfidentiality *string `json:"subsequentSystemConfidentiality,omitempty"`

	// SubsequentSystemIntegrity mod NVD
	SubsequentSystemIntegrity   *string `json:"subsequentSystemIntegrity,omitempty"`
	UserInteraction             *string `json:"userInteraction,omitempty"`
	ValueDensity                *string `json:"valueDensity,omitempty"`
	VectorString                *string `json:"vectorString,omitempty"`
	Version                     *string `json:"version,omitempty"`
	VulnerabilityResponseEffort *string `json:"vulnerabilityResponseEffort,omitempty"`

	// VulnerableSystemAvailability mod NVD
	VulnerableSystemAvailability *string `json:"vulnerableSystemAvailability,omitempty"`

	// VulnerableSystemConfidentiality mod NVD
	VulnerableSystemConfidentiality *string `json:"vulnerableSystemConfidentiality,omitempty"`

	// VulnerableSystemIntegrity mod NVD
	VulnerableSystemIntegrity *string `json:"vulnerableSystemIntegrity,omitempty"`
}

// AdvisoryCVSSV40Threat defines model for advisory.CVSSV40Threat.
type AdvisoryCVSSV40Threat struct {
	BaseThreatScore    *float32 `json:"baseThreatScore,omitempty"`
	BaseThreatSeverity *string  `json:"baseThreatSeverity,omitempty"`
	ExploitMaturity    *string  `json:"exploitMaturity,omitempty"`
}

// AdvisoryCWENode defines model for advisory.CWENode.
type AdvisoryCWENode struct {
	Cweid       *string `json:"cweid,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AdvisoryCanvasExploit defines model for advisory.CanvasExploit.
type AdvisoryCanvasExploit struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	ExploitPack *string   `json:"exploit_pack,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryCarestreamAdvisory defines model for advisory.CarestreamAdvisory.
type AdvisoryCarestreamAdvisory struct {
	CarestreamId    *string   `json:"carestream_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryCarrier defines model for advisory.Carrier.
type AdvisoryCarrier struct {
	AdvisoryId      *string   `json:"advisory_id,omitempty"`
	AffectedProduct *string   `json:"affected_product,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryCentosPackage defines model for advisory.CentosPackage.
type AdvisoryCentosPackage struct {
	Filename *string `json:"filename,omitempty"`
	Name     *string `json:"name,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryCertBE defines model for advisory.CertBE.
type AdvisoryCertBE struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryCertFRAdvisory defines model for advisory.CertFRAdvisory.
type AdvisoryCertFRAdvisory struct {
	AffectedSystemsFr *string   `json:"affected_systems_fr,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Reference         *string   `json:"reference,omitempty"`
	References        *[]string `json:"references,omitempty"`
	ResumeFr          *string   `json:"resume_fr,omitempty"`
	RisksFr           *string   `json:"risks_fr,omitempty"`
	SolutionFr        *string   `json:"solution_fr,omitempty"`
	SourceFr          *string   `json:"source_fr,omitempty"`
	TitleFr           *string   `json:"title_fr,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// AdvisoryCertIN defines model for advisory.CertIN.
type AdvisoryCertIN struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryCertIRSecurityAlert defines model for advisory.CertIRSecurityAlert.
type AdvisoryCertIRSecurityAlert struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	SummaryFa  *string   `json:"summary_fa,omitempty"`
	TitleFa    *string   `json:"title_fa,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryCertSE defines model for advisory.CertSE.
type AdvisoryCertSE struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	SummarySv *string   `json:"summary_sv,omitempty"`
	TitleSv   *string   `json:"title_sv,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCertUA defines model for advisory.CertUA.
type AdvisoryCertUA struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	SummaryUa  *string   `json:"summary_ua,omitempty"`
	TitleUa    *string   `json:"title_ua,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryChainGuard defines model for advisory.ChainGuard.
type AdvisoryChainGuard struct {
	Apkurl *string   `json:"apkurl,omitempty"`
	Archs  *[]string `json:"archs,omitempty"`

	// DateAdded un-used
	DateAdded *string                      `json:"date_added,omitempty"`
	Packages  *[]AdvisoryChainGuardPackage `json:"packages,omitempty"`
	Reponame  *string                      `json:"reponame,omitempty"`
	Urlprefix *string                      `json:"urlprefix,omitempty"`
}

// AdvisoryChainGuardPackage defines model for advisory.ChainGuardPackage.
type AdvisoryChainGuardPackage struct {
	Name     *string                     `json:"name,omitempty"`
	Secfixes *[]AdvisoryChainGuardSecFix `json:"secfixes,omitempty"`
}

// AdvisoryChainGuardSecFix defines model for advisory.ChainGuardSecFix.
type AdvisoryChainGuardSecFix struct {
	Cve     *[]string `json:"cve,omitempty"`
	Version *string   `json:"version,omitempty"`
}

// AdvisoryCheckPoint defines model for advisory.CheckPoint.
type AdvisoryCheckPoint struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	DateUpdated *string   `json:"date_updated,omitempty"`
	Reference   *string   `json:"reference,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryChrome defines model for advisory.Chrome.
type AdvisoryChrome struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCiscoAdvisory defines model for advisory.CiscoAdvisory.
type AdvisoryCiscoAdvisory struct {
	// CiscoBugId multiple
	CiscoBugId *string `json:"ciscoBugId,omitempty"`
	Csaf       *string `json:"csaf,omitempty"`

	// Cve multiple
	Cve  *[]string `json:"cve,omitempty"`
	Cvrf *string   `json:"cvrf,omitempty"`

	// Cwe multiple
	Cwe              *string `json:"cwe,omitempty"`
	DateAdded        *string `json:"date_added,omitempty"`
	Id               *int    `json:"id,omitempty"`
	Identifier       *string `json:"identifier,omitempty"`
	Name             *string `json:"name,omitempty"`
	RelatedResources *string `json:"related_resources,omitempty"`
	Severity         *string `json:"severity,omitempty"`
	Status           *string `json:"status,omitempty"`
	Summary          *string `json:"summary,omitempty"`
	Title            *string `json:"title,omitempty"`
	TotalCount       *int    `json:"totalCount,omitempty"`
	Url              *string `json:"url,omitempty"`
	Version          *string `json:"version,omitempty"`
	Workarounds      *string `json:"workarounds,omitempty"`
	WorkflowStatus   *string `json:"workflowStatus,omitempty"`
}

// AdvisoryCitrixAdvisory defines model for advisory.CitrixAdvisory.
type AdvisoryCitrixAdvisory struct {
	CitrixId    *string   `json:"citrixId,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Link        *string   `json:"link,omitempty"`
	Products    *[]string `json:"products,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryClarotyVulnerability defines model for advisory.ClarotyVulnerability.
type AdvisoryClarotyVulnerability struct {
	AdvisoryUrl       *string   `json:"advisory_url,omitempty"`
	ClarotyUrl        *string   `json:"claroty_url,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	CvssV3            *float32  `json:"cvss_v3,omitempty"`
	Cwe               *string   `json:"cwe,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Product           *string   `json:"product,omitempty"`
	Target            *string   `json:"target,omitempty"`
	Vendor            *string   `json:"vendor,omitempty"`
	VendorAdvisoryUrl *string   `json:"vendor_advisory_url,omitempty"`
}

// AdvisoryCloudBees defines model for advisory.CloudBees.
type AdvisoryCloudBees struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCloudVulnDBAdvisory defines model for advisory.CloudVulnDBAdvisory.
type AdvisoryCloudVulnDBAdvisory struct {
	AffectedServices *string   `json:"affectedServices,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Link             *string   `json:"link,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Title            *string   `json:"title,omitempty"`
}

// AdvisoryCodesysAdvisory defines model for advisory.CodesysAdvisory.
type AdvisoryCodesysAdvisory struct {
	CodesysId       *string   `json:"codesys_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryCompassSecurity defines model for advisory.CompassSecurity.
type AdvisoryCompassSecurity struct {
	CsncId       *string   `json:"csnc_id,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Effect       *string   `json:"effect,omitempty"`
	Introduction *string   `json:"introduction,omitempty"`
	Product      *string   `json:"product,omitempty"`
	References   *[]string `json:"references,omitempty"`
	Risk         *string   `json:"risk,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Url          *string   `json:"url,omitempty"`
	Vendor       *string   `json:"vendor,omitempty"`
}

// AdvisoryContainerOS defines model for advisory.ContainerOS.
type AdvisoryContainerOS struct {
	Cve       *[]string            `json:"cve,omitempty"`
	DateAdded *string              `json:"date_added,omitempty"`
	Title     *string              `json:"title,omitempty"`
	Updates   *[]AdvisoryCOSUpdate `json:"updates,omitempty"`
	Url       *string              `json:"url,omitempty"`
}

// AdvisoryCorrection defines model for advisory.Correction.
type AdvisoryCorrection struct {
	CorrectedAt *string `json:"correctedAt,omitempty"`
	Orelease    *string `json:"orelease,omitempty"`
	Release     *string `json:"release,omitempty"`
}

// AdvisoryCredit defines model for advisory.Credit.
type AdvisoryCredit struct {
	Lang  *string `json:"lang,omitempty"`
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryCrestron defines model for advisory.Crestron.
type AdvisoryCrestron struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Threat     *string   `json:"threat,omitempty"`
	Title      *string   `json:"title,omitempty"`
}

// AdvisoryCurl defines model for advisory.Curl.
type AdvisoryCurl struct {
	Cve       *[]string      `json:"cve,omitempty"`
	DateAdded *string        `json:"date_added,omitempty"`
	Info      *AdvisoryOCurl `json:"info,omitempty"`
	Url       *string        `json:"url,omitempty"`
}

// AdvisoryCurlAffected defines model for advisory.CurlAffected.
type AdvisoryCurlAffected struct {
	Ranges   *[]AdvisoryCurlRange `json:"ranges,omitempty"`
	Versions *[]string            `json:"versions,omitempty"`
}

// AdvisoryCurlCWE defines model for advisory.CurlCWE.
type AdvisoryCurlCWE struct {
	Desc *string `json:"desc,omitempty"`
	Id   *string `json:"id,omitempty"`
}

// AdvisoryCurlCredit defines model for advisory.CurlCredit.
type AdvisoryCurlCredit struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// AdvisoryCurlRange defines model for advisory.CurlRange.
type AdvisoryCurlRange struct {
	Events *[]map[string]string `json:"events,omitempty"`
	Repo   *string              `json:"repo,omitempty"`
	Type   *string              `json:"type,omitempty"`
}

// AdvisoryCvrf defines model for advisory.Cvrf.
type AdvisoryCvrf struct {
	Cve             *[]string                 `json:"cve,omitempty"`
	Notes           *[]AdvisoryDocumentNote   `json:"notes,omitempty"`
	ProductTree     *AdvisoryProductTree      `json:"productTree,omitempty"`
	References      *[]AdvisoryCVRFReference  `json:"references,omitempty"`
	Title           *string                   `json:"title,omitempty"`
	Tracking        *AdvisoryDocumentTracking `json:"tracking,omitempty"`
	Vulnerabilities *[]AdvisoryVulnerability  `json:"vulnerabilities,omitempty"`
}

// AdvisoryCwes defines model for advisory.Cwes.
type AdvisoryCwes struct {
	Nodes      *[]AdvisoryCWENode `json:"nodes,omitempty"`
	TotalCount *int               `json:"totalCount,omitempty"`
}

// AdvisoryDBSpecific defines model for advisory.DBSpecific.
type AdvisoryDBSpecific struct {
	CWE          *AdvisoryCurlCWE `json:"CWE,omitempty"`
	Award        *AdvisoryAward   `json:"award,omitempty"`
	LastAffected *string          `json:"last_affected,omitempty"`
	Package      *string          `json:"package,omitempty"`
	Severity     *string          `json:"severity,omitempty"`
	Url          *string          `json:"url,omitempty"`
	Www          *string          `json:"www,omitempty"`
}

// AdvisoryDNN defines model for advisory.DNN.
type AdvisoryDNN struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryDahua defines model for advisory.Dahua.
type AdvisoryDahua struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryDassault defines model for advisory.Dassault.
type AdvisoryDassault struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Title            *string   `json:"title,omitempty"`
	UpdatedAt        *string   `json:"updated_at,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryDateTime defines model for advisory.DateTime.
type AdvisoryDateTime struct {
	Date *string `json:"date,omitempty"`
}

// AdvisoryDebianCVE defines model for advisory.DebianCVE.
type AdvisoryDebianCVE struct {
	Cve         *string                          `json:"cve,omitempty"`
	Debianbug   *int                             `json:"debianbug,omitempty"`
	Description *string                          `json:"description,omitempty"`
	Releases    *[]AdvisoryAffectedDebianRelease `json:"releases,omitempty"`
	Scope       *string                          `json:"scope,omitempty"`
	Url         *string                          `json:"url,omitempty"`
}

// AdvisoryDebianSecurityAdvisory defines model for advisory.DebianSecurityAdvisory.
type AdvisoryDebianSecurityAdvisory struct {
	AffectedPackages *[]AdvisoryAffectedDebianPackage `json:"affected_packages,omitempty"`
	Cve              *[]string                        `json:"cve,omitempty"`
	DateAdded        *string                          `json:"date_added,omitempty"`
	Dsa              *string                          `json:"dsa,omitempty"`
	Title            *string                          `json:"title,omitempty"`
	Url              *string                          `json:"url,omitempty"`
}

// AdvisoryDell defines model for advisory.Dell.
type AdvisoryDell struct {
	CombinedProductList *string   `json:"combinedProductList,omitempty"`
	Cve                 *[]string `json:"cve,omitempty"`
	DateAdded           *string   `json:"date_added,omitempty"`
	Severity            *string   `json:"severity,omitempty"`
	Title               *string   `json:"title,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryDeltaAdvisory defines model for advisory.DeltaAdvisory.
type AdvisoryDeltaAdvisory struct {
	AffectedProducts  *string   `json:"affectedProducts,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	Cvss              *string   `json:"cvss,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Description       *string   `json:"description,omitempty"`
	Link              *string   `json:"link,omitempty"`
	RecommendedAction *string   `json:"recommendedAction,omitempty"`
	Title             *string   `json:"title,omitempty"`
}

// AdvisoryDjango defines model for advisory.Django.
type AdvisoryDjango struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryDocumentMetadata defines model for advisory.DocumentMetadata.
type AdvisoryDocumentMetadata struct {
	Category     *string                   `json:"category,omitempty"`
	CsafVersion  *string                   `json:"csaf_version,omitempty"`
	Distribution *AdvisoryCSAFDistribution `json:"distribution,omitempty"`
	Lang         *string                   `json:"lang,omitempty"`

	// Notes used by ncsc
	Notes      *[]AdvisoryCSAFNote      `json:"notes,omitempty"`
	Publisher  *AdvisoryPublisher       `json:"publisher,omitempty"`
	References *[]AdvisoryCSAFReference `json:"references,omitempty"`

	// Title Aggregate severity is a vehicle that is provided by the document producer to convey the urgency and
	// criticality with which the one or more vulnerabilities reported should be addressed.
	Title    *string           `json:"title,omitempty"`
	Tracking *AdvisoryTracking `json:"tracking,omitempty"`
}

// AdvisoryDocumentNote defines model for advisory.DocumentNote.
type AdvisoryDocumentNote struct {
	Text  *string `json:"text,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryDocumentPublisher defines model for advisory.DocumentPublisher.
type AdvisoryDocumentPublisher struct {
	ContactDetails   *string `json:"contact_details,omitempty"`
	IssuingAuthority *string `json:"issuing_authority,omitempty"`

	// Type the json for this is missing/broke
	Type *int `json:"type,omitempty"`
}

// AdvisoryDocumentTracking defines model for advisory.DocumentTracking.
type AdvisoryDocumentTracking struct {
	CurrentReleaseDate *string             `json:"currentReleaseDate,omitempty"`
	Id                 *string             `json:"id,omitempty"`
	InitialReleaseDate *string             `json:"initialReleaseDate,omitempty"`
	RevisionHistory    *[]AdvisoryRevision `json:"revisionHistory,omitempty"`
	Status             *string             `json:"status,omitempty"`
	Version            *string             `json:"version,omitempty"`
}

// AdvisoryDotCMS defines model for advisory.DotCMS.
type AdvisoryDotCMS struct {
	Credit       *string   `json:"credit,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Description  *string   `json:"description,omitempty"`
	FixedVersion *string   `json:"fixed_version,omitempty"`
	IssueId      *string   `json:"issue_id,omitempty"`
	Mitigation   *string   `json:"mitigation,omitempty"`
	References   *[]string `json:"references,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// AdvisoryDragosAdvisory defines model for advisory.DragosAdvisory.
type AdvisoryDragosAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryDraytek defines model for advisory.Draytek.
type AdvisoryDraytek struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEOLReleaseData defines model for advisory.EOLReleaseData.
type AdvisoryEOLReleaseData struct {
	AlreadyEol *bool `json:"already_eol,omitempty"`

	// Branch Alpine Linux
	Branch *string `json:"branch,omitempty"`

	// BranchUrl Alpine Linux
	BranchUrl *string `json:"branch_url,omitempty"`
	Codename  *string `json:"codename,omitempty"`
	Cpe       *string `json:"cpe,omitempty"`
	EolDate   *string `json:"eol_date,omitempty"`

	// EolDateExtendedSupport Oracle Linux, Solaris
	EolDateExtendedSupport *string `json:"eol_date_extended_support,omitempty"`

	// EolDatePremierSupport Oracle Linux, Solaris
	EolDatePremierSupport *string `json:"eol_date_premier_support,omitempty"`
	EolEltsDate           *string `json:"eol_elts_date,omitempty"`
	EolLtsDate            *string `json:"eol_lts_date,omitempty"`

	// GitBranch Alpine Linux
	GitBranch *string `json:"git_branch,omitempty"`

	// GitBranchUrl Alpine Linux
	GitBranchUrl *string `json:"git_branch_url,omitempty"`

	// Lts Ubuntu
	Lts *bool `json:"lts,omitempty"`

	// MinorReleases Alpine Linux
	MinorReleases *[]string `json:"minor_releases,omitempty"`
	Product       *string   `json:"product,omitempty"`
	ReleaseDate   *string   `json:"release_date,omitempty"`
	ReleaseName   *string   `json:"release_name,omitempty"`
	SourceUrl     *string   `json:"source_url,omitempty"`

	// TechnologyLevel AIX
	TechnologyLevel *string `json:"technology_level,omitempty"`
	Vendor          *string `json:"vendor,omitempty"`
	Version         *string `json:"version,omitempty"`

	// VersionApi Android
	VersionApi *string `json:"version_api,omitempty"`

	// VersionDarwin macOS
	VersionDarwin *string `json:"version_darwin,omitempty"`

	// VersionSunos Solaris
	VersionSunos *string `json:"version_sunos,omitempty"`

	// WindowsCurrentBuild Microsoft Windows
	WindowsCurrentBuild *string `json:"windows_current_build,omitempty"`

	// WindowsDisplayVersion Microsoft Windows
	WindowsDisplayVersion *string `json:"windows_display_version,omitempty"`

	// WindowsEditionId Microsoft Windows
	WindowsEditionId *string `json:"windows_edition_id,omitempty"`

	// WindowsInsiderPreview Microsoft Windows
	WindowsInsiderPreview *bool `json:"windows_insider_preview,omitempty"`
}

// AdvisoryEatonAdvisory defines model for advisory.EatonAdvisory.
type AdvisoryEatonAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	EatonId   *string   `json:"eaton_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEcoSystem defines model for advisory.EcoSystem.
type AdvisoryEcoSystem struct {
	Severity *string `json:"severity,omitempty"`
	Spl      *string `json:"spl,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// AdvisoryElastic defines model for advisory.Elastic.
type AdvisoryElastic struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Esaid       *string   `json:"esaid,omitempty"`
	Remediation *string   `json:"remediation,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
}

// AdvisoryElspec defines model for advisory.Elspec.
type AdvisoryElspec struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Severity  *string   `json:"severity,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEmergingThreatsSnort defines model for advisory.EmergingThreatsSnort.
type AdvisoryEmergingThreatsSnort struct {
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	References   *[]string `json:"references,omitempty"`
	Rev          *string   `json:"rev,omitempty"`
	RuleDisabled *bool     `json:"rule_disabled,omitempty"`
	RuleName     *string   `json:"rule_name,omitempty"`
	Sid          *int      `json:"sid,omitempty"`
	UpdatedAt    *string   `json:"updated_at,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// AdvisoryEmersonAdvisory defines model for advisory.EmersonAdvisory.
type AdvisoryEmersonAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	EmersonId *string   `json:"emerson_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEvent defines model for advisory.Event.
type AdvisoryEvent struct {
	Fixed        *string `json:"fixed,omitempty"`
	Introduced   *string `json:"introduced,omitempty"`
	LastAffected *string `json:"last_affected,omitempty"`
	Limit        *string `json:"limit,omitempty"`
}

// AdvisoryExodusIntel defines model for advisory.ExodusIntel.
type AdvisoryExodusIntel struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DisclosedPublic *string   `json:"disclosed_public,omitempty"`
	DisclosedVendor *string   `json:"disclosed_vendor,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryExploitDBExploitv2 defines model for advisory.ExploitDBExploitv2.
type AdvisoryExploitDBExploitv2 struct {
	Author    *string   `json:"author,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	EdbId     *string   `json:"edb_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFSecure defines model for advisory.FSecure.
type AdvisoryFSecure struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFanuc defines model for advisory.Fanuc.
type AdvisoryFanuc struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFastly defines model for advisory.Fastly.
type AdvisoryFastly struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFileCloud defines model for advisory.FileCloud.
type AdvisoryFileCloud struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFixAff defines model for advisory.FixAff.
type AdvisoryFixAff struct {
	AffectedSince *string `json:"affected_since,omitempty"`
	FixedVersion  *string `json:"fixed_version,omitempty"`
	PatchUrl      *string `json:"patch_url,omitempty"`
}

// AdvisoryFlag defines model for advisory.Flag.
type AdvisoryFlag struct {
	Date       *string   `json:"date,omitempty"`
	GroupIds   *[]string `json:"group_ids,omitempty"`
	Label      *string   `json:"label,omitempty"`
	ProductIds *[]string `json:"product_ids,omitempty"`
}

// AdvisoryFlattSecurity defines model for advisory.FlattSecurity.
type AdvisoryFlattSecurity struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryForgeRock defines model for advisory.ForgeRock.
type AdvisoryForgeRock struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Updated    *string   `json:"updated,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryFortinetAdvisory defines model for advisory.FortinetAdvisory.
type AdvisoryFortinetAdvisory struct {
	Acknowledgement  *string   `json:"acknowledgement,omitempty"`
	AffectedProducts *[]string `json:"affectedProducts,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	Cvssv3           *string   `json:"cvssv3,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Irnumber         *string   `json:"irnumber,omitempty"`
	Link             *string   `json:"link,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Solutions        *[]string `json:"solutions,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
}

// AdvisoryFortinetIPS defines model for advisory.FortinetIPS.
type AdvisoryFortinetIPS struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Epss       *string   `json:"epss,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryFoxit defines model for advisory.Foxit.
type AdvisoryFoxit struct {
	Affected  *[]AdvisoryFoxitAffected `json:"affected,omitempty"`
	Cve       *[]string                `json:"cve,omitempty"`
	DateAdded *string                  `json:"date_added,omitempty"`
	Summary   *string                  `json:"summary,omitempty"`
	Title     *string                  `json:"title,omitempty"`
	Url       *string                  `json:"url,omitempty"`
}

// AdvisoryFoxitAffected defines model for advisory.FoxitAffected.
type AdvisoryFoxitAffected struct {
	Product *string `json:"product,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryGCP defines model for advisory.GCP.
type AdvisoryGCP struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryGEGas defines model for advisory.GEGas.
type AdvisoryGEGas struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryGEHealthcareAdvisory defines model for advisory.GEHealthcareAdvisory.
type AdvisoryGEHealthcareAdvisory struct {
	BaseScore       *string   `json:"base_score,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Description     *string   `json:"description,omitempty"`
	References      *[]string `json:"references,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryGHAdvisoryJSONLean defines model for advisory.GHAdvisoryJSONLean.
type AdvisoryGHAdvisoryJSONLean struct {
	Classification         *string                    `json:"classification,omitempty"`
	Cve                    *[]string                  `json:"cve,omitempty"`
	Cvss                   *AdvisoryGHCvss            `json:"cvss,omitempty"`
	Cwes                   *AdvisoryCwes              `json:"cwes,omitempty"`
	DatabaseId             *int                       `json:"databaseId,omitempty"`
	Description            *string                    `json:"description,omitempty"`
	GhsaId                 *string                    `json:"ghsaId,omitempty"`
	Id                     *string                    `json:"id,omitempty"`
	Identifiers            *[]AdvisoryGHIdentifier    `json:"identifiers,omitempty"`
	NotificationsPermalink *string                    `json:"notificationsPermalink,omitempty"`
	Origin                 *string                    `json:"origin,omitempty"`
	Permalink              *string                    `json:"permalink,omitempty"`
	PublishedAt            *string                    `json:"publishedAt,omitempty"`
	References             *[]AdvisoryGHReference     `json:"references,omitempty"`
	Severity               *string                    `json:"severity,omitempty"`
	Summary                *string                    `json:"summary,omitempty"`
	UpdatedAt              *string                    `json:"updatedAt,omitempty"`
	Vulnerabilities        *AdvisoryGHVulnerabilities `json:"vulnerabilities,omitempty"`
	WithdrawnAt            *string                    `json:"withdrawnAt,omitempty"`
}

// AdvisoryGHCvss defines model for advisory.GHCvss.
type AdvisoryGHCvss struct {
	Score        *float32 `json:"score,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
}

// AdvisoryGHIdentifier defines model for advisory.GHIdentifier.
type AdvisoryGHIdentifier struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryGHNode defines model for advisory.GHNode.
type AdvisoryGHNode struct {
	Package                *AdvisoryGHPackage `json:"package,omitempty"`
	Severity               *string            `json:"severity,omitempty"`
	UpdatedAt              *string            `json:"updatedAt,omitempty"`
	VulnerableVersionRange *string            `json:"vulnerableVersionRange,omitempty"`
}

// AdvisoryGHPackage defines model for advisory.GHPackage.
type AdvisoryGHPackage struct {
	Ecosystem *string `json:"ecosystem,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// AdvisoryGHReference defines model for advisory.GHReference.
type AdvisoryGHReference struct {
	Url *string `json:"url,omitempty"`
}

// AdvisoryGHVulnerabilities defines model for advisory.GHVulnerabilities.
type AdvisoryGHVulnerabilities struct {
	Nodes      *[]AdvisoryGHNode `json:"nodes,omitempty"`
	TotalCount *int              `json:"totalCount,omitempty"`
}

// AdvisoryGallagher defines model for advisory.Gallagher.
type AdvisoryGallagher struct {
	ActiveExploitation *bool     `json:"activeExploitation,omitempty"`
	Affected           *string   `json:"affected,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Description        *string   `json:"description,omitempty"`
	Fixes              *string   `json:"fixes,omitempty"`
	ReportedBy         *string   `json:"reportedBy,omitempty"`
	Severity           *string   `json:"severity,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisoryGenetec defines model for advisory.Genetec.
type AdvisoryGenetec struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryGigabyte defines model for advisory.Gigabyte.
type AdvisoryGigabyte struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryGitHubExploit defines model for advisory.GitHubExploit.
type AdvisoryGitHubExploit struct {
	CloneHttpsUrl     *string `json:"clone_https_url,omitempty"`
	CloneSshUrl       *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	CurrentlyTrending *bool   `json:"currently_trending,omitempty"`
	Cve               *string `json:"cve,omitempty"`
	DateAdded         *string `json:"date_added,omitempty"`
	DateLastRevised   *string `json:"date_last_revised,omitempty"`
	ExploitType       *string `json:"exploit_type,omitempty"`
	Forks             *int    `json:"forks,omitempty"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Id                *string `json:"id,omitempty"`
	Language          *string `json:"language,omitempty"`
	ReferenceUrl      *string `json:"reference_url,omitempty"`
	Refsource         *string `json:"refsource,omitempty"`
	RepoFullPath      *string `json:"repo_full_path,omitempty"`
	RepoId            *string `json:"repo_id,omitempty"`
	RepoName          *string `json:"repo_name,omitempty"`
	RepoOwner         *string `json:"repo_owner,omitempty"`
	Stars             *int    `json:"stars,omitempty"`
}

// AdvisoryGitLabExploit defines model for advisory.GitLabExploit.
type AdvisoryGitLabExploit struct {
	CloneHttpsUrl     *string `json:"clone_https_url,omitempty"`
	CloneSshUrl       *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	Cve               *string `json:"cve,omitempty"`
	DateAdded         *string `json:"date_added,omitempty"`
	DateLastRevised   *string `json:"date_last_revised,omitempty"`
	ExploitType       *string `json:"exploit_type,omitempty"`
	Forks             *int    `json:"forks,omitempty"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Language          *string `json:"language,omitempty"`
	ReferenceUrl      *string `json:"reference_url,omitempty"`
	Refsource         *string `json:"refsource,omitempty"`
	RepoFullPath      *string `json:"repo_full_path,omitempty"`
	RepoId            *string `json:"repo_id,omitempty"`
	RepoName          *string `json:"repo_name,omitempty"`
	RepoOwner         *string `json:"repo_owner,omitempty"`
	Stars             *int    `json:"stars,omitempty"`
}

// AdvisoryGiteeExploit defines model for advisory.GiteeExploit.
type AdvisoryGiteeExploit struct {
	CloneHttpsUrl     *string `json:"clone_https_url,omitempty"`
	CloneSshUrl       *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	Cve               *string `json:"cve,omitempty"`
	DateAdded         *string `json:"date_added,omitempty"`
	DateLastRevised   *string `json:"date_last_revised,omitempty"`
	ExploitType       *string `json:"exploit_type,omitempty"`
	Forks             *int    `json:"forks,omitempty"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Language          *string `json:"language,omitempty"`
	ReferenceUrl      *string `json:"reference_url,omitempty"`
	Refsource         *string `json:"refsource,omitempty"`
	RepoFullPath      *string `json:"repo_full_path,omitempty"`
	RepoId            *string `json:"repo_id,omitempty"`
	RepoName          *string `json:"repo_name,omitempty"`
	RepoOwner         *string `json:"repo_owner,omitempty"`
	Stars             *int    `json:"stars,omitempty"`
}

// AdvisoryGitlabAdvisory defines model for advisory.GitlabAdvisory.
type AdvisoryGitlabAdvisory struct {
	AffectedRange    *string   `json:"affected_range,omitempty"`
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	CvssV2           *string   `json:"cvss_v2,omitempty"`
	CvssV3           *string   `json:"cvss_v3,omitempty"`
	Cwe              *[]string `json:"cwe,omitempty"`
	Date             *string   `json:"date,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Filename         *string   `json:"filename,omitempty"`
	FixedVersions    *[]string `json:"fixed_versions,omitempty"`
	Ghsa             *[]string `json:"ghsa,omitempty"`
	GitlabUrl        *string   `json:"gitlab_url,omitempty"`
	Identifier       *string   `json:"identifier,omitempty"`
	Identifiers      *[]string `json:"identifiers,omitempty"`
	NotImpacted      *string   `json:"not_impacted,omitempty"`
	PackageManager   *string   `json:"package_manager,omitempty"`
	PackageName      *string   `json:"package_name,omitempty"`
	PackageSlug      *string   `json:"package_slug,omitempty"`
	Pubdate          *string   `json:"pubdate,omitempty"`
	Solution         *string   `json:"solution,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Urls             *[]string `json:"urls,omitempty"`
	Uuid             *string   `json:"uuid,omitempty"`
}

// AdvisoryGnuTLS defines model for advisory.GnuTLS.
type AdvisoryGnuTLS struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryGrafana defines model for advisory.Grafana.
type AdvisoryGrafana struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryGreyNoiseDetection defines model for advisory.GreyNoiseDetection.
type AdvisoryGreyNoiseDetection struct {
	Category       *string                  `json:"category,omitempty"`
	Cve            *[]string                `json:"cve,omitempty"`
	DateAdded      *string                  `json:"date_added,omitempty"`
	Description    *string                  `json:"description,omitempty"`
	Id             *string                  `json:"id,omitempty"`
	Intention      *string                  `json:"intention,omitempty"`
	Label          *string                  `json:"label,omitempty"`
	Name           *string                  `json:"name,omitempty"`
	RecommendBlock *bool                    `json:"recommend_block,omitempty"`
	References     *[]string                `json:"references,omitempty"`
	RelatedTags    *[]AdvisoryGreyNoiseTags `json:"related_tags,omitempty"`
	Slug           *string                  `json:"slug,omitempty"`
	Url            *string                  `json:"url,omitempty"`
}

// AdvisoryGreyNoiseTags defines model for advisory.GreyNoiseTags.
type AdvisoryGreyNoiseTags struct {
	Category  *string `json:"category,omitempty"`
	Id        *string `json:"id,omitempty"`
	Intention *string `json:"intention,omitempty"`
	Name      *string `json:"name,omitempty"`
	Slug      *string `json:"slug,omitempty"`
}

// AdvisoryHCL defines model for advisory.HCL.
type AdvisoryHCL struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryHIKVision defines model for advisory.HIKVision.
type AdvisoryHIKVision struct {
	AdvisoryId  *string   `json:"advisory_id,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Link        *string   `json:"link,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryHKCert defines model for advisory.HKCert.
type AdvisoryHKCert struct {
	Affected     *[]string `json:"affected,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Impact       *string   `json:"impact,omitempty"`
	Link         *string   `json:"link,omitempty"`
	RelatedLinks *[]string `json:"relatedLinks,omitempty"`
	Risk         *string   `json:"risk,omitempty"`
	Solutions    *string   `json:"solutions,omitempty"`
	Summary      *string   `json:"summary,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// AdvisoryHP defines model for advisory.HP.
type AdvisoryHP struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Severity  *string   `json:"severity,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryHardwareUpdate defines model for advisory.HardwareUpdate.
type AdvisoryHardwareUpdate struct {
	AffectedVersions *string   `json:"affectedVersions,omitempty"`
	Cves             *[]string `json:"cves,omitempty"`
	HardwarePlatform *string   `json:"hardwarePlatform,omitempty"`
	System           *string   `json:"system,omitempty"`
	UpdatedVersion   *string   `json:"updatedVersion,omitempty"`
}

// AdvisoryHarmonyOS defines model for advisory.HarmonyOS.
type AdvisoryHarmonyOS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHashiCorp defines model for advisory.HashiCorp.
type AdvisoryHashiCorp struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Background       *string   `json:"background,omitempty"`
	BulletinId       *string   `json:"bulletin_id,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Remediation      *string   `json:"remediation,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryHaskellSADBAdvisory defines model for advisory.HaskellSADBAdvisory.
type AdvisoryHaskellSADBAdvisory struct {
	AdvisoryId       *string                        `json:"advisory_id,omitempty"`
	AffectedPackages *[]AdvisoryHaskellSADBAffected `json:"affected_packages,omitempty"`
	Aliases          *[]string                      `json:"aliases,omitempty"`
	Cves             *[]string                      `json:"cves,omitempty"`
	Cwes             *[]int                         `json:"cwes,omitempty"`
	DateAdded        *string                        `json:"date_added,omitempty"`
	Keywords         *[]string                      `json:"keywords,omitempty"`
	References       *map[string][]string           `json:"references,omitempty"`
	RelatedVulns     *[]string                      `json:"related_vulns,omitempty"`
}

// AdvisoryHaskellSADBAffected defines model for advisory.HaskellSADBAffected.
type AdvisoryHaskellSADBAffected struct {
	// AffectedConstraint We produce AffectedConstraint based on AffectedVersions
	AffectedConstraint *string                       `json:"affected_constraint,omitempty"`
	AffectedVersions   *[]AdvisoryHaskellSADBVersion `json:"affected_versions,omitempty"`
	Arch               *[]string                     `json:"arch,omitempty"`
	Cvss               *string                       `json:"cvss,omitempty"`
	Os                 *[]string                     `json:"os,omitempty"`
	Package            *string                       `json:"package,omitempty"`
}

// AdvisoryHaskellSADBVersion defines model for advisory.HaskellSADBVersion.
type AdvisoryHaskellSADBVersion struct {
	Fixed      *string `json:"fixed,omitempty"`
	Introduced *string `json:"introduced,omitempty"`
}

// AdvisoryHillromAdvisory defines model for advisory.HillromAdvisory.
type AdvisoryHillromAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHitachi defines model for advisory.Hitachi.
type AdvisoryHitachi struct {
	AffectedProducts *string   `json:"affectedProducts,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	FixedProducts    *string   `json:"fixedProducts,omitempty"`
	HitachiId        *string   `json:"hitachiId,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryHitachiEnergy defines model for advisory.HitachiEnergy.
type AdvisoryHitachiEnergy struct {
	CsafUrl   *string   `json:"csaf_url,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHoneywell defines model for advisory.Honeywell.
type AdvisoryHoneywell struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHuawei defines model for advisory.Huawei.
type AdvisoryHuawei struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	SaNumber  *string   `json:"sa_number,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHuaweiEulerOS defines model for advisory.HuaweiEulerOS.
type AdvisoryHuaweiEulerOS struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Packages    *string   `json:"packages,omitempty"`
	Products    *[]string `json:"products,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Synopsis    *string   `json:"synopsis,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryHuaweiIPS defines model for advisory.HuaweiIPS.
type AdvisoryHuaweiIPS struct {
	Cnnvd       *string   `json:"cnnvd,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	DateUpdated *string   `json:"date_updated,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	ThreatId    *int      `json:"threat_id,omitempty"`
	Url         *string   `json:"url,omitempty"`
	Vendor      *string   `json:"vendor,omitempty"`
}

// AdvisoryIAVA defines model for advisory.IAVA.
type AdvisoryIAVA struct {
	IAVA *string   `json:"IAVA,omitempty"`
	Cve  *[]string `json:"cve,omitempty"`
}

// AdvisoryIBM defines model for advisory.IBM.
type AdvisoryIBM struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryITW defines model for advisory.ITW.
type AdvisoryITW struct {
	Cve       *string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	Title     *string `json:"title,omitempty"`
}

// AdvisoryITWExploit defines model for advisory.ITWExploit.
type AdvisoryITWExploit struct {
	Advisory                    *string   `json:"advisory,omitempty"`
	AffectedVersions            *string   `json:"affected_versions,omitempty"`
	AnalysisUrl                 *string   `json:"analysis_url,omitempty"`
	BugIntroducingChangeListUrl *string   `json:"bug_introducing_change_list_url,omitempty"`
	ClaimedAttribution          *string   `json:"claimed_attribution,omitempty"`
	ClaimedAttributionUrl       *string   `json:"claimed_attribution_url,omitempty"`
	Cve                         *[]string `json:"cve,omitempty"`
	DateAdded                   *string   `json:"date_added,omitempty"`
	DateDiscovered              *string   `json:"date_discovered,omitempty"`
	DatePatched                 *string   `json:"date_patched,omitempty"`
	Description                 *string   `json:"description,omitempty"`
	FirstPatchedVersion         *string   `json:"first_patched_version,omitempty"`
	PatchChangeListUrl          *string   `json:"patch_change_list_url,omitempty"`
	Product                     *string   `json:"product,omitempty"`
	ReportedBy                  *string   `json:"reported_by,omitempty"`
	RootCauseAnalysisUrl        *string   `json:"root_cause_analysis_url,omitempty"`
	Vendor                      *string   `json:"vendor,omitempty"`
	VulnerabilityType           *string   `json:"vulnerability_type,omitempty"`
}

// AdvisoryIVal defines model for advisory.IVal.
type AdvisoryIVal struct {
	Value *string `json:"Value,omitempty"`
}

// AdvisoryIdemia defines model for advisory.Idemia.
type AdvisoryIdemia struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Sbid      *string   `json:"sbid,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryIncibeAdvisory defines model for advisory.IncibeAdvisory.
type AdvisoryIncibeAdvisory struct {
	Affected    *string   `json:"affected,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Detail      *string   `json:"detail,omitempty"`
	Link        *string   `json:"link,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Solution    *string   `json:"solution,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryIntel defines model for advisory.Intel.
type AdvisoryIntel struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryIpIntelRecord defines model for advisory.IpIntelRecord.
type AdvisoryIpIntelRecord struct {
	Asn         *string             `json:"asn,omitempty"`
	City        *string             `json:"city,omitempty"`
	Country     *string             `json:"country,omitempty"`
	CountryCode *string             `json:"country_code,omitempty"`
	Cve         *[]string           `json:"cve,omitempty"`
	FeedIds     *[]string           `json:"feed_ids,omitempty"`
	Hostnames   *[]string           `json:"hostnames,omitempty"`
	Ip          *string             `json:"ip,omitempty"`
	LastSeen    *string             `json:"lastSeen,omitempty"`
	Matches     *[]string           `json:"matches,omitempty"`
	Port        *int                `json:"port,omitempty"`
	Ssl         *bool               `json:"ssl,omitempty"`
	Type        *AdvisoryRecordType `json:"type,omitempty"`
}

// AdvisoryIsraeliAlert defines model for advisory.IsraeliAlert.
type AdvisoryIsraeliAlert struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	DetailsHe  *string   `json:"details_he,omitempty"`
	HandlingHe *string   `json:"handling_he,omitempty"`
	Link       *string   `json:"link,omitempty"`
	References *[]string `json:"references,omitempty"`
	SummaryHe  *string   `json:"summary_he,omitempty"`
	TitleHe    *string   `json:"title_he,omitempty"`
}

// AdvisoryIsraeliVulnerability defines model for advisory.IsraeliVulnerability.
type AdvisoryIsraeliVulnerability struct {
	ILVNId    *string   `json:"ILVNId,omitempty"`
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Solution  *string   `json:"solution,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryIssued defines model for advisory.Issued.
type AdvisoryIssued struct {
	Date *string `json:"date,omitempty"`
}

// AdvisoryIstio defines model for advisory.Istio.
type AdvisoryIstio struct {
	AffectedVersion *string   `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryIvanti defines model for advisory.Ivanti.
type AdvisoryIvanti struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryIvantiRSS defines model for advisory.IvantiRSS.
type AdvisoryIvantiRSS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryJFrog defines model for advisory.JFrog.
type AdvisoryJFrog struct {
	Cpes      *[]AdvisoryNVD20CVECPEMatch `json:"cpes,omitempty"`
	Cve       *[]string                   `json:"cve,omitempty"`
	DateAdded *string                     `json:"date_added,omitempty"`
	Product   *string                     `json:"product,omitempty"`
	Severity  *string                     `json:"severity,omitempty"`
	Summary   *string                     `json:"summary,omitempty"`
	Url       *string                     `json:"url,omitempty"`
	Versions  *[]string                   `json:"versions,omitempty"`
}

// AdvisoryJNJAdvisory defines model for advisory.JNJAdvisory.
type AdvisoryJNJAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryJVN defines model for advisory.JVN.
type AdvisoryJVN struct {
	AffectedEn    *string   `json:"affected_en,omitempty"`
	AffectedJa    *string   `json:"affected_ja,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	DescriptionEn *string   `json:"description_en,omitempty"`
	DescriptionJa *string   `json:"description_ja,omitempty"`
	Id            *string   `json:"id,omitempty"`
	References    *[]string `json:"references,omitempty"`
	SolutionEn    *string   `json:"solution_en,omitempty"`
	SolutionJa    *string   `json:"solution_ja,omitempty"`
	SummaryEn     *string   `json:"summary_en,omitempty"`
	SummaryJa     *string   `json:"summary_ja,omitempty"`
	TitleEn       *string   `json:"title_en,omitempty"`
	TitleJa       *string   `json:"title_ja,omitempty"`
	UpdatedAt     *string   `json:"updated_at,omitempty"`
	Url           *string   `json:"url,omitempty"`
}

// AdvisoryJVNAdvisoryItem defines model for advisory.JVNAdvisoryItem.
type AdvisoryJVNAdvisoryItem struct {
	Cpe           *[]AdvisoryJVNCPE       `json:"cpe,omitempty"`
	Cve           *[]string               `json:"cve,omitempty"`
	Cvss          *[]AdvisoryCVSS         `json:"cvss,omitempty"`
	DateAdded     *string                 `json:"date_added,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	DescriptionEn *string                 `json:"description_en,omitempty"`
	Identifier    *string                 `json:"identifier,omitempty"`
	Issued        *string                 `json:"issued,omitempty"`
	Modified      *string                 `json:"modified,omitempty"`
	References    *[]AdvisoryJVNReference `json:"references,omitempty"`
	Title         *string                 `json:"title,omitempty"`
	TitleEn       *string                 `json:"title_en,omitempty"`
	Url           *string                 `json:"url,omitempty"`
	UrlEn         *string                 `json:"url_en,omitempty"`
}

// AdvisoryJVNCPE defines model for advisory.JVNCPE.
type AdvisoryJVNCPE struct {
	Cpe     *string `json:"cpe,omitempty"`
	Product *string `json:"product,omitempty"`
	Vendor  *string `json:"vendor,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryJVNReference defines model for advisory.JVNReference.
type AdvisoryJVNReference struct {
	Id     *string `json:"id,omitempty"`
	Source *string `json:"source,omitempty"`
	Title  *string `json:"title,omitempty"`
}

// AdvisoryJenkins defines model for advisory.Jenkins.
type AdvisoryJenkins struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fix       *string   `json:"fix,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryJetBrains defines model for advisory.JetBrains.
type AdvisoryJetBrains struct {
	Cve         *[]string `json:"cve,omitempty"`
	Cwe         *string   `json:"cwe,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Product     *string   `json:"product,omitempty"`
	ResolvedIn  *[]string `json:"resolved_in,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryK8S defines model for advisory.K8S.
type AdvisoryK8S struct {
	Content   *string   `json:"content,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	IssueId   *int      `json:"issue_id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryKEVCatalogVulnerability defines model for advisory.KEVCatalogVulnerability.
type AdvisoryKEVCatalogVulnerability struct {
	Cve                        *[]string `json:"cve,omitempty"`
	DateAdded                  *string   `json:"date_added,omitempty"`
	DueDate                    *string   `json:"dueDate,omitempty"`
	KnownRansomwareCampaignUse *string   `json:"knownRansomwareCampaignUse,omitempty"`
	Notes                      *string   `json:"notes,omitempty"`
	Product                    *string   `json:"product,omitempty"`
	RequiredAction             *string   `json:"requiredAction,omitempty"`
	ShortDescription           *string   `json:"shortDescription,omitempty"`
	VendorProject              *string   `json:"vendorProject,omitempty"`
	VulnerabilityName          *string   `json:"vulnerabilityName,omitempty"`
}

// AdvisoryKRCertAdvisory defines model for advisory.KRCertAdvisory.
type AdvisoryKRCertAdvisory struct {
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	DescriptionKo *string   `json:"description_ko,omitempty"`
	Link          *string   `json:"link,omitempty"`
	OverviewKo    *string   `json:"overview_ko,omitempty"`
	References    *[]string `json:"references,omitempty"`
	TitleKo       *string   `json:"title_ko,omitempty"`
}

// AdvisoryKasperskyICSCERTAdvisory defines model for advisory.KasperskyICSCERTAdvisory.
type AdvisoryKasperskyICSCERTAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	KlcertId  *string   `json:"klcert_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryKb defines model for advisory.Kb.
type AdvisoryKb struct {
	KbUrl        *string `json:"kb_url,omitempty"`
	MsDateAdded  *string `json:"ms_date_added,omitempty"`
	Status       *string `json:"status,omitempty"`
	Supercedence *string `json:"supercedence,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// AdvisoryKbThreatDescription defines model for advisory.KbThreatDescription.
type AdvisoryKbThreatDescription struct {
	Dos                   *string   `json:"dos,omitempty"`
	Exploited             *string   `json:"exploited,omitempty"`
	LatestSoftwareRelease *string   `json:"latest_software_release,omitempty"`
	Level                 *[]string `json:"level,omitempty"`
	OlderSoftwareRelease  *string   `json:"older_software_release,omitempty"`
	PubliclyDisclosed     *string   `json:"publicly_disclosed,omitempty"`
	Type                  *[]string `json:"type,omitempty"`
}

// AdvisoryKoreLogic defines model for advisory.KoreLogic.
type AdvisoryKoreLogic struct {
	AffectedProduct *string   `json:"affected_product,omitempty"`
	AffectedVendor  *string   `json:"affected_vendor,omitempty"`
	AffectedVersion *string   `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryLG defines model for advisory.LG.
type AdvisoryLG struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryLenovo defines model for advisory.Lenovo.
type AdvisoryLenovo struct {
	Cve                 *[]string `json:"cve,omitempty"`
	DateAdded           *string   `json:"date_added,omitempty"`
	IndustryIdentifiers *[]string `json:"industry_identifiers,omitempty"`
	LastUpdated         *string   `json:"last_updated,omitempty"`
	LenovoId            *string   `json:"lenovo_id,omitempty"`
	Title               *string   `json:"title,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryLexmarkAdvisory defines model for advisory.LexmarkAdvisory.
type AdvisoryLexmarkAdvisory struct {
	AffectedProducts  *[]AdvisoryAffectedProduct `json:"affectedProducts,omitempty"`
	Cve               *[]string                  `json:"cve,omitempty"`
	DateAdded         *string                    `json:"date_added,omitempty"`
	Details           *string                    `json:"details,omitempty"`
	Impact            *string                    `json:"impact,omitempty"`
	LastUpdate        *string                    `json:"lastUpdate,omitempty"`
	Link              *string                    `json:"link,omitempty"`
	PublicReleaseDate *string                    `json:"publicReleaseDate,omitempty"`
	References        *[]string                  `json:"references,omitempty"`
	Revision          *string                    `json:"revision,omitempty"`
	Summary           *string                    `json:"summary,omitempty"`
	Workarounds       *string                    `json:"workarounds,omitempty"`
}

// AdvisoryLibreOffice defines model for advisory.LibreOffice.
type AdvisoryLibreOffice struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryLinux defines model for advisory.Linux.
type AdvisoryLinux struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryLogSource defines model for advisory.LogSource.
type AdvisoryLogSource struct {
	Category   *string `json:"category,omitempty"`
	Definition *string `json:"definition,omitempty"`
	Product    *string `json:"product,omitempty"`
	Service    *string `json:"service,omitempty"`
}

// AdvisoryMACert defines model for advisory.MACert.
type AdvisoryMACert struct {
	AffectedSystemsFr *string   `json:"affected_systems_fr,omitempty"`
	AssessmentFr      *string   `json:"assessment_fr,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	ImpactFr          *string   `json:"impact_fr,omitempty"`
	Reference         *string   `json:"reference,omitempty"`
	References        *[]string `json:"references,omitempty"`
	RiskFr            *string   `json:"risk_fr,omitempty"`
	RisksFr           *string   `json:"risks_fr,omitempty"`
	SolutionFr        *string   `json:"solution_fr,omitempty"`
	TitleFr           *string   `json:"title_fr,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// AdvisoryMAffected defines model for advisory.MAffected.
type AdvisoryMAffected struct {
	Cpes      *[]string           `json:"cpes,omitempty"`
	Platforms *[]string           `json:"platforms,omitempty"`
	Product   *string             `json:"product,omitempty"`
	Vendor    *string             `json:"vendor,omitempty"`
	Versions  *[]AdvisoryMVersion `json:"versions,omitempty"`
}

// AdvisoryMBranch defines model for advisory.MBranch.
type AdvisoryMBranch struct {
	Branch          *[]AdvisoryMBranch          `json:"Branch,omitempty"`
	FullProductName *[]AdvisoryMFullProductName `json:"FullProductName,omitempty"`
	Items           *[]AdvisoryMItem            `json:"Items,omitempty"`
	Name            *string                     `json:"name,omitempty"`

	// Type diff
	Type *int `json:"type,omitempty"`
}

// AdvisoryMCna defines model for advisory.MCna.
type AdvisoryMCna struct {
	Affected         *[]AdvisoryMAffected       `json:"affected,omitempty"`
	Credits          *[]AdvisoryCredit          `json:"credits,omitempty"`
	Descriptions     *[]AdvisoryMDescriptions   `json:"descriptions,omitempty"`
	Metrics          *[]AdvisoryMetric          `json:"metrics,omitempty"`
	ProblemTypes     *[]AdvisoryMProblemTypes   `json:"problemTypes,omitempty"`
	ProviderMetadata *AdvisoryMProviderMetadata `json:"providerMetadata,omitempty"`
	References       *[]AdvisoryMReference      `json:"references,omitempty"`
	Timeline         *[]AdvisoryTimeline        `json:"timeline,omitempty"`
	Title            *string                    `json:"title,omitempty"`
}

// AdvisoryMContainers defines model for advisory.MContainers.
type AdvisoryMContainers struct {
	Cna *AdvisoryMCna `json:"cna,omitempty"`
}

// AdvisoryMCveMetadata defines model for advisory.MCveMetadata.
type AdvisoryMCveMetadata struct {
	AssignerOrgId     *string `json:"assignerOrgId,omitempty"`
	AssignerShortName *string `json:"assignerShortName,omitempty"`
	CveId             *string `json:"cveId,omitempty"`

	// DatePublished FIXME: flip to time
	DatePublished *string `json:"datePublished,omitempty"`

	// DateReserved FIXME: flip to time
	DateReserved *string `json:"dateReserved,omitempty"`

	// DateUpdated FIXME: flip to time
	DateUpdated *string `json:"dateUpdated,omitempty"`
	State       *string `json:"state,omitempty"`
}

// AdvisoryMCvssV20 defines model for advisory.MCvssV20.
type AdvisoryMCvssV20 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMCvssV30 defines model for advisory.MCvssV30.
type AdvisoryMCvssV30 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string  `json:"baseSeverity,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMCvssV31 defines model for advisory.MCvssV31.
type AdvisoryMCvssV31 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string  `json:"baseSeverity,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMCvssV40 defines model for advisory.MCvssV40.
type AdvisoryMCvssV40 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMDescriptions defines model for advisory.MDescriptions.
type AdvisoryMDescriptions struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryMDocumentTracking defines model for advisory.MDocumentTracking.
type AdvisoryMDocumentTracking struct {
	CurrentReleaseDate *string                  `json:"CurrentReleaseDate,omitempty"`
	InitialReleaseDate *string                  `json:"InitialReleaseDate,omitempty"`
	Identification     *AdvisoryMIdentification `json:"identification,omitempty"`

	// Revisionhistory diff in xml/json
	Revisionhistory *[]AdvisoryRRevision `json:"revisionhistory,omitempty"`

	// Status again - change in json/xml
	Status  *int    `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryMEProduct defines model for advisory.MEProduct.
type AdvisoryMEProduct struct {
	ID           *string `json:"ID,omitempty"`
	DisplayValue *string `json:"display_value,omitempty"`
}

// AdvisoryMFiles defines model for advisory.MFiles.
type AdvisoryMFiles struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMFullProductName defines model for advisory.MFullProductName.
type AdvisoryMFullProductName struct {
	CPE       *string `json:"CPE,omitempty"`
	ProductID *string `json:"ProductID,omitempty"`
	Value     *string `json:"Value,omitempty"`
}

// AdvisoryMISPValueNoID defines model for advisory.MISPValueNoID.
type AdvisoryMISPValueNoID struct {
	Description *string                    `json:"description,omitempty"`
	Meta        *AdvisoryMispMeta          `json:"meta,omitempty"`
	Related     *[]AdvisoryMispRelatedItem `json:"related,omitempty"`
	Value       *string                    `json:"value,omitempty"`
}

// AdvisoryMITREAttackGroupNoID defines model for advisory.MITREAttackGroupNoID.
type AdvisoryMITREAttackGroupNoID struct {
	Aliases     *[]string                       `json:"aliases,omitempty"`
	Description *string                         `json:"description,omitempty"`
	Name        *string                         `json:"name,omitempty"`
	Techniques  *[]AdvisoryMitreAttackTechnique `json:"techniques,omitempty"`
}

// AdvisoryMIdentification defines model for advisory.MIdentification.
type AdvisoryMIdentification struct {
	Alias *AdvisoryIVal `json:"alias,omitempty"`
	Id    *AdvisoryIVal `json:"id,omitempty"`
}

// AdvisoryMItem defines model for advisory.MItem.
type AdvisoryMItem struct {
	Items     *[]AdvisoryMItem `json:"Items,omitempty"`
	Name      *string          `json:"Name,omitempty"`
	ProductID *string          `json:"ProductID,omitempty"`

	// Type diff
	Type  *int    `json:"Type,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// AdvisoryMProblemTypes defines model for advisory.MProblemTypes.
type AdvisoryMProblemTypes struct {
	Descriptions *[]AdvisoryPTMDescriptions `json:"descriptions,omitempty"`
}

// AdvisoryMProductStatus defines model for advisory.MProductStatus.
type AdvisoryMProductStatus struct {
	ProductID *[]string `json:"ProductID,omitempty"`

	// Type diff
	Type *int `json:"type,omitempty"`
}

// AdvisoryMProductTree defines model for advisory.MProductTree.
type AdvisoryMProductTree struct {
	Branch          *[]AdvisoryMBranch          `json:"Branch,omitempty"`
	FullProductName *[]AdvisoryMFullProductName `json:"FullProductName,omitempty"`
}

// AdvisoryMProviderMetadata defines model for advisory.MProviderMetadata.
type AdvisoryMProviderMetadata struct {
	// DateUpdated FIXME: flip to time
	DateUpdated *string `json:"dateUpdated,omitempty"`
	OrgId       *string `json:"orgId,omitempty"`
	ShortName   *string `json:"shortName,omitempty"`
}

// AdvisoryMReference defines model for advisory.MReference.
type AdvisoryMReference struct {
	Name *string   `json:"name,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// AdvisoryMRemediation defines model for advisory.MRemediation.
type AdvisoryMRemediation struct {
	AffectedFiles   *[]AdvisoryAffectedFile `json:"AffectedFiles,omitempty"`
	Date            *string                 `json:"Date,omitempty"`
	DateSpecified   *bool                   `json:"DateSpecified,omitempty"`
	Description     *AdvisoryIVal           `json:"Description,omitempty"`
	FixedBuild      *string                 `json:"FixedBuild,omitempty"`
	ProductID       *[]string               `json:"ProductID,omitempty"`
	RestartRequired *AdvisoryIVal           `json:"RestartRequired,omitempty"`
	SubType         *string                 `json:"SubType,omitempty"`

	// Type diff
	Type         *int    `json:"Type,omitempty"`
	Url          *string `json:"Url,omitempty"`
	Supercedence *string `json:"supercedence,omitempty"`
}

// AdvisoryMSCVRF defines model for advisory.MSCVRF.
type AdvisoryMSCVRF struct {
	DocumentTitle    *AdvisoryMSDocumentTitle   `json:"DocumentTitle,omitempty"`
	DocumentTracking *AdvisoryMDocumentTracking `json:"DocumentTracking,omitempty"`
	ProductTree      *AdvisoryMProductTree      `json:"ProductTree,omitempty"`
	DocumentType     *string                    `json:"document_type,omitempty"`

	// Documentnotes diff
	Documentnotes     *[]AdvisoryRNote           `json:"documentnotes,omitempty"`
	Documentpublisher *AdvisoryDocumentPublisher `json:"documentpublisher,omitempty"`
	Vulnerability     *[]AdvisoryMVulnerability  `json:"vulnerability,omitempty"`
}

// AdvisoryMSDocumentTitle defines model for advisory.MSDocumentTitle.
type AdvisoryMSDocumentTitle struct {
	Value *string `json:"Value,omitempty"`
}

// AdvisoryMVersion defines model for advisory.MVersion.
type AdvisoryMVersion struct {
	LessThan        *string `json:"lessThan,omitempty"`
	LessThanOrEqual *string `json:"lessThanOrEqual,omitempty"`
	Status          *string `json:"status,omitempty"`
	Version         *string `json:"version,omitempty"`
	VersionType     *string `json:"versionType,omitempty"`
}

// AdvisoryMVulnerability defines model for advisory.MVulnerability.
type AdvisoryMVulnerability struct {
	ProductStatuses *[]AdvisoryMProductStatus  `json:"ProductStatuses,omitempty"`
	Remediations    *[]AdvisoryMRemediation    `json:"Remediations,omitempty"`
	Threats         *[]AdvisoryRThreat         `json:"Threats,omitempty"`
	Acknowledgments *[]AdvisoryAcknowledgement `json:"acknowledgments,omitempty"`
	Cve             *string                    `json:"cve,omitempty"`
	Cvssscoresets   *[]AdvisoryRScoreSet       `json:"cvssscoresets,omitempty"`
	Notes           *[]AdvisoryNote            `json:"notes,omitempty"`
	Ordinal         *string                    `json:"ordinal,omitempty"`

	// Revisionhistory diff in xml/json
	Revisionhistory *[]AdvisoryRRevision `json:"revisionhistory,omitempty"`
	Title           *AdvisoryIVal        `json:"title,omitempty"`
}

// AdvisoryManageEngine defines model for advisory.ManageEngine.
type AdvisoryManageEngine struct {
	ADVISORY               *string                          `json:"ADVISORY,omitempty"`
	AddedTime              *string                          `json:"Added_Time,omitempty"`
	CVEDetailsLink         *AdvisoryCVEDetailsLink          `json:"CVE_Details_Link,omitempty"`
	CVEID                  *string                          `json:"CVE_ID,omitempty"`
	CVSSSeverityRating     *string                          `json:"CVSS_Severity_Rating,omitempty"`
	Fixed                  *string                          `json:"Fixed,omitempty"`
	ForProductSearch       *string                          `json:"For_product_search,omitempty"`
	ID                     *string                          `json:"ID,omitempty"`
	Product                *AdvisoryMEProduct               `json:"Product,omitempty"`
	ProductList            *[]AdvisoryMEProduct             `json:"Product_list,omitempty"`
	ProductSpecificDetails *[]AdvisoryProductSpecificDetail `json:"Product_specific_details,omitempty"`
	Summary                *string                          `json:"Summary,omitempty"`
	Version                *string                          `json:"Version,omitempty"`
	IndexField             *string                          `json:"index_field,omitempty"`
}

// AdvisoryManageEngineAdvisory defines model for advisory.ManageEngineAdvisory.
type AdvisoryManageEngineAdvisory struct {
	Cve          *[]string             `json:"cve,omitempty"`
	DateAdded    *string               `json:"date_added,omitempty"`
	ManageEngine *AdvisoryManageEngine `json:"manage_engine,omitempty"`
	Title        *string               `json:"title,omitempty"`
	Url          *string               `json:"url,omitempty"`
}

// AdvisoryMbedTLS defines model for advisory.MbedTLS.
type AdvisoryMbedTLS struct {
	Affects   *string   `json:"affects,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMediatek defines model for advisory.Mediatek.
type AdvisoryMediatek struct {
	AffectedChipsets *[]string `json:"affected_chipsets,omitempty"`
	AffectedSoftware *[]string `json:"affected_software,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryMedtronicAdvisory defines model for advisory.MedtronicAdvisory.
type AdvisoryMedtronicAdvisory struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryMendix defines model for advisory.Mendix.
type AdvisoryMendix struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMetaData defines model for advisory.MetaData.
type AdvisoryMetaData struct {
	Advisory    *AdvisoryAdvisoryDetails    `json:"advisory,omitempty"`
	Cve         *[]string                   `json:"cve,omitempty"`
	DateAdded   *string                     `json:"date_added,omitempty"`
	Description *string                     `json:"description,omitempty"`
	Packages    *[]AdvisoryVulnCheckPackage `json:"packages,omitempty"`
	References  *[]AdvisoryOvalReference    `json:"references,omitempty"`
	Title       *string                     `json:"title,omitempty"`
}

// AdvisoryMetasploitExploit defines model for advisory.MetasploitExploit.
type AdvisoryMetasploitExploit struct {
	Author    *[]string `json:"author,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMetric defines model for advisory.Metric.
type AdvisoryMetric struct {
	CvssV20 *AdvisoryMCvssV20 `json:"cvssV2_0,omitempty"`
	CvssV30 *AdvisoryMCvssV30 `json:"cvssV3_0,omitempty"`
	CvssV31 *AdvisoryMCvssV31 `json:"cvssV3_1,omitempty"`
	CvssV40 *AdvisoryMCvssV40 `json:"cvssV4_0,omitempty"`
}

// AdvisoryMicrosoftCVRF defines model for advisory.MicrosoftCVRF.
type AdvisoryMicrosoftCVRF struct {
	Cve           *[]string       `json:"cve,omitempty"`
	Cvrf          *AdvisoryMSCVRF `json:"cvrf,omitempty"`
	DateAdded     *string         `json:"date_added,omitempty"`
	ExploitedList *[]AdvisoryITW  `json:"exploited_list,omitempty"`
	Title         *string         `json:"title,omitempty"`
	Url           *string         `json:"url,omitempty"`
}

// AdvisoryMicrosoftKb defines model for advisory.MicrosoftKb.
type AdvisoryMicrosoftKb struct {
	Cve       *string                      `json:"cve,omitempty"`
	DateAdded *string                      `json:"date_added,omitempty"`
	Kbs       *[]AdvisoryKb                `json:"kbs,omitempty"`
	Threat    *AdvisoryKbThreatDescription `json:"threat,omitempty"`
	Title     *string                      `json:"title,omitempty"`
}

// AdvisoryMikrotik defines model for advisory.Mikrotik.
type AdvisoryMikrotik struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMindray defines model for advisory.Mindray.
type AdvisoryMindray struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMispMeta defines model for advisory.MispMeta.
type AdvisoryMispMeta struct {
	AttributionConfidence    *string   `json:"attribution-confidence,omitempty"`
	CfrSuspectedStateSponsor *string   `json:"cfr-suspected-state-sponsor,omitempty"`
	CfrSuspectedVictims      *[]string `json:"cfr-suspected-victims,omitempty"`
	CfrTargetCategory        *[]string `json:"cfr-target-category,omitempty"`
	CfrTypeOfIncident        *[]string `json:"cfr-type-of-incident,omitempty"`
	Country                  *string   `json:"country,omitempty"`
	Refs                     *[]string `json:"refs,omitempty"`
	Synonyms                 *[]string `json:"synonyms,omitempty"`
}

// AdvisoryMispRelatedItem defines model for advisory.MispRelatedItem.
type AdvisoryMispRelatedItem struct {
	DestUuid *string   `json:"dest-uuid,omitempty"`
	Tags     *[]string `json:"tags,omitempty"`
	Type     *string   `json:"type,omitempty"`
}

// AdvisoryMispValue defines model for advisory.MispValue.
type AdvisoryMispValue struct {
	Description *string                    `json:"description,omitempty"`
	Meta        *AdvisoryMispMeta          `json:"meta,omitempty"`
	Related     *[]AdvisoryMispRelatedItem `json:"related,omitempty"`
	Uuid        *string                    `json:"uuid,omitempty"`
	Value       *string                    `json:"value,omitempty"`
}

// AdvisoryMitel defines model for advisory.Mitel.
type AdvisoryMitel struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryMitreAttackTechnique defines model for advisory.MitreAttackTechnique.
type AdvisoryMitreAttackTechnique struct {
	SubTechnique     *string   `json:"sub_technique,omitempty"`
	SubTechniqueName *string   `json:"sub_technique_name,omitempty"`
	Tactic           *[]string `json:"tactic,omitempty"`
	TechniqueId      *string   `json:"technique_id,omitempty"`
	TechniqueName    *string   `json:"technique_name,omitempty"`
}

// AdvisoryMitreCVEListV5 defines model for advisory.MitreCVEListV5.
type AdvisoryMitreCVEListV5 struct {
	Cve       *[]string                  `json:"cve,omitempty"`
	DateAdded *string                    `json:"date_added,omitempty"`
	MitreRef  *AdvisoryMitreCVEListV5Ref `json:"mitre_ref,omitempty"`
	Summary   *string                    `json:"summary,omitempty"`
	Title     *string                    `json:"title,omitempty"`
	Url       *string                    `json:"url,omitempty"`
}

// AdvisoryMitreCVEListV5Ref defines model for advisory.MitreCVEListV5Ref.
type AdvisoryMitreCVEListV5Ref struct {
	Containers  *AdvisoryMContainers  `json:"containers,omitempty"`
	CveMetadata *AdvisoryMCveMetadata `json:"cveMetadata,omitempty"`
	DataType    *string               `json:"dataType,omitempty"`
	DataVersion *string               `json:"dataVersion,omitempty"`
}

// AdvisoryMitsubishiElectricAdvisory defines model for advisory.MitsubishiElectricAdvisory.
type AdvisoryMitsubishiElectricAdvisory struct {
	Cve                  *[]string `json:"cve,omitempty"`
	Cwe                  *[]string `json:"cwe,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	DateLastRevised      *string   `json:"date_last_revised,omitempty"`
	MitsubishiElectricId *string   `json:"mitsubishi_electric_id,omitempty"`
	Title                *string   `json:"title,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryMongoDB defines model for advisory.MongoDB.
type AdvisoryMongoDB struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Score       *string   `json:"score,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryMoxaAdvisory defines model for advisory.MoxaAdvisory.
type AdvisoryMoxaAdvisory struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryMozillaAdvisory defines model for advisory.MozillaAdvisory.
type AdvisoryMozillaAdvisory struct {
	AffectedComponents *[]AdvisoryMozillaComponent `json:"affected_components,omitempty"`
	Bugzilla           *[]string                   `json:"bugzilla,omitempty"`
	Cve                *[]string                   `json:"cve,omitempty"`
	DateAdded          *string                     `json:"date_added,omitempty"`
	Description        *string                     `json:"description,omitempty"`
	FixedIn            *[]string                   `json:"fixed_in,omitempty"`
	Impact             *string                     `json:"impact,omitempty"`
	Products           *[]string                   `json:"products,omitempty"`
	Reporter           *string                     `json:"reporter,omitempty"`
	Risk               *string                     `json:"risk,omitempty"`
	Title              *string                     `json:"title,omitempty"`
	Url                *string                     `json:"url,omitempty"`
}

// AdvisoryMozillaComponent defines model for advisory.MozillaComponent.
type AdvisoryMozillaComponent struct {
	Bugzilla    *[]string `json:"bugzilla,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	Description *string   `json:"description,omitempty"`
	Impact      *string   `json:"impact,omitempty"`
	Reporter    *string   `json:"reporter,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryNCSC defines model for advisory.NCSC.
type AdvisoryNCSC struct {
	Csaf       *AdvisoryCSAF `json:"csaf,omitempty"`
	Cve        *[]string     `json:"cve,omitempty"`
	DateAdded  *string       `json:"date_added,omitempty"`
	Id         *string       `json:"id,omitempty"`
	References *[]string     `json:"references,omitempty"`
	SummaryNl  *string       `json:"summary_nl,omitempty"`
	TitleNl    *string       `json:"title_nl,omitempty"`
	Url        *string       `json:"url,omitempty"`
}

// AdvisoryNCSCCVE defines model for advisory.NCSCCVE.
type AdvisoryNCSCCVE struct {
	Csaf       *AdvisoryCSAF `json:"csaf,omitempty"`
	Cve        *[]string     `json:"cve,omitempty"`
	DateAdded  *string       `json:"date_added,omitempty"`
	References *[]string     `json:"references,omitempty"`
	SummaryNl  *string       `json:"summary_nl,omitempty"`
	TitleNl    *string       `json:"title_nl,omitempty"`
	Url        *string       `json:"url,omitempty"`
}

// AdvisoryNEC defines model for advisory.NEC.
type AdvisoryNEC struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	NvdId      *string   `json:"nvd_id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNHS defines model for advisory.NHS.
type AdvisoryNHS struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Severity   *string   `json:"severity,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	ThreatId   *string   `json:"threat_id,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNI defines model for advisory.NI.
type AdvisoryNI struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Ovewrview  *string   `json:"ovewrview,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNTP defines model for advisory.NTP.
type AdvisoryNTP struct {
	Affected   *[]string `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *[]string `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNVD20CVECPEMatch defines model for advisory.NVD20CVECPEMatch.
type AdvisoryNVD20CVECPEMatch struct {
	Criteria              *string `json:"criteria,omitempty"`
	MatchCriteriaId       *string `json:"matchCriteriaId,omitempty"`
	VersionEndExcluding   *string `json:"versionEndExcluding,omitempty"`
	VersionEndIncluding   *string `json:"versionEndIncluding,omitempty"`
	VersionStartExcluding *string `json:"versionStartExcluding,omitempty"`
	VersionStartIncluding *string `json:"versionStartIncluding,omitempty"`
	Vulnerable            *bool   `json:"vulnerable,omitempty"`
}

// AdvisoryNVD20Configuration defines model for advisory.NVD20Configuration.
type AdvisoryNVD20Configuration struct {
	Negate   *bool                `json:"negate,omitempty"`
	Nodes    *[]AdvisoryNVD20Node `json:"nodes,omitempty"`
	Operator *string              `json:"operator,omitempty"`
}

// AdvisoryNVD20Node defines model for advisory.NVD20Node.
type AdvisoryNVD20Node struct {
	CpeMatch *[]AdvisoryNVD20CVECPEMatch `json:"cpeMatch,omitempty"`
	Negate   *bool                       `json:"negate,omitempty"`
	Operator *string                     `json:"operator,omitempty"`
}

// AdvisoryNZAdvisory defines model for advisory.NZAdvisory.
type AdvisoryNZAdvisory struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Happening   *string   `json:"happening,omitempty"`
	Link        *string   `json:"link,omitempty"`
	LookFor     *string   `json:"lookFor,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Title       *string   `json:"title,omitempty"`
	WhatToDo    *string   `json:"whatToDo,omitempty"`
}

// AdvisoryNaver defines model for advisory.Naver.
type AdvisoryNaver struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryNetApp defines model for advisory.NetApp.
type AdvisoryNetApp struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Impact     *string   `json:"impact,omitempty"`
	Ntap       *string   `json:"ntap,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNetgate defines model for advisory.Netgate.
type AdvisoryNetgate struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryNetgear defines model for advisory.Netgear.
type AdvisoryNetgear struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Products   *[]string `json:"products,omitempty"`
	PsvnNumber *string   `json:"psvn_number,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNetskope defines model for advisory.Netskope.
type AdvisoryNetskope struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNginxAdvisory defines model for advisory.NginxAdvisory.
type AdvisoryNginxAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Description     *string   `json:"description,omitempty"`
	NotVulnVersions *[]string `json:"not_vuln_versions,omitempty"`
	PatchPgp        *string   `json:"patch_pgp,omitempty"`
	PatchUrl        *string   `json:"patch_url,omitempty"`
	Severity        *string   `json:"severity,omitempty"`
	Url             *string   `json:"url,omitempty"`
	VulnVersions    *[]string `json:"vuln_versions,omitempty"`
}

// AdvisoryNodeAuthor defines model for advisory.NodeAuthor.
type AdvisoryNodeAuthor struct {
	Author   *string `json:"author,omitempty"`
	Username *string `json:"username,omitempty"`
	Website  *string `json:"website,omitempty"`
}

// AdvisoryNodeJS defines model for advisory.NodeJS.
type AdvisoryNodeJS struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNodeSecurity defines model for advisory.NodeSecurity.
type AdvisoryNodeSecurity struct {
	AffectedEnvironments *[]string           `json:"affected_environments,omitempty"`
	Author               *AdvisoryNodeAuthor `json:"author,omitempty"`
	CoordinatingVendor   *string             `json:"coordinating_vendor,omitempty"`
	CreatedAt            *string             `json:"created_at,omitempty"`
	Cve                  *[]string           `json:"cve,omitempty"`
	CvssScore            *float32            `json:"cvss_score,omitempty"`
	CvssVector           *string             `json:"cvss_vector,omitempty"`
	DateAdded            *string             `json:"date_added,omitempty"`
	Id                   *int                `json:"id,omitempty"`
	ModuleName           *string             `json:"module_name,omitempty"`
	Overview             *string             `json:"overview,omitempty"`
	PatchedVersions      *string             `json:"patched_versions,omitempty"`
	PublishDate          *string             `json:"publish_date,omitempty"`
	Recommendation       *string             `json:"recommendation,omitempty"`
	References           *[]string           `json:"references,omitempty"`
	Title                *string             `json:"title,omitempty"`
	UpdatedAt            *string             `json:"updated_at,omitempty"`
	Url                  *string             `json:"url,omitempty"`
	VulnerableVersions   *string             `json:"vulnerable_versions,omitempty"`
}

// AdvisoryNokia defines model for advisory.Nokia.
type AdvisoryNokia struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Updated    *string   `json:"updated,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNote defines model for advisory.Note.
type AdvisoryNote struct {
	Ordinal *string `json:"ordinal,omitempty"`
	Text    *string `json:"text,omitempty"`
	Title   *string `json:"title,omitempty"`
	Type    *int    `json:"type,omitempty"`
}

// AdvisoryNozomi defines model for advisory.Nozomi.
type AdvisoryNozomi struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryNvidiaRevision defines model for advisory.NvidiaRevision.
type AdvisoryNvidiaRevision struct {
	Date        *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Revision    *string `json:"revision,omitempty"`
}

// AdvisoryOCurl defines model for advisory.OCurl.
type AdvisoryOCurl struct {
	Affected         *[]AdvisoryCurlAffected `json:"affected,omitempty"`
	Aliases          *[]string               `json:"aliases,omitempty"`
	Credits          *[]AdvisoryCurlCredit   `json:"credits,omitempty"`
	DatabaseSpecific *AdvisoryDBSpecific     `json:"database_specific,omitempty"`
	Details          *string                 `json:"details,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	Modified         *string                 `json:"modified,omitempty"`
	Published        *string                 `json:"published,omitempty"`
	SchemaVersion    *string                 `json:"schema_version,omitempty"`
	Summary          *string                 `json:"summary,omitempty"`
}

// AdvisoryOSV defines model for advisory.OSV.
type AdvisoryOSV struct {
	Cve         *[]string       `json:"cve,omitempty"`
	DateAdded   *string         `json:"date_added,omitempty"`
	DateUpdated *string         `json:"date_updated,omitempty"`
	Osv         *AdvisoryOSVObj `json:"osv,omitempty"`
	Summary     *string         `json:"summary,omitempty"`
	Title       *string         `json:"title,omitempty"`
	Url         *string         `json:"url,omitempty"`
}

// AdvisoryOSVObj defines model for advisory.OSVObj.
type AdvisoryOSVObj struct {
	// Affected collection based on https://ossf.github.io/osv-schema/
	Affected   *[]AdvisoryAffected     `json:"affected,omitempty"`
	Aliases    *[]string               `json:"aliases,omitempty"`
	Details    *string                 `json:"details,omitempty"`
	Id         *string                 `json:"id,omitempty"`
	Modified   *string                 `json:"modified,omitempty"`
	Published  *string                 `json:"published,omitempty"`
	References *[]AdvisoryOSVReference `json:"references,omitempty"`
	Related    *[]string               `json:"related,omitempty"`
	Summary    *string                 `json:"summary,omitempty"`
	Withdrawn  *string                 `json:"withdrawn,omitempty"`
}

// AdvisoryOSVPackage defines model for advisory.OSVPackage.
type AdvisoryOSVPackage struct {
	Ecosystem *string `json:"ecosystem,omitempty"`
	Name      *string `json:"name,omitempty"`
	Purl      *string `json:"purl,omitempty"`
}

// AdvisoryOSVReference defines model for advisory.OSVReference.
type AdvisoryOSVReference struct {
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// AdvisoryOTRS defines model for advisory.OTRS.
type AdvisoryOTRS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Product   *string   `json:"product,omitempty"`
	Release   *string   `json:"release,omitempty"`
	Risk      *string   `json:"risk,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOctopusDeploy defines model for advisory.OctopusDeploy.
type AdvisoryOctopusDeploy struct {
	AdvisoryNumber *string   `json:"advisory_number,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	Summary        *string   `json:"summary,omitempty"`
	Title          *string   `json:"title,omitempty"`
	Url            *string   `json:"url,omitempty"`
}

// AdvisoryOkta defines model for advisory.Okta.
type AdvisoryOkta struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	Cvss             *string   `json:"cvss,omitempty"`
	Cwe              *string   `json:"cwe,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Resolution       *string   `json:"resolution,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryOmron defines model for advisory.Omron.
type AdvisoryOmron struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOneE defines model for advisory.OneE.
type AdvisoryOneE struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOpenBSD defines model for advisory.OpenBSD.
type AdvisoryOpenBSD struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Patch       *string   `json:"patch,omitempty"`
	Release     *string   `json:"release,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryOpenCVDB defines model for advisory.OpenCVDB.
type AdvisoryOpenCVDB struct {
	AffectedPlatforms    *[]string `json:"affected_platforms,omitempty"`
	AffectedServices     *[]string `json:"affected_services,omitempty"`
	Cve                  *[]string `json:"cve,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	DisclosedAt          *string   `json:"disclosed_at,omitempty"`
	KnownItwExploitation *bool     `json:"known_itw_exploitation,omitempty"`
	ManualRemediation    *string   `json:"manual_remediation,omitempty"`
	PublishedAt          *string   `json:"published_at,omitempty"`
	References           *[]string `json:"references,omitempty"`
	Summary              *string   `json:"summary,omitempty"`
	Title                *string   `json:"title,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryOpenSSH defines model for advisory.OpenSSH.
type AdvisoryOpenSSH struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryOpenSSLSecAdv defines model for advisory.OpenSSLSecAdv.
type AdvisoryOpenSSLSecAdv struct {
	Cve             *[]string                       `json:"cve,omitempty"`
	DateAdded       *string                         `json:"date_added,omitempty"`
	DateUpdated     *string                         `json:"date_updated,omitempty"`
	Filename        *string                         `json:"filename,omitempty"`
	Title           *string                         `json:"title,omitempty"`
	Url             *string                         `json:"url,omitempty"`
	Vulnerabilities *[]AdvisoryOpenSSLVulnerability `json:"vulnerabilities,omitempty"`
}

// AdvisoryOpenSSLVulnerability defines model for advisory.OpenSSLVulnerability.
type AdvisoryOpenSSLVulnerability struct {
	Cve      *[]string         `json:"cve,omitempty"`
	Fixed    *[]AdvisoryFixAff `json:"fixed,omitempty"`
	Severity *string           `json:"severity,omitempty"`
	Title    *string           `json:"title,omitempty"`
}

// AdvisoryOpenStack defines model for advisory.OpenStack.
type AdvisoryOpenStack struct {
	Affects    *[]string `json:"affects,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryOracleCPU defines model for advisory.OracleCPU.
type AdvisoryOracleCPU struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Product   *string   `json:"product,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOracleCPUCSAF defines model for advisory.OracleCPUCSAF.
type AdvisoryOracleCPUCSAF struct {
	Csaf      *AdvisoryCSAF `json:"csaf,omitempty"`
	Cve       *[]string     `json:"cve,omitempty"`
	DateAdded *string       `json:"date_added,omitempty"`
	Url       *string       `json:"url,omitempty"`
}

// AdvisoryOvalCVE defines model for advisory.OvalCVE.
type AdvisoryOvalCVE struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// AdvisoryOvalReference defines model for advisory.OvalReference.
type AdvisoryOvalReference struct {
	RefId  *string `json:"ref_id,omitempty"`
	RefUrl *string `json:"ref_url,omitempty"`
	Source *string `json:"source,omitempty"`
}

// AdvisoryOverride defines model for advisory.Override.
type AdvisoryOverride struct {
	Annotation *AdvisoryOverrideAnnotation `json:"_annotation,omitempty"`
	Cve        *AdvisoryOverrideCVE        `json:"cve,omitempty"`
}

// AdvisoryOverrideAnnotation defines model for advisory.OverrideAnnotation.
type AdvisoryOverrideAnnotation struct {
	CveId       *string              `json:"cve_id,omitempty"`
	Reason      *string              `json:"reason,omitempty"`
	Snapshot    *string              `json:"snapshot,omitempty"`
	TriageNotes *AdvisoryTriageNotes `json:"triage_notes,omitempty"`
}

// AdvisoryOverrideCVE defines model for advisory.OverrideCVE.
type AdvisoryOverrideCVE struct {
	Configurations *[]AdvisoryOverrideConfiguration `json:"configurations,omitempty"`
}

// AdvisoryOverrideConfiguration defines model for advisory.OverrideConfiguration.
type AdvisoryOverrideConfiguration struct {
	Nodes *[]AdvisoryCPENode `json:"nodes,omitempty"`
}

// AdvisoryOwnCloud defines model for advisory.OwnCloud.
type AdvisoryOwnCloud struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPGFix defines model for advisory.PGFix.
type AdvisoryPGFix struct {
	Affected *string `json:"affected,omitempty"`
	Fixed    *string `json:"fixed,omitempty"`
}

// AdvisoryPHPMyAdmin defines model for advisory.PHPMyAdmin.
type AdvisoryPHPMyAdmin struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryPTC defines model for advisory.PTC.
type AdvisoryPTC struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPTMDescriptions defines model for advisory.PTMDescriptions.
type AdvisoryPTMDescriptions struct {
	CweId       *string `json:"cweId,omitempty"`
	Description *string `json:"description,omitempty"`
	Lang        *string `json:"lang,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// AdvisoryPackage defines model for advisory.Package.
type AdvisoryPackage struct {
	Filename *string `json:"filename,omitempty"`

	// Name sort
	Name    *string `json:"name,omitempty"`
	Release *string `json:"release,omitempty"`
	Src     *string `json:"src,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryPackageStat defines model for advisory.PackageStat.
type AdvisoryPackageStat struct {
	Cpe         *string `json:"cpe,omitempty"`
	FixState    *string `json:"fix_state,omitempty"`
	PackageName *string `json:"package_name,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
}

// AdvisoryPalantir defines model for advisory.Palantir.
type AdvisoryPalantir struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Background       *string   `json:"background,omitempty"`
	BulletinId       *string   `json:"bulletin_id,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryPaloAltoAdvisory defines model for advisory.PaloAltoAdvisory.
type AdvisoryPaloAltoAdvisory struct {
	Affected              *string   `json:"affected,omitempty"`
	ApplicableVersions    *string   `json:"applicableVersions,omitempty"`
	AttackComplexity      *string   `json:"attackComplexity,omitempty"`
	AttackVector          *string   `json:"attackVector,omitempty"`
	AvailabilityImpact    *string   `json:"availabilityImpact,omitempty"`
	ConfidentialityImpact *string   `json:"confidentialityImpact,omitempty"`
	Cve                   *[]string `json:"cve,omitempty"`
	CvssbaseScore         *string   `json:"cvssbaseScore,omitempty"`
	DatePublished         *string   `json:"datePublished,omitempty"`
	DateUpdated           *string   `json:"dateUpdated,omitempty"`
	DateAdded             *string   `json:"date_added,omitempty"`
	Id                    *string   `json:"id,omitempty"`
	IntegrityImpact       *string   `json:"integrityImpact,omitempty"`
	PrivilegesRequired    *string   `json:"privilegesRequired,omitempty"`
	Problem               *string   `json:"problem,omitempty"`
	Product               *string   `json:"product,omitempty"`
	Scope                 *string   `json:"scope,omitempty"`
	Severity              *string   `json:"severity,omitempty"`
	Solution              *string   `json:"solution,omitempty"`
	Title                 *string   `json:"title,omitempty"`
	Unaffected            *string   `json:"unaffected,omitempty"`
	Url                   *string   `json:"url,omitempty"`
	UserInteraction       *string   `json:"userInteraction,omitempty"`
	Workaround            *string   `json:"workaround,omitempty"`
}

// AdvisoryPanasonic defines model for advisory.Panasonic.
type AdvisoryPanasonic struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPaperCut defines model for advisory.PaperCut.
type AdvisoryPaperCut struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryPega defines model for advisory.Pega.
type AdvisoryPega struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Score     *string   `json:"score,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPhilipsAdvisory defines model for advisory.PhilipsAdvisory.
type AdvisoryPhilipsAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryPhoenixContactAdvisory defines model for advisory.PhoenixContactAdvisory.
type AdvisoryPhoenixContactAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Vde       *[]string `json:"vde,omitempty"`
}

// AdvisoryPostgresSQL defines model for advisory.PostgresSQL.
type AdvisoryPostgresSQL struct {
	Cve       *[]string        `json:"cve,omitempty"`
	DateAdded *string          `json:"date_added,omitempty"`
	PgFix     *[]AdvisoryPGFix `json:"pg_fix,omitempty"`
	Summary   *string          `json:"summary,omitempty"`
	Title     *string          `json:"title,omitempty"`
	Url       *string          `json:"url,omitempty"`
}

// AdvisoryPowerDNS defines model for advisory.PowerDNS.
type AdvisoryPowerDNS struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPrimeVersion defines model for advisory.PrimeVersion.
type AdvisoryPrimeVersion struct {
	JdK   *string `json:"jdK,omitempty"`
	Prime *string `json:"prime,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryProduct defines model for advisory.Product.
type AdvisoryProduct struct {
	Name                        *string            `json:"name,omitempty"`
	ProductId                   *string            `json:"product_id,omitempty"`
	ProductIdentificationHelper *map[string]string `json:"product_identification_helper,omitempty"`
}

// AdvisoryProductBranch defines model for advisory.ProductBranch.
type AdvisoryProductBranch struct {
	Branches      *[]AdvisoryProductBranch    `json:"branches,omitempty"`
	Category      *string                     `json:"category,omitempty"`
	Name          *string                     `json:"name,omitempty"`
	Product       *AdvisoryProduct            `json:"product,omitempty"`
	Relationships *[]AdvisoryCSAFRelationship `json:"relationships,omitempty"`
}

// AdvisoryProductSpecificDetail defines model for advisory.ProductSpecificDetail.
type AdvisoryProductSpecificDetail struct {
	ID           *string `json:"ID,omitempty"`
	DisplayValue *string `json:"display_value,omitempty"`
}

// AdvisoryProductTree defines model for advisory.ProductTree.
type AdvisoryProductTree struct {
	Relationships *[]AdvisoryRelationship `json:"relationships,omitempty"`
}

// AdvisoryProductsAffected defines model for advisory.ProductsAffected.
type AdvisoryProductsAffected struct {
	Cve         *string `json:"cve,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AdvisoryProgress defines model for advisory.Progress.
type AdvisoryProgress struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryProofpoint defines model for advisory.Proofpoint.
type AdvisoryProofpoint struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryPublisher defines model for advisory.Publisher.
type AdvisoryPublisher struct {
	Category         *string `json:"category,omitempty"`
	ContactDetails   *string `json:"contact_details,omitempty"`
	IssuingAuthority *string `json:"issuing_authority,omitempty"`
	Name             *string `json:"name,omitempty"`
	Namespace        *string `json:"namespace,omitempty"`
}

// AdvisoryPureStorage defines model for advisory.PureStorage.
type AdvisoryPureStorage struct {
	Cve         *[]string `json:"cve,omitempty"`
	Cvss        *string   `json:"cvss,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Product     *string   `json:"product,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryPyPAAdvisory defines model for advisory.PyPAAdvisory.
type AdvisoryPyPAAdvisory struct {
	// AdvisoryId ID is the PYSEC- identifier
	AdvisoryId *string `json:"advisory_id,omitempty"`

	// Affected Affected will list out the vulnerable versions.
	Affected *[]struct {
		Package *struct {
			Ecosystem *string `json:"ecosystem,omitempty"`
			Name      *string `json:"name,omitempty"`
			Purl      *string `json:"purl,omitempty"`
		} `json:"package,omitempty"`
		Ranges *[]struct {
			Events *[]struct {
				Fixed      *string `json:"fixed,omitempty"`
				Introduced *string `json:"introduced,omitempty"`
			} `json:"events,omitempty"`
			RangesType *string `json:"ranges_type,omitempty"`
		} `json:"ranges,omitempty"`
		Versions *[]string `json:"versions,omitempty"`
	} `json:"affected,omitempty"`

	// Aliases Aliases are other identifiers that refer to this, such as a CVE
	Aliases *[]string `json:"aliases,omitempty"`

	// DateAdded DateAdded is the RFC3339Nano published timestamp
	DateAdded *string `json:"date_added,omitempty"`

	// Details Details discuss the vulnerability information
	Details *string `json:"details,omitempty"`

	// Modified Modified is non-zero Time if entry was updated
	Modified *string `json:"modified,omitempty"`

	// Published Published is the datetime when this was released
	Published *string `json:"published,omitempty"`

	// References References are links to more detailed advisories, fixes, etc.
	References *[]struct {
		RefsType *string `json:"refs_type,omitempty"`
		Url      *string `json:"url,omitempty"`
	} `json:"references,omitempty"`

	// WasWithdrawn WasWD indicates if the advisory was withdrawn or not.
	WasWithdrawn *bool `json:"was_withdrawn,omitempty"`

	// Withdrawn Withdrawn is non-zero if this advisory has been withdrawn
	Withdrawn *string `json:"withdrawn,omitempty"`
}

// AdvisoryQNAPAdvisory defines model for advisory.QNAPAdvisory.
type AdvisoryQNAPAdvisory struct {
	Affected       *string   `json:"affected,omitempty"`
	BulletinId     *string   `json:"bulletin_id,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	LastUpdateDate *string   `json:"last_update_date,omitempty"`
	Link           *string   `json:"link,omitempty"`
	Severity       *string   `json:"severity,omitempty"`
	SeverityNumber *string   `json:"severity_number,omitempty"`
	Status         *string   `json:"status,omitempty"`
	Summary        *string   `json:"summary,omitempty"`
	Title          *string   `json:"title,omitempty"`
}

// AdvisoryQSB defines model for advisory.QSB.
type AdvisoryQSB struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryQualcomm defines model for advisory.Qualcomm.
type AdvisoryQualcomm struct {
	Chipsets    *[]string `json:"chipsets,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Score       *string   `json:"score,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryQualys defines model for advisory.Qualys.
type AdvisoryQualys struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Exploits  *[]string `json:"exploits,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryRDescription defines model for advisory.RDescription.
type AdvisoryRDescription struct {
	Value *string `json:"value,omitempty"`
}

// AdvisoryRNote defines model for advisory.RNote.
type AdvisoryRNote struct {
	Audience *string `json:"audience,omitempty"`
	Ordinal  *string `json:"ordinal,omitempty"`
	Text     *string `json:"text,omitempty"`
	Title    *string `json:"title,omitempty"`

	// Type diff between xml && json
	Type *int `json:"type,omitempty"`
}

// AdvisoryRRevision defines model for advisory.RRevision.
type AdvisoryRRevision struct {
	Date        *string               `json:"date,omitempty"`
	Description *AdvisoryRDescription `json:"description,omitempty"`
	Number      *string               `json:"number,omitempty"`
}

// AdvisoryRScoreSet defines model for advisory.RScoreSet.
type AdvisoryRScoreSet struct {
	BaseScore     *string `json:"base_score,omitempty"`
	ProductId     *string `json:"product_id,omitempty"`
	TemporalScore *string `json:"temporal_score,omitempty"`
	Vector        *string `json:"vector,omitempty"`
}

// AdvisoryRThreat defines model for advisory.RThreat.
type AdvisoryRThreat struct {
	Date          *string       `json:"Date,omitempty"`
	DateSpecified *bool         `json:"DateSpecified,omitempty"`
	Description   *AdvisoryIVal `json:"Description,omitempty"`
	ProductID     *[]string     `json:"ProductID,omitempty"`

	// Type diff
	Type *int `json:"Type,omitempty"`
}

// AdvisoryRange defines model for advisory.Range.
type AdvisoryRange struct {
	Events *[]AdvisoryEvent `json:"events,omitempty"`
	Repo   *string          `json:"repo,omitempty"`
	Type   *string          `json:"type,omitempty"`
}

// AdvisoryRansomwareExploit defines model for advisory.RansomwareExploit.
type AdvisoryRansomwareExploit struct {
	Cve              *[]string               `json:"cve,omitempty"`
	CveReferences    *[]AdvisoryCVEReference `json:"cve_references,omitempty"`
	DateAdded        *string                 `json:"date_added,omitempty"`
	MalpediaUrl      *string                 `json:"malpedia_url,omitempty"`
	RansomwareFamily *string                 `json:"ransomware_family,omitempty"`
}

// AdvisoryRecordType defines model for advisory.RecordType.
type AdvisoryRecordType struct {
	Finding *string `json:"finding,omitempty"`
	Id      *string `json:"id,omitempty"`
	Kind    *string `json:"kind,omitempty"`
}

// AdvisoryRedhatCVE defines model for advisory.RedhatCVE.
type AdvisoryRedhatCVE struct {
	Advisories         *[]string `json:"advisories,omitempty"`
	AdvisoryCsafVexUrl *[]string `json:"advisory_csaf_vex_url,omitempty"`

	// AffectedPackages used for un-marshlling from redhat
	AffectedPackages    *[]string              `json:"affected_packages,omitempty"`
	AffectedRelease     *[]AdvisoryAffectedRel `json:"affected_release,omitempty"`
	Bugzilla            *string                `json:"bugzilla,omitempty"`
	BugzillaDescription *string                `json:"bugzilla_description,omitempty"`
	Cve                 *[]string              `json:"cve,omitempty"`
	CveCsafVexUrl       *string                `json:"cve_csaf_vex_url,omitempty"`
	Cvss3Score          *string                `json:"cvss3_score,omitempty"`
	Cvss3ScoringVector  *string                `json:"cvss3_scoring_vector,omitempty"`
	CvssScore           *float32               `json:"cvss_score,omitempty"`
	CvssScoringVector   *string                `json:"cvss_scoring_vector,omitempty"`
	Cwe                 *string                `json:"cwe,omitempty"`
	PackageState        *[]AdvisoryPackageStat `json:"package_state,omitempty"`

	// Packages used to index into vulncheck OS
	Packages    *[]AdvisoryVulnCheckPackage `json:"packages,omitempty"`
	PublicDate  *string                     `json:"public_date,omitempty"`
	ResourceUrl *string                     `json:"resource_url,omitempty"`
	Severity    *string                     `json:"severity,omitempty"`
}

// AdvisoryRefURL defines model for advisory.RefURL.
type AdvisoryRefURL struct {
	DateAdded           *string   `json:"date_added,omitempty"`
	ExploitAvailability *string   `json:"exploit_availability,omitempty"`
	ExploitMaturity     *string   `json:"exploit_maturity,omitempty"`
	Lang                *string   `json:"lang,omitempty"`
	Tags                *[]string `json:"tags,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryReference defines model for advisory.Reference.
type AdvisoryReference struct {
	// Href sort
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryRelatedRule defines model for advisory.RelatedRule.
type AdvisoryRelatedRule struct {
	Id   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// AdvisoryRelationship defines model for advisory.Relationship.
type AdvisoryRelationship struct {
	ProductReference          *string `json:"productReference,omitempty"`
	RelatesToProductReference *string `json:"relatesToProductReference,omitempty"`
	RelationType              *string `json:"relationType,omitempty"`
}

// AdvisoryRemediationData defines model for advisory.RemediationData.
type AdvisoryRemediationData struct {
	Category        *string              `json:"category,omitempty"`
	Date            *string              `json:"date,omitempty"`
	Details         *string              `json:"details,omitempty"`
	Entitlements    *[]string            `json:"entitlements,omitempty"`
	GroupIds        *[]string            `json:"group_ids,omitempty"`
	ProductIds      *[]string            `json:"product_ids,omitempty"`
	RestartRequired *AdvisoryRestartData `json:"restart_required,omitempty"`
}

// AdvisoryRenesas defines model for advisory.Renesas.
type AdvisoryRenesas struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryReportedExploit defines model for advisory.ReportedExploit.
type AdvisoryReportedExploit struct {
	DateAdded *string `json:"date_added,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// AdvisoryRestartData defines model for advisory.RestartData.
type AdvisoryRestartData struct {
	Category *string `json:"category,omitempty"`
	Details  *string `json:"details,omitempty"`
}

// AdvisoryRevision defines model for advisory.Revision.
type AdvisoryRevision struct {
	Date        *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Number      *string `json:"number,omitempty"`
}

// AdvisoryRevive defines model for advisory.Revive.
type AdvisoryRevive struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryRockwell defines model for advisory.Rockwell.
type AdvisoryRockwell struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	Impact     *string   `json:"impact,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryRockyAdvisory defines model for advisory.RockyAdvisory.
type AdvisoryRockyAdvisory struct {
	AffectedProducts *[]string           `json:"affectedProducts,omitempty"`
	BuildReferences  *[]string           `json:"buildReferences,omitempty"`
	Cves             *[]AdvisoryRockyCve `json:"cves,omitempty"`
	Description      *string             `json:"description,omitempty"`
	Fixes            *[]AdvisoryRockyFix `json:"fixes,omitempty"`
	Name             *string             `json:"name,omitempty"`
	PublishedAt      *string             `json:"publishedAt,omitempty"`
	RebootSuggested  *bool               `json:"rebootSuggested,omitempty"`
	References       *[]string           `json:"references,omitempty"`
	Rpms             *AdvisoryRockyRpms  `json:"rpms,omitempty"`
	Severity         *string             `json:"severity,omitempty"`
	ShortCode        *string             `json:"shortCode,omitempty"`
	Solution         *string             `json:"solution,omitempty"`
	Synopsis         *string             `json:"synopsis,omitempty"`
	Topic            *string             `json:"topic,omitempty"`
	Type             *string             `json:"type,omitempty"`
}

// AdvisoryRockyCve defines model for advisory.RockyCve.
type AdvisoryRockyCve struct {
	Cvss3BaseScore     *string `json:"cvss3BaseScore,omitempty"`
	Cvss3ScoringVector *string `json:"cvss3ScoringVector,omitempty"`
	Cwe                *string `json:"cwe,omitempty"`
	Name               *string `json:"name,omitempty"`
	SourceBy           *string `json:"sourceBy,omitempty"`
	SourceLink         *string `json:"sourceLink,omitempty"`
}

// AdvisoryRockyErrata defines model for advisory.RockyErrata.
type AdvisoryRockyErrata struct {
	Advisory  *AdvisoryRockyAdvisory  `json:"advisory,omitempty"`
	Cve       *[]string               `json:"cve,omitempty"`
	DateAdded *string                 `json:"date_added,omitempty"`
	Packages  *[]AdvisoryRockyPackage `json:"packages,omitempty"`
	Url       *string                 `json:"url,omitempty"`
}

// AdvisoryRockyFix defines model for advisory.RockyFix.
type AdvisoryRockyFix struct {
	Description *string `json:"description,omitempty"`
	SourceBy    *string `json:"sourceBy,omitempty"`
	SourceLink  *string `json:"sourceLink,omitempty"`
	Ticket      *string `json:"ticket,omitempty"`
}

// AdvisoryRockyPackage defines model for advisory.RockyPackage.
type AdvisoryRockyPackage struct {
	Distro  *string `json:"distro,omitempty"`
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryRockyRpms defines model for advisory.RockyRpms.
type AdvisoryRockyRpms map[string]AdvisoryRockyVersion

// AdvisoryRockyVersion defines model for advisory.RockyVersion.
type AdvisoryRockyVersion struct {
	Nvras *[]string `json:"nvras,omitempty"`
}

// AdvisoryRuckus defines model for advisory.Ruckus.
type AdvisoryRuckus struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryRustsecAdvisory defines model for advisory.RustsecAdvisory.
type AdvisoryRustsecAdvisory struct {
	Advisory    *AdvisoryRustsecFrontMatterAdvisory `json:"advisory,omitempty"`
	Affected    *AdvisoryRustsecAffected            `json:"affected,omitempty"`
	DateAdded   *string                             `json:"date_added,omitempty"`
	Description *string                             `json:"description,omitempty"`
	Versions    *AdvisoryRustsecFrontMatterVersions `json:"versions,omitempty"`
}

// AdvisoryRustsecAffected defines model for advisory.RustsecAffected.
type AdvisoryRustsecAffected struct {
	Arch      *[]string `json:"arch,omitempty"`
	Functions *string   `json:"functions,omitempty"`
	Os        *[]string `json:"os,omitempty"`
}

// AdvisoryRustsecFrontMatterAdvisory defines model for advisory.RustsecFrontMatterAdvisory.
type AdvisoryRustsecFrontMatterAdvisory struct {
	// Aliases Vulnerability aliases, e.g. CVE IDs (optional but recommended)
	// Request a CVE for your RustSec vulns: https://iwantacve.org/
	Aliases *[]string `json:"aliases,omitempty"`

	// Categories Optional: Categories this advisory falls under. Valid categories are:
	// "code-execution", "crypto-failure", "denial-of-service", "file-disclosure"
	// "format-injection", "memory-corruption", "memory-exposure", "privilege-escalation"
	Categories *[]string `json:"categories,omitempty"`

	// Cvss Optional: a Common Vulnerability Scoring System score. More information
	// can be found on the CVSS website, https://www.first.org/cvss/.
	Cvss *string `json:"cvss,omitempty"`

	// Date Disclosure date of the advisory as an RFC 3339 date (mandatory)
	Date *string `json:"date,omitempty"`

	// Informational Optional: Indicates the type of informational security  advisory
	//  - "unsound" for soundness issues
	//  - "unmaintained" for crates that are no longer maintained
	//  - "notice" for other informational notices
	Informational *string `json:"informational,omitempty"`

	// Keywords Freeform keywords which describe this vulnerability, similar to Cargo (optional)
	Keywords *[]string `json:"keywords,omitempty"`

	// Package Name of the affected crate (mandatory)
	Package *string `json:"package,omitempty"`

	// References URL to additional helpful references regarding the advisory (optional)
	References *[]string `json:"references,omitempty"`

	// Related Related vulnerabilities (optional)
	// e.g. CVE for a C library wrapped by a -sys crate)
	Related *[]string `json:"related,omitempty"`

	// RustsecId Identifier for the advisory (mandatory). Will be assigned a "RUSTSEC-YYYY-NNNN"
	// identifier e.g. RUSTSEC-2018-0001. Please use "RUSTSEC-0000-0000" in PRs.
	RustsecId *string `json:"rustsec_id,omitempty"`

	// Url URL to a long-form description of this issue, e.g. a GitHub issue/PR,
	// a change log entry, or a blogpost announcing the release (optional)
	Url *string `json:"url,omitempty"`

	// Withdrawn Whether the advisory is withdrawn (optional)
	Withdrawn *string `json:"withdrawn,omitempty"`
}

// AdvisoryRustsecFrontMatterVersions defines model for advisory.RustsecFrontMatterVersions.
type AdvisoryRustsecFrontMatterVersions struct {
	Patched *[]string `json:"patched,omitempty"`

	// Unaffected Versions which were never vulnerable (optional)
	Unaffected *[]string `json:"unaffected,omitempty"`
}

// AdvisorySAAdvisory defines model for advisory.SAAdvisory.
type AdvisorySAAdvisory struct {
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Link          *string   `json:"link,omitempty"`
	References    *[]string `json:"references,omitempty"`
	Severity      *string   `json:"severity,omitempty"`
	Threats       *string   `json:"threats,omitempty"`
	Vendor        *string   `json:"vendor,omitempty"`
	WarningDate   *string   `json:"warningDate,omitempty"`
	WarningNumber *string   `json:"warningNumber,omitempty"`
}

// AdvisorySAP defines model for advisory.SAP.
type AdvisorySAP struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisorySECConsult defines model for advisory.SECConsult.
type AdvisorySECConsult struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySSASource defines model for advisory.SSASource.
type AdvisorySSASource struct {
	Document        *AdvisorySiemensDocument        `json:"document,omitempty"`
	ProductTree     *AdvisorySiemensProductTree     `json:"product_tree,omitempty"`
	Vulnerabilities *[]AdvisorySiemensVulnerability `json:"vulnerabilities,omitempty"`
}

// AdvisorySSDAdvisory defines model for advisory.SSDAdvisory.
type AdvisorySSDAdvisory struct {
	Analysis  *string   `json:"analysis,omitempty"`
	Credit    *string   `json:"credit,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Link      *string   `json:"link,omitempty"`

	// Poc contains actual poc code
	Poc         *string `json:"poc,omitempty"`
	Published   *string `json:"published,omitempty"`
	ResponseRef *string `json:"response_ref,omitempty"`
	Summary     *string `json:"summary,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// AdvisorySaintExploit defines model for advisory.SaintExploit.
type AdvisorySaintExploit struct {
	Bid         *string   `json:"bid,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Osvdb       *string   `json:"osvdb,omitempty"`
	SaintId     *string   `json:"saint_id,omitempty"`
	Type        *string   `json:"type,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisorySalesForce defines model for advisory.SalesForce.
type AdvisorySalesForce struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Link        *string   `json:"link,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisorySamba defines model for advisory.Samba.
type AdvisorySamba struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Issues     *string   `json:"issues,omitempty"`
	References *[]string `json:"references,omitempty"`
}

// AdvisorySchneiderElectricAdvisory defines model for advisory.SchneiderElectricAdvisory.
type AdvisorySchneiderElectricAdvisory struct {
	CsafUrl             *string   `json:"csaf_url,omitempty"`
	Cve                 *[]string `json:"cve,omitempty"`
	Cwe                 *[]string `json:"cwe,omitempty"`
	DateAdded           *string   `json:"date_added,omitempty"`
	PdfUrl              *string   `json:"pdf_url,omitempty"`
	SchneiderElectricId *string   `json:"schneider_electric_id,omitempty"`
	Title               *string   `json:"title,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryScore defines model for advisory.Score.
type AdvisoryScore struct {
	Cve           *string           `json:"cve,omitempty"`
	InKEV         *bool             `json:"inKEV,omitempty"`
	InVCKEV       *bool             `json:"inVCKEV,omitempty"`
	ReferenceUrls *[]AdvisoryRefURL `json:"reference_urls,omitempty"`
	Score         *int              `json:"score,omitempty"`
}

// AdvisoryScoreSet defines model for advisory.ScoreSet.
type AdvisoryScoreSet struct {
	BaseScore *string `json:"baseScore,omitempty"`
	Vector    *string `json:"vector,omitempty"`
}

// AdvisorySecurityBulletin defines model for advisory.SecurityBulletin.
type AdvisorySecurityBulletin struct {
	Acknowledgement *string                   `json:"acknowledgement,omitempty"`
	BulletinId      *string                   `json:"bulletinId,omitempty"`
	Cve             *[]string                 `json:"cve,omitempty"`
	Cvedetails      *[]AdvisoryCVEDetail      `json:"cvedetails,omitempty"`
	DateAdded       *string                   `json:"date_added,omitempty"`
	HardwareUpdates *[]AdvisoryHardwareUpdate `json:"hardwareUpdates,omitempty"`
	LastUpdated     *string                   `json:"lastUpdated,omitempty"`
	Link            *string                   `json:"link,omitempty"`
	Revisions       *[]AdvisoryNvidiaRevision `json:"revisions,omitempty"`
	Severity        *string                   `json:"severity,omitempty"`
	SoftwareUpdates *[]AdvisorySoftwareUpdate `json:"softwareUpdates,omitempty"`
	Title           *string                   `json:"title,omitempty"`
}

// AdvisorySecurityLab defines model for advisory.SecurityLab.
type AdvisorySecurityLab struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	TitleRu   *string   `json:"title_ru,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Vendor    *string   `json:"vendor,omitempty"`
}

// AdvisorySeebugExploit defines model for advisory.SeebugExploit.
type AdvisorySeebugExploit struct {
	Author    *string   `json:"author,omitempty"`
	Category  *string   `json:"category,omitempty"`
	Cnnvd     *[]string `json:"cnnvd,omitempty"`
	Cnvd      *[]string `json:"cnvd,omitempty"`
	Component *string   `json:"component,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	FindTime  *string   `json:"find_time,omitempty"`
	Name      *string   `json:"name,omitempty"`
	SsvId     *string   `json:"ssv_id,omitempty"`
	Submitter *string   `json:"submitter,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySel defines model for advisory.Sel.
type AdvisorySel struct {
	Acknowledgement *string   `json:"acknowledgement,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Description     *string   `json:"description,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisorySentinelOne defines model for advisory.SentinelOne.
type AdvisorySentinelOne struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryServiceNow defines model for advisory.ServiceNow.
type AdvisoryServiceNow struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisorySeverity defines model for advisory.Severity.
type AdvisorySeverity struct {
	Score *string `json:"score,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryShadowServerExploitedVulnerability defines model for advisory.ShadowServerExploitedVulnerability.
type AdvisoryShadowServerExploitedVulnerability struct {
	Cnvd                 *string   `json:"cnvd,omitempty"`
	Cve                  *[]string `json:"cve,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	DetectionsLast1Day   *int      `json:"detections_last_1_day,omitempty"`
	DetectionsLast30Days *int      `json:"detections_last_30_days,omitempty"`
	DetectionsLast7Days  *int      `json:"detections_last_7_days,omitempty"`
	DetectionsLast90Days *int      `json:"detections_last_90_days,omitempty"`
	Edb                  *string   `json:"edb,omitempty"`
	InKev                *bool     `json:"in_kev,omitempty"`
	IsIot                *bool     `json:"is_iot,omitempty"`
	IsRansomware         *bool     `json:"is_ransomware,omitempty"`
	Product              *string   `json:"product,omitempty"`
	Url                  *string   `json:"url,omitempty"`
	Vendor               *string   `json:"vendor,omitempty"`
	VulnerabilityId      *string   `json:"vulnerability_id,omitempty"`
	VulnerabilityLink    *string   `json:"vulnerability_link,omitempty"`
}

// AdvisoryShielder defines model for advisory.Shielder.
type AdvisoryShielder struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySick defines model for advisory.Sick.
type AdvisorySick struct {
	CsafUrl   *string   `json:"csaf_url,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Products  *[]string `json:"products,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisorySiemensAcknowledgments defines model for advisory.SiemensAcknowledgments.
type AdvisorySiemensAcknowledgments struct {
	Names        *[]string `json:"names,omitempty"`
	Organization *string   `json:"organization,omitempty"`
	Summary      *string   `json:"summary,omitempty"`
}

// AdvisorySiemensAdvisory defines model for advisory.SiemensAdvisory.
type AdvisorySiemensAdvisory struct {
	CsafUrl    *string            `json:"csaf_url,omitempty"`
	Cve        *[]string          `json:"cve,omitempty"`
	CvrfUrl    *string            `json:"cvrf_url,omitempty"`
	DateAdded  *string            `json:"date_added,omitempty"`
	HtmlUrl    *string            `json:"html_url,omitempty"`
	Id         *string            `json:"id,omitempty"`
	LastUpdate *string            `json:"last_update,omitempty"`
	PdfUrl     *string            `json:"pdf_url,omitempty"`
	Products   *[]string          `json:"products,omitempty"`
	Ssa        *AdvisorySSASource `json:"ssa,omitempty"`
	Tags       *[]string          `json:"tags,omitempty"`
	Title      *string            `json:"title,omitempty"`
	TxtUrl     *string            `json:"txt_url,omitempty"`
}

// AdvisorySiemensBranch defines model for advisory.SiemensBranch.
type AdvisorySiemensBranch struct {
	Branches *[]AdvisorySiemensSubBranch `json:"branches,omitempty"`
	Category *string                     `json:"category,omitempty"`
	Name     *string                     `json:"name,omitempty"`
}

// AdvisorySiemensCVSSV3 defines model for advisory.SiemensCVSSV3.
type AdvisorySiemensCVSSV3 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string  `json:"baseSeverity,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisorySiemensCWE defines model for advisory.SiemensCWE.
type AdvisorySiemensCWE struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// AdvisorySiemensDistribution defines model for advisory.SiemensDistribution.
type AdvisorySiemensDistribution struct {
	Text *string             `json:"text,omitempty"`
	Tlp  *AdvisorySiemensTLP `json:"tlp,omitempty"`
}

// AdvisorySiemensDocument defines model for advisory.SiemensDocument.
type AdvisorySiemensDocument struct {
	Acknowledgments *[]AdvisorySiemensAcknowledgments `json:"acknowledgments,omitempty"`
	Category        *string                           `json:"category,omitempty"`
	CsafVersion     *string                           `json:"csaf_version,omitempty"`
	Distribution    *AdvisorySiemensDistribution      `json:"distribution,omitempty"`
	Notes           *[]AdvisorySiemensNotes           `json:"notes,omitempty"`
	Publisher       *AdvisorySiemensPublisher         `json:"publisher,omitempty"`
	References      *[]AdvisorySiemensReferences      `json:"references,omitempty"`
	Title           *string                           `json:"title,omitempty"`
	Tracking        *AdvisorySiemensTracking          `json:"tracking,omitempty"`
}

// AdvisorySiemensEngine defines model for advisory.SiemensEngine.
type AdvisorySiemensEngine struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisorySiemensGenerator defines model for advisory.SiemensGenerator.
type AdvisorySiemensGenerator struct {
	Engine *AdvisorySiemensEngine `json:"engine,omitempty"`
}

// AdvisorySiemensNotes defines model for advisory.SiemensNotes.
type AdvisorySiemensNotes struct {
	Category *string `json:"category,omitempty"`
	Text     *string `json:"text,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// AdvisorySiemensProduct defines model for advisory.SiemensProduct.
type AdvisorySiemensProduct struct {
	Name                        *string                                     `json:"name,omitempty"`
	ProductId                   *string                                     `json:"product_id,omitempty"`
	ProductIdentificationHelper *AdvisorySiemensProductIdentificationHelper `json:"product_identification_helper,omitempty"`
}

// AdvisorySiemensProductIdentificationHelper defines model for advisory.SiemensProductIdentificationHelper.
type AdvisorySiemensProductIdentificationHelper struct {
	ModelNumbers *[]string `json:"model_numbers,omitempty"`
}

// AdvisorySiemensProductStatus defines model for advisory.SiemensProductStatus.
type AdvisorySiemensProductStatus struct {
	KnownAffected *[]string `json:"known_affected,omitempty"`
}

// AdvisorySiemensProductTree defines model for advisory.SiemensProductTree.
type AdvisorySiemensProductTree struct {
	Branches *[]AdvisorySiemensBranch `json:"branches,omitempty"`
}

// AdvisorySiemensPublisher defines model for advisory.SiemensPublisher.
type AdvisorySiemensPublisher struct {
	Category       *string `json:"category,omitempty"`
	ContactDetails *string `json:"contact_details,omitempty"`
	Name           *string `json:"name,omitempty"`
	Namespace      *string `json:"namespace,omitempty"`
}

// AdvisorySiemensReferences defines model for advisory.SiemensReferences.
type AdvisorySiemensReferences struct {
	Category *string `json:"category,omitempty"`
	Summary  *string `json:"summary,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// AdvisorySiemensRemediation defines model for advisory.SiemensRemediation.
type AdvisorySiemensRemediation struct {
	Category   *string   `json:"category,omitempty"`
	Details    *string   `json:"details,omitempty"`
	ProductIds *[]string `json:"product_ids,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisorySiemensRevisionHistory defines model for advisory.SiemensRevisionHistory.
type AdvisorySiemensRevisionHistory struct {
	Date          *string `json:"date,omitempty"`
	LegacyVersion *string `json:"legacy_version,omitempty"`
	Number        *string `json:"number,omitempty"`
	Summary       *string `json:"summary,omitempty"`
}

// AdvisorySiemensScore defines model for advisory.SiemensScore.
type AdvisorySiemensScore struct {
	CvssV3   *AdvisorySiemensCVSSV3 `json:"cvss_v3,omitempty"`
	Products *[]string              `json:"products,omitempty"`
}

// AdvisorySiemensSubBranch defines model for advisory.SiemensSubBranch.
type AdvisorySiemensSubBranch struct {
	Branches *[]AdvisorySiemensSubSubBranch `json:"branches,omitempty"`
	Category *string                        `json:"category,omitempty"`
	Name     *string                        `json:"name,omitempty"`
}

// AdvisorySiemensSubSubBranch defines model for advisory.SiemensSubSubBranch.
type AdvisorySiemensSubSubBranch struct {
	Category *string                 `json:"category,omitempty"`
	Name     *string                 `json:"name,omitempty"`
	Product  *AdvisorySiemensProduct `json:"product,omitempty"`
}

// AdvisorySiemensTLP defines model for advisory.SiemensTLP.
type AdvisorySiemensTLP struct {
	Label *string `json:"label,omitempty"`
}

// AdvisorySiemensTracking defines model for advisory.SiemensTracking.
type AdvisorySiemensTracking struct {
	CurrentReleaseDate *string                           `json:"current_release_date,omitempty"`
	Generator          *AdvisorySiemensGenerator         `json:"generator,omitempty"`
	Id                 *string                           `json:"id,omitempty"`
	InitialReleaseDate *string                           `json:"initial_release_date,omitempty"`
	RevisionHistory    *[]AdvisorySiemensRevisionHistory `json:"revision_history,omitempty"`
	Status             *string                           `json:"status,omitempty"`
	Version            *string                           `json:"version,omitempty"`
}

// AdvisorySiemensVulnerability defines model for advisory.SiemensVulnerability.
type AdvisorySiemensVulnerability struct {
	Cve           *string                       `json:"cve,omitempty"`
	Cwe           *AdvisorySiemensCWE           `json:"cwe,omitempty"`
	Notes         *[]AdvisorySiemensNotes       `json:"notes,omitempty"`
	ProductStatus *AdvisorySiemensProductStatus `json:"product_status,omitempty"`
	References    *[]AdvisorySiemensReferences  `json:"references,omitempty"`
	Remediations  *[]AdvisorySiemensRemediation `json:"remediations,omitempty"`
	Scores        *[]AdvisorySiemensScore       `json:"scores,omitempty"`
	Title         *string                       `json:"title,omitempty"`
}

// AdvisorySierraWireless defines model for advisory.SierraWireless.
type AdvisorySierraWireless struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Swid      *string   `json:"swid,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySigmaRule defines model for advisory.SigmaRule.
type AdvisorySigmaRule struct {
	Cve       *[]string              `json:"cve,omitempty"`
	DateAdded *string                `json:"date_added,omitempty"`
	SigmaRule *AdvisorySigmaRuleRule `json:"sigma_rule,omitempty"`
	Summary   *string                `json:"summary,omitempty"`
	Title     *string                `json:"title,omitempty"`
	Url       *string                `json:"url,omitempty"`
}

// AdvisorySigmaRuleRule defines model for advisory.SigmaRuleRule.
type AdvisorySigmaRuleRule struct {
	Author         *string                 `json:"author,omitempty"`
	Date           *string                 `json:"date,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Detection      *map[string]interface{} `json:"detection,omitempty"`
	FalsePositives *[]string               `json:"false_positives,omitempty"`
	Fields         *[]string               `json:"fields,omitempty"`
	Id             *string                 `json:"id,omitempty"`
	Level          *string                 `json:"level,omitempty"`
	Logsource      *AdvisoryLogSource      `json:"logsource,omitempty"`
	Modified       *string                 `json:"modified,omitempty"`
	References     *[]string               `json:"references,omitempty"`
	Related        *[]AdvisoryRelatedRule  `json:"related,omitempty"`
	Status         *string                 `json:"status,omitempty"`
	Tags           *[]string               `json:"tags,omitempty"`
	Title          *string                 `json:"title,omitempty"`
}

// AdvisorySingCert defines model for advisory.SingCert.
type AdvisorySingCert struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Link       *string   `json:"link,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Updated    *string   `json:"updated,omitempty"`
}

// AdvisorySlackware defines model for advisory.Slackware.
type AdvisorySlackware struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySoftwareUpdate defines model for advisory.SoftwareUpdate.
type AdvisorySoftwareUpdate struct {
	AffectedVersion *string   `json:"affectedVersion,omitempty"`
	Cves            *[]string `json:"cves,omitempty"`
	OperatingSystem *string   `json:"operatingSystem,omitempty"`
	SoftwareProduct *string   `json:"softwareProduct,omitempty"`
	UpdatedVersion  *string   `json:"updatedVersion,omitempty"`
}

// AdvisorySolarWindsAdvisory defines model for advisory.SolarWindsAdvisory.
type AdvisorySolarWindsAdvisory struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	CvssScore        *string   `json:"cvss_score,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	FixedVersion     *string   `json:"fixed_version,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisorySolr defines model for advisory.Solr.
type AdvisorySolr struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySonicWallAdvisory defines model for advisory.SonicWallAdvisory.
type AdvisorySonicWallAdvisory struct {
	AdvisoryId             *string   `json:"advisory_id,omitempty"`
	AffectedProducts       *[]string `json:"affected_products,omitempty"`
	Cve                    *[]string `json:"cve,omitempty"`
	Cvss                   *string   `json:"cvss,omitempty"`
	CvssVector             *string   `json:"cvss_vector,omitempty"`
	CvssVersion            *float32  `json:"cvss_version,omitempty"`
	Cwe                    *string   `json:"cwe,omitempty"`
	DateAdded              *string   `json:"date_added,omitempty"`
	Impact                 *string   `json:"impact,omitempty"`
	IsWorkaroundAvailable  *bool     `json:"is_workaround_available,omitempty"`
	LastUpdatedWhen        *string   `json:"last_updated_when,omitempty"`
	PublishedWhen          *string   `json:"published_when,omitempty"`
	Summary                *string   `json:"summary,omitempty"`
	Title                  *string   `json:"title,omitempty"`
	Url                    *string   `json:"url,omitempty"`
	VulnStatus             *string   `json:"vuln_status,omitempty"`
	VulnerableProductsList *[]string `json:"vulnerable_products_list,omitempty"`
}

// AdvisorySpacelabsHealthcareAdvisory defines model for advisory.SpacelabsHealthcareAdvisory.
type AdvisorySpacelabsHealthcareAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySplunk defines model for advisory.Splunk.
type AdvisorySplunk struct {
	AdvisoryId       *string                  `json:"advisory_id,omitempty"`
	AffectedProducts *[]AdvisorySplunkProduct `json:"affected_products,omitempty"`
	BugId            *string                  `json:"bug_id,omitempty"`
	Cve              *[]string                `json:"cve,omitempty"`
	DateAdded        *string                  `json:"date_added,omitempty"`
	Summary          *string                  `json:"summary,omitempty"`
	Title            *string                  `json:"title,omitempty"`
	Url              *string                  `json:"url,omitempty"`
}

// AdvisorySplunkProduct defines model for advisory.SplunkProduct.
type AdvisorySplunkProduct struct {
	AffectedVersion *string `json:"affected_version,omitempty"`
	Component       *string `json:"component,omitempty"`
	FixedVersion    *string `json:"fixed_version,omitempty"`
	Product         *string `json:"product,omitempty"`
	Version         *string `json:"version,omitempty"`
}

// AdvisorySpring defines model for advisory.Spring.
type AdvisorySpring struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryStatus defines model for advisory.Status.
type AdvisoryStatus struct {
	ProductID *[]string `json:"productID,omitempty"`
	Type      *string   `json:"type,omitempty"`
}

// AdvisoryStormshield defines model for advisory.Stormshield.
type AdvisoryStormshield struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryStrykerAdvisory defines model for advisory.StrykerAdvisory.
type AdvisoryStrykerAdvisory struct {
	AffectedComponents *[]string `json:"affected_components,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisorySudo defines model for advisory.Sudo.
type AdvisorySudo struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Details    *string   `json:"details,omitempty"`
	Fix        *string   `json:"fix,omitempty"`
	Impact     *string   `json:"impact,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Workaround *string   `json:"workaround,omitempty"`
}

// AdvisorySwisslogHealthcareAdvisory defines model for advisory.SwisslogHealthcareAdvisory.
type AdvisorySwisslogHealthcareAdvisory struct {
	AffectedComponents *[]string `json:"affected_components,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	Cwe                *[]string `json:"cwe,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisorySymfony defines model for advisory.Symfony.
type AdvisorySymfony struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySynacktiv defines model for advisory.Synacktiv.
type AdvisorySynacktiv struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySyncroSoft defines model for advisory.SyncroSoft.
type AdvisorySyncroSoft struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySynology defines model for advisory.Synology.
type AdvisorySynology struct {
	AffectedProducts *[]string `json:"affected_products,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Id               *string   `json:"id,omitempty"`
	LastUpdated      *string   `json:"last_updated,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Status           *string   `json:"status,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryTI defines model for advisory.TI.
type AdvisoryTI struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	IncidentId *string   `json:"incident_id,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryTPLink defines model for advisory.TPLink.
type AdvisoryTPLink struct {
	BulletinId  *int      `json:"bulletin_id,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryTWCertAdvisory defines model for advisory.TWCertAdvisory.
type AdvisoryTWCertAdvisory struct {
	AffectedCn    *string   `json:"affected_cn,omitempty"`
	AffectedEn    *string   `json:"affected_en,omitempty"`
	CreditCn      *string   `json:"credit_cn,omitempty"`
	CreditEn      *string   `json:"credit_en,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	DescriptionCn *string   `json:"description_cn,omitempty"`
	DescriptionEn *string   `json:"description_en,omitempty"`
	Link          *string   `json:"link,omitempty"`
	SolutionCn    *string   `json:"solution_cn,omitempty"`
	SolutionEn    *string   `json:"solution_en,omitempty"`
	TitleCn       *string   `json:"title_cn,omitempty"`
	TitleEn       *string   `json:"title_en,omitempty"`
	Tvnid         *string   `json:"tvnid,omitempty"`
}

// AdvisoryTalosAdvisory defines model for advisory.TalosAdvisory.
type AdvisoryTalosAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	TalosId   *string   `json:"talos_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryTeamViewer defines model for advisory.TeamViewer.
type AdvisoryTeamViewer struct {
	BulletinId *string   `json:"bulletin_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryTenableResearchAdvisory defines model for advisory.TenableResearchAdvisory.
type AdvisoryTenableResearchAdvisory struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryTencent defines model for advisory.Tencent.
type AdvisoryTencent struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	SummaryCn *string   `json:"summary_cn,omitempty"`
	TitleCn   *string   `json:"title_cn,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryThales defines model for advisory.Thales.
type AdvisoryThales struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryTheMissingLink defines model for advisory.TheMissingLink.
type AdvisoryTheMissingLink struct {
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	FixedVersions    *string   `json:"fixed_versions,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryThreat defines model for advisory.Threat.
type AdvisoryThreat struct {
	Severity *string `json:"severity,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// AdvisoryThreatActorWithExternalObjects defines model for advisory.ThreatActorWithExternalObjects.
type AdvisoryThreatActorWithExternalObjects struct {
	CveReferences              *[]AdvisoryCVEReference             `json:"cve_references,omitempty"`
	DateAdded                  *string                             `json:"date_added,omitempty"`
	MalpediaUrl                *string                             `json:"malpedia_url,omitempty"`
	MispId                     *string                             `json:"misp_id,omitempty"`
	MispThreatActor            *AdvisoryMISPValueNoID              `json:"misp_threat_actor,omitempty"`
	MitreAttackGroup           *AdvisoryMITREAttackGroupNoID       `json:"mitre_attack_group,omitempty"`
	MitreId                    *string                             `json:"mitre_id,omitempty"`
	ThreatActorName            *string                             `json:"threat_actor_name,omitempty"`
	VendorNamesForThreatActors *[]AdvisoryVendorNameForThreatActor `json:"vendor_names_for_threat_actors,omitempty"`
}

// AdvisoryThreatData defines model for advisory.ThreatData.
type AdvisoryThreatData struct {
	Category   *string   `json:"category,omitempty"`
	Details    *string   `json:"details,omitempty"`
	ProductIds *[]string `json:"product_ids,omitempty"`
}

// AdvisoryTibco defines model for advisory.Tibco.
type AdvisoryTibco struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Impact      *string   `json:"impact,omitempty"`
	Overview    *string   `json:"overview,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryTimeline defines model for advisory.Timeline.
type AdvisoryTimeline struct {
	Lang *string `json:"lang,omitempty"`

	// Time FIXME: flip to time
	Time  *string `json:"time,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryTracking defines model for advisory.Tracking.
type AdvisoryTracking struct {
	CurrentReleaseDate *string `json:"current_release_date,omitempty"`
	Id                 *string `json:"id,omitempty"`
	InitialReleaseDate *string `json:"initial_release_date,omitempty"`
}

// AdvisoryTrackingID defines model for advisory.TrackingID.
type AdvisoryTrackingID struct {
	SystemName *string `json:"system_name,omitempty"`
	Text       *string `json:"text,omitempty"`
}

// AdvisoryTraneTechnology defines model for advisory.TraneTechnology.
type AdvisoryTraneTechnology struct {
	Brand     *string   `json:"brand,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Product   *string   `json:"product,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryTrendMicro defines model for advisory.TrendMicro.
type AdvisoryTrendMicro struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Scores    *string   `json:"scores,omitempty"`
	Severity  *string   `json:"severity,omitempty"`
	Solution  *string   `json:"solution,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryTriageNotes defines model for advisory.TriageNotes.
type AdvisoryTriageNotes struct {
	References *[]string `json:"references,omitempty"`
}

// AdvisoryTrustwave defines model for advisory.Trustwave.
type AdvisoryTrustwave struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryUSD defines model for advisory.USD.
type AdvisoryUSD struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryUSOMAdvisory defines model for advisory.USOMAdvisory.
type AdvisoryUSOMAdvisory struct {
	Cve                  *[]string `json:"cve,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	EffectTr             *string   `json:"effect_tr,omitempty"`
	GeneralInformationTr *string   `json:"general_information_tr,omitempty"`
	References           *[]string `json:"references,omitempty"`
	SolutionTr           *string   `json:"solution_tr,omitempty"`
	TitleTr              *string   `json:"title_tr,omitempty"`
	Trid                 *string   `json:"trid,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryUbiquiti defines model for advisory.Ubiquiti.
type AdvisoryUbiquiti struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Links     *[]string `json:"links,omitempty"`
	Products  *[]string `json:"products,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryUbuntuCVE defines model for advisory.UbuntuCVE.
type AdvisoryUbuntuCVE struct {
	AffectedPackages *[]AdvisoryAffectedUbuntuPackage `json:"affected_packages,omitempty"`

	// Cve Candidate
	Cve *[]string `json:"cve,omitempty"`

	// DateAdded PublicDate
	DateAdded *string `json:"date_added,omitempty"`

	// ReferenceUrls References
	ReferenceUrls *[]string `json:"reference_urls,omitempty"`
	SourceUrl     *string   `json:"source_url,omitempty"`

	// Status active || retired
	Status    *string   `json:"status,omitempty"`
	UbuntuUrl *string   `json:"ubuntu_url,omitempty"`
	Usn       *[]string `json:"usn,omitempty"`
}

// AdvisoryUbuntuPackageReleaseStatus defines model for advisory.UbuntuPackageReleaseStatus.
type AdvisoryUbuntuPackageReleaseStatus struct {
	Affected       *bool   `json:"affected,omitempty"`
	Fixed          *bool   `json:"fixed,omitempty"`
	FixedVersion   *string `json:"fixed_version,omitempty"`
	Lts            *bool   `json:"lts,omitempty"`
	Release        *string `json:"release,omitempty"`
	ReleaseLong    *string `json:"release_long,omitempty"`
	ReleaseVersion *string `json:"release_version,omitempty"`
	Status         *string `json:"status,omitempty"`
}

// AdvisoryUnify defines model for advisory.Unify.
type AdvisoryUnify struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryUnisoc defines model for advisory.Unisoc.
type AdvisoryUnisoc struct {
	AccessVector     *string   `json:"access_vector,omitempty"`
	AffectedChipsets *string   `json:"affected_chipsets,omitempty"`
	AffectedSoftware *string   `json:"affected_software,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Rating           *string   `json:"rating,omitempty"`
	Score            *string   `json:"score,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Technology       *string   `json:"technology,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
	Vulnerability    *string   `json:"vulnerability,omitempty"`
}

// AdvisoryUpdate defines model for advisory.Update.
type AdvisoryUpdate struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id sort // key
	Id         *string              `json:"id,omitempty"`
	Issued     *AdvisoryDateTime    `json:"issued,omitempty"`
	OsArch     *string              `json:"os_arch,omitempty"`
	OsVersion  *string              `json:"os_version,omitempty"`
	Packages   *[]AdvisoryPackage   `json:"packages,omitempty"`
	References *[]AdvisoryReference `json:"references,omitempty"`
	Severity   *string              `json:"severity,omitempty"`
	Title      *string              `json:"title,omitempty"`
	Type       *string              `json:"type,omitempty"`
	Updated    *AdvisoryDateTime    `json:"updated,omitempty"`
}

// AdvisoryUpdated defines model for advisory.Updated.
type AdvisoryUpdated struct {
	Date *string `json:"date,omitempty"`
}

// AdvisoryVCCPEDictionary defines model for advisory.VCCPEDictionary.
type AdvisoryVCCPEDictionary struct {
	BaseCPE  *string   `json:"baseCPE,omitempty"`
	Versions *[]string `json:"versions,omitempty"`
}

// AdvisoryVDEAdvisory defines model for advisory.VDEAdvisory.
type AdvisoryVDEAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Vde             *string   `json:"vde,omitempty"`
}

// AdvisoryVMWareAdvisory defines model for advisory.VMWareAdvisory.
type AdvisoryVMWareAdvisory struct {
	AdvisoryID  *string   `json:"AdvisoryID,omitempty"`
	AdvisoryURL *string   `json:"AdvisoryURL,omitempty"`
	CVSSv3Range *string   `json:"CVSSv3Range,omitempty"`
	IssueDate   *string   `json:"IssueDate,omitempty"`
	Severity    *string   `json:"Severity,omitempty"`
	Synopsis    *string   `json:"Synopsis,omitempty"`
	UpdatedOn   *string   `json:"UpdatedOn,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
}

// AdvisoryVYAIREAdvisory defines model for advisory.VYAIREAdvisory.
type AdvisoryVYAIREAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryVanDyke defines model for advisory.VanDyke.
type AdvisoryVanDyke struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVapidLabsAdvisory defines model for advisory.VapidLabsAdvisory.
type AdvisoryVapidLabsAdvisory struct {
	Author        *string   `json:"author,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Exploit       *string   `json:"exploit,omitempty"`
	Link          *string   `json:"link,omitempty"`
	Title         *string   `json:"title,omitempty"`
	VapidId       *string   `json:"vapidId,omitempty"`
	Vendor        *string   `json:"vendor,omitempty"`
	Vulnerability *string   `json:"vulnerability,omitempty"`
}

// AdvisoryVeeam defines model for advisory.Veeam.
type AdvisoryVeeam struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Details    *string   `json:"details,omitempty"`
	References *[]string `json:"references,omitempty"`
	Solution   *string   `json:"solution,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVendorNameForThreatActor defines model for advisory.VendorNameForThreatActor.
type AdvisoryVendorNameForThreatActor struct {
	ThreatActorName *string `json:"threat_actor_name,omitempty"`
	Url             *string `json:"url,omitempty"`
	VendorName      *string `json:"vendor_name,omitempty"`
}

// AdvisoryVeritas defines model for advisory.Veritas.
type AdvisoryVeritas struct {
	BulletinId *string   `json:"bulletin_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVoidSec defines model for advisory.VoidSec.
type AdvisoryVoidSec struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVulnCheck defines model for advisory.VulnCheck.
type AdvisoryVulnCheck struct {
	Affecting    *[]string `json:"affecting,omitempty"`
	Credit       *[]string `json:"credit,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	Cvss         *string   `json:"cvss,omitempty"`
	CvssV3Vector *string   `json:"cvss_v3_vector,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	References   *[]string `json:"references,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Type         *string   `json:"type,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// AdvisoryVulnCheckCVEListV5 defines model for advisory.VulnCheckCVEListV5.
type AdvisoryVulnCheckCVEListV5 struct {
	Cve       *[]string                  `json:"cve,omitempty"`
	DateAdded *string                    `json:"date_added,omitempty"`
	MitreRef  *AdvisoryMitreCVEListV5Ref `json:"mitre_ref,omitempty"`
	Summary   *string                    `json:"summary,omitempty"`
	Title     *string                    `json:"title,omitempty"`
	Url       *string                    `json:"url,omitempty"`
}

// AdvisoryVulnCheckConfig defines model for advisory.VulnCheckConfig.
type AdvisoryVulnCheckConfig struct {
	Config    *[]AdvisoryNVD20Configuration `json:"config,omitempty"`
	Cve       *[]string                     `json:"cve,omitempty"`
	DateAdded *string                       `json:"date_added,omitempty"`
}

// AdvisoryVulnCheckKEV defines model for advisory.VulnCheckKEV.
type AdvisoryVulnCheckKEV struct {
	Timestamp                     *string                    `json:"_timestamp,omitempty"`
	CisaDateAdded                 *string                    `json:"cisa_date_added,omitempty"`
	Cve                           *[]string                  `json:"cve,omitempty"`
	DateAdded                     *string                    `json:"date_added,omitempty"`
	DueDate                       *string                    `json:"dueDate,omitempty"`
	KnownRansomwareCampaignUse    *string                    `json:"knownRansomwareCampaignUse,omitempty"`
	Product                       *string                    `json:"product,omitempty"`
	RequiredAction                *string                    `json:"required_action,omitempty"`
	ShortDescription              *string                    `json:"shortDescription,omitempty"`
	VendorProject                 *string                    `json:"vendorProject,omitempty"`
	VulncheckReportedExploitation *[]AdvisoryReportedExploit `json:"vulncheck_reported_exploitation,omitempty"`
	VulncheckXdb                  *[]AdvisoryXDB             `json:"vulncheck_xdb,omitempty"`
	VulnerabilityName             *string                    `json:"vulnerabilityName,omitempty"`
}

// AdvisoryVulnCheckPackage defines model for advisory.VulnCheckPackage.
type AdvisoryVulnCheckPackage struct {
	Arch     *string `json:"arch,omitempty"`
	Distro   *string `json:"distro,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Md5      *string `json:"md5,omitempty"`
	Name     *string `json:"name,omitempty"`
	Purl     *string `json:"purl,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryVulnerability defines model for advisory.Vulnerability.
type AdvisoryVulnerability struct {
	Cve           *string           `json:"cve,omitempty"`
	CvssscoreSets *AdvisoryScoreSet `json:"cvssscoreSets,omitempty"`
	Description   *string           `json:"description,omitempty"`

	// Packages vulncheck addition
	Packages        *[]AdvisoryVulnCheckPackage `json:"packages,omitempty"`
	ProductStatuses *[]AdvisoryStatus           `json:"productStatuses,omitempty"`
	References      *[]AdvisoryCVRFReference    `json:"references,omitempty"`
	Threats         *[]AdvisoryThreat           `json:"threats,omitempty"`
}

// AdvisoryVulnerableDebianPackage defines model for advisory.VulnerableDebianPackage.
type AdvisoryVulnerableDebianPackage struct {
	AssociatedCves *[]AdvisoryDebianCVE `json:"associated_cves,omitempty"`
	Cve            *[]string            `json:"cve,omitempty"`
	PackageName    *string              `json:"package_name,omitempty"`
}

// AdvisoryVulnrichment defines model for advisory.Vulnrichment.
type AdvisoryVulnrichment struct {
	Cve       *[]string                   `json:"cve,omitempty"`
	DateAdded *string                     `json:"date_added,omitempty"`
	MitreRef  *AdvisoryVulnrichmentCVERef `json:"mitre_ref,omitempty"`
	Url       *string                     `json:"url,omitempty"`
}

// AdvisoryVulnrichmentCVERef defines model for advisory.VulnrichmentCVERef.
type AdvisoryVulnrichmentCVERef struct {
	Containers  *AdvisoryVulnrichmentContainers `json:"containers,omitempty"`
	CveMetadata *AdvisoryMCveMetadata           `json:"cveMetadata,omitempty"`
	DataType    *string                         `json:"dataType,omitempty"`
	DataVersion *string                         `json:"dataVersion,omitempty"`
}

// AdvisoryVulnrichmentContainers defines model for advisory.VulnrichmentContainers.
type AdvisoryVulnrichmentContainers struct {
	Adp *[]AdvisoryADP `json:"adp,omitempty"`
	Cna *AdvisoryMCna  `json:"cna,omitempty"`
}

// AdvisoryVulnrichmentContent defines model for advisory.VulnrichmentContent.
type AdvisoryVulnrichmentContent struct {
	Id        *string                       `json:"id,omitempty"`
	Options   *[]AdvisoryVulnrichmentOption `json:"options,omitempty"`
	Role      *string                       `json:"role,omitempty"`
	Timestamp *string                       `json:"timestamp,omitempty"`
	Version   *string                       `json:"version,omitempty"`
}

// AdvisoryVulnrichmentMetric defines model for advisory.VulnrichmentMetric.
type AdvisoryVulnrichmentMetric struct {
	Other *AdvisoryVulnrichmentOther `json:"other,omitempty"`
}

// AdvisoryVulnrichmentOption defines model for advisory.VulnrichmentOption.
type AdvisoryVulnrichmentOption struct {
	Automatable     *string `json:"Automatable,omitempty"`
	Exploitation    *string `json:"Exploitation,omitempty"`
	TechnicalImpact *string `json:"Technical Impact,omitempty"`
}

// AdvisoryVulnrichmentOther defines model for advisory.VulnrichmentOther.
type AdvisoryVulnrichmentOther struct {
	Content *AdvisoryVulnrichmentContent `json:"content,omitempty"`
	Type    *string                      `json:"type,omitempty"`
}

// AdvisoryWRT defines model for advisory.WRT.
type AdvisoryWRT struct {
	Advisory         *string   `json:"advisory,omitempty"`
	AffectedVersions *string   `json:"affectedVersions,omitempty"`
	Credits          *string   `json:"credits,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Mitigations      *string   `json:"mitigations,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Requirements     *string   `json:"requirements,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryWatchGuard defines model for advisory.WatchGuard.
type AdvisoryWatchGuard struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Resolution *string   `json:"resolution,omitempty"`
	Score      *string   `json:"score,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryWhatsApp defines model for advisory.WhatsApp.
type AdvisoryWhatsApp struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryWibu defines model for advisory.Wibu.
type AdvisoryWibu struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryWireshark defines model for advisory.Wireshark.
type AdvisoryWireshark struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryWithSecure defines model for advisory.WithSecure.
type AdvisoryWithSecure struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryWolfSSL defines model for advisory.WolfSSL.
type AdvisoryWolfSSL struct {
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Description  *string   `json:"description,omitempty"`
	FixedVersion *string   `json:"fixed_version,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
}

// AdvisoryWolfi defines model for advisory.Wolfi.
type AdvisoryWolfi struct {
	Apkurl *string   `json:"apkurl,omitempty"`
	Archs  *[]string `json:"archs,omitempty"`

	// DateAdded un-used
	DateAdded *string                 `json:"date_added,omitempty"`
	Packages  *[]AdvisoryWolfiPackage `json:"packages,omitempty"`
	Reponame  *string                 `json:"reponame,omitempty"`
	Urlprefix *string                 `json:"urlprefix,omitempty"`
}

// AdvisoryWolfiPackage defines model for advisory.WolfiPackage.
type AdvisoryWolfiPackage struct {
	Name     *string                `json:"name,omitempty"`
	Secfixes *[]AdvisoryWolfiSecFix `json:"secfixes,omitempty"`
}

// AdvisoryWolfiSecFix defines model for advisory.WolfiSecFix.
type AdvisoryWolfiSecFix struct {
	Cve     *[]string `json:"cve,omitempty"`
	Version *string   `json:"version,omitempty"`
}

// AdvisoryWordfence defines model for advisory.Wordfence.
type AdvisoryWordfence struct {
	Affected   *[]string `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *[]string `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryXDB defines model for advisory.XDB.
type AdvisoryXDB struct {
	CloneSshUrl *string `json:"clone_ssh_url,omitempty"`
	DateAdded   *string `json:"date_added,omitempty"`
	ExploitType *string `json:"exploit_type,omitempty"`
	XdbId       *string `json:"xdb_id,omitempty"`
	XdbUrl      *string `json:"xdb_url,omitempty"`
}

// AdvisoryXen defines model for advisory.Xen.
type AdvisoryXen struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updatedAt,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryXerox defines model for advisory.Xerox.
type AdvisoryXerox struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryXiaomi defines model for advisory.Xiaomi.
type AdvisoryXiaomi struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	InternalId *string   `json:"internal_id,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	SummaryCn  *string   `json:"summary_cn,omitempty"`
	Title      *string   `json:"title,omitempty"`
	TitleCn    *string   `json:"title_cn,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryXylem defines model for advisory.Xylem.
type AdvisoryXylem struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Xsa        *string   `json:"xsa,omitempty"`
}

// AdvisoryYokogawaAdvisory defines model for advisory.YokogawaAdvisory.
type AdvisoryYokogawaAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Url             *string   `json:"url,omitempty"`
	YsarId          *string   `json:"ysar_id,omitempty"`
}

// AdvisoryYubico defines model for advisory.Yubico.
type AdvisoryYubico struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryZDI defines model for advisory.ZDI.
type AdvisoryZDI struct {
	Cves           *[]string              `json:"cves,omitempty"`
	CvssScore      *string                `json:"cvss_score,omitempty"`
	CvssVector     *string                `json:"cvss_vector,omitempty"`
	CvssVersion    *string                `json:"cvss_version,omitempty"`
	Discoverers    *[]string              `json:"discoverers,omitempty"`
	FilterIdsDv    *[]string              `json:"filter_ids_dv,omitempty"`
	LastUpdatedAt  *string                `json:"last_updated_at,omitempty"`
	Products       *[]AdvisoryZDIProduct  `json:"products,omitempty"`
	PublicAdvisory *string                `json:"public_advisory,omitempty"`
	PublishedDate  *string                `json:"published_date,omitempty"`
	Responses      *[]AdvisoryZDIResponse `json:"responses,omitempty"`
	Title          *string                `json:"title,omitempty"`
	ZdiCan         *string                `json:"zdi_can,omitempty"`
	ZdiPublic      *string                `json:"zdi_public,omitempty"`
}

// AdvisoryZDIProduct defines model for advisory.ZDIProduct.
type AdvisoryZDIProduct struct {
	Name   *string            `json:"name,omitempty"`
	Uri    *string            `json:"uri,omitempty"`
	Vendor *AdvisoryZDIVendor `json:"vendor,omitempty"`
}

// AdvisoryZDIResponse defines model for advisory.ZDIResponse.
type AdvisoryZDIResponse struct {
	Text   *string                    `json:"text,omitempty"`
	Uri    *string                    `json:"uri,omitempty"`
	Vendor *AdvisoryZDIResponseVendor `json:"vendor,omitempty"`
}

// AdvisoryZDIResponseVendor defines model for advisory.ZDIResponseVendor.
type AdvisoryZDIResponseVendor struct {
	Name *string `json:"name,omitempty"`
}

// AdvisoryZDIVendor defines model for advisory.ZDIVendor.
type AdvisoryZDIVendor struct {
	Name *string `json:"name,omitempty"`
	Uri  *string `json:"uri,omitempty"`
}

// AdvisoryZebra defines model for advisory.Zebra.
type AdvisoryZebra struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryZeroDayAdvisory defines model for advisory.ZeroDayAdvisory.
type AdvisoryZeroDayAdvisory struct {
	Cve       *[]string    `json:"cve,omitempty"`
	DateAdded *string      `json:"date_added,omitempty"`
	Title     *string      `json:"title,omitempty"`
	Url       *string      `json:"url,omitempty"`
	Zdi       *AdvisoryZDI `json:"zdi,omitempty"`
}

// AdvisoryZeroScienceAdvisory defines model for advisory.ZeroScienceAdvisory.
type AdvisoryZeroScienceAdvisory struct {
	AdvisoryId       *string   `json:"advisoryId,omitempty"`
	AffectedVersions *string   `json:"affectedVersions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Impact           *string   `json:"impact,omitempty"`
	Link             *string   `json:"link,omitempty"`
	PoC              *string   `json:"poC,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Risk             *string   `json:"risk,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Type             *string   `json:"type,omitempty"`
	Vendor           *string   `json:"vendor,omitempty"`
}

// AdvisoryZimbra defines model for advisory.Zimbra.
type AdvisoryZimbra struct {
	Bugs      *[]int    `json:"bugs,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fix       *string   `json:"fix,omitempty"`
	Rating    *string   `json:"rating,omitempty"`
	Reporter  *string   `json:"reporter,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
}

// AdvisoryZoom defines model for advisory.Zoom.
type AdvisoryZoom struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Zsb       *string   `json:"zsb,omitempty"`
}

// AdvisoryZscaler defines model for advisory.Zscaler.
type AdvisoryZscaler struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryZuluVersion defines model for advisory.ZuluVersion.
type AdvisoryZuluVersion struct {
	Jdk  *string `json:"jdk,omitempty"`
	Type *string `json:"type,omitempty"`
	Zulu *string `json:"zulu,omitempty"`
}

// AdvisoryZuso defines model for advisory.Zuso.
type AdvisoryZuso struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Zaid      *string   `json:"zaid,omitempty"`
}

// AdvisoryZyxel defines model for advisory.Zyxel.
type AdvisoryZyxel struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// ApiBaseMetricV2 defines model for api.BaseMetricV2.
type ApiBaseMetricV2 struct {
	AcInsufInfo             *bool      `json:"acInsufInfo,omitempty"`
	CvssV2                  *ApiCVSSV2 `json:"cvssV2,omitempty"`
	ExploitabilityScore     *float32   `json:"exploitabilityScore,omitempty"`
	ImpactScore             *float32   `json:"impactScore,omitempty"`
	ObtainAllPrivilege      *bool      `json:"obtainAllPrivilege,omitempty"`
	ObtainOtherPrivilege    *bool      `json:"obtainOtherPrivilege,omitempty"`
	ObtainUserPrivilege     *bool      `json:"obtainUserPrivilege,omitempty"`
	Severity                *string    `json:"severity,omitempty"`
	UserInteractionRequired *bool      `json:"userInteractionRequired,omitempty"`
}

// ApiBaseMetricV3 defines model for api.BaseMetricV3.
type ApiBaseMetricV3 struct {
	CvssV3              *ApiCVSSV3 `json:"cvssV3,omitempty"`
	ExploitabilityScore *float32   `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float32   `json:"impactScore,omitempty"`
}

// ApiCPE defines model for api.CPE.
type ApiCPE struct {
	Edition   *string `json:"edition,omitempty"`
	Language  *string `json:"language,omitempty"`
	Other     *string `json:"other,omitempty"`
	Part      *string `json:"part,omitempty"`
	Product   *string `json:"product,omitempty"`
	SwEdition *string `json:"sw_edition,omitempty"`
	TargetHw  *string `json:"target_hw,omitempty"`
	TargetSw  *string `json:"target_sw,omitempty"`
	Update    *string `json:"update,omitempty"`
	Vendor    *string `json:"vendor,omitempty"`
	Version   *string `json:"version,omitempty"`
}

// ApiCPEMatch defines model for api.CPEMatch.
type ApiCPEMatch struct {
	Cpe22Uri              *string       `json:"cpe22Uri,omitempty"`
	Cpe23Uri              *string       `json:"cpe23Uri,omitempty"`
	CpeName               *[]ApiCPEName `json:"cpe_name,omitempty"`
	VersionEndExcluding   *string       `json:"versionEndExcluding,omitempty"`
	VersionEndIncluding   *string       `json:"versionEndIncluding,omitempty"`
	VersionStartExcluding *string       `json:"versionStartExcluding,omitempty"`
	VersionStartIncluding *string       `json:"versionStartIncluding,omitempty"`
	Vulnerable            *bool         `json:"vulnerable,omitempty"`
}

// ApiCPEName defines model for api.CPEName.
type ApiCPEName struct {
	Cpe22Uri         *string `json:"cpe22Uri,omitempty"`
	Cpe23Uri         *string `json:"cpe23Uri,omitempty"`
	LastModifiedDate *string `json:"lastModifiedDate,omitempty"`
}

// ApiCVE defines model for api.CVE.
type ApiCVE struct {
	CVEDataMeta *ApiCVEDataMeta `json:"CVE_data_meta,omitempty"`
	DataFormat  *string         `json:"data_format,omitempty"`
	DataType    *string         `json:"data_type,omitempty"`
	DataVersion *string         `json:"data_version,omitempty"`
	Description *ApiDescription `json:"description,omitempty"`
	Problemtype *ApiProblemType `json:"problemtype,omitempty"`
	References  *ApiReferences  `json:"references,omitempty"`
}

// ApiCVEDataMeta defines model for api.CVEDataMeta.
type ApiCVEDataMeta struct {
	ASSIGNER *string `json:"ASSIGNER,omitempty"`
	ID       *string `json:"ID,omitempty"`
}

// ApiCVEDataMetaExtended defines model for api.CVEDataMetaExtended.
type ApiCVEDataMetaExtended struct {
	ALIAS    *string `json:"ALIAS,omitempty"`
	ASSIGNER *string `json:"ASSIGNER,omitempty"`
	ID       *string `json:"ID,omitempty"`
	STATUS   *string `json:"STATUS,omitempty"`
}

// ApiCVEExtended defines model for api.CVEExtended.
type ApiCVEExtended struct {
	CVEDataMeta    *ApiCVEDataMetaExtended    `json:"CVE_data_meta,omitempty"`
	Categorization *ApiCategorizationExtended `json:"categorization,omitempty"`
	DataFormat     *string                    `json:"data_format,omitempty"`
	DataType       *string                    `json:"data_type,omitempty"`
	DataVersion    *string                    `json:"data_version,omitempty"`
	Description    *ApiDescription            `json:"description,omitempty"`
	Problemtype    *ApiProblemTypeExtended    `json:"problemtype,omitempty"`
	References     *ApiReferencesExtended     `json:"references,omitempty"`
}

// ApiCVSSV2 defines model for api.CVSSV2.
type ApiCVSSV2 struct {
	AccessComplexity      *string  `json:"accessComplexity,omitempty"`
	AccessVector          *string  `json:"accessVector,omitempty"`
	Authentication        *string  `json:"authentication,omitempty"`
	AvailabilityImpact    *string  `json:"availabilityImpact,omitempty"`
	BaseScore             *float32 `json:"baseScore,omitempty"`
	ConfidentialityImpact *string  `json:"confidentialityImpact,omitempty"`
	IntegrityImpact       *string  `json:"integrityImpact,omitempty"`
	VectorString          *string  `json:"vectorString,omitempty"`
	Version               *string  `json:"version,omitempty"`
}

// ApiCVSSV3 defines model for api.CVSSV3.
type ApiCVSSV3 struct {
	AttackComplexity      *string  `json:"attackComplexity,omitempty"`
	AttackVector          *string  `json:"attackVector,omitempty"`
	AvailabilityImpact    *string  `json:"availabilityImpact,omitempty"`
	BaseScore             *float32 `json:"baseScore,omitempty"`
	BaseSeverity          *string  `json:"baseSeverity,omitempty"`
	ConfidentialityImpact *string  `json:"confidentialityImpact,omitempty"`
	IntegrityImpact       *string  `json:"integrityImpact,omitempty"`
	PrivilegesRequired    *string  `json:"privilegesRequired,omitempty"`
	Scope                 *string  `json:"scope,omitempty"`
	UserInteraction       *string  `json:"userInteraction,omitempty"`
	VectorString          *string  `json:"vectorString,omitempty"`
	Version               *string  `json:"version,omitempty"`
}

// ApiCWE defines model for api.CWE.
type ApiCWE struct {
	Abstraction       *string  `json:"abstraction,omitempty"`
	Description       *string  `json:"description,omitempty"`
	KevCount          *int     `json:"kev_count,omitempty"`
	Status            *string  `json:"status,omitempty"`
	Structure         *string  `json:"structure,omitempty"`
	VulncheckNvdCount *int     `json:"vulncheck_nvd_count,omitempty"`
	WeaknessId        *string  `json:"weakness_id,omitempty"`
	WeaknessName      *string  `json:"weakness_name,omitempty"`
	WeightedScore     *float32 `json:"weighted_score,omitempty"`
}

// ApiCategorizationExtended defines model for api.CategorizationExtended.
type ApiCategorizationExtended struct {
	Tags *[]string `json:"tags,omitempty"`
}

// ApiConfigurations defines model for api.Configurations.
type ApiConfigurations struct {
	CVEDataVersion *string     `json:"CVE_data_version,omitempty"`
	Nodes          *[]ApiNodes `json:"nodes,omitempty"`
}

// ApiCveItems defines model for api.CveItems.
type ApiCveItems struct {
	Configurations   *ApiConfigurations `json:"configurations,omitempty"`
	Cve              *ApiCVE            `json:"cve,omitempty"`
	Impact           *ApiImpact         `json:"impact,omitempty"`
	LastModifiedDate *string            `json:"lastModifiedDate,omitempty"`
	PublishedDate    *string            `json:"publishedDate,omitempty"`
	VcConfigurations *ApiConfigurations `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs *[]string          `json:"vcVulnerableCPEs,omitempty"`
}

// ApiCveItemsExtended defines model for api.CveItemsExtended.
type ApiCveItemsExtended struct {
	Timestamp      *string            `json:"_timestamp,omitempty"`
	Configurations *ApiConfigurations `json:"configurations,omitempty"`
	Cve            *ApiCVEExtended    `json:"cve,omitempty"`
	DateAdded      *string            `json:"date_added,omitempty"`

	// DocumentGenerationDate the deep tag instructs deep.Equal to ignore this field (used during OpenSearch loading)
	DocumentGenerationDate *string                    `json:"documentGenerationDate,omitempty"`
	Impact                 *ApiImpactExtended         `json:"impact,omitempty"`
	LastModifiedDate       *string                    `json:"lastModifiedDate,omitempty"`
	MitreAttackTechniques  *[]ApiMitreAttackTech      `json:"mitre_attack_techniques,omitempty"`
	PublishedDate          *string                    `json:"publishedDate,omitempty"`
	RelatedAttackPatterns  *[]ApiRelatedAttackPattern `json:"related_attack_patterns,omitempty"`
	VcConfigurations       *ApiConfigurations         `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs       *[]string                  `json:"vcVulnerableCPEs,omitempty"`
	VulnerableCpes         *[]string                  `json:"vulnerable_cpes,omitempty"`
}

// ApiDateTime defines model for api.DateTime.
type ApiDateTime struct {
	Date *string `json:"date,omitempty"`
}

// ApiDescription defines model for api.Description.
type ApiDescription struct {
	DescriptionData *[]ApiDescriptionData `json:"description_data,omitempty"`
}

// ApiDescriptionData defines model for api.DescriptionData.
type ApiDescriptionData struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiEPSS defines model for api.EPSS.
type ApiEPSS struct {
	EpssPercentile *float32 `json:"epss_percentile,omitempty"`
	EpssScore      *float32 `json:"epss_score,omitempty"`
	LastModified   *string  `json:"last_modified,omitempty"`
}

// ApiEPSSData defines model for api.EPSSData.
type ApiEPSSData struct {
	Timestamp      *string  `json:"_timestamp,omitempty"`
	Cve            *string  `json:"cve,omitempty"`
	EpssPercentile *float32 `json:"epss_percentile,omitempty"`
	EpssScore      *float32 `json:"epss_score,omitempty"`
}

// ApiExploitChain defines model for api.ExploitChain.
type ApiExploitChain struct {
	Cves      *[]ApiExploitChainCVE `json:"cves,omitempty"`
	DateAdded *string               `json:"date_added,omitempty"`
	Url       *string               `json:"url,omitempty"`
}

// ApiExploitChainCVE defines model for api.ExploitChainCVE.
type ApiExploitChainCVE struct {
	Cve  *string `json:"cve,omitempty"`
	Type *string `json:"type,omitempty"`
}

// ApiExploitV3Result defines model for api.ExploitV3Result.
type ApiExploitV3Result struct {
	// Timestamp ignore this field when checking for differences/changes
	Timestamp              *string             `json:"_timestamp,omitempty"`
	CommercialExploitFound *bool               `json:"commercial_exploit_found,omitempty"`
	Counts                 *ApiExploitsV3Count `json:"counts,omitempty"`
	DateAdded              *string             `json:"date_added,omitempty"`

	// Epss exclude EPSS from changelog
	Epss                            *ApiEPSS                       `json:"epss,omitempty"`
	Exploits                        *[]ApiNormalizedExploitV3Entry `json:"exploits,omitempty"`
	Id                              *string                        `json:"id,omitempty"`
	InKEV                           *bool                          `json:"inKEV,omitempty"`
	InVCKEV                         *bool                          `json:"inVCKEV,omitempty"`
	MaxExploitMaturity              *string                        `json:"max_exploit_maturity,omitempty"`
	PublicExploitFound              *bool                          `json:"public_exploit_found,omitempty"`
	ReportedExploitation            *[]ApiNormalizedReportV3Entry  `json:"reported_exploitation,omitempty"`
	ReportedExploited               *bool                          `json:"reported_exploited,omitempty"`
	ReportedExploitedByBotnets      *bool                          `json:"reported_exploited_by_botnets,omitempty"`
	ReportedExploitedByRansomware   *bool                          `json:"reported_exploited_by_ransomware,omitempty"`
	ReportedExploitedByThreatActors *bool                          `json:"reported_exploited_by_threat_actors,omitempty"`
	Timeline                        *ApiExploitsV3Timeline         `json:"timeline,omitempty"`
	Trending                        *ApiExploitsTrending           `json:"trending,omitempty"`
	WeaponizedExploitFound          *bool                          `json:"weaponized_exploit_found,omitempty"`
}

// ApiExploitsChange defines model for api.ExploitsChange.
type ApiExploitsChange struct {
	ChangeTime *string      `json:"change_time,omitempty"`
	ChangeType *string      `json:"change_type,omitempty"`
	Field      *string      `json:"field,omitempty"`
	NewValue   *interface{} `json:"new_value,omitempty"`
	OldValue   *interface{} `json:"old_value,omitempty"`
}

// ApiExploitsChangelog defines model for api.ExploitsChangelog.
type ApiExploitsChangelog struct {
	Changes *[]ApiExploitsChange `json:"changes,omitempty"`
	Cve     *string              `json:"cve,omitempty"`
}

// ApiExploitsTrending defines model for api.ExploitsTrending.
type ApiExploitsTrending struct {
	Github *bool `json:"github,omitempty"`
}

// ApiExploitsV3Count defines model for api.ExploitsV3Count.
type ApiExploitsV3Count struct {
	Botnets            *int `json:"botnets,omitempty"`
	Exploits           *int `json:"exploits,omitempty"`
	RansomwareFamilies *int `json:"ransomware_families,omitempty"`
	ThreatActors       *int `json:"threat_actors,omitempty"`
}

// ApiExploitsV3Timeline defines model for api.ExploitsV3Timeline.
type ApiExploitsV3Timeline struct {
	CisaKevDateAdded                        *string `json:"cisa_kev_date_added,omitempty"`
	CisaKevDateDue                          *string `json:"cisa_kev_date_due,omitempty"`
	FirstExploitPublished                   *string `json:"first_exploit_published,omitempty"`
	FirstExploitPublishedWeaponizedOrHigher *string `json:"first_exploit_published_weaponized_or_higher,omitempty"`
	FirstReportedBotnet                     *string `json:"first_reported_botnet,omitempty"`
	FirstReportedRansomware                 *string `json:"first_reported_ransomware,omitempty"`
	FirstReportedThreatActor                *string `json:"first_reported_threat_actor,omitempty"`
	MostRecentExploitPublished              *string `json:"most_recent_exploit_published,omitempty"`
	MostRecentReportedBotnet                *string `json:"most_recent_reported_botnet,omitempty"`
	MostRecentReportedRansomware            *string `json:"most_recent_reported_ransomware,omitempty"`
	MostRecentReportedThreatActor           *string `json:"most_recent_reported_threat_actor,omitempty"`

	// NvdLastModified it's often the case the nvd record was updated, but in a way that is irrelevant to the contents
	// of a vc exploits record.
	NvdLastModified       *string `json:"nvd_last_modified,omitempty"`
	NvdPublished          *string `json:"nvd_published,omitempty"`
	VulncheckKevDateAdded *string `json:"vulncheck_kev_date_added,omitempty"`
	VulncheckKevDateDue   *string `json:"vulncheck_kev_date_due,omitempty"`
}

// ApiImpact defines model for api.Impact.
type ApiImpact struct {
	BaseMetricV2 *ApiBaseMetricV2 `json:"baseMetricV2,omitempty"`
	BaseMetricV3 *ApiBaseMetricV3 `json:"baseMetricV3,omitempty"`

	// MetricV40 this isn't called baseMetric, because it can contain other metrics -- typically supplemental metrics
	MetricV40 *AdvisoryCVSSV40 `json:"metricV40,omitempty"`
}

// ApiImpactExtended defines model for api.ImpactExtended.
type ApiImpactExtended struct {
	BaseMetricV2          *ApiBaseMetricV2       `json:"baseMetricV2,omitempty"`
	BaseMetricV3          *ApiBaseMetricV3       `json:"baseMetricV3,omitempty"`
	CorrectedBaseMetricV3 *ApiBaseMetricV3       `json:"correctedBaseMetricV3,omitempty"`
	Epss                  *ApiEPSS               `json:"epss,omitempty"`
	MetricV40             *AdvisoryCVSSV40       `json:"metricV40,omitempty"`
	TemporalMetricV2      *ApiTemporalMetricV2   `json:"temporalMetricV2,omitempty"`
	TemporalMetricV3      *ApiTemporalMetricV3   `json:"temporalMetricV3,omitempty"`
	TemporalV3Corrected   *ApiTemporalMetricV3   `json:"temporalV3Corrected,omitempty"`
	ThreatMetricV40       *AdvisoryCVSSV40Threat `json:"threatMetricV40,omitempty"`
}

// ApiInitialAccess defines model for api.InitialAccess.
type ApiInitialAccess struct {
	// Artifacts Artifacts holds the set of available artifacts for this vulnerability, such as exploit, shodan queries, PCAP traces, and others.
	Artifacts *[]ApiInitialAccessArtifact `json:"artifacts,omitempty"`

	// Cve CVE identifier for the given initial access record.
	Cve *string `json:"cve,omitempty"`

	// InKEV InKEV is true if this artifact is in CISA's Known Exploited Vulnerabilities (KEV) data set; otherwise, false.
	InKEV *bool `json:"inKEV,omitempty"`

	// InVCKEV InVCKEV is true if this artifact is in VulnCheck's Known Exploited Vulnerabilities (VCKEV) data set; otherwise, false.
	InVCKEV *bool `json:"inVCKEV,omitempty"`

	// VulnerableCpes VulnerableCPEs is the list of vulnerable CPE strings associated with this CVE and artifact(s).
	VulnerableCpes *[]string `json:"vulnerable_cpes,omitempty"`
}

// ApiInitialAccessArtifact defines model for api.InitialAccessArtifact.
type ApiInitialAccessArtifact struct {
	// ArtifactName ArtifactName is a title to associate with this artifact.
	ArtifactName *string `json:"artifactName,omitempty"`

	// ArtifactsURL ArtifactsURL are URLs to the available artifact.
	ArtifactsURL *[]string `json:"artifactsURL,omitempty"`

	// CensysQueries CensysQueries are queries for examining potential Internet-exposed devices & applications with Censys in URL form.
	CensysQueries *[]string `json:"censysQueries,omitempty"`

	// CensysRawQueries CensysRawQueries are raw queries for examining potential Internet-exposed devices & applications with Censys.
	CensysRawQueries *[]string `json:"censysRawQueries,omitempty"`

	// CloneSSHURL CloneSSHURL is the git URL to clone the artifact with.
	CloneSSHURL *string `json:"cloneSSHURL,omitempty"`

	// DateAdded DateAdded is when this artifact entry was first added to the InitialAccess data set.
	DateAdded *string `json:"dateAdded,omitempty"`

	// Exploit Exploit indicates whether or not an exploit is available in this artifact.
	Exploit *bool `json:"exploit,omitempty"`

	// GreynoiseQueries GreynoiseQueries are queries for finding the vulnerability via honeypot data.
	GreynoiseQueries *[]string `json:"greynoiseQueries,omitempty"`

	// NmapScript NmapScript indicates whether or not an nmap script for scanning environment exists in this artifact.
	NmapScript *bool `json:"nmapScript,omitempty"`

	// Pcap PCAP indicates whether of not a package capture of the exploit PoC exploiting a vulnerable system exists in this artifact.
	Pcap *bool `json:"pcap,omitempty"`

	// Product Product are the software that has the vulnerability.
	Product *[]string `json:"product,omitempty"`

	// ShodanQueries ShodanQueries are queries for examining potential Internet-exposed devices & applications with Shodan in URL form.
	ShodanQueries *[]string `json:"shodanQueries,omitempty"`

	// ShodanRawQueries ShodanRawQueries are raw queries for examining potential Internet-exposed devices & applications with Shodan.
	ShodanRawQueries *[]string `json:"shodanRawQueries,omitempty"`

	// SnortRule SnortRule indicates whether or not a Snort rule designed to detect the exploitation of the vulnerability over the network exists in this artifact.
	SnortRule *bool `json:"snortRule,omitempty"`

	// SuricataRule SuricataRule indicates whether or not a Suricata rule designed to detect the exploitation of the vulnerability over the network exists in this artifact.
	SuricataRule *bool `json:"suricataRule,omitempty"`

	// TargetDocker TargetDocker indicates whether or not there is an available docker image with the vulnerability.
	TargetDocker *bool `json:"targetDocker,omitempty"`

	// TargetService TargetService indicates the service (HTTP, FTP, etc) that this exploit targets.
	TargetService *string `json:"targetService,omitempty"`

	// Vendor Vendor of the vulnerable product
	Vendor *string `json:"vendor,omitempty"`

	// VersionScanner VersionScanner indicates whether or not the exploit PoC can determine if target system is vulnerable without sending exploit payload in this artifact.
	VersionScanner *bool `json:"versionScanner,omitempty"`

	// Yara YARA indicates whether or not a YARA rule designed to detect the exploit on an endpoint exists in this artifact.
	Yara *bool `json:"yara,omitempty"`

	// Zeroday Zeroday indicates whether or not it is a VulnCheck zeroday.
	Zeroday *bool `json:"zeroday,omitempty"`
}

// ApiMitreAttackTech defines model for api.MitreAttackTech.
type ApiMitreAttackTech struct {
	Domain       *string   `json:"domain,omitempty"`
	Id           *string   `json:"id,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Subtechnique *bool     `json:"subtechnique,omitempty"`
	Tactics      *[]string `json:"tactics,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// ApiMitreAttackToCVE defines model for api.MitreAttackToCVE.
type ApiMitreAttackToCVE struct {
	CveList     *[]string           `json:"cve_list,omitempty"`
	DateAdded   *string             `json:"date_added,omitempty"`
	TechniqueId *ApiMitreAttackTech `json:"technique_id,omitempty"`
}

// ApiNVD20CPEMatch defines model for api.NVD20CPEMatch.
type ApiNVD20CPEMatch struct {
	CpeLastModified       *string            `json:"cpeLastModified,omitempty"`
	Created               *string            `json:"created,omitempty"`
	Criteria              *string            `json:"criteria,omitempty"`
	LastModified          *string            `json:"lastModified,omitempty"`
	MatchCriteriaId       *string            `json:"matchCriteriaId,omitempty"`
	Matches               *[]ApiNVD20CPEName `json:"matches,omitempty"`
	Status                *string            `json:"status,omitempty"`
	VersionEndExcluding   *string            `json:"versionEndExcluding,omitempty"`
	VersionEndIncluding   *string            `json:"versionEndIncluding,omitempty"`
	VersionStartExcluding *string            `json:"versionStartExcluding,omitempty"`
	VersionStartIncluding *string            `json:"versionStartIncluding,omitempty"`
}

// ApiNVD20CPEName defines model for api.NVD20CPEName.
type ApiNVD20CPEName struct {
	CpeName   *string `json:"cpeName,omitempty"`
	CpeNameId *string `json:"cpeNameId,omitempty"`
}

// ApiNVD20CVE defines model for api.NVD20CVE.
type ApiNVD20CVE struct {
	CisaActionDue         *string                       `json:"cisaActionDue,omitempty"`
	CisaExploitAdd        *string                       `json:"cisaExploitAdd,omitempty"`
	CisaRequiredAction    *string                       `json:"cisaRequiredAction,omitempty"`
	CisaVulnerabilityName *string                       `json:"cisaVulnerabilityName,omitempty"`
	Configurations        *[]AdvisoryNVD20Configuration `json:"configurations,omitempty"`
	Descriptions          *[]ApiNVD20Description        `json:"descriptions,omitempty"`
	EvaluatorComment      *string                       `json:"evaluatorComment,omitempty"`
	EvaluatorImpact       *string                       `json:"evaluatorImpact,omitempty"`
	EvaluatorSolution     *string                       `json:"evaluatorSolution,omitempty"`
	Id                    *string                       `json:"id,omitempty"`
	LastModified          *string                       `json:"lastModified,omitempty"`
	Metrics               *ApiNVD20Metric               `json:"metrics,omitempty"`
	Published             *string                       `json:"published,omitempty"`
	References            *[]ApiNVD20Reference          `json:"references,omitempty"`
	SourceIdentifier      *string                       `json:"sourceIdentifier,omitempty"`
	VcConfigurations      *[]AdvisoryNVD20Configuration `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs      *[]string                     `json:"vcVulnerableCPEs,omitempty"`
	VendorComments        *[]ApiNVD20VendorComment      `json:"vendorComments,omitempty"`
	VulnStatus            *string                       `json:"vulnStatus,omitempty"`
	Weaknesses            *[]ApiNVD20Weakness           `json:"weaknesses,omitempty"`
}

// ApiNVD20CVEExtended defines model for api.NVD20CVEExtended.
type ApiNVD20CVEExtended struct {
	ALIAS  *string `json:"ALIAS,omitempty"`
	STATUS *string `json:"STATUS,omitempty"`

	// Timestamp the deep tag instructs deep.Equal to ignore this field (used during OpenSearch loading)
	Timestamp              *string                       `json:"_timestamp,omitempty"`
	Categorization         *ApiCategorizationExtended    `json:"categorization,omitempty"`
	CisaActionDue          *string                       `json:"cisaActionDue,omitempty"`
	CisaExploitAdd         *string                       `json:"cisaExploitAdd,omitempty"`
	CisaRequiredAction     *string                       `json:"cisaRequiredAction,omitempty"`
	CisaVulnerabilityName  *string                       `json:"cisaVulnerabilityName,omitempty"`
	Configurations         *[]AdvisoryNVD20Configuration `json:"configurations,omitempty"`
	DateAdded              *string                       `json:"date_added,omitempty"`
	Descriptions           *[]ApiNVD20Description        `json:"descriptions,omitempty"`
	DocumentGenerationDate *string                       `json:"documentGenerationDate,omitempty"`
	EvaluatorComment       *string                       `json:"evaluatorComment,omitempty"`
	EvaluatorImpact        *string                       `json:"evaluatorImpact,omitempty"`
	EvaluatorSolution      *string                       `json:"evaluatorSolution,omitempty"`
	Id                     *string                       `json:"id,omitempty"`
	LastModified           *string                       `json:"lastModified,omitempty"`
	Metrics                *ApiNVD20MetricExtended       `json:"metrics,omitempty"`
	MitreAttackTechniques  *[]ApiMitreAttackTech         `json:"mitreAttackTechniques,omitempty"`
	Published              *string                       `json:"published,omitempty"`
	References             *[]ApiNVD20ReferenceExtended  `json:"references,omitempty"`
	RelatedAttackPatterns  *[]ApiRelatedAttackPattern    `json:"relatedAttackPatterns,omitempty"`
	SourceIdentifier       *string                       `json:"sourceIdentifier,omitempty"`
	VcConfigurations       *[]AdvisoryNVD20Configuration `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs       *[]string                     `json:"vcVulnerableCPEs,omitempty"`
	VendorComments         *[]ApiNVD20VendorComment      `json:"vendorComments,omitempty"`
	VulnStatus             *string                       `json:"vulnStatus,omitempty"`
	VulncheckKEVExploitAdd *string                       `json:"vulncheckKEVExploitAdd,omitempty"`
	VulnerableCPEs         *[]string                     `json:"vulnerableCPEs,omitempty"`
	Weaknesses             *[]ApiNVD20WeaknessExtended   `json:"weaknesses,omitempty"`
}

// ApiNVD20CvssDataV2 defines model for api.NVD20CvssDataV2.
type ApiNVD20CvssDataV2 struct {
	AccessComplexity           *string  `json:"accessComplexity,omitempty"`
	AccessVector               *string  `json:"accessVector,omitempty"`
	Authentication             *string  `json:"authentication,omitempty"`
	AvailabilityImpact         *string  `json:"availabilityImpact,omitempty"`
	AvailabilityRequirement    *string  `json:"availabilityRequirement,omitempty"`
	BaseScore                  *float32 `json:"baseScore,omitempty"`
	CollateralDamagePotential  *string  `json:"collateralDamagePotential,omitempty"`
	ConfidentialityImpact      *string  `json:"confidentialityImpact,omitempty"`
	ConfidentialityRequirement *string  `json:"confidentialityRequirement,omitempty"`
	EnvironmentalScore         *float32 `json:"environmentalScore,omitempty"`
	Exploitability             *string  `json:"exploitability,omitempty"`
	IntegrityImpact            *string  `json:"integrityImpact,omitempty"`
	IntegrityRequirement       *string  `json:"integrityRequirement,omitempty"`
	RemediationLevel           *string  `json:"remediationLevel,omitempty"`
	ReportConfidence           *string  `json:"reportConfidence,omitempty"`
	TargetDistribution         *string  `json:"targetDistribution,omitempty"`
	TemporalScore              *float32 `json:"temporalScore,omitempty"`
	VectorString               *string  `json:"vectorString,omitempty"`
	Version                    *string  `json:"version,omitempty"`
}

// ApiNVD20CvssDataV3 defines model for api.NVD20CvssDataV3.
type ApiNVD20CvssDataV3 struct {
	AttackComplexity              *string  `json:"attackComplexity,omitempty"`
	AttackVector                  *string  `json:"attackVector,omitempty"`
	AvailabilityImpact            *string  `json:"availabilityImpact,omitempty"`
	AvailabilityRequirement       *string  `json:"availabilityRequirement,omitempty"`
	BaseScore                     *float32 `json:"baseScore,omitempty"`
	BaseSeverity                  *string  `json:"baseSeverity,omitempty"`
	ConfidentialityImpact         *string  `json:"confidentialityImpact,omitempty"`
	ConfidentialityRequirement    *string  `json:"confidentialityRequirement,omitempty"`
	EnvironmentalScore            *float32 `json:"environmentalScore,omitempty"`
	EnvironmentalSeverity         *string  `json:"environmentalSeverity,omitempty"`
	ExploitCodeMaturity           *string  `json:"exploitCodeMaturity,omitempty"`
	IntegrityImpact               *string  `json:"integrityImpact,omitempty"`
	IntegrityRequirement          *string  `json:"integrityRequirement,omitempty"`
	ModifiedAttackComplexity      *string  `json:"modifiedAttackComplexity,omitempty"`
	ModifiedAttackVector          *string  `json:"modifiedAttackVector,omitempty"`
	ModifiedAvailabilityImpact    *string  `json:"modifiedAvailabilityImpact,omitempty"`
	ModifiedConfidentialityImpact *string  `json:"modifiedConfidentialityImpact,omitempty"`
	ModifiedIntegrityImpact       *string  `json:"modifiedIntegrityImpact,omitempty"`
	ModifiedPrivilegesRequired    *string  `json:"modifiedPrivilegesRequired,omitempty"`
	ModifiedScope                 *string  `json:"modifiedScope,omitempty"`
	ModifiedUserInteraction       *string  `json:"modifiedUserInteraction,omitempty"`
	PrivilegesRequired            *string  `json:"privilegesRequired,omitempty"`
	RemediationLevel              *string  `json:"remediationLevel,omitempty"`
	ReportConfidence              *string  `json:"reportConfidence,omitempty"`
	Scope                         *string  `json:"scope,omitempty"`
	TemporalScore                 *float32 `json:"temporalScore,omitempty"`
	TemporalSeverity              *string  `json:"temporalSeverity,omitempty"`
	UserInteraction               *string  `json:"userInteraction,omitempty"`
	VectorString                  *string  `json:"vectorString,omitempty"`
	Version                       *string  `json:"version,omitempty"`
}

// ApiNVD20CvssMetricV2 defines model for api.NVD20CvssMetricV2.
type ApiNVD20CvssMetricV2 struct {
	AcInsufInfo             *bool               `json:"acInsufInfo,omitempty"`
	BaseSeverity            *string             `json:"baseSeverity,omitempty"`
	CvssData                *ApiNVD20CvssDataV2 `json:"cvssData,omitempty"`
	ExploitabilityScore     *float32            `json:"exploitabilityScore,omitempty"`
	ImpactScore             *float32            `json:"impactScore,omitempty"`
	ObtainAllPrivilege      *bool               `json:"obtainAllPrivilege,omitempty"`
	ObtainOtherPrivilege    *bool               `json:"obtainOtherPrivilege,omitempty"`
	ObtainUserPrivilege     *bool               `json:"obtainUserPrivilege,omitempty"`
	Source                  *string             `json:"source,omitempty"`
	Type                    *string             `json:"type,omitempty"`
	UserInteractionRequired *bool               `json:"userInteractionRequired,omitempty"`
}

// ApiNVD20CvssMetricV3 defines model for api.NVD20CvssMetricV3.
type ApiNVD20CvssMetricV3 struct {
	CvssData            *ApiNVD20CvssDataV3 `json:"cvssData,omitempty"`
	ExploitabilityScore *float32            `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float32            `json:"impactScore,omitempty"`
	Source              *string             `json:"source,omitempty"`
	Type                *string             `json:"type,omitempty"`
}

// ApiNVD20CvssMetricV40 defines model for api.NVD20CvssMetricV40.
type ApiNVD20CvssMetricV40 struct {
	CvssData *AdvisoryCVSSV40 `json:"cvssData,omitempty"`
	Source   *string          `json:"source,omitempty"`
	Type     *string          `json:"type,omitempty"`
}

// ApiNVD20Description defines model for api.NVD20Description.
type ApiNVD20Description struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiNVD20Metric defines model for api.NVD20Metric.
type ApiNVD20Metric struct {
	CvssMetricV2  *[]ApiNVD20CvssMetricV2  `json:"cvssMetricV2,omitempty"`
	CvssMetricV30 *[]ApiNVD20CvssMetricV3  `json:"cvssMetricV30,omitempty"`
	CvssMetricV31 *[]ApiNVD20CvssMetricV3  `json:"cvssMetricV31,omitempty"`
	CvssMetricV40 *[]ApiNVD20CvssMetricV40 `json:"cvssMetricV40,omitempty"`
}

// ApiNVD20MetricExtended defines model for api.NVD20MetricExtended.
type ApiNVD20MetricExtended struct {
	CvssMetricV2             *[]ApiNVD20CvssMetricV2   `json:"cvssMetricV2,omitempty"`
	CvssMetricV30            *[]ApiNVD20CvssMetricV3   `json:"cvssMetricV30,omitempty"`
	CvssMetricV31            *[]ApiNVD20CvssMetricV3   `json:"cvssMetricV31,omitempty"`
	CvssMetricV40            *[]ApiNVD20CvssMetricV40  `json:"cvssMetricV40,omitempty"`
	Epss                     *ApiEPSS                  `json:"epss,omitempty"`
	TemporalCVSSV2           *ApiNVD20TemporalCVSSV2   `json:"temporalCVSSV2,omitempty"`
	TemporalCVSSV2Secondary  *[]ApiNVD20TemporalCVSSV2 `json:"temporalCVSSV2Secondary,omitempty"`
	TemporalCVSSV30          *ApiNVD20TemporalCVSSV3   `json:"temporalCVSSV30,omitempty"`
	TemporalCVSSV30Secondary *[]ApiNVD20TemporalCVSSV3 `json:"temporalCVSSV30Secondary,omitempty"`
	TemporalCVSSV31          *ApiNVD20TemporalCVSSV3   `json:"temporalCVSSV31,omitempty"`
	TemporalCVSSV31Secondary *[]ApiNVD20TemporalCVSSV3 `json:"temporalCVSSV31Secondary,omitempty"`
	ThreatCVSSV40            *ApiNVD20ThreatCVSSV40    `json:"threatCVSSV40,omitempty"`
	ThreatCVSSV40Secondary   *[]ApiNVD20ThreatCVSSV40  `json:"threatCVSSV40Secondary,omitempty"`
}

// ApiNVD20Reference defines model for api.NVD20Reference.
type ApiNVD20Reference struct {
	Source *string   `json:"source,omitempty"`
	Tags   *[]string `json:"tags,omitempty"`
	Url    *string   `json:"url,omitempty"`
}

// ApiNVD20ReferenceExtended defines model for api.NVD20ReferenceExtended.
type ApiNVD20ReferenceExtended struct {
	DateAdded   *string   `json:"date_added,omitempty"`
	ExternalId  *string   `json:"external_id,omitempty"`
	Lang        *string   `json:"lang,omitempty"`
	Name        *string   `json:"name,omitempty"`
	PreviousUrl *string   `json:"previous_url,omitempty"`
	Refsource   *string   `json:"refsource,omitempty"`
	Source      *string   `json:"source,omitempty"`
	Status      *string   `json:"status,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// ApiNVD20TemporalAssociatedBaseMetric defines model for api.NVD20TemporalAssociatedBaseMetric.
type ApiNVD20TemporalAssociatedBaseMetric struct {
	BaseScore *float32 `json:"baseScore,omitempty"`
	Source    *string  `json:"source,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

// ApiNVD20TemporalCVSSV2 defines model for api.NVD20TemporalCVSSV2.
type ApiNVD20TemporalCVSSV2 struct {
	AssociatedBaseMetricV2 *ApiNVD20TemporalAssociatedBaseMetric `json:"associatedBaseMetricV2,omitempty"`
	Exploitability         *string                               `json:"exploitability,omitempty"`
	RemediationLevel       *string                               `json:"remediationLevel,omitempty"`
	ReportConfidence       *string                               `json:"reportConfidence,omitempty"`
	TemporalScore          *float32                              `json:"temporalScore,omitempty"`
	VectorString           *string                               `json:"vectorString,omitempty"`
	Version                *string                               `json:"version,omitempty"`
}

// ApiNVD20TemporalCVSSV3 defines model for api.NVD20TemporalCVSSV3.
type ApiNVD20TemporalCVSSV3 struct {
	AssociatedBaseMetricV3 *ApiNVD20TemporalAssociatedBaseMetric `json:"associatedBaseMetricV3,omitempty"`
	ExploitCodeMaturity    *string                               `json:"exploitCodeMaturity,omitempty"`
	RemediationLevel       *string                               `json:"remediationLevel,omitempty"`
	ReportConfidence       *string                               `json:"reportConfidence,omitempty"`
	TemporalScore          *float32                              `json:"temporalScore,omitempty"`
	VectorString           *string                               `json:"vectorString,omitempty"`
	Version                *string                               `json:"version,omitempty"`
}

// ApiNVD20ThreatAssociatedBaseMetric defines model for api.NVD20ThreatAssociatedBaseMetric.
type ApiNVD20ThreatAssociatedBaseMetric struct {
	BaseScore *float32 `json:"baseScore,omitempty"`
	Source    *string  `json:"source,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

// ApiNVD20ThreatCVSSV40 defines model for api.NVD20ThreatCVSSV40.
type ApiNVD20ThreatCVSSV40 struct {
	AssociatedBaseMetricV40 *ApiNVD20ThreatAssociatedBaseMetric `json:"associatedBaseMetricV40,omitempty"`
	BaseThreatScore         *float32                            `json:"baseThreatScore,omitempty"`
	BaseThreatSeverity      *string                             `json:"baseThreatSeverity,omitempty"`
	ExploitMaturity         *string                             `json:"exploitMaturity,omitempty"`
}

// ApiNVD20VendorComment defines model for api.NVD20VendorComment.
type ApiNVD20VendorComment struct {
	Comment      *string `json:"comment,omitempty"`
	LastModified *string `json:"lastModified,omitempty"`
	Organization *string `json:"organization,omitempty"`
}

// ApiNVD20Weakness defines model for api.NVD20Weakness.
type ApiNVD20Weakness struct {
	Description *[]ApiNVD20Description `json:"description,omitempty"`
	Source      *string                `json:"source,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// ApiNVD20WeaknessDescExtended defines model for api.NVD20WeaknessDescExtended.
type ApiNVD20WeaknessDescExtended struct {
	Lang  *string `json:"lang,omitempty"`
	Name  *string `json:"name,omitempty"`
	Url   *string `json:"url,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiNVD20WeaknessExtended defines model for api.NVD20WeaknessExtended.
type ApiNVD20WeaknessExtended struct {
	Description *[]ApiNVD20WeaknessDescExtended `json:"description,omitempty"`
	Source      *string                         `json:"source,omitempty"`
	Type        *string                         `json:"type,omitempty"`
}

// ApiNodes defines model for api.Nodes.
type ApiNodes struct {
	Children *[]ApiNodes    `json:"children,omitempty"`
	CpeMatch *[]ApiCPEMatch `json:"cpe_match,omitempty"`
	Operator *string        `json:"operator,omitempty"`
}

// ApiNormalizedExploitV3Entry defines model for api.NormalizedExploitV3Entry.
type ApiNormalizedExploitV3Entry struct {
	CloneSshUrl         *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached   *string `json:"clone_ssh_url_cached,omitempty"`
	DateAdded           *string `json:"date_added,omitempty"`
	ExploitAvailability *string `json:"exploit_availability,omitempty"`
	ExploitMaturity     *string `json:"exploit_maturity,omitempty"`
	ExploitType         *string `json:"exploit_type,omitempty"`
	Name                *string `json:"name,omitempty"`
	ReferenceUrl        *string `json:"reference_url,omitempty"`
	Refsource           *string `json:"refsource,omitempty"`
	RepoId              *string `json:"repo_id,omitempty"`
	Url                 *string `json:"url,omitempty"`
}

// ApiNormalizedReportV3Entry defines model for api.NormalizedReportV3Entry.
type ApiNormalizedReportV3Entry struct {
	DateAdded *string `json:"date_added,omitempty"`
	Name      *string `json:"name,omitempty"`
	Refsource *string `json:"refsource,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// ApiOSSPackage defines model for api.OSSPackage.
type ApiOSSPackage struct {
	Artifacts          *ApiOSSPackageArtifacts          `json:"artifacts,omitempty"`
	Cves               *[]string                        `json:"cves,omitempty"`
	Licenses           *[]string                        `json:"licenses,omitempty"`
	Name               *string                          `json:"name,omitempty"`
	PublishedDate      *string                          `json:"published_date,omitempty"`
	Purl               *[]string                        `json:"purl,omitempty"`
	ResearchAttributes *ApiOSSPackageResearchAttributes `json:"research_attributes,omitempty"`
	Version            *string                          `json:"version,omitempty"`
	Vulnerabilities    *[]ApiOSSPackageVulnerability    `json:"vulnerabilities,omitempty"`
}

// ApiOSSPackageArtifacts defines model for api.OSSPackageArtifacts.
type ApiOSSPackageArtifacts struct {
	Binary *[]ApiOSSPackageDownloadInfo `json:"binary,omitempty"`
	Source *[]ApiOSSPackageDownloadInfo `json:"source,omitempty"`
}

// ApiOSSPackageDownloadInfo defines model for api.OSSPackageDownloadInfo.
type ApiOSSPackageDownloadInfo struct {
	Hashes    *[]ApiOSSPackageHashInfo `json:"hashes,omitempty"`
	Reference *string                  `json:"reference,omitempty"`

	// Type See OSSPackageDownloadInfoType* consts
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ApiOSSPackageHashInfo defines model for api.OSSPackageHashInfo.
type ApiOSSPackageHashInfo struct {
	// Algorithm See OSSPackageHashInfoAlgo* consts
	Algorithm *string `json:"algorithm,omitempty"`

	// Type See OSSPackageHashInfoType* consts
	Type *string `json:"type,omitempty"`

	// Value hex string digest or link to hash
	Value *string `json:"value,omitempty"`
}

// ApiOSSPackageResearchAttributes defines model for api.OSSPackageResearchAttributes.
type ApiOSSPackageResearchAttributes struct {
	Abandoned       *bool   `json:"abandoned,omitempty"`
	Eol             *bool   `json:"eol,omitempty"`
	IsMalicious     *bool   `json:"is_malicious,omitempty"`
	MaliciousSource *string `json:"malicious_source,omitempty"`
	RepoHijackable  *bool   `json:"repo_hijackable,omitempty"`
	SquattedPackage *string `json:"squatted_package,omitempty"`
}

// ApiOSSPackageVulnerability defines model for api.OSSPackageVulnerability.
type ApiOSSPackageVulnerability struct {
	Detection    *string `json:"detection,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
}

// ApiPackage defines model for api.Package.
type ApiPackage struct {
	Filename *string `json:"filename,omitempty"`

	// Name sort
	Name    *string `json:"name,omitempty"`
	Release *string `json:"release,omitempty"`
	Src     *string `json:"src,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ApiProblemType defines model for api.ProblemType.
type ApiProblemType struct {
	ProblemtypeData *[]ApiProblemTypeData `json:"problemtype_data,omitempty"`
}

// ApiProblemTypeData defines model for api.ProblemTypeData.
type ApiProblemTypeData struct {
	Description *[]ApiProblemTypeDescription `json:"description,omitempty"`
}

// ApiProblemTypeDataExtended defines model for api.ProblemTypeDataExtended.
type ApiProblemTypeDataExtended struct {
	Description *[]ApiProblemTypeDescriptionExtended `json:"description,omitempty"`
}

// ApiProblemTypeDescription defines model for api.ProblemTypeDescription.
type ApiProblemTypeDescription struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiProblemTypeDescriptionExtended defines model for api.ProblemTypeDescriptionExtended.
type ApiProblemTypeDescriptionExtended struct {
	Lang  *string `json:"lang,omitempty"`
	Name  *string `json:"name,omitempty"`
	Url   *string `json:"url,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiProblemTypeExtended defines model for api.ProblemTypeExtended.
type ApiProblemTypeExtended struct {
	ProblemtypeData *[]ApiProblemTypeDataExtended `json:"problemtype_data,omitempty"`
}

// ApiReference defines model for api.Reference.
type ApiReference struct {
	// Href sort
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// ApiReferenceData defines model for api.ReferenceData.
type ApiReferenceData struct {
	Name      *string   `json:"name,omitempty"`
	Refsource *string   `json:"refsource,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// ApiReferenceDataExtended defines model for api.ReferenceDataExtended.
type ApiReferenceDataExtended struct {
	DateAdded   *string   `json:"date_added,omitempty"`
	ExternalId  *string   `json:"external_id,omitempty"`
	Lang        *string   `json:"lang,omitempty"`
	Name        *string   `json:"name,omitempty"`
	PreviousUrl *string   `json:"previous_url,omitempty"`
	Refsource   *string   `json:"refsource,omitempty"`
	Status      *string   `json:"status,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// ApiReferences defines model for api.References.
type ApiReferences struct {
	ReferenceData *[]ApiReferenceData `json:"reference_data,omitempty"`
}

// ApiReferencesExtended defines model for api.ReferencesExtended.
type ApiReferencesExtended struct {
	// ReferenceData ExploitData     []NormalizedExploit       `json:"exploit_data,omitempty"`
	// 		ThreatActorData []ThreatActorExtended     `json:"threat_actor_data,omitempty"`
	// 		RansomwareData  []RansomwareReferenceData `json:"ransomware_data,omitempty"`
	// 		AdvisoryData    []AdvisoryExtended        `json:"advisory_data,omitempty"`
	// 		IdentifierData  []IdentifierExtended      `json:"identifier_data,omitempty"`
	ReferenceData *[]ApiReferenceDataExtended `json:"reference_data,omitempty"`
}

// ApiRelatedAttackPattern defines model for api.RelatedAttackPattern.
type ApiRelatedAttackPattern struct {
	CapecId   *string `json:"capec_id,omitempty"`
	CapecName *string `json:"capec_name,omitempty"`
	CapecUrl  *string `json:"capec_url,omitempty"`
	Lang      *string `json:"lang,omitempty"`
}

// ApiTemporalCVSSV2 defines model for api.TemporalCVSSV2.
type ApiTemporalCVSSV2 struct {
	Exploitability   *string  `json:"exploitability,omitempty"`
	RemediationLevel *string  `json:"remediationLevel,omitempty"`
	ReportConfidence *string  `json:"reportConfidence,omitempty"`
	TemporalScore    *float32 `json:"temporalScore,omitempty"`
	VectorString     *string  `json:"vectorString,omitempty"`
	Version          *string  `json:"version,omitempty"`
}

// ApiTemporalCVSSV3 defines model for api.TemporalCVSSV3.
type ApiTemporalCVSSV3 struct {
	ExploitCodeMaturity *string  `json:"exploitCodeMaturity,omitempty"`
	RemediationLevel    *string  `json:"remediationLevel,omitempty"`
	ReportConfidence    *string  `json:"reportConfidence,omitempty"`
	TemporalScore       *float32 `json:"temporalScore,omitempty"`
	VectorString        *string  `json:"vectorString,omitempty"`
	Version             *string  `json:"version,omitempty"`
}

// ApiTemporalMetricV2 defines model for api.TemporalMetricV2.
type ApiTemporalMetricV2 struct {
	CvssV2 *ApiTemporalCVSSV2 `json:"cvssV2,omitempty"`
}

// ApiTemporalMetricV3 defines model for api.TemporalMetricV3.
type ApiTemporalMetricV3 struct {
	CvssV3 *ApiTemporalCVSSV3 `json:"cvssV3,omitempty"`
}

// ApiUpdate defines model for api.Update.
type ApiUpdate struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id sort // key
	Id         *string         `json:"id,omitempty"`
	Issued     *ApiDateTime    `json:"issued,omitempty"`
	OsArch     *string         `json:"os_arch,omitempty"`
	OsVersion  *string         `json:"os_version,omitempty"`
	Packages   *[]ApiPackage   `json:"packages,omitempty"`
	References *[]ApiReference `json:"references,omitempty"`
	Severity   *string         `json:"severity,omitempty"`
	Title      *string         `json:"title,omitempty"`
	Type       *string         `json:"type,omitempty"`
	Updated    *ApiDateTime    `json:"updated,omitempty"`
}

// ApiVulnerabilityAlias defines model for api.VulnerabilityAlias.
type ApiVulnerabilityAlias struct {
	Alias        *string `json:"alias,omitempty"`
	Cve          *string `json:"cve,omitempty"`
	ReferenceUrl *string `json:"reference_url,omitempty"`
}

// ModelsEntitlements defines model for models.Entitlements.
type ModelsEntitlements struct {
	// Entitlements Entitlements provides a map of roles to a list of entitlements
	Entitlements *map[string][]string `json:"entitlements,omitempty"`
}

// PaginateMatch defines model for paginate.Match.
type PaginateMatch struct {
	Field *string `json:"field,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PaginatePagination defines model for paginate.Pagination.
type PaginatePagination struct {
	// Cursor Cursor for the current page
	Cursor *string `json:"cursor,omitempty"`

	// FirstItem First and last Item
	FirstItem *int `json:"first_item,omitempty"`

	// Index The requested index
	Index    *string `json:"index,omitempty"`
	LastItem *int    `json:"last_item,omitempty"`

	// Limit Per-Page limit
	Limit    *int             `json:"limit,omitempty"`
	Matches  *[]PaginateMatch `json:"matches,omitempty"`
	MaxPages *int             `json:"max_pages,omitempty"`

	// NextCursor Cursor for the next page
	NextCursor *string `json:"next_cursor,omitempty"`

	// OpensearchQuery NOTE: swaggertype tag is needed so that swaggo/swag run from `make openapi` does not die in a fire
	OpensearchQuery *map[string]interface{} `json:"opensearch_query,omitempty"`
	Order           *string                 `json:"order,omitempty"`

	// Page The current Page number
	Page       *int             `json:"page,omitempty"`
	Pages      *[]string        `json:"pages,omitempty"`
	Parameters *[]PaginateParam `json:"parameters,omitempty"`
	ShowPages  *bool            `json:"show_pages,omitempty"`
	ShowQuery  *bool            `json:"show_query,omitempty"`
	Sort       *string          `json:"sort,omitempty"`
	Timestamp  *string          `json:"timestamp,omitempty"`

	// TotalDocuments The total number of items
	TotalDocuments *int `json:"total_documents,omitempty"`

	// TotalPages The total number of pages
	TotalPages *int      `json:"total_pages,omitempty"`
	Warnings   *[]string `json:"warnings,omitempty"`
}

// PaginateParam defines model for paginate.Param.
type PaginateParam struct {
	Filtering *string `json:"filtering,omitempty"`
	Format    *string `json:"format,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// ParamsIdxReqParams model representing the parameters to constrain the vulnerability search
type ParamsIdxReqParams struct {
	// Alias Specify an Alias to search with
	Alias *string `json:"alias,omitempty"`

	// Asn IpIntel Only: Specify an ASN to search with
	Asn *string `json:"asn,omitempty"`

	// BotnetName Specify a Botnet Name to search with
	BotnetName *string `json:"botnetName,omitempty"`

	// Cidr IpIntel Only: Specify a IPv4 or IPv6 cidr to search with
	Cidr *string `json:"cidr,omitempty"`

	// Country IpIntel Only: Specify a country name to search with
	Country *string `json:"country,omitempty"`

	// CountryCode IpIntel Only: Specify a country code to search with
	CountryCode *string `json:"countryCode,omitempty"`

	// Cve Specify one or more CVEs (comma delimited) to search with.
	Cve *string `json:"cve,omitempty"`

	// Hostname IpIntel Only: Specify a string to search in the list of hostnames
	Hostname *string `json:"hostname,omitempty"`

	// Iava Specify an IAVA to search with
	Iava *string `json:"iava,omitempty"`

	// Jvndb Specify a JVNDB ID to search with
	Jvndb *string `json:"jvndb,omitempty"`

	// Limit Limit the number of documents returned
	Limit *string `json:"limit,omitempty"`

	// Matches IpIntel Only: Specify a string to search in the matches field
	Matches *string `json:"matches,omitempty"`

	// MispId Specify a MISP ID to search with
	MispId *string `json:"mispId,omitempty"`

	// MitreId Specify a MITRE ID to search with
	MitreId *string `json:"mitreId,omitempty"`

	// Order Return results in ascending or descending order
	Order *ParamsIdxReqParamsOrder `json:"order,omitempty"`

	// Published Specify a published date to search with
	Published *string `json:"published,omitempty"`

	// PublishedEnd Specify an ending published date to filter with
	PublishedEnd *string `json:"publishedEnd,omitempty"`

	// PublishedStart Specify a starting published date to filter with
	PublishedStart *string `json:"publishedStart,omitempty"`

	// RansomwareFamilyName Specify a Ransomware Family Name to search with
	RansomwareFamilyName *string `json:"ransomwareFamilyName,omitempty"`

	// Sort Return results sorted by field
	Sort *ParamsIdxReqParamsSort `json:"sort,omitempty"`

	// ThreatActorName Specify a Threat Actor Name to search with
	ThreatActorName *string `json:"threatActorName,omitempty"`

	// TypeId IpIntel Only: Choices are c2 or initial-access
	TypeId *string `json:"typeId,omitempty"`

	// TypeKind IpIntel Only: Filter results by 'type.kind'
	TypeKind *string `json:"typeKind,omitempty"`

	// UpdatedEnd Specify an ending last modified date to filter with
	UpdatedEnd *string `json:"updatedEnd,omitempty"`

	// UpdatedStart Specify a starting last modified date to filter with
	UpdatedStart *string `json:"updatedStart,omitempty"`
}

// ParamsIdxReqParamsOrder Return results in ascending or descending order
type ParamsIdxReqParamsOrder string

// ParamsIdxReqParamsSort Return results sorted by field
type ParamsIdxReqParamsSort string

// ParamsIndexBackup defines model for params.IndexBackup.
type ParamsIndexBackup struct {
	DateAdded     *string `json:"date_added,omitempty"`
	Filename      *string `json:"filename,omitempty"`
	Sha256        *string `json:"sha256,omitempty"`
	Url           *string `json:"url,omitempty"`
	UrlExpires    *string `json:"url_expires,omitempty"`
	UrlTtlMinutes *int    `json:"url_ttl_minutes,omitempty"`
}

// ParamsIndexBackupList defines model for params.IndexBackupList.
type ParamsIndexBackupList struct {
	Description *string `json:"description,omitempty"`

	// Href Href API endpoint URI to detailed backup information
	Href *string `json:"href,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ParamsIndexList defines model for params.IndexList.
type ParamsIndexList struct {
	Description *string `json:"description,omitempty"`

	// Href Href API endpoint URI to detailed index information
	Href *string `json:"href,omitempty"`
	Name *string `json:"name,omitempty"`
}

// PurlPackageURLJSON defines model for purl.PackageURLJSON.
type PurlPackageURLJSON struct {
	Name       *string              `json:"name,omitempty"`
	Namespace  *string              `json:"namespace,omitempty"`
	Qualifiers *[]PurlQualifierJSON `json:"qualifiers,omitempty"`
	Subpath    *string              `json:"subpath,omitempty"`
	Type       *string              `json:"type,omitempty"`
	Version    *string              `json:"version,omitempty"`
}

// PurlQualifierJSON defines model for purl.QualifierJSON.
type PurlQualifierJSON struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// RenderResponseArrayParamsIndexBackupList defines model for render.Response-array_params_IndexBackupList.
type RenderResponseArrayParamsIndexBackupList struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Data      *[]ParamsIndexBackupList `json:"data,omitempty"`
}

// RenderResponseArrayParamsIndexList defines model for render.Response-array_params_IndexList.
type RenderResponseArrayParamsIndexList struct {
	Benchmark *float32           `json:"_benchmark,omitempty"`
	Data      *[]ParamsIndexList `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryA10PaginatePagination defines model for render.ResponseWithMetadata-array_advisory_A10-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryA10PaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryA10      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryABBAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ABBAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryABBAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryABBAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAMDPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AMD-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAMDPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAMD      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAMIPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AMI-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAMIPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAMI      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryASRGPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ASRG-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryASRGPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryASRG     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAVEVAAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AVEVAAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAVEVAAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAVEVAAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAWSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AWS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAWSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAWS      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAbbottPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Abbott-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAbbottPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAbbott   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAbsolutePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Absolute-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAbsolutePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAbsolute `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAcronisPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Acronis-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAcronisPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAcronis  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAdobeAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AdobeAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAdobeAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAdobeAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Advisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAdvisoryPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAdvisoryRecordPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AdvisoryRecord-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAdvisoryRecordPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryAdvisoryRecord `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAlephResearchPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AlephResearch-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAlephResearchPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAlephResearch `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAlmaLinuxUpdatePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AlmaLinuxUpdate-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAlmaLinuxUpdatePaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryAlmaLinuxUpdate `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAlpineLinuxSecDBPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AlpineLinuxSecDB-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAlpineLinuxSecDBPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryAlpineLinuxSecDB `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAnchoreNVDOverridePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AnchoreNVDOverride-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAnchoreNVDOverridePaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryAnchoreNVDOverride `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAndroidAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AndroidAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAndroidAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryAndroidAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheActiveMQPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheActiveMQ-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheActiveMQPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheActiveMQ `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheArchivaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheArchiva-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheArchivaPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheArchiva `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheArrowPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheArrow-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheArrowPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheArrow `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheCamelPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheCamel-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheCamelPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheCamel `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheCommonsPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheCommons-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheCommonsPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheCommons `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheCouchDBPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheCouchDB-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheCouchDBPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheCouchDB `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheFlinkPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheFlink-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheFlinkPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheFlink `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheGuacamolePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheGuacamole-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheGuacamolePaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheGuacamole `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheHTTPPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheHTTP-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheHTTPPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheHTTP `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheHadoopPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheHadoop-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheHadoopPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheHadoop `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheJSPWikiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheJSPWiki-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheJSPWikiPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheJSPWiki `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheKafkaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheKafka-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheKafkaPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheKafka `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheLoggingServicesPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheLoggingServices-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheLoggingServicesPaginatePagination struct {
	Benchmark *float32                         `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination              `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheLoggingServices `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheNiFiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheNiFi-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheNiFiPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheNiFi `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheOFBizPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheOFBiz-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheOFBizPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheOFBiz `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheOpenMeetingsPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheOpenMeetings-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheOpenMeetingsPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheOpenMeetings `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheOpenOfficePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheOpenOffice-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheOpenOfficePaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheOpenOffice `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApachePulsarPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApachePulsar-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApachePulsarPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApachePulsar `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheShiroPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheShiro-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheShiroPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheShiro `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheSparkPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheSpark-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheSparkPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheSpark `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheStrutsPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheStruts-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheStrutsPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheStruts `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheSubversionPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheSubversion-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheSubversionPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheSubversion `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheSupersetPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheSuperset-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheSupersetPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheSuperset `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheTomcatPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheTomcat-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheTomcatPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheTomcat `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryApacheZooKeeperPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ApacheZooKeeper-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryApacheZooKeeperPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheZooKeeper `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAppCheckPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AppCheck-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAppCheckPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAppCheck `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAppgatePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Appgate-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAppgatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAppgate  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAppleAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AppleAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAppleAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAppleAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryArchIssuePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ArchIssue-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryArchIssuePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryArchIssue `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAristaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Arista-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAristaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryArista   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryArubaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Aruba-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryArubaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAruba    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAssetNotePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AssetNote-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAssetNotePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryAssetNote `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAsteriskPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Asterisk-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAsteriskPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAsterisk `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAsusPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Asus-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAsusPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAsus     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAtlassianAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AtlassianAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAtlassianAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryAtlassianAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAtlassianVulnPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AtlassianVuln-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAtlassianVulnPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAtlassianVuln `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAtredisPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Atredis-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAtredisPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAtredis  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAusCertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_AusCert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAusCertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAusCert  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAutodeskPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Autodesk-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAutodeskPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAutodesk `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAvayaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Avaya-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAvayaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAvaya    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAvigilonPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Avigilon-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAvigilonPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAvigilon `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAxisPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Axis-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAxisPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAxis     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryAzulPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Azul-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryAzulPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAzul     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBBraunAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BBraunAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBBraunAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryBBraunAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBDUAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BDUAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBDUAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryBDUAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBLSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BLS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBLSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBLS      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBandrPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Bandr-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBandrPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBandr    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBaxterAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BaxterAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBaxterAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryBaxterAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBeckhoffAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BeckhoffAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBeckhoffAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryBeckhoffAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBectonDickinsonAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BectonDickinsonAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBectonDickinsonAdvisoryPaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryBectonDickinsonAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBeldenAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BeldenAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBeldenAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryBeldenAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBeyondTrustPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BeyondTrust-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBeyondTrustPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryBeyondTrust `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBinarlyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Binarly-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBinarlyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBinarly  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBitDefenderPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BitDefender-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBitDefenderPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryBitDefender `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBlackBerryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BlackBerry-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBlackBerryPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryBlackBerry `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBoschAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BoschAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBoschAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryBoschAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBostonScientificAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_BostonScientificAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBostonScientificAdvisoryPaginatePagination struct {
	Benchmark *float32                            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                 `json:"_meta,omitempty"`
	Data      *[]AdvisoryBostonScientificAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryBotnetPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Botnet-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryBotnetPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBotnet   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCACyberCentreAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CACyberCentreAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCACyberCentreAdvisoryPaginatePagination struct {
	Benchmark *float32                         `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination              `json:"_meta,omitempty"`
	Data      *[]AdvisoryCACyberCentreAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCBLMarinerPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CBLMariner-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCBLMarinerPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryCBLMariner `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCERTEUAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CERTEUAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCERTEUAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCERTEUAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCESAPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CESA-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCESAPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCESA     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCISAAlertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CISAAlert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCISAAlertPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryCISAAlert `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCNNVDEntryJSONPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CNNVDEntryJSON-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCNNVDEntryJSONPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCNNVDEntryJSON `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCNVDBulletinPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CNVDBulletin-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCNVDBulletinPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryCNVDBulletin `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCNVDFlawPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CNVDFlaw-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCNVDFlawPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCNVDFlaw `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCanvasExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CanvasExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCanvasExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryCanvasExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCarestreamAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CarestreamAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCarestreamAdvisoryPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryCarestreamAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCarrierPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Carrier-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCarrierPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCarrier  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCertBEPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CertBE-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCertBEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertBE   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCertFRAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CertFRAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCertFRAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertFRAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCertINPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CertIN-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCertINPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertIN   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCertIRSecurityAlertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CertIRSecurityAlert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCertIRSecurityAlertPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertIRSecurityAlert `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCertSEPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CertSE-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCertSEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertSE   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCertUAPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CertUA-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCertUAPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertUA   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryChainGuardPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ChainGuard-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryChainGuardPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryChainGuard `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCheckPointPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CheckPoint-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCheckPointPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryCheckPoint `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryChromePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Chrome-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryChromePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryChrome   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCiscoAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CiscoAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCiscoAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryCiscoAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCitrixAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CitrixAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCitrixAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCitrixAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryClarotyVulnerabilityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ClarotyVulnerability-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryClarotyVulnerabilityPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryClarotyVulnerability `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCloudBeesPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CloudBees-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCloudBeesPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryCloudBees `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCloudVulnDBAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CloudVulnDBAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCloudVulnDBAdvisoryPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryCloudVulnDBAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCodesysAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CodesysAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCodesysAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryCodesysAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCompassSecurityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_CompassSecurity-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCompassSecurityPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryCompassSecurity `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryContainerOSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ContainerOS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryContainerOSPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryContainerOS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCrestronPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Crestron-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCrestronPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCrestron `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCurlPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Curl-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCurlPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCurl     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryCvrfPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Cvrf-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryCvrfPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCvrf     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDNNPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_DNN-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDNNPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDNN      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDahuaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Dahua-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDahuaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDahua    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDassaultPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Dassault-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDassaultPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDassault `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDebianSecurityAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_DebianSecurityAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDebianSecurityAdvisoryPaginatePagination struct {
	Benchmark *float32                          `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination               `json:"_meta,omitempty"`
	Data      *[]AdvisoryDebianSecurityAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDellPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Dell-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDellPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDell     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDeltaAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_DeltaAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDeltaAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryDeltaAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDjangoPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Django-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDjangoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDjango   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDotCMSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_DotCMS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDotCMSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDotCMS   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDragosAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_DragosAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDragosAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryDragosAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryDraytekPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Draytek-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryDraytekPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDraytek  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryEOLReleaseDataPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_EOLReleaseData-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryEOLReleaseDataPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryEOLReleaseData `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryEatonAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_EatonAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryEatonAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryEatonAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryElasticPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Elastic-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryElasticPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryElastic  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryElspecPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Elspec-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryElspecPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryElspec   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryEmergingThreatsSnortPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_EmergingThreatsSnort-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryEmergingThreatsSnortPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryEmergingThreatsSnort `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryEmersonAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_EmersonAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryEmersonAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryEmersonAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryExodusIntelPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ExodusIntel-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryExodusIntelPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryExodusIntel `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryExploitDBExploitv2PaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ExploitDBExploitv2-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryExploitDBExploitv2PaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryExploitDBExploitv2 `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFSecurePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_FSecure-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFSecurePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryFSecure  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFanucPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Fanuc-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFanucPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryFanuc    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFastlyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Fastly-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFastlyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryFastly   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFileCloudPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_FileCloud-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFileCloudPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryFileCloud `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFlattSecurityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_FlattSecurity-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFlattSecurityPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryFlattSecurity `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryForgeRockPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ForgeRock-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryForgeRockPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryForgeRock `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFortinetAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_FortinetAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFortinetAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryFortinetAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFortinetIPSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_FortinetIPS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFortinetIPSPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryFortinetIPS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryFoxitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Foxit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryFoxitPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryFoxit    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGCPPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GCP-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGCPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGCP      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGEGasPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GEGas-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGEGasPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGEGas    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGEHealthcareAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GEHealthcareAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGEHealthcareAdvisoryPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryGEHealthcareAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGHAdvisoryJSONLeanPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GHAdvisoryJSONLean-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGHAdvisoryJSONLeanPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryGHAdvisoryJSONLean `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGallagherPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Gallagher-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGallagherPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryGallagher `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGenetecPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Genetec-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGenetecPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGenetec  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGigabytePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Gigabyte-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGigabytePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGigabyte `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGitHubExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GitHubExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGitHubExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryGitHubExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGitLabExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GitLabExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGitLabExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryGitLabExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGiteeExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GiteeExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGiteeExploitPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryGiteeExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGitlabAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GitlabAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGitlabAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryGitlabAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGnuTLSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GnuTLS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGnuTLSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGnuTLS   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGrafanaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Grafana-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGrafanaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGrafana  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryGreyNoiseDetectionPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_GreyNoiseDetection-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryGreyNoiseDetectionPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryGreyNoiseDetection `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHCLPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HCL-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHCLPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHCL      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHIKVisionPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HIKVision-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHIKVisionPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHIKVision `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHKCertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HKCert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHKCertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHKCert   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHPPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HP-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHP       `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHarmonyOSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HarmonyOS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHarmonyOSPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHarmonyOS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHashiCorpPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HashiCorp-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHashiCorpPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHashiCorp `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHaskellSADBAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HaskellSADBAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHaskellSADBAdvisoryPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryHaskellSADBAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHillromAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HillromAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHillromAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryHillromAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHitachiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Hitachi-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHitachiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHitachi  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHitachiEnergyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HitachiEnergy-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHitachiEnergyPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryHitachiEnergy `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHoneywellPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Honeywell-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHoneywellPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHoneywell `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHuaweiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Huawei-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHuaweiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHuawei   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHuaweiEulerOSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HuaweiEulerOS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHuaweiEulerOSPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryHuaweiEulerOS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryHuaweiIPSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_HuaweiIPS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryHuaweiIPSPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHuaweiIPS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIAVAPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IAVA-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIAVAPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIAVA     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIBMPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IBM-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIBMPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIBM      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryITWExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ITWExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryITWExploitPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryITWExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIdemiaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Idemia-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIdemiaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIdemia   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIncibeAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IncibeAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIncibeAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryIncibeAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIntelPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Intel-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIntelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIntel    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IpIntelRecord-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryIpIntelRecord `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIsraeliAlertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IsraeliAlert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIsraeliAlertPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryIsraeliAlert `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIsraeliVulnerabilityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IsraeliVulnerability-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIsraeliVulnerabilityPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryIsraeliVulnerability `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIstioPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Istio-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIstioPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIstio    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIvantiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Ivanti-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIvantiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIvanti   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryIvantiRSSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_IvantiRSS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryIvantiRSSPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryIvantiRSS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryJFrogPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_JFrog-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryJFrogPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryJFrog    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryJNJAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_JNJAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryJNJAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryJNJAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryJVNPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_JVN-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryJVNPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryJVN      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryJVNAdvisoryItemPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_JVNAdvisoryItem-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryJVNAdvisoryItemPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryJVNAdvisoryItem `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryJenkinsPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Jenkins-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryJenkinsPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryJenkins  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryJetBrainsPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_JetBrains-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryJetBrainsPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryJetBrains `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryK8SPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_K8S-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryK8SPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryK8S      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryKEVCatalogVulnerabilityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_KEVCatalogVulnerability-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryKEVCatalogVulnerabilityPaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryKEVCatalogVulnerability `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryKRCertAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_KRCertAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryKRCertAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryKRCertAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryKasperskyICSCERTAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_KasperskyICSCERTAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryKasperskyICSCERTAdvisoryPaginatePagination struct {
	Benchmark *float32                            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                 `json:"_meta,omitempty"`
	Data      *[]AdvisoryKasperskyICSCERTAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryKoreLogicPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_KoreLogic-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryKoreLogicPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryKoreLogic `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryLGPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_LG-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryLGPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryLG       `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryLenovoPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Lenovo-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryLenovoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryLenovo   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryLexmarkAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_LexmarkAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryLexmarkAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryLexmarkAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryLibreOfficePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_LibreOffice-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryLibreOfficePaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryLibreOffice `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryLinuxPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Linux-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryLinuxPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryLinux    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMACertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MACert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMACertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMACert   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMFilesPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MFiles-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMFilesPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMFiles   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryManageEngineAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ManageEngineAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryManageEngineAdvisoryPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryManageEngineAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMbedTLSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MbedTLS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMbedTLSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMbedTLS  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMediatekPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Mediatek-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMediatekPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMediatek `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMedtronicAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MedtronicAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMedtronicAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryMedtronicAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMendixPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Mendix-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMendixPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMendix   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMetaDataPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MetaData-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMetaDataPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMetaData `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMetasploitExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MetasploitExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMetasploitExploitPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryMetasploitExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMicrosoftCVRFPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MicrosoftCVRF-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMicrosoftCVRFPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryMicrosoftCVRF `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMicrosoftKbPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MicrosoftKb-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMicrosoftKbPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryMicrosoftKb `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMikrotikPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Mikrotik-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMikrotikPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMikrotik `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMindrayPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Mindray-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMindrayPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMindray  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMispValuePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MispValue-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMispValuePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryMispValue `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMitelPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Mitel-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMitelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMitel    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMitreCVEListV5PaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MitreCVEListV5-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMitreCVEListV5PaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryMitreCVEListV5 `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMitsubishiElectricAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MitsubishiElectricAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMitsubishiElectricAdvisoryPaginatePagination struct {
	Benchmark *float32                              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                   `json:"_meta,omitempty"`
	Data      *[]AdvisoryMitsubishiElectricAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMongoDBPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MongoDB-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMongoDBPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMongoDB  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMoxaAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MoxaAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMoxaAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryMoxaAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryMozillaAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_MozillaAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryMozillaAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryMozillaAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNCSCPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NCSC-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNCSCPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNCSC     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNCSCCVEPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NCSCCVE-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNCSCCVEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNCSCCVE  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNECPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NEC-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNECPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNEC      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNHSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NHS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNHSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNHS      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNIPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NI-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNIPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNI       `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNTPPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NTP-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNTPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNTP      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNZAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NZAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNZAdvisoryPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryNZAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNaverPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Naver-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNaverPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNaver    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNetAppPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NetApp-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNetAppPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetApp   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNetgatePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Netgate-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNetgatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetgate  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNetgearPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Netgear-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNetgearPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetgear  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNetskopePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Netskope-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNetskopePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetskope `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNginxAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NginxAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNginxAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryNginxAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNodeJSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NodeJS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNodeJSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNodeJS   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNodeSecurityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_NodeSecurity-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNodeSecurityPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryNodeSecurity `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNokiaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Nokia-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNokiaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNokia    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryNozomiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Nozomi-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryNozomiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNozomi   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOSVPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OSV-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOSVPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOSV      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOTRSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OTRS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOTRSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOTRS     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOctopusDeployPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OctopusDeploy-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOctopusDeployPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryOctopusDeploy `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOktaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Okta-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOktaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOkta     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOmronPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Omron-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOmronPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOmron    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOneEPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OneE-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOneEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOneE     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOpenBSDPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OpenBSD-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOpenBSDPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenBSD  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOpenCVDBPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OpenCVDB-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOpenCVDBPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenCVDB `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOpenSSHPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OpenSSH-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOpenSSHPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenSSH  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOpenSSLSecAdvPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OpenSSLSecAdv-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOpenSSLSecAdvPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenSSLSecAdv `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOpenStackPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OpenStack-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOpenStackPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenStack `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOracleCPUPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OracleCPU-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOracleCPUPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryOracleCPU `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOracleCPUCSAFPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OracleCPUCSAF-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOracleCPUCSAFPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryOracleCPUCSAF `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryOwnCloudPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_OwnCloud-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryOwnCloudPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOwnCloud `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPHPMyAdminPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PHPMyAdmin-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPHPMyAdminPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryPHPMyAdmin `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPTCPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PTC-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPTCPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPTC      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPalantirPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Palantir-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPalantirPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPalantir `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPaloAltoAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PaloAltoAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPaloAltoAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryPaloAltoAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPanasonicPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Panasonic-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPanasonicPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryPanasonic `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPaperCutPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PaperCut-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPaperCutPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPaperCut `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPegaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Pega-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPegaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPega     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPhilipsAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PhilipsAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPhilipsAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryPhilipsAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPhoenixContactAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PhoenixContactAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPhoenixContactAdvisoryPaginatePagination struct {
	Benchmark *float32                          `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination               `json:"_meta,omitempty"`
	Data      *[]AdvisoryPhoenixContactAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPostgresSQLPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PostgresSQL-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPostgresSQLPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryPostgresSQL `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPowerDNSPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PowerDNS-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPowerDNSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPowerDNS `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryProgressPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Progress-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryProgressPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryProgress `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryProofpointPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Proofpoint-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryProofpointPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryProofpoint `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPureStoragePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PureStorage-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPureStoragePaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryPureStorage `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryPyPAAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_PyPAAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryPyPAAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryPyPAAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryQNAPAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_QNAPAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryQNAPAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryQNAPAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryQSBPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_QSB-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryQSBPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryQSB      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryQualcommPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Qualcomm-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryQualcommPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryQualcomm `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryQualysPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Qualys-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryQualysPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryQualys   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRansomwareExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_RansomwareExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRansomwareExploitPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryRansomwareExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRedhatCVEPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_RedhatCVE-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRedhatCVEPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryRedhatCVE `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRenesasPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Renesas-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRenesasPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRenesas  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRevivePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Revive-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRevivePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRevive   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRockwellPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Rockwell-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRockwellPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRockwell `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRockyErrataPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_RockyErrata-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRockyErrataPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryRockyErrata `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRuckusPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Ruckus-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRuckusPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRuckus   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryRustsecAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_RustsecAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryRustsecAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryRustsecAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySAAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SAAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySAAdvisoryPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySAAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySAPPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SAP-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySAPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySAP      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySECConsultPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SECConsult-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySECConsultPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySECConsult `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySSDAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SSDAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySSDAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisorySSDAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySaintExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SaintExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySaintExploitPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisorySaintExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySalesForcePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SalesForce-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySalesForcePaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySalesForce `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySambaPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Samba-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySambaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySamba    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySchneiderElectricAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SchneiderElectricAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySchneiderElectricAdvisoryPaginatePagination struct {
	Benchmark *float32                             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                  `json:"_meta,omitempty"`
	Data      *[]AdvisorySchneiderElectricAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySecurityBulletinPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SecurityBulletin-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySecurityBulletinPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisorySecurityBulletin `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySecurityLabPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SecurityLab-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySecurityLabPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisorySecurityLab `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySeebugExploitPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SeebugExploit-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySeebugExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisorySeebugExploit `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySelPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Sel-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySel      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySentinelOnePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SentinelOne-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySentinelOnePaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisorySentinelOne `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryServiceNowPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ServiceNow-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryServiceNowPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryServiceNow `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryShadowServerExploitedVulnerabilityPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ShadowServerExploitedVulnerability-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryShadowServerExploitedVulnerabilityPaginatePagination struct {
	Benchmark *float32                                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                           `json:"_meta,omitempty"`
	Data      *[]AdvisoryShadowServerExploitedVulnerability `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryShielderPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Shielder-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryShielderPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryShielder `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySickPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Sick-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySickPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySick     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySiemensAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SiemensAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySiemensAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisorySiemensAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySierraWirelessPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SierraWireless-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySierraWirelessPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisorySierraWireless `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySigmaRulePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SigmaRule-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySigmaRulePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisorySigmaRule `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySingCertPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SingCert-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySingCertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySingCert `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySlackwarePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Slackware-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySlackwarePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisorySlackware `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySolarWindsAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SolarWindsAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySolarWindsAdvisoryPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisorySolarWindsAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySolrPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Solr-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySolrPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySolr     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySonicWallAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SonicWallAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySonicWallAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisorySonicWallAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySpacelabsHealthcareAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SpacelabsHealthcareAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySpacelabsHealthcareAdvisoryPaginatePagination struct {
	Benchmark *float32                               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                    `json:"_meta,omitempty"`
	Data      *[]AdvisorySpacelabsHealthcareAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySplunkPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Splunk-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySplunkPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySplunk   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySpringPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Spring-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySpringPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySpring   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryStormshieldPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Stormshield-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryStormshieldPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryStormshield `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryStrykerAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_StrykerAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryStrykerAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryStrykerAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySudoPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Sudo-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySudoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySudo     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySwisslogHealthcareAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SwisslogHealthcareAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySwisslogHealthcareAdvisoryPaginatePagination struct {
	Benchmark *float32                              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                   `json:"_meta,omitempty"`
	Data      *[]AdvisorySwisslogHealthcareAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySymfonyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Symfony-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySymfonyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySymfony  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySynacktivPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Synacktiv-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySynacktivPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisorySynacktiv `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySyncroSoftPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_SyncroSoft-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySyncroSoftPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySyncroSoft `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisorySynologyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Synology-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisorySynologyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySynology `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTIPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TI-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTIPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTI       `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTPLinkPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TPLink-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTPLinkPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTPLink   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTWCertAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TWCertAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTWCertAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryTWCertAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTalosAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TalosAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTalosAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryTalosAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTeamViewerPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TeamViewer-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTeamViewerPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryTeamViewer `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTenableResearchAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TenableResearchAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTenableResearchAdvisoryPaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryTenableResearchAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTencentPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Tencent-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTencentPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTencent  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryThalesPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Thales-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryThalesPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryThales   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTheMissingLinkPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TheMissingLink-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTheMissingLinkPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryTheMissingLink `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryThreatActorWithExternalObjectsPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ThreatActorWithExternalObjects-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryThreatActorWithExternalObjectsPaginatePagination struct {
	Benchmark *float32                                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                       `json:"_meta,omitempty"`
	Data      *[]AdvisoryThreatActorWithExternalObjects `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTibcoPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Tibco-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTibcoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTibco    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTraneTechnologyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TraneTechnology-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTraneTechnologyPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryTraneTechnology `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTrendMicroPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_TrendMicro-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTrendMicroPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryTrendMicro `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryTrustwavePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Trustwave-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryTrustwavePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryTrustwave `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUSDPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_USD-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUSDPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUSD      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUSOMAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_USOMAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUSOMAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryUSOMAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUbiquitiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Ubiquiti-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUbiquitiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUbiquiti `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUbuntuCVEPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_UbuntuCVE-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUbuntuCVEPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryUbuntuCVE `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUnifyPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Unify-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUnifyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUnify    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUnisocPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Unisoc-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUnisocPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUnisoc   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryUpdatePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Update-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryUpdatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUpdate   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVCCPEDictionaryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VCCPEDictionary-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVCCPEDictionaryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryVCCPEDictionary `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVDEAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VDEAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVDEAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryVDEAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVMWareAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VMWareAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVMWareAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryVMWareAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVYAIREAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VYAIREAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVYAIREAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryVYAIREAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVanDykePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VanDyke-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVanDykePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVanDyke  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVapidLabsAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VapidLabsAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVapidLabsAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryVapidLabsAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVeeamPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Veeam-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVeeamPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVeeam    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVeritasPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Veritas-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVeritasPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVeritas  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVoidSecPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VoidSec-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVoidSecPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVoidSec  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVulnCheckPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VulnCheck-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVulnCheckPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnCheck `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVulnCheckCVEListV5PaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VulnCheckCVEListV5-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVulnCheckCVEListV5PaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnCheckCVEListV5 `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVulnCheckConfigPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VulnCheckConfig-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVulnCheckConfigPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnCheckConfig `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVulnCheckKEVPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VulnCheckKEV-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVulnCheckKEVPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnCheckKEV `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVulnerableDebianPackagePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_VulnerableDebianPackage-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVulnerableDebianPackagePaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnerableDebianPackage `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryVulnrichmentPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Vulnrichment-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryVulnrichmentPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnrichment `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWRTPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_WRT-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWRTPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWRT      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWatchGuardPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_WatchGuard-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWatchGuardPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryWatchGuard `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWhatsAppPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_WhatsApp-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWhatsAppPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWhatsApp `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWibuPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Wibu-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWibuPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWibu     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWiresharkPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Wireshark-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWiresharkPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryWireshark `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWithSecurePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_WithSecure-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWithSecurePaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryWithSecure `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWolfSSLPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_WolfSSL-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWolfSSLPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWolfSSL  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWolfiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Wolfi-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWolfiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWolfi    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryWordfencePaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Wordfence-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryWordfencePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryWordfence `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryXenPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Xen-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryXenPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXen      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryXeroxPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Xerox-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryXeroxPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXerox    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryXiaomiPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Xiaomi-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryXiaomiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXiaomi   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryXylemPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Xylem-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryXylemPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXylem    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryYokogawaAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_YokogawaAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryYokogawaAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryYokogawaAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryYubicoPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Yubico-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryYubicoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryYubico   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZebraPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Zebra-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZebraPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZebra    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZeroDayAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ZeroDayAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZeroDayAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryZeroDayAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZeroScienceAdvisoryPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_ZeroScienceAdvisory-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZeroScienceAdvisoryPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryZeroScienceAdvisory `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZimbraPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Zimbra-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZimbraPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZimbra   `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZoomPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Zoom-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZoomPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZoom     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZscalerPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Zscaler-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZscalerPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZscaler  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZusoPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Zuso-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZusoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZuso     `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayAdvisoryZyxelPaginatePagination defines model for render.ResponseWithMetadata-array_advisory_Zyxel-paginate_Pagination.
type RenderResponseWithMetadataArrayAdvisoryZyxelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZyxel    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiCWEPaginatePagination defines model for render.ResponseWithMetadata-array_api_CWE-paginate_Pagination.
type RenderResponseWithMetadataArrayApiCWEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiCWE           `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiCveItemsPaginatePagination defines model for render.ResponseWithMetadata-array_api_CveItems-paginate_Pagination.
type RenderResponseWithMetadataArrayApiCveItemsPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiCveItems      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiCveItemsExtendedPaginatePagination defines model for render.ResponseWithMetadata-array_api_CveItemsExtended-paginate_Pagination.
type RenderResponseWithMetadataArrayApiCveItemsExtendedPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]ApiCveItemsExtended `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiEPSSDataPaginatePagination defines model for render.ResponseWithMetadata-array_api_EPSSData-paginate_Pagination.
type RenderResponseWithMetadataArrayApiEPSSDataPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiEPSSData      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiExploitChainPaginatePagination defines model for render.ResponseWithMetadata-array_api_ExploitChain-paginate_Pagination.
type RenderResponseWithMetadataArrayApiExploitChainPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiExploitChain  `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiExploitV3ResultPaginatePagination defines model for render.ResponseWithMetadata-array_api_ExploitV3Result-paginate_Pagination.
type RenderResponseWithMetadataArrayApiExploitV3ResultPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]ApiExploitV3Result `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiExploitsChangelogPaginatePagination defines model for render.ResponseWithMetadata-array_api_ExploitsChangelog-paginate_Pagination.
type RenderResponseWithMetadataArrayApiExploitsChangelogPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]ApiExploitsChangelog `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiInitialAccessPaginatePagination defines model for render.ResponseWithMetadata-array_api_InitialAccess-paginate_Pagination.
type RenderResponseWithMetadataArrayApiInitialAccessPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiInitialAccess `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiMitreAttackToCVEPaginatePagination defines model for render.ResponseWithMetadata-array_api_MitreAttackToCVE-paginate_Pagination.
type RenderResponseWithMetadataArrayApiMitreAttackToCVEPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]ApiMitreAttackToCVE `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiNVD20CPEMatchPaginatePagination defines model for render.ResponseWithMetadata-array_api_NVD20CPEMatch-paginate_Pagination.
type RenderResponseWithMetadataArrayApiNVD20CPEMatchPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiNVD20CPEMatch `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiNVD20CVEPaginatePagination defines model for render.ResponseWithMetadata-array_api_NVD20CVE-paginate_Pagination.
type RenderResponseWithMetadataArrayApiNVD20CVEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiNVD20CVE      `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiNVD20CVEExtendedPaginatePagination defines model for render.ResponseWithMetadata-array_api_NVD20CVEExtended-paginate_Pagination.
type RenderResponseWithMetadataArrayApiNVD20CVEExtendedPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]ApiNVD20CVEExtended `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination defines model for render.ResponseWithMetadata-array_api_OSSPackage-paginate_Pagination.
type RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiOSSPackage    `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiUpdatePaginatePagination defines model for render.ResponseWithMetadata-array_api_Update-paginate_Pagination.
type RenderResponseWithMetadataArrayApiUpdatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiUpdate        `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayApiVulnerabilityAliasPaginatePagination defines model for render.ResponseWithMetadata-array_api_VulnerabilityAlias-paginate_Pagination.
type RenderResponseWithMetadataArrayApiVulnerabilityAliasPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]ApiVulnerabilityAlias `json:"data,omitempty"`
}

// RenderResponseWithMetadataArrayStringV3controllersResponseMetadata defines model for render.ResponseWithMetadata-array_string-v3controllers_ResponseMetadata.
type RenderResponseWithMetadataArrayStringV3controllersResponseMetadata struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *V3controllersResponseMetadata `json:"_meta,omitempty"`
	Data      *[]string                      `json:"data,omitempty"`
}

// RenderResponseWithMetadataV3controllersBackupResponseDataV3controllersBackupResponseMetadata defines model for render.ResponseWithMetadata-v3controllers_BackupResponseData-v3controllers_BackupResponseMetadata.
type RenderResponseWithMetadataV3controllersBackupResponseDataV3controllersBackupResponseMetadata struct {
	Benchmark *float32                             `json:"_benchmark,omitempty"`
	Meta      *V3controllersBackupResponseMetadata `json:"_meta,omitempty"`
	Data      *[]ParamsIndexBackup                 `json:"data,omitempty"`
}

// RenderResponseWithMetadataV3controllersPurlResponseDataV3controllersPurlResponseMetadata defines model for render.ResponseWithMetadata-v3controllers_PurlResponseData-v3controllers_PurlResponseMetadata.
type RenderResponseWithMetadataV3controllersPurlResponseDataV3controllersPurlResponseMetadata struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *V3controllersPurlResponseMetadata `json:"_meta,omitempty"`
	Data      *V3controllersPurlResponseData     `json:"data,omitempty"`
}

// V3controllersBackupResponseMetadata defines model for v3controllers.BackupResponseMetadata.
type V3controllersBackupResponseMetadata struct {
	Index     *string `json:"index,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// V3controllersPurlResponseData defines model for v3controllers.PurlResponseData.
type V3controllersPurlResponseData struct {
	// Cves list of associated CVE 's
	Cves *[]string `json:"cves,omitempty"`

	// Vulnerabilities list of associated vulnerabilities
	Vulnerabilities *[]ApiOSSPackageVulnerability `json:"vulnerabilities,omitempty"`
}

// V3controllersPurlResponseMetadata defines model for v3controllers.PurlResponseMetadata.
type V3controllersPurlResponseMetadata struct {
	// PurlStruct meta-data about the purl
	PurlStruct *PurlPackageURLJSON `json:"purl_struct,omitempty"`

	// Timestamp time of the transaction
	Timestamp *string `json:"timestamp,omitempty"`

	// TotalDocuments number of results found
	TotalDocuments *int `json:"total_documents,omitempty"`
}

// V3controllersResponseMetadata defines model for v3controllers.ResponseMetadata.
type V3controllersResponseMetadata struct {
	Cpe            *string `json:"cpe,omitempty"`
	CpeStruct      *ApiCPE `json:"cpe_struct,omitempty"`
	Timestamp      *string `json:"timestamp,omitempty"`
	TotalDocuments *int    `json:"total_documents,omitempty"`
}

// GetBackupIndexParamsIndex defines parameters for GetBackupIndex.
type GetBackupIndexParamsIndex string

// GetCpeParams defines parameters for GetCpe.
type GetCpeParams struct {
	// Cpe CPE designation to lookup
	Cpe string `form:"cpe" json:"cpe"`
}

// GetIndexA10Params defines parameters for GetIndexA10.
type GetIndexA10Params struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexA10ParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexA10ParamsStartCursor defines parameters for GetIndexA10.
type GetIndexA10ParamsStartCursor string

// GetIndexAbbParams defines parameters for GetIndexAbb.
type GetIndexAbbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAbbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAbbParamsStartCursor defines parameters for GetIndexAbb.
type GetIndexAbbParamsStartCursor string

// GetIndexAbbottParams defines parameters for GetIndexAbbott.
type GetIndexAbbottParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAbbottParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAbbottParamsStartCursor defines parameters for GetIndexAbbott.
type GetIndexAbbottParamsStartCursor string

// GetIndexAbsoluteParams defines parameters for GetIndexAbsolute.
type GetIndexAbsoluteParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAbsoluteParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAbsoluteParamsStartCursor defines parameters for GetIndexAbsolute.
type GetIndexAbsoluteParamsStartCursor string

// GetIndexAcronisParams defines parameters for GetIndexAcronis.
type GetIndexAcronisParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAcronisParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAcronisParamsStartCursor defines parameters for GetIndexAcronis.
type GetIndexAcronisParamsStartCursor string

// GetIndexAdobeParams defines parameters for GetIndexAdobe.
type GetIndexAdobeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAdobeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAdobeParamsStartCursor defines parameters for GetIndexAdobe.
type GetIndexAdobeParamsStartCursor string

// GetIndexAdvisoriesParams defines parameters for GetIndexAdvisories.
type GetIndexAdvisoriesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAdvisoriesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAdvisoriesParamsStartCursor defines parameters for GetIndexAdvisories.
type GetIndexAdvisoriesParamsStartCursor string

// GetIndexAlephResearchParams defines parameters for GetIndexAlephResearch.
type GetIndexAlephResearchParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAlephResearchParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAlephResearchParamsStartCursor defines parameters for GetIndexAlephResearch.
type GetIndexAlephResearchParamsStartCursor string

// GetIndexAlmaParams defines parameters for GetIndexAlma.
type GetIndexAlmaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAlmaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAlmaParamsStartCursor defines parameters for GetIndexAlma.
type GetIndexAlmaParamsStartCursor string

// GetIndexAlpineParams defines parameters for GetIndexAlpine.
type GetIndexAlpineParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAlpineParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAlpineParamsStartCursor defines parameters for GetIndexAlpine.
type GetIndexAlpineParamsStartCursor string

// GetIndexAmazonParams defines parameters for GetIndexAmazon.
type GetIndexAmazonParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAmazonParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAmazonParamsStartCursor defines parameters for GetIndexAmazon.
type GetIndexAmazonParamsStartCursor string

// GetIndexAmdParams defines parameters for GetIndexAmd.
type GetIndexAmdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAmdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAmdParamsStartCursor defines parameters for GetIndexAmd.
type GetIndexAmdParamsStartCursor string

// GetIndexAmiParams defines parameters for GetIndexAmi.
type GetIndexAmiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAmiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAmiParamsStartCursor defines parameters for GetIndexAmi.
type GetIndexAmiParamsStartCursor string

// GetIndexAnchoreNvdOverrideParams defines parameters for GetIndexAnchoreNvdOverride.
type GetIndexAnchoreNvdOverrideParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAnchoreNvdOverrideParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAnchoreNvdOverrideParamsStartCursor defines parameters for GetIndexAnchoreNvdOverride.
type GetIndexAnchoreNvdOverrideParamsStartCursor string

// GetIndexAndroidParams defines parameters for GetIndexAndroid.
type GetIndexAndroidParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAndroidParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAndroidParamsStartCursor defines parameters for GetIndexAndroid.
type GetIndexAndroidParamsStartCursor string

// GetIndexApacheActivemqParams defines parameters for GetIndexApacheActivemq.
type GetIndexApacheActivemqParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheActivemqParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheActivemqParamsStartCursor defines parameters for GetIndexApacheActivemq.
type GetIndexApacheActivemqParamsStartCursor string

// GetIndexApacheArchivaParams defines parameters for GetIndexApacheArchiva.
type GetIndexApacheArchivaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheArchivaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheArchivaParamsStartCursor defines parameters for GetIndexApacheArchiva.
type GetIndexApacheArchivaParamsStartCursor string

// GetIndexApacheArrowParams defines parameters for GetIndexApacheArrow.
type GetIndexApacheArrowParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheArrowParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheArrowParamsStartCursor defines parameters for GetIndexApacheArrow.
type GetIndexApacheArrowParamsStartCursor string

// GetIndexApacheCamelParams defines parameters for GetIndexApacheCamel.
type GetIndexApacheCamelParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheCamelParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheCamelParamsStartCursor defines parameters for GetIndexApacheCamel.
type GetIndexApacheCamelParamsStartCursor string

// GetIndexApacheCommonsParams defines parameters for GetIndexApacheCommons.
type GetIndexApacheCommonsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheCommonsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheCommonsParamsStartCursor defines parameters for GetIndexApacheCommons.
type GetIndexApacheCommonsParamsStartCursor string

// GetIndexApacheCouchdbParams defines parameters for GetIndexApacheCouchdb.
type GetIndexApacheCouchdbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheCouchdbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheCouchdbParamsStartCursor defines parameters for GetIndexApacheCouchdb.
type GetIndexApacheCouchdbParamsStartCursor string

// GetIndexApacheFlinkParams defines parameters for GetIndexApacheFlink.
type GetIndexApacheFlinkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheFlinkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheFlinkParamsStartCursor defines parameters for GetIndexApacheFlink.
type GetIndexApacheFlinkParamsStartCursor string

// GetIndexApacheGuacamoleParams defines parameters for GetIndexApacheGuacamole.
type GetIndexApacheGuacamoleParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheGuacamoleParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheGuacamoleParamsStartCursor defines parameters for GetIndexApacheGuacamole.
type GetIndexApacheGuacamoleParamsStartCursor string

// GetIndexApacheHadoopParams defines parameters for GetIndexApacheHadoop.
type GetIndexApacheHadoopParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheHadoopParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheHadoopParamsStartCursor defines parameters for GetIndexApacheHadoop.
type GetIndexApacheHadoopParamsStartCursor string

// GetIndexApacheHttpParams defines parameters for GetIndexApacheHttp.
type GetIndexApacheHttpParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheHttpParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheHttpParamsStartCursor defines parameters for GetIndexApacheHttp.
type GetIndexApacheHttpParamsStartCursor string

// GetIndexApacheJspwikiParams defines parameters for GetIndexApacheJspwiki.
type GetIndexApacheJspwikiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheJspwikiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheJspwikiParamsStartCursor defines parameters for GetIndexApacheJspwiki.
type GetIndexApacheJspwikiParamsStartCursor string

// GetIndexApacheKafkaParams defines parameters for GetIndexApacheKafka.
type GetIndexApacheKafkaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheKafkaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheKafkaParamsStartCursor defines parameters for GetIndexApacheKafka.
type GetIndexApacheKafkaParamsStartCursor string

// GetIndexApacheLoggingservicesParams defines parameters for GetIndexApacheLoggingservices.
type GetIndexApacheLoggingservicesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheLoggingservicesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheLoggingservicesParamsStartCursor defines parameters for GetIndexApacheLoggingservices.
type GetIndexApacheLoggingservicesParamsStartCursor string

// GetIndexApacheNifiParams defines parameters for GetIndexApacheNifi.
type GetIndexApacheNifiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheNifiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheNifiParamsStartCursor defines parameters for GetIndexApacheNifi.
type GetIndexApacheNifiParamsStartCursor string

// GetIndexApacheOfbizParams defines parameters for GetIndexApacheOfbiz.
type GetIndexApacheOfbizParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheOfbizParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheOfbizParamsStartCursor defines parameters for GetIndexApacheOfbiz.
type GetIndexApacheOfbizParamsStartCursor string

// GetIndexApacheOpenmeetingsParams defines parameters for GetIndexApacheOpenmeetings.
type GetIndexApacheOpenmeetingsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheOpenmeetingsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheOpenmeetingsParamsStartCursor defines parameters for GetIndexApacheOpenmeetings.
type GetIndexApacheOpenmeetingsParamsStartCursor string

// GetIndexApacheOpenofficeParams defines parameters for GetIndexApacheOpenoffice.
type GetIndexApacheOpenofficeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheOpenofficeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheOpenofficeParamsStartCursor defines parameters for GetIndexApacheOpenoffice.
type GetIndexApacheOpenofficeParamsStartCursor string

// GetIndexApachePulsarParams defines parameters for GetIndexApachePulsar.
type GetIndexApachePulsarParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApachePulsarParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApachePulsarParamsStartCursor defines parameters for GetIndexApachePulsar.
type GetIndexApachePulsarParamsStartCursor string

// GetIndexApacheShiroParams defines parameters for GetIndexApacheShiro.
type GetIndexApacheShiroParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheShiroParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheShiroParamsStartCursor defines parameters for GetIndexApacheShiro.
type GetIndexApacheShiroParamsStartCursor string

// GetIndexApacheSparkParams defines parameters for GetIndexApacheSpark.
type GetIndexApacheSparkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheSparkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheSparkParamsStartCursor defines parameters for GetIndexApacheSpark.
type GetIndexApacheSparkParamsStartCursor string

// GetIndexApacheStrutsParams defines parameters for GetIndexApacheStruts.
type GetIndexApacheStrutsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheStrutsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheStrutsParamsStartCursor defines parameters for GetIndexApacheStruts.
type GetIndexApacheStrutsParamsStartCursor string

// GetIndexApacheSubversionParams defines parameters for GetIndexApacheSubversion.
type GetIndexApacheSubversionParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheSubversionParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheSubversionParamsStartCursor defines parameters for GetIndexApacheSubversion.
type GetIndexApacheSubversionParamsStartCursor string

// GetIndexApacheSupersetParams defines parameters for GetIndexApacheSuperset.
type GetIndexApacheSupersetParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheSupersetParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheSupersetParamsStartCursor defines parameters for GetIndexApacheSuperset.
type GetIndexApacheSupersetParamsStartCursor string

// GetIndexApacheTomcatParams defines parameters for GetIndexApacheTomcat.
type GetIndexApacheTomcatParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheTomcatParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheTomcatParamsStartCursor defines parameters for GetIndexApacheTomcat.
type GetIndexApacheTomcatParamsStartCursor string

// GetIndexApacheZookeeperParams defines parameters for GetIndexApacheZookeeper.
type GetIndexApacheZookeeperParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexApacheZookeeperParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexApacheZookeeperParamsStartCursor defines parameters for GetIndexApacheZookeeper.
type GetIndexApacheZookeeperParamsStartCursor string

// GetIndexAppcheckParams defines parameters for GetIndexAppcheck.
type GetIndexAppcheckParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAppcheckParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAppcheckParamsStartCursor defines parameters for GetIndexAppcheck.
type GetIndexAppcheckParamsStartCursor string

// GetIndexAppgateParams defines parameters for GetIndexAppgate.
type GetIndexAppgateParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAppgateParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAppgateParamsStartCursor defines parameters for GetIndexAppgate.
type GetIndexAppgateParamsStartCursor string

// GetIndexAppleParams defines parameters for GetIndexApple.
type GetIndexAppleParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAppleParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAppleParamsStartCursor defines parameters for GetIndexApple.
type GetIndexAppleParamsStartCursor string

// GetIndexArchParams defines parameters for GetIndexArch.
type GetIndexArchParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexArchParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexArchParamsStartCursor defines parameters for GetIndexArch.
type GetIndexArchParamsStartCursor string

// GetIndexAristaParams defines parameters for GetIndexArista.
type GetIndexAristaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAristaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAristaParamsStartCursor defines parameters for GetIndexArista.
type GetIndexAristaParamsStartCursor string

// GetIndexArubaParams defines parameters for GetIndexAruba.
type GetIndexArubaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexArubaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexArubaParamsStartCursor defines parameters for GetIndexAruba.
type GetIndexArubaParamsStartCursor string

// GetIndexAsrgParams defines parameters for GetIndexAsrg.
type GetIndexAsrgParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAsrgParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAsrgParamsStartCursor defines parameters for GetIndexAsrg.
type GetIndexAsrgParamsStartCursor string

// GetIndexAssetnoteParams defines parameters for GetIndexAssetnote.
type GetIndexAssetnoteParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAssetnoteParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAssetnoteParamsStartCursor defines parameters for GetIndexAssetnote.
type GetIndexAssetnoteParamsStartCursor string

// GetIndexAsteriskParams defines parameters for GetIndexAsterisk.
type GetIndexAsteriskParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAsteriskParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAsteriskParamsStartCursor defines parameters for GetIndexAsterisk.
type GetIndexAsteriskParamsStartCursor string

// GetIndexAsusParams defines parameters for GetIndexAsus.
type GetIndexAsusParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAsusParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAsusParamsStartCursor defines parameters for GetIndexAsus.
type GetIndexAsusParamsStartCursor string

// GetIndexAtlassianParams defines parameters for GetIndexAtlassian.
type GetIndexAtlassianParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAtlassianParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAtlassianParamsStartCursor defines parameters for GetIndexAtlassian.
type GetIndexAtlassianParamsStartCursor string

// GetIndexAtlassianVulnsParams defines parameters for GetIndexAtlassianVulns.
type GetIndexAtlassianVulnsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAtlassianVulnsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAtlassianVulnsParamsStartCursor defines parameters for GetIndexAtlassianVulns.
type GetIndexAtlassianVulnsParamsStartCursor string

// GetIndexAtredisParams defines parameters for GetIndexAtredis.
type GetIndexAtredisParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAtredisParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAtredisParamsStartCursor defines parameters for GetIndexAtredis.
type GetIndexAtredisParamsStartCursor string

// GetIndexAuscertParams defines parameters for GetIndexAuscert.
type GetIndexAuscertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAuscertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAuscertParamsStartCursor defines parameters for GetIndexAuscert.
type GetIndexAuscertParamsStartCursor string

// GetIndexAutodeskParams defines parameters for GetIndexAutodesk.
type GetIndexAutodeskParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAutodeskParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAutodeskParamsStartCursor defines parameters for GetIndexAutodesk.
type GetIndexAutodeskParamsStartCursor string

// GetIndexAvayaParams defines parameters for GetIndexAvaya.
type GetIndexAvayaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAvayaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAvayaParamsStartCursor defines parameters for GetIndexAvaya.
type GetIndexAvayaParamsStartCursor string

// GetIndexAvevaParams defines parameters for GetIndexAveva.
type GetIndexAvevaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAvevaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAvevaParamsStartCursor defines parameters for GetIndexAveva.
type GetIndexAvevaParamsStartCursor string

// GetIndexAvigilonParams defines parameters for GetIndexAvigilon.
type GetIndexAvigilonParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAvigilonParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAvigilonParamsStartCursor defines parameters for GetIndexAvigilon.
type GetIndexAvigilonParamsStartCursor string

// GetIndexAwsParams defines parameters for GetIndexAws.
type GetIndexAwsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAwsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAwsParamsStartCursor defines parameters for GetIndexAws.
type GetIndexAwsParamsStartCursor string

// GetIndexAxisParams defines parameters for GetIndexAxis.
type GetIndexAxisParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAxisParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAxisParamsStartCursor defines parameters for GetIndexAxis.
type GetIndexAxisParamsStartCursor string

// GetIndexAzulParams defines parameters for GetIndexAzul.
type GetIndexAzulParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexAzulParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexAzulParamsStartCursor defines parameters for GetIndexAzul.
type GetIndexAzulParamsStartCursor string

// GetIndexBandrParams defines parameters for GetIndexBandr.
type GetIndexBandrParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBandrParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBandrParamsStartCursor defines parameters for GetIndexBandr.
type GetIndexBandrParamsStartCursor string

// GetIndexBaxterParams defines parameters for GetIndexBaxter.
type GetIndexBaxterParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBaxterParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBaxterParamsStartCursor defines parameters for GetIndexBaxter.
type GetIndexBaxterParamsStartCursor string

// GetIndexBbraunParams defines parameters for GetIndexBbraun.
type GetIndexBbraunParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBbraunParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBbraunParamsStartCursor defines parameters for GetIndexBbraun.
type GetIndexBbraunParamsStartCursor string

// GetIndexBdParams defines parameters for GetIndexBd.
type GetIndexBdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBdParamsStartCursor defines parameters for GetIndexBd.
type GetIndexBdParamsStartCursor string

// GetIndexBduParams defines parameters for GetIndexBdu.
type GetIndexBduParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBduParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBduParamsStartCursor defines parameters for GetIndexBdu.
type GetIndexBduParamsStartCursor string

// GetIndexBeckhoffParams defines parameters for GetIndexBeckhoff.
type GetIndexBeckhoffParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBeckhoffParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBeckhoffParamsStartCursor defines parameters for GetIndexBeckhoff.
type GetIndexBeckhoffParamsStartCursor string

// GetIndexBeldenParams defines parameters for GetIndexBelden.
type GetIndexBeldenParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBeldenParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBeldenParamsStartCursor defines parameters for GetIndexBelden.
type GetIndexBeldenParamsStartCursor string

// GetIndexBeyondTrustParams defines parameters for GetIndexBeyondTrust.
type GetIndexBeyondTrustParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBeyondTrustParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBeyondTrustParamsStartCursor defines parameters for GetIndexBeyondTrust.
type GetIndexBeyondTrustParamsStartCursor string

// GetIndexBinarlyParams defines parameters for GetIndexBinarly.
type GetIndexBinarlyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBinarlyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBinarlyParamsStartCursor defines parameters for GetIndexBinarly.
type GetIndexBinarlyParamsStartCursor string

// GetIndexBitdefenderParams defines parameters for GetIndexBitdefender.
type GetIndexBitdefenderParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBitdefenderParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBitdefenderParamsStartCursor defines parameters for GetIndexBitdefender.
type GetIndexBitdefenderParamsStartCursor string

// GetIndexBlackberryParams defines parameters for GetIndexBlackberry.
type GetIndexBlackberryParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBlackberryParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBlackberryParamsStartCursor defines parameters for GetIndexBlackberry.
type GetIndexBlackberryParamsStartCursor string

// GetIndexBlsParams defines parameters for GetIndexBls.
type GetIndexBlsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBlsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBlsParamsStartCursor defines parameters for GetIndexBls.
type GetIndexBlsParamsStartCursor string

// GetIndexBoschParams defines parameters for GetIndexBosch.
type GetIndexBoschParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBoschParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBoschParamsStartCursor defines parameters for GetIndexBosch.
type GetIndexBoschParamsStartCursor string

// GetIndexBostonScientificParams defines parameters for GetIndexBostonScientific.
type GetIndexBostonScientificParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBostonScientificParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBostonScientificParamsStartCursor defines parameters for GetIndexBostonScientific.
type GetIndexBostonScientificParamsStartCursor string

// GetIndexBotnetsParams defines parameters for GetIndexBotnets.
type GetIndexBotnetsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexBotnetsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexBotnetsParamsStartCursor defines parameters for GetIndexBotnets.
type GetIndexBotnetsParamsStartCursor string

// GetIndexCaCyberCentreParams defines parameters for GetIndexCaCyberCentre.
type GetIndexCaCyberCentreParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCaCyberCentreParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCaCyberCentreParamsStartCursor defines parameters for GetIndexCaCyberCentre.
type GetIndexCaCyberCentreParamsStartCursor string

// GetIndexCanvasParams defines parameters for GetIndexCanvas.
type GetIndexCanvasParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCanvasParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCanvasParamsStartCursor defines parameters for GetIndexCanvas.
type GetIndexCanvasParamsStartCursor string

// GetIndexCarestreamParams defines parameters for GetIndexCarestream.
type GetIndexCarestreamParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCarestreamParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCarestreamParamsStartCursor defines parameters for GetIndexCarestream.
type GetIndexCarestreamParamsStartCursor string

// GetIndexCargoParams defines parameters for GetIndexCargo.
type GetIndexCargoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCargoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCargoParamsStartCursor defines parameters for GetIndexCargo.
type GetIndexCargoParamsStartCursor string

// GetIndexCarrierParams defines parameters for GetIndexCarrier.
type GetIndexCarrierParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCarrierParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCarrierParamsStartCursor defines parameters for GetIndexCarrier.
type GetIndexCarrierParamsStartCursor string

// GetIndexCblMarinerParams defines parameters for GetIndexCblMariner.
type GetIndexCblMarinerParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCblMarinerParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCblMarinerParamsStartCursor defines parameters for GetIndexCblMariner.
type GetIndexCblMarinerParamsStartCursor string

// GetIndexCentosParams defines parameters for GetIndexCentos.
type GetIndexCentosParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCentosParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCentosParamsStartCursor defines parameters for GetIndexCentos.
type GetIndexCentosParamsStartCursor string

// GetIndexCertBeParams defines parameters for GetIndexCertBe.
type GetIndexCertBeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCertBeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCertBeParamsStartCursor defines parameters for GetIndexCertBe.
type GetIndexCertBeParamsStartCursor string

// GetIndexCertInParams defines parameters for GetIndexCertIn.
type GetIndexCertInParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCertInParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCertInParamsStartCursor defines parameters for GetIndexCertIn.
type GetIndexCertInParamsStartCursor string

// GetIndexCertIrSecurityAlertsParams defines parameters for GetIndexCertIrSecurityAlerts.
type GetIndexCertIrSecurityAlertsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCertIrSecurityAlertsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCertIrSecurityAlertsParamsStartCursor defines parameters for GetIndexCertIrSecurityAlerts.
type GetIndexCertIrSecurityAlertsParamsStartCursor string

// GetIndexCertSeParams defines parameters for GetIndexCertSe.
type GetIndexCertSeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCertSeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCertSeParamsStartCursor defines parameters for GetIndexCertSe.
type GetIndexCertSeParamsStartCursor string

// GetIndexCertUaParams defines parameters for GetIndexCertUa.
type GetIndexCertUaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCertUaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCertUaParamsStartCursor defines parameters for GetIndexCertUa.
type GetIndexCertUaParamsStartCursor string

// GetIndexCerteuParams defines parameters for GetIndexCerteu.
type GetIndexCerteuParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCerteuParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCerteuParamsStartCursor defines parameters for GetIndexCerteu.
type GetIndexCerteuParamsStartCursor string

// GetIndexCertfrParams defines parameters for GetIndexCertfr.
type GetIndexCertfrParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCertfrParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCertfrParamsStartCursor defines parameters for GetIndexCertfr.
type GetIndexCertfrParamsStartCursor string

// GetIndexChainguardParams defines parameters for GetIndexChainguard.
type GetIndexChainguardParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexChainguardParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexChainguardParamsStartCursor defines parameters for GetIndexChainguard.
type GetIndexChainguardParamsStartCursor string

// GetIndexCheckpointParams defines parameters for GetIndexCheckpoint.
type GetIndexCheckpointParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCheckpointParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCheckpointParamsStartCursor defines parameters for GetIndexCheckpoint.
type GetIndexCheckpointParamsStartCursor string

// GetIndexChromeParams defines parameters for GetIndexChrome.
type GetIndexChromeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexChromeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexChromeParamsStartCursor defines parameters for GetIndexChrome.
type GetIndexChromeParamsStartCursor string

// GetIndexCisaAlertsParams defines parameters for GetIndexCisaAlerts.
type GetIndexCisaAlertsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCisaAlertsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCisaAlertsParamsStartCursor defines parameters for GetIndexCisaAlerts.
type GetIndexCisaAlertsParamsStartCursor string

// GetIndexCisaKevParams defines parameters for GetIndexCisaKev.
type GetIndexCisaKevParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCisaKevParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCisaKevParamsStartCursor defines parameters for GetIndexCisaKev.
type GetIndexCisaKevParamsStartCursor string

// GetIndexCiscoParams defines parameters for GetIndexCisco.
type GetIndexCiscoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCiscoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCiscoParamsStartCursor defines parameters for GetIndexCisco.
type GetIndexCiscoParamsStartCursor string

// GetIndexCiscoTalosParams defines parameters for GetIndexCiscoTalos.
type GetIndexCiscoTalosParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCiscoTalosParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCiscoTalosParamsStartCursor defines parameters for GetIndexCiscoTalos.
type GetIndexCiscoTalosParamsStartCursor string

// GetIndexCitrixParams defines parameters for GetIndexCitrix.
type GetIndexCitrixParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCitrixParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCitrixParamsStartCursor defines parameters for GetIndexCitrix.
type GetIndexCitrixParamsStartCursor string

// GetIndexClarotyParams defines parameters for GetIndexClaroty.
type GetIndexClarotyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexClarotyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexClarotyParamsStartCursor defines parameters for GetIndexClaroty.
type GetIndexClarotyParamsStartCursor string

// GetIndexCloudbeesParams defines parameters for GetIndexCloudbees.
type GetIndexCloudbeesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCloudbeesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCloudbeesParamsStartCursor defines parameters for GetIndexCloudbees.
type GetIndexCloudbeesParamsStartCursor string

// GetIndexCloudvulndbParams defines parameters for GetIndexCloudvulndb.
type GetIndexCloudvulndbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCloudvulndbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCloudvulndbParamsStartCursor defines parameters for GetIndexCloudvulndb.
type GetIndexCloudvulndbParamsStartCursor string

// GetIndexCnnvdParams defines parameters for GetIndexCnnvd.
type GetIndexCnnvdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCnnvdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCnnvdParamsStartCursor defines parameters for GetIndexCnnvd.
type GetIndexCnnvdParamsStartCursor string

// GetIndexCnvdBulletinsParams defines parameters for GetIndexCnvdBulletins.
type GetIndexCnvdBulletinsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCnvdBulletinsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCnvdBulletinsParamsStartCursor defines parameters for GetIndexCnvdBulletins.
type GetIndexCnvdBulletinsParamsStartCursor string

// GetIndexCnvdFlawsParams defines parameters for GetIndexCnvdFlaws.
type GetIndexCnvdFlawsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCnvdFlawsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCnvdFlawsParamsStartCursor defines parameters for GetIndexCnvdFlaws.
type GetIndexCnvdFlawsParamsStartCursor string

// GetIndexCocoapodsParams defines parameters for GetIndexCocoapods.
type GetIndexCocoapodsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCocoapodsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCocoapodsParamsStartCursor defines parameters for GetIndexCocoapods.
type GetIndexCocoapodsParamsStartCursor string

// GetIndexCodesysParams defines parameters for GetIndexCodesys.
type GetIndexCodesysParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCodesysParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCodesysParamsStartCursor defines parameters for GetIndexCodesys.
type GetIndexCodesysParamsStartCursor string

// GetIndexCompassSecurityParams defines parameters for GetIndexCompassSecurity.
type GetIndexCompassSecurityParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCompassSecurityParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCompassSecurityParamsStartCursor defines parameters for GetIndexCompassSecurity.
type GetIndexCompassSecurityParamsStartCursor string

// GetIndexComposerParams defines parameters for GetIndexComposer.
type GetIndexComposerParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexComposerParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexComposerParamsStartCursor defines parameters for GetIndexComposer.
type GetIndexComposerParamsStartCursor string

// GetIndexConanParams defines parameters for GetIndexConan.
type GetIndexConanParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexConanParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexConanParamsStartCursor defines parameters for GetIndexConan.
type GetIndexConanParamsStartCursor string

// GetIndexCrestronParams defines parameters for GetIndexCrestron.
type GetIndexCrestronParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCrestronParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCrestronParamsStartCursor defines parameters for GetIndexCrestron.
type GetIndexCrestronParamsStartCursor string

// GetIndexCurlParams defines parameters for GetIndexCurl.
type GetIndexCurlParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCurlParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCurlParamsStartCursor defines parameters for GetIndexCurl.
type GetIndexCurlParamsStartCursor string

// GetIndexCweParams defines parameters for GetIndexCwe.
type GetIndexCweParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexCweParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexCweParamsStartCursor defines parameters for GetIndexCwe.
type GetIndexCweParamsStartCursor string

// GetIndexDahuaParams defines parameters for GetIndexDahua.
type GetIndexDahuaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDahuaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDahuaParamsStartCursor defines parameters for GetIndexDahua.
type GetIndexDahuaParamsStartCursor string

// GetIndexDassaultParams defines parameters for GetIndexDassault.
type GetIndexDassaultParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDassaultParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDassaultParamsStartCursor defines parameters for GetIndexDassault.
type GetIndexDassaultParamsStartCursor string

// GetIndexDebianParams defines parameters for GetIndexDebian.
type GetIndexDebianParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDebianParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDebianParamsStartCursor defines parameters for GetIndexDebian.
type GetIndexDebianParamsStartCursor string

// GetIndexDebianDsaParams defines parameters for GetIndexDebianDsa.
type GetIndexDebianDsaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDebianDsaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDebianDsaParamsStartCursor defines parameters for GetIndexDebianDsa.
type GetIndexDebianDsaParamsStartCursor string

// GetIndexDellParams defines parameters for GetIndexDell.
type GetIndexDellParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDellParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDellParamsStartCursor defines parameters for GetIndexDell.
type GetIndexDellParamsStartCursor string

// GetIndexDeltaParams defines parameters for GetIndexDelta.
type GetIndexDeltaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDeltaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDeltaParamsStartCursor defines parameters for GetIndexDelta.
type GetIndexDeltaParamsStartCursor string

// GetIndexDjangoParams defines parameters for GetIndexDjango.
type GetIndexDjangoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDjangoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDjangoParamsStartCursor defines parameters for GetIndexDjango.
type GetIndexDjangoParamsStartCursor string

// GetIndexDnnParams defines parameters for GetIndexDnn.
type GetIndexDnnParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDnnParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDnnParamsStartCursor defines parameters for GetIndexDnn.
type GetIndexDnnParamsStartCursor string

// GetIndexDotcmsParams defines parameters for GetIndexDotcms.
type GetIndexDotcmsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDotcmsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDotcmsParamsStartCursor defines parameters for GetIndexDotcms.
type GetIndexDotcmsParamsStartCursor string

// GetIndexDragosParams defines parameters for GetIndexDragos.
type GetIndexDragosParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDragosParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDragosParamsStartCursor defines parameters for GetIndexDragos.
type GetIndexDragosParamsStartCursor string

// GetIndexDraytekParams defines parameters for GetIndexDraytek.
type GetIndexDraytekParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexDraytekParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexDraytekParamsStartCursor defines parameters for GetIndexDraytek.
type GetIndexDraytekParamsStartCursor string

// GetIndexEatonParams defines parameters for GetIndexEaton.
type GetIndexEatonParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexEatonParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexEatonParamsStartCursor defines parameters for GetIndexEaton.
type GetIndexEatonParamsStartCursor string

// GetIndexElasticParams defines parameters for GetIndexElastic.
type GetIndexElasticParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexElasticParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexElasticParamsStartCursor defines parameters for GetIndexElastic.
type GetIndexElasticParamsStartCursor string

// GetIndexElspecParams defines parameters for GetIndexElspec.
type GetIndexElspecParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexElspecParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexElspecParamsStartCursor defines parameters for GetIndexElspec.
type GetIndexElspecParamsStartCursor string

// GetIndexEmergingThreatsSnortParams defines parameters for GetIndexEmergingThreatsSnort.
type GetIndexEmergingThreatsSnortParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexEmergingThreatsSnortParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexEmergingThreatsSnortParamsStartCursor defines parameters for GetIndexEmergingThreatsSnort.
type GetIndexEmergingThreatsSnortParamsStartCursor string

// GetIndexEmersonParams defines parameters for GetIndexEmerson.
type GetIndexEmersonParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexEmersonParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexEmersonParamsStartCursor defines parameters for GetIndexEmerson.
type GetIndexEmersonParamsStartCursor string

// GetIndexEolParams defines parameters for GetIndexEol.
type GetIndexEolParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexEolParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexEolParamsStartCursor defines parameters for GetIndexEol.
type GetIndexEolParamsStartCursor string

// GetIndexEpssParams defines parameters for GetIndexEpss.
type GetIndexEpssParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexEpssParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexEpssParamsStartCursor defines parameters for GetIndexEpss.
type GetIndexEpssParamsStartCursor string

// GetIndexExodusIntelParams defines parameters for GetIndexExodusIntel.
type GetIndexExodusIntelParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexExodusIntelParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexExodusIntelParamsStartCursor defines parameters for GetIndexExodusIntel.
type GetIndexExodusIntelParamsStartCursor string

// GetIndexExploitChainsParams defines parameters for GetIndexExploitChains.
type GetIndexExploitChainsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexExploitChainsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexExploitChainsParamsStartCursor defines parameters for GetIndexExploitChains.
type GetIndexExploitChainsParamsStartCursor string

// GetIndexExploitdbParams defines parameters for GetIndexExploitdb.
type GetIndexExploitdbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexExploitdbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexExploitdbParamsStartCursor defines parameters for GetIndexExploitdb.
type GetIndexExploitdbParamsStartCursor string

// GetIndexExploitsParams defines parameters for GetIndexExploits.
type GetIndexExploitsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexExploitsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexExploitsParamsStartCursor defines parameters for GetIndexExploits.
type GetIndexExploitsParamsStartCursor string

// GetIndexExploitsChangelogParams defines parameters for GetIndexExploitsChangelog.
type GetIndexExploitsChangelogParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexExploitsChangelogParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexExploitsChangelogParamsStartCursor defines parameters for GetIndexExploitsChangelog.
type GetIndexExploitsChangelogParamsStartCursor string

// GetIndexFSecureParams defines parameters for GetIndexFSecure.
type GetIndexFSecureParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFSecureParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFSecureParamsStartCursor defines parameters for GetIndexFSecure.
type GetIndexFSecureParamsStartCursor string

// GetIndexFanucParams defines parameters for GetIndexFanuc.
type GetIndexFanucParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFanucParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFanucParamsStartCursor defines parameters for GetIndexFanuc.
type GetIndexFanucParamsStartCursor string

// GetIndexFastlyParams defines parameters for GetIndexFastly.
type GetIndexFastlyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFastlyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFastlyParamsStartCursor defines parameters for GetIndexFastly.
type GetIndexFastlyParamsStartCursor string

// GetIndexFedoraParams defines parameters for GetIndexFedora.
type GetIndexFedoraParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFedoraParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFedoraParamsStartCursor defines parameters for GetIndexFedora.
type GetIndexFedoraParamsStartCursor string

// GetIndexFilecloudParams defines parameters for GetIndexFilecloud.
type GetIndexFilecloudParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFilecloudParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFilecloudParamsStartCursor defines parameters for GetIndexFilecloud.
type GetIndexFilecloudParamsStartCursor string

// GetIndexFlattSecurityParams defines parameters for GetIndexFlattSecurity.
type GetIndexFlattSecurityParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFlattSecurityParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFlattSecurityParamsStartCursor defines parameters for GetIndexFlattSecurity.
type GetIndexFlattSecurityParamsStartCursor string

// GetIndexForgerockParams defines parameters for GetIndexForgerock.
type GetIndexForgerockParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexForgerockParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexForgerockParamsStartCursor defines parameters for GetIndexForgerock.
type GetIndexForgerockParamsStartCursor string

// GetIndexFortinetParams defines parameters for GetIndexFortinet.
type GetIndexFortinetParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFortinetParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFortinetParamsStartCursor defines parameters for GetIndexFortinet.
type GetIndexFortinetParamsStartCursor string

// GetIndexFortinetIpsParams defines parameters for GetIndexFortinetIps.
type GetIndexFortinetIpsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFortinetIpsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFortinetIpsParamsStartCursor defines parameters for GetIndexFortinetIps.
type GetIndexFortinetIpsParamsStartCursor string

// GetIndexFoxitParams defines parameters for GetIndexFoxit.
type GetIndexFoxitParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFoxitParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFoxitParamsStartCursor defines parameters for GetIndexFoxit.
type GetIndexFoxitParamsStartCursor string

// GetIndexFreebsdParams defines parameters for GetIndexFreebsd.
type GetIndexFreebsdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexFreebsdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexFreebsdParamsStartCursor defines parameters for GetIndexFreebsd.
type GetIndexFreebsdParamsStartCursor string

// GetIndexGallagherParams defines parameters for GetIndexGallagher.
type GetIndexGallagherParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGallagherParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGallagherParamsStartCursor defines parameters for GetIndexGallagher.
type GetIndexGallagherParamsStartCursor string

// GetIndexGcpParams defines parameters for GetIndexGcp.
type GetIndexGcpParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGcpParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGcpParamsStartCursor defines parameters for GetIndexGcp.
type GetIndexGcpParamsStartCursor string

// GetIndexGeGasParams defines parameters for GetIndexGeGas.
type GetIndexGeGasParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGeGasParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGeGasParamsStartCursor defines parameters for GetIndexGeGas.
type GetIndexGeGasParamsStartCursor string

// GetIndexGeHealthcareParams defines parameters for GetIndexGeHealthcare.
type GetIndexGeHealthcareParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGeHealthcareParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGeHealthcareParamsStartCursor defines parameters for GetIndexGeHealthcare.
type GetIndexGeHealthcareParamsStartCursor string

// GetIndexGemParams defines parameters for GetIndexGem.
type GetIndexGemParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGemParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGemParamsStartCursor defines parameters for GetIndexGem.
type GetIndexGemParamsStartCursor string

// GetIndexGenetecParams defines parameters for GetIndexGenetec.
type GetIndexGenetecParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGenetecParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGenetecParamsStartCursor defines parameters for GetIndexGenetec.
type GetIndexGenetecParamsStartCursor string

// GetIndexGigabyteParams defines parameters for GetIndexGigabyte.
type GetIndexGigabyteParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGigabyteParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGigabyteParamsStartCursor defines parameters for GetIndexGigabyte.
type GetIndexGigabyteParamsStartCursor string

// GetIndexGiteeExploitsParams defines parameters for GetIndexGiteeExploits.
type GetIndexGiteeExploitsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGiteeExploitsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGiteeExploitsParamsStartCursor defines parameters for GetIndexGiteeExploits.
type GetIndexGiteeExploitsParamsStartCursor string

// GetIndexGithubExploitsParams defines parameters for GetIndexGithubExploits.
type GetIndexGithubExploitsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGithubExploitsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGithubExploitsParamsStartCursor defines parameters for GetIndexGithubExploits.
type GetIndexGithubExploitsParamsStartCursor string

// GetIndexGithubSecurityAdvisoriesParams defines parameters for GetIndexGithubSecurityAdvisories.
type GetIndexGithubSecurityAdvisoriesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGithubSecurityAdvisoriesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGithubSecurityAdvisoriesParamsStartCursor defines parameters for GetIndexGithubSecurityAdvisories.
type GetIndexGithubSecurityAdvisoriesParamsStartCursor string

// GetIndexGitlabAdvisoriesCommunityParams defines parameters for GetIndexGitlabAdvisoriesCommunity.
type GetIndexGitlabAdvisoriesCommunityParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGitlabAdvisoriesCommunityParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGitlabAdvisoriesCommunityParamsStartCursor defines parameters for GetIndexGitlabAdvisoriesCommunity.
type GetIndexGitlabAdvisoriesCommunityParamsStartCursor string

// GetIndexGitlabExploitsParams defines parameters for GetIndexGitlabExploits.
type GetIndexGitlabExploitsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGitlabExploitsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGitlabExploitsParamsStartCursor defines parameters for GetIndexGitlabExploits.
type GetIndexGitlabExploitsParamsStartCursor string

// GetIndexGnutlsParams defines parameters for GetIndexGnutls.
type GetIndexGnutlsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGnutlsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGnutlsParamsStartCursor defines parameters for GetIndexGnutls.
type GetIndexGnutlsParamsStartCursor string

// GetIndexGolangParams defines parameters for GetIndexGolang.
type GetIndexGolangParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGolangParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGolangParamsStartCursor defines parameters for GetIndexGolang.
type GetIndexGolangParamsStartCursor string

// GetIndexGoogle0dayItwParams defines parameters for GetIndexGoogle0dayItw.
type GetIndexGoogle0dayItwParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGoogle0dayItwParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGoogle0dayItwParamsStartCursor defines parameters for GetIndexGoogle0dayItw.
type GetIndexGoogle0dayItwParamsStartCursor string

// GetIndexGoogleContainerOptimizedOsParams defines parameters for GetIndexGoogleContainerOptimizedOs.
type GetIndexGoogleContainerOptimizedOsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGoogleContainerOptimizedOsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGoogleContainerOptimizedOsParamsStartCursor defines parameters for GetIndexGoogleContainerOptimizedOs.
type GetIndexGoogleContainerOptimizedOsParamsStartCursor string

// GetIndexGrafanaParams defines parameters for GetIndexGrafana.
type GetIndexGrafanaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGrafanaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGrafanaParamsStartCursor defines parameters for GetIndexGrafana.
type GetIndexGrafanaParamsStartCursor string

// GetIndexGreynoiseMetadataParams defines parameters for GetIndexGreynoiseMetadata.
type GetIndexGreynoiseMetadataParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexGreynoiseMetadataParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexGreynoiseMetadataParamsStartCursor defines parameters for GetIndexGreynoiseMetadata.
type GetIndexGreynoiseMetadataParamsStartCursor string

// GetIndexHackageParams defines parameters for GetIndexHackage.
type GetIndexHackageParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHackageParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHackageParamsStartCursor defines parameters for GetIndexHackage.
type GetIndexHackageParamsStartCursor string

// GetIndexHarmonyosParams defines parameters for GetIndexHarmonyos.
type GetIndexHarmonyosParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHarmonyosParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHarmonyosParamsStartCursor defines parameters for GetIndexHarmonyos.
type GetIndexHarmonyosParamsStartCursor string

// GetIndexHashicorpParams defines parameters for GetIndexHashicorp.
type GetIndexHashicorpParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHashicorpParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHashicorpParamsStartCursor defines parameters for GetIndexHashicorp.
type GetIndexHashicorpParamsStartCursor string

// GetIndexHaskellSadbParams defines parameters for GetIndexHaskellSadb.
type GetIndexHaskellSadbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHaskellSadbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHaskellSadbParamsStartCursor defines parameters for GetIndexHaskellSadb.
type GetIndexHaskellSadbParamsStartCursor string

// GetIndexHclParams defines parameters for GetIndexHcl.
type GetIndexHclParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHclParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHclParamsStartCursor defines parameters for GetIndexHcl.
type GetIndexHclParamsStartCursor string

// GetIndexHexParams defines parameters for GetIndexHex.
type GetIndexHexParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHexParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHexParamsStartCursor defines parameters for GetIndexHex.
type GetIndexHexParamsStartCursor string

// GetIndexHikvisionParams defines parameters for GetIndexHikvision.
type GetIndexHikvisionParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHikvisionParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHikvisionParamsStartCursor defines parameters for GetIndexHikvision.
type GetIndexHikvisionParamsStartCursor string

// GetIndexHillromParams defines parameters for GetIndexHillrom.
type GetIndexHillromParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHillromParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHillromParamsStartCursor defines parameters for GetIndexHillrom.
type GetIndexHillromParamsStartCursor string

// GetIndexHitachiParams defines parameters for GetIndexHitachi.
type GetIndexHitachiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHitachiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHitachiParamsStartCursor defines parameters for GetIndexHitachi.
type GetIndexHitachiParamsStartCursor string

// GetIndexHitachiEnergyParams defines parameters for GetIndexHitachiEnergy.
type GetIndexHitachiEnergyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHitachiEnergyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHitachiEnergyParamsStartCursor defines parameters for GetIndexHitachiEnergy.
type GetIndexHitachiEnergyParamsStartCursor string

// GetIndexHkcertParams defines parameters for GetIndexHkcert.
type GetIndexHkcertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHkcertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHkcertParamsStartCursor defines parameters for GetIndexHkcert.
type GetIndexHkcertParamsStartCursor string

// GetIndexHoneywellParams defines parameters for GetIndexHoneywell.
type GetIndexHoneywellParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHoneywellParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHoneywellParamsStartCursor defines parameters for GetIndexHoneywell.
type GetIndexHoneywellParamsStartCursor string

// GetIndexHpParams defines parameters for GetIndexHp.
type GetIndexHpParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHpParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHpParamsStartCursor defines parameters for GetIndexHp.
type GetIndexHpParamsStartCursor string

// GetIndexHuaweiEulerosParams defines parameters for GetIndexHuaweiEuleros.
type GetIndexHuaweiEulerosParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHuaweiEulerosParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHuaweiEulerosParamsStartCursor defines parameters for GetIndexHuaweiEuleros.
type GetIndexHuaweiEulerosParamsStartCursor string

// GetIndexHuaweiIpsParams defines parameters for GetIndexHuaweiIps.
type GetIndexHuaweiIpsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHuaweiIpsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHuaweiIpsParamsStartCursor defines parameters for GetIndexHuaweiIps.
type GetIndexHuaweiIpsParamsStartCursor string

// GetIndexHuaweiPsirtParams defines parameters for GetIndexHuaweiPsirt.
type GetIndexHuaweiPsirtParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexHuaweiPsirtParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexHuaweiPsirtParamsStartCursor defines parameters for GetIndexHuaweiPsirt.
type GetIndexHuaweiPsirtParamsStartCursor string

// GetIndexIavaParams defines parameters for GetIndexIava.
type GetIndexIavaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIavaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIavaParamsStartCursor defines parameters for GetIndexIava.
type GetIndexIavaParamsStartCursor string

// GetIndexIbmParams defines parameters for GetIndexIbm.
type GetIndexIbmParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIbmParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIbmParamsStartCursor defines parameters for GetIndexIbm.
type GetIndexIbmParamsStartCursor string

// GetIndexIdemiaParams defines parameters for GetIndexIdemia.
type GetIndexIdemiaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIdemiaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIdemiaParamsStartCursor defines parameters for GetIndexIdemia.
type GetIndexIdemiaParamsStartCursor string

// GetIndexIlAlertsParams defines parameters for GetIndexIlAlerts.
type GetIndexIlAlertsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIlAlertsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIlAlertsParamsStartCursor defines parameters for GetIndexIlAlerts.
type GetIndexIlAlertsParamsStartCursor string

// GetIndexIlVulnerabilitiesParams defines parameters for GetIndexIlVulnerabilities.
type GetIndexIlVulnerabilitiesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIlVulnerabilitiesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIlVulnerabilitiesParamsStartCursor defines parameters for GetIndexIlVulnerabilities.
type GetIndexIlVulnerabilitiesParamsStartCursor string

// GetIndexIncibeParams defines parameters for GetIndexIncibe.
type GetIndexIncibeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIncibeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIncibeParamsStartCursor defines parameters for GetIndexIncibe.
type GetIndexIncibeParamsStartCursor string

// GetIndexInitialAccessParams defines parameters for GetIndexInitialAccess.
type GetIndexInitialAccessParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexInitialAccessParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexInitialAccessParamsStartCursor defines parameters for GetIndexInitialAccess.
type GetIndexInitialAccessParamsStartCursor string

// GetIndexInitialAccessGitParams defines parameters for GetIndexInitialAccessGit.
type GetIndexInitialAccessGitParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexInitialAccessGitParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexInitialAccessGitParamsStartCursor defines parameters for GetIndexInitialAccessGit.
type GetIndexInitialAccessGitParamsStartCursor string

// GetIndexIntelParams defines parameters for GetIndexIntel.
type GetIndexIntelParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIntelParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIntelParamsStartCursor defines parameters for GetIndexIntel.
type GetIndexIntelParamsStartCursor string

// GetIndexIpintel10dParams defines parameters for GetIndexIpintel10d.
type GetIndexIpintel10dParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIpintel10dParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIpintel10dParamsStartCursor defines parameters for GetIndexIpintel10d.
type GetIndexIpintel10dParamsStartCursor string

// GetIndexIpintel30dParams defines parameters for GetIndexIpintel30d.
type GetIndexIpintel30dParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIpintel30dParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIpintel30dParamsStartCursor defines parameters for GetIndexIpintel30d.
type GetIndexIpintel30dParamsStartCursor string

// GetIndexIpintel3dParams defines parameters for GetIndexIpintel3d.
type GetIndexIpintel3dParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIpintel3dParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIpintel3dParamsStartCursor defines parameters for GetIndexIpintel3d.
type GetIndexIpintel3dParamsStartCursor string

// GetIndexIpintel90dParams defines parameters for GetIndexIpintel90d.
type GetIndexIpintel90dParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIpintel90dParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIpintel90dParamsStartCursor defines parameters for GetIndexIpintel90d.
type GetIndexIpintel90dParamsStartCursor string

// GetIndexIstioParams defines parameters for GetIndexIstio.
type GetIndexIstioParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIstioParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIstioParamsStartCursor defines parameters for GetIndexIstio.
type GetIndexIstioParamsStartCursor string

// GetIndexIvantiParams defines parameters for GetIndexIvanti.
type GetIndexIvantiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIvantiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIvantiParamsStartCursor defines parameters for GetIndexIvanti.
type GetIndexIvantiParamsStartCursor string

// GetIndexIvantiRssParams defines parameters for GetIndexIvantiRss.
type GetIndexIvantiRssParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexIvantiRssParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexIvantiRssParamsStartCursor defines parameters for GetIndexIvantiRss.
type GetIndexIvantiRssParamsStartCursor string

// GetIndexJenkinsParams defines parameters for GetIndexJenkins.
type GetIndexJenkinsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexJenkinsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexJenkinsParamsStartCursor defines parameters for GetIndexJenkins.
type GetIndexJenkinsParamsStartCursor string

// GetIndexJetbrainsParams defines parameters for GetIndexJetbrains.
type GetIndexJetbrainsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexJetbrainsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexJetbrainsParamsStartCursor defines parameters for GetIndexJetbrains.
type GetIndexJetbrainsParamsStartCursor string

// GetIndexJfrogParams defines parameters for GetIndexJfrog.
type GetIndexJfrogParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexJfrogParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexJfrogParamsStartCursor defines parameters for GetIndexJfrog.
type GetIndexJfrogParamsStartCursor string

// GetIndexJnjParams defines parameters for GetIndexJnj.
type GetIndexJnjParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexJnjParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexJnjParamsStartCursor defines parameters for GetIndexJnj.
type GetIndexJnjParamsStartCursor string

// GetIndexJvnParams defines parameters for GetIndexJvn.
type GetIndexJvnParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexJvnParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexJvnParamsStartCursor defines parameters for GetIndexJvn.
type GetIndexJvnParamsStartCursor string

// GetIndexJvndbParams defines parameters for GetIndexJvndb.
type GetIndexJvndbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexJvndbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexJvndbParamsStartCursor defines parameters for GetIndexJvndb.
type GetIndexJvndbParamsStartCursor string

// GetIndexKasperskyIcsCertParams defines parameters for GetIndexKasperskyIcsCert.
type GetIndexKasperskyIcsCertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexKasperskyIcsCertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexKasperskyIcsCertParamsStartCursor defines parameters for GetIndexKasperskyIcsCert.
type GetIndexKasperskyIcsCertParamsStartCursor string

// GetIndexKorelogicParams defines parameters for GetIndexKorelogic.
type GetIndexKorelogicParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexKorelogicParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexKorelogicParamsStartCursor defines parameters for GetIndexKorelogic.
type GetIndexKorelogicParamsStartCursor string

// GetIndexKrcertSecurityNoticesParams defines parameters for GetIndexKrcertSecurityNotices.
type GetIndexKrcertSecurityNoticesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexKrcertSecurityNoticesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexKrcertSecurityNoticesParamsStartCursor defines parameters for GetIndexKrcertSecurityNotices.
type GetIndexKrcertSecurityNoticesParamsStartCursor string

// GetIndexKrcertVulnerabilitiesParams defines parameters for GetIndexKrcertVulnerabilities.
type GetIndexKrcertVulnerabilitiesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexKrcertVulnerabilitiesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexKrcertVulnerabilitiesParamsStartCursor defines parameters for GetIndexKrcertVulnerabilities.
type GetIndexKrcertVulnerabilitiesParamsStartCursor string

// GetIndexKubernetesParams defines parameters for GetIndexKubernetes.
type GetIndexKubernetesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexKubernetesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexKubernetesParamsStartCursor defines parameters for GetIndexKubernetes.
type GetIndexKubernetesParamsStartCursor string

// GetIndexLenovoParams defines parameters for GetIndexLenovo.
type GetIndexLenovoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexLenovoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexLenovoParamsStartCursor defines parameters for GetIndexLenovo.
type GetIndexLenovoParamsStartCursor string

// GetIndexLexmarkParams defines parameters for GetIndexLexmark.
type GetIndexLexmarkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexLexmarkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexLexmarkParamsStartCursor defines parameters for GetIndexLexmark.
type GetIndexLexmarkParamsStartCursor string

// GetIndexLgParams defines parameters for GetIndexLg.
type GetIndexLgParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexLgParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexLgParamsStartCursor defines parameters for GetIndexLg.
type GetIndexLgParamsStartCursor string

// GetIndexLibreOfficeParams defines parameters for GetIndexLibreOffice.
type GetIndexLibreOfficeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexLibreOfficeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexLibreOfficeParamsStartCursor defines parameters for GetIndexLibreOffice.
type GetIndexLibreOfficeParamsStartCursor string

// GetIndexLinuxParams defines parameters for GetIndexLinux.
type GetIndexLinuxParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexLinuxParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexLinuxParamsStartCursor defines parameters for GetIndexLinux.
type GetIndexLinuxParamsStartCursor string

// GetIndexMFilesParams defines parameters for GetIndexMFiles.
type GetIndexMFilesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMFilesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMFilesParamsStartCursor defines parameters for GetIndexMFiles.
type GetIndexMFilesParamsStartCursor string

// GetIndexMacertParams defines parameters for GetIndexMacert.
type GetIndexMacertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMacertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMacertParamsStartCursor defines parameters for GetIndexMacert.
type GetIndexMacertParamsStartCursor string

// GetIndexManageengineParams defines parameters for GetIndexManageengine.
type GetIndexManageengineParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexManageengineParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexManageengineParamsStartCursor defines parameters for GetIndexManageengine.
type GetIndexManageengineParamsStartCursor string

// GetIndexMavenParams defines parameters for GetIndexMaven.
type GetIndexMavenParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMavenParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMavenParamsStartCursor defines parameters for GetIndexMaven.
type GetIndexMavenParamsStartCursor string

// GetIndexMbedTlsParams defines parameters for GetIndexMbedTls.
type GetIndexMbedTlsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMbedTlsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMbedTlsParamsStartCursor defines parameters for GetIndexMbedTls.
type GetIndexMbedTlsParamsStartCursor string

// GetIndexMediatekParams defines parameters for GetIndexMediatek.
type GetIndexMediatekParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMediatekParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMediatekParamsStartCursor defines parameters for GetIndexMediatek.
type GetIndexMediatekParamsStartCursor string

// GetIndexMedtronicParams defines parameters for GetIndexMedtronic.
type GetIndexMedtronicParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMedtronicParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMedtronicParamsStartCursor defines parameters for GetIndexMedtronic.
type GetIndexMedtronicParamsStartCursor string

// GetIndexMendixParams defines parameters for GetIndexMendix.
type GetIndexMendixParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMendixParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMendixParamsStartCursor defines parameters for GetIndexMendix.
type GetIndexMendixParamsStartCursor string

// GetIndexMetasploitParams defines parameters for GetIndexMetasploit.
type GetIndexMetasploitParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMetasploitParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMetasploitParamsStartCursor defines parameters for GetIndexMetasploit.
type GetIndexMetasploitParamsStartCursor string

// GetIndexMicrosoftCvrfParams defines parameters for GetIndexMicrosoftCvrf.
type GetIndexMicrosoftCvrfParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMicrosoftCvrfParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMicrosoftCvrfParamsStartCursor defines parameters for GetIndexMicrosoftCvrf.
type GetIndexMicrosoftCvrfParamsStartCursor string

// GetIndexMicrosoftKbParams defines parameters for GetIndexMicrosoftKb.
type GetIndexMicrosoftKbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMicrosoftKbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMicrosoftKbParamsStartCursor defines parameters for GetIndexMicrosoftKb.
type GetIndexMicrosoftKbParamsStartCursor string

// GetIndexMikrotikParams defines parameters for GetIndexMikrotik.
type GetIndexMikrotikParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMikrotikParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMikrotikParamsStartCursor defines parameters for GetIndexMikrotik.
type GetIndexMikrotikParamsStartCursor string

// GetIndexMindrayParams defines parameters for GetIndexMindray.
type GetIndexMindrayParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMindrayParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMindrayParamsStartCursor defines parameters for GetIndexMindray.
type GetIndexMindrayParamsStartCursor string

// GetIndexMispThreatActorsParams defines parameters for GetIndexMispThreatActors.
type GetIndexMispThreatActorsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMispThreatActorsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMispThreatActorsParamsStartCursor defines parameters for GetIndexMispThreatActors.
type GetIndexMispThreatActorsParamsStartCursor string

// GetIndexMitelParams defines parameters for GetIndexMitel.
type GetIndexMitelParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMitelParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMitelParamsStartCursor defines parameters for GetIndexMitel.
type GetIndexMitelParamsStartCursor string

// GetIndexMitreAttackCveParams defines parameters for GetIndexMitreAttackCve.
type GetIndexMitreAttackCveParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMitreAttackCveParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMitreAttackCveParamsStartCursor defines parameters for GetIndexMitreAttackCve.
type GetIndexMitreAttackCveParamsStartCursor string

// GetIndexMitreCvelistV5Params defines parameters for GetIndexMitreCvelistV5.
type GetIndexMitreCvelistV5Params struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMitreCvelistV5ParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMitreCvelistV5ParamsStartCursor defines parameters for GetIndexMitreCvelistV5.
type GetIndexMitreCvelistV5ParamsStartCursor string

// GetIndexMitsubishiElectricParams defines parameters for GetIndexMitsubishiElectric.
type GetIndexMitsubishiElectricParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMitsubishiElectricParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMitsubishiElectricParamsStartCursor defines parameters for GetIndexMitsubishiElectric.
type GetIndexMitsubishiElectricParamsStartCursor string

// GetIndexMongodbParams defines parameters for GetIndexMongodb.
type GetIndexMongodbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMongodbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMongodbParamsStartCursor defines parameters for GetIndexMongodb.
type GetIndexMongodbParamsStartCursor string

// GetIndexMoxaParams defines parameters for GetIndexMoxa.
type GetIndexMoxaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMoxaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMoxaParamsStartCursor defines parameters for GetIndexMoxa.
type GetIndexMoxaParamsStartCursor string

// GetIndexMozillaParams defines parameters for GetIndexMozilla.
type GetIndexMozillaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexMozillaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexMozillaParamsStartCursor defines parameters for GetIndexMozilla.
type GetIndexMozillaParamsStartCursor string

// GetIndexNaverParams defines parameters for GetIndexNaver.
type GetIndexNaverParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNaverParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNaverParamsStartCursor defines parameters for GetIndexNaver.
type GetIndexNaverParamsStartCursor string

// GetIndexNcscParams defines parameters for GetIndexNcsc.
type GetIndexNcscParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNcscParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNcscParamsStartCursor defines parameters for GetIndexNcsc.
type GetIndexNcscParamsStartCursor string

// GetIndexNcscCvesParams defines parameters for GetIndexNcscCves.
type GetIndexNcscCvesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNcscCvesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNcscCvesParamsStartCursor defines parameters for GetIndexNcscCves.
type GetIndexNcscCvesParamsStartCursor string

// GetIndexNecParams defines parameters for GetIndexNec.
type GetIndexNecParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNecParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNecParamsStartCursor defines parameters for GetIndexNec.
type GetIndexNecParamsStartCursor string

// GetIndexNetappParams defines parameters for GetIndexNetapp.
type GetIndexNetappParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNetappParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNetappParamsStartCursor defines parameters for GetIndexNetapp.
type GetIndexNetappParamsStartCursor string

// GetIndexNetgateParams defines parameters for GetIndexNetgate.
type GetIndexNetgateParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNetgateParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNetgateParamsStartCursor defines parameters for GetIndexNetgate.
type GetIndexNetgateParamsStartCursor string

// GetIndexNetgearParams defines parameters for GetIndexNetgear.
type GetIndexNetgearParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNetgearParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNetgearParamsStartCursor defines parameters for GetIndexNetgear.
type GetIndexNetgearParamsStartCursor string

// GetIndexNetskopeParams defines parameters for GetIndexNetskope.
type GetIndexNetskopeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNetskopeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNetskopeParamsStartCursor defines parameters for GetIndexNetskope.
type GetIndexNetskopeParamsStartCursor string

// GetIndexNginxParams defines parameters for GetIndexNginx.
type GetIndexNginxParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNginxParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNginxParamsStartCursor defines parameters for GetIndexNginx.
type GetIndexNginxParamsStartCursor string

// GetIndexNhsParams defines parameters for GetIndexNhs.
type GetIndexNhsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNhsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNhsParamsStartCursor defines parameters for GetIndexNhs.
type GetIndexNhsParamsStartCursor string

// GetIndexNiParams defines parameters for GetIndexNi.
type GetIndexNiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNiParamsStartCursor defines parameters for GetIndexNi.
type GetIndexNiParamsStartCursor string

// GetIndexNistNvdParams defines parameters for GetIndexNistNvd.
type GetIndexNistNvdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNistNvdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNistNvdParamsStartCursor defines parameters for GetIndexNistNvd.
type GetIndexNistNvdParamsStartCursor string

// GetIndexNistNvd2Params defines parameters for GetIndexNistNvd2.
type GetIndexNistNvd2Params struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNistNvd2ParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNistNvd2ParamsStartCursor defines parameters for GetIndexNistNvd2.
type GetIndexNistNvd2ParamsStartCursor string

// GetIndexNistNvd2CpematchParams defines parameters for GetIndexNistNvd2Cpematch.
type GetIndexNistNvd2CpematchParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNistNvd2CpematchParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNistNvd2CpematchParamsStartCursor defines parameters for GetIndexNistNvd2Cpematch.
type GetIndexNistNvd2CpematchParamsStartCursor string

// GetIndexNodeSecurityParams defines parameters for GetIndexNodeSecurity.
type GetIndexNodeSecurityParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNodeSecurityParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNodeSecurityParamsStartCursor defines parameters for GetIndexNodeSecurity.
type GetIndexNodeSecurityParamsStartCursor string

// GetIndexNodejsParams defines parameters for GetIndexNodejs.
type GetIndexNodejsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNodejsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNodejsParamsStartCursor defines parameters for GetIndexNodejs.
type GetIndexNodejsParamsStartCursor string

// GetIndexNokiaParams defines parameters for GetIndexNokia.
type GetIndexNokiaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNokiaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNokiaParamsStartCursor defines parameters for GetIndexNokia.
type GetIndexNokiaParamsStartCursor string

// GetIndexNozomiParams defines parameters for GetIndexNozomi.
type GetIndexNozomiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNozomiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNozomiParamsStartCursor defines parameters for GetIndexNozomi.
type GetIndexNozomiParamsStartCursor string

// GetIndexNpmParams defines parameters for GetIndexNpm.
type GetIndexNpmParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNpmParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNpmParamsStartCursor defines parameters for GetIndexNpm.
type GetIndexNpmParamsStartCursor string

// GetIndexNtpParams defines parameters for GetIndexNtp.
type GetIndexNtpParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNtpParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNtpParamsStartCursor defines parameters for GetIndexNtp.
type GetIndexNtpParamsStartCursor string

// GetIndexNugetParams defines parameters for GetIndexNuget.
type GetIndexNugetParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNugetParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNugetParamsStartCursor defines parameters for GetIndexNuget.
type GetIndexNugetParamsStartCursor string

// GetIndexNvidiaParams defines parameters for GetIndexNvidia.
type GetIndexNvidiaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNvidiaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNvidiaParamsStartCursor defines parameters for GetIndexNvidia.
type GetIndexNvidiaParamsStartCursor string

// GetIndexNzAdvisoriesParams defines parameters for GetIndexNzAdvisories.
type GetIndexNzAdvisoriesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexNzAdvisoriesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexNzAdvisoriesParamsStartCursor defines parameters for GetIndexNzAdvisories.
type GetIndexNzAdvisoriesParamsStartCursor string

// GetIndexOctopusDeployParams defines parameters for GetIndexOctopusDeploy.
type GetIndexOctopusDeployParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOctopusDeployParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOctopusDeployParamsStartCursor defines parameters for GetIndexOctopusDeploy.
type GetIndexOctopusDeployParamsStartCursor string

// GetIndexOktaParams defines parameters for GetIndexOkta.
type GetIndexOktaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOktaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOktaParamsStartCursor defines parameters for GetIndexOkta.
type GetIndexOktaParamsStartCursor string

// GetIndexOmronParams defines parameters for GetIndexOmron.
type GetIndexOmronParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOmronParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOmronParamsStartCursor defines parameters for GetIndexOmron.
type GetIndexOmronParamsStartCursor string

// GetIndexOneEParams defines parameters for GetIndexOneE.
type GetIndexOneEParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOneEParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOneEParamsStartCursor defines parameters for GetIndexOneE.
type GetIndexOneEParamsStartCursor string

// GetIndexOpamParams defines parameters for GetIndexOpam.
type GetIndexOpamParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpamParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpamParamsStartCursor defines parameters for GetIndexOpam.
type GetIndexOpamParamsStartCursor string

// GetIndexOpenCvdbParams defines parameters for GetIndexOpenCvdb.
type GetIndexOpenCvdbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpenCvdbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpenCvdbParamsStartCursor defines parameters for GetIndexOpenCvdb.
type GetIndexOpenCvdbParamsStartCursor string

// GetIndexOpenbsdParams defines parameters for GetIndexOpenbsd.
type GetIndexOpenbsdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpenbsdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpenbsdParamsStartCursor defines parameters for GetIndexOpenbsd.
type GetIndexOpenbsdParamsStartCursor string

// GetIndexOpensshParams defines parameters for GetIndexOpenssh.
type GetIndexOpensshParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpensshParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpensshParamsStartCursor defines parameters for GetIndexOpenssh.
type GetIndexOpensshParamsStartCursor string

// GetIndexOpensslSecadvParams defines parameters for GetIndexOpensslSecadv.
type GetIndexOpensslSecadvParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpensslSecadvParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpensslSecadvParamsStartCursor defines parameters for GetIndexOpensslSecadv.
type GetIndexOpensslSecadvParamsStartCursor string

// GetIndexOpenstackParams defines parameters for GetIndexOpenstack.
type GetIndexOpenstackParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpenstackParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpenstackParamsStartCursor defines parameters for GetIndexOpenstack.
type GetIndexOpenstackParamsStartCursor string

// GetIndexOpenwrtParams defines parameters for GetIndexOpenwrt.
type GetIndexOpenwrtParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOpenwrtParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOpenwrtParamsStartCursor defines parameters for GetIndexOpenwrt.
type GetIndexOpenwrtParamsStartCursor string

// GetIndexOracleParams defines parameters for GetIndexOracle.
type GetIndexOracleParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOracleParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOracleParamsStartCursor defines parameters for GetIndexOracle.
type GetIndexOracleParamsStartCursor string

// GetIndexOracleCpuParams defines parameters for GetIndexOracleCpu.
type GetIndexOracleCpuParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOracleCpuParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOracleCpuParamsStartCursor defines parameters for GetIndexOracleCpu.
type GetIndexOracleCpuParamsStartCursor string

// GetIndexOracleCpuCsafParams defines parameters for GetIndexOracleCpuCsaf.
type GetIndexOracleCpuCsafParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOracleCpuCsafParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOracleCpuCsafParamsStartCursor defines parameters for GetIndexOracleCpuCsaf.
type GetIndexOracleCpuCsafParamsStartCursor string

// GetIndexOsvParams defines parameters for GetIndexOsv.
type GetIndexOsvParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOsvParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOsvParamsStartCursor defines parameters for GetIndexOsv.
type GetIndexOsvParamsStartCursor string

// GetIndexOtrsParams defines parameters for GetIndexOtrs.
type GetIndexOtrsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOtrsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOtrsParamsStartCursor defines parameters for GetIndexOtrs.
type GetIndexOtrsParamsStartCursor string

// GetIndexOwncloudParams defines parameters for GetIndexOwncloud.
type GetIndexOwncloudParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexOwncloudParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexOwncloudParamsStartCursor defines parameters for GetIndexOwncloud.
type GetIndexOwncloudParamsStartCursor string

// GetIndexPalantirParams defines parameters for GetIndexPalantir.
type GetIndexPalantirParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPalantirParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPalantirParamsStartCursor defines parameters for GetIndexPalantir.
type GetIndexPalantirParamsStartCursor string

// GetIndexPaloAltoParams defines parameters for GetIndexPaloAlto.
type GetIndexPaloAltoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPaloAltoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPaloAltoParamsStartCursor defines parameters for GetIndexPaloAlto.
type GetIndexPaloAltoParamsStartCursor string

// GetIndexPanasonicParams defines parameters for GetIndexPanasonic.
type GetIndexPanasonicParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPanasonicParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPanasonicParamsStartCursor defines parameters for GetIndexPanasonic.
type GetIndexPanasonicParamsStartCursor string

// GetIndexPapercutParams defines parameters for GetIndexPapercut.
type GetIndexPapercutParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPapercutParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPapercutParamsStartCursor defines parameters for GetIndexPapercut.
type GetIndexPapercutParamsStartCursor string

// GetIndexPegaParams defines parameters for GetIndexPega.
type GetIndexPegaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPegaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPegaParamsStartCursor defines parameters for GetIndexPega.
type GetIndexPegaParamsStartCursor string

// GetIndexPhilipsParams defines parameters for GetIndexPhilips.
type GetIndexPhilipsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPhilipsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPhilipsParamsStartCursor defines parameters for GetIndexPhilips.
type GetIndexPhilipsParamsStartCursor string

// GetIndexPhoenixContactParams defines parameters for GetIndexPhoenixContact.
type GetIndexPhoenixContactParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPhoenixContactParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPhoenixContactParamsStartCursor defines parameters for GetIndexPhoenixContact.
type GetIndexPhoenixContactParamsStartCursor string

// GetIndexPhpMyAdminParams defines parameters for GetIndexPhpMyAdmin.
type GetIndexPhpMyAdminParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPhpMyAdminParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPhpMyAdminParamsStartCursor defines parameters for GetIndexPhpMyAdmin.
type GetIndexPhpMyAdminParamsStartCursor string

// GetIndexPostgressqlParams defines parameters for GetIndexPostgressql.
type GetIndexPostgressqlParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPostgressqlParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPostgressqlParamsStartCursor defines parameters for GetIndexPostgressql.
type GetIndexPostgressqlParamsStartCursor string

// GetIndexPowerdnsParams defines parameters for GetIndexPowerdns.
type GetIndexPowerdnsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPowerdnsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPowerdnsParamsStartCursor defines parameters for GetIndexPowerdns.
type GetIndexPowerdnsParamsStartCursor string

// GetIndexProgressParams defines parameters for GetIndexProgress.
type GetIndexProgressParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexProgressParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexProgressParamsStartCursor defines parameters for GetIndexProgress.
type GetIndexProgressParamsStartCursor string

// GetIndexProofpointParams defines parameters for GetIndexProofpoint.
type GetIndexProofpointParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexProofpointParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexProofpointParamsStartCursor defines parameters for GetIndexProofpoint.
type GetIndexProofpointParamsStartCursor string

// GetIndexPtcParams defines parameters for GetIndexPtc.
type GetIndexPtcParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPtcParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPtcParamsStartCursor defines parameters for GetIndexPtc.
type GetIndexPtcParamsStartCursor string

// GetIndexPubParams defines parameters for GetIndexPub.
type GetIndexPubParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPubParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPubParamsStartCursor defines parameters for GetIndexPub.
type GetIndexPubParamsStartCursor string

// GetIndexPureStorageParams defines parameters for GetIndexPureStorage.
type GetIndexPureStorageParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPureStorageParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPureStorageParamsStartCursor defines parameters for GetIndexPureStorage.
type GetIndexPureStorageParamsStartCursor string

// GetIndexPypaAdvisoriesParams defines parameters for GetIndexPypaAdvisories.
type GetIndexPypaAdvisoriesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPypaAdvisoriesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPypaAdvisoriesParamsStartCursor defines parameters for GetIndexPypaAdvisories.
type GetIndexPypaAdvisoriesParamsStartCursor string

// GetIndexPypiParams defines parameters for GetIndexPypi.
type GetIndexPypiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexPypiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexPypiParamsStartCursor defines parameters for GetIndexPypi.
type GetIndexPypiParamsStartCursor string

// GetIndexQnapParams defines parameters for GetIndexQnap.
type GetIndexQnapParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexQnapParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexQnapParamsStartCursor defines parameters for GetIndexQnap.
type GetIndexQnapParamsStartCursor string

// GetIndexQualcommParams defines parameters for GetIndexQualcomm.
type GetIndexQualcommParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexQualcommParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexQualcommParamsStartCursor defines parameters for GetIndexQualcomm.
type GetIndexQualcommParamsStartCursor string

// GetIndexQualysParams defines parameters for GetIndexQualys.
type GetIndexQualysParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexQualysParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexQualysParamsStartCursor defines parameters for GetIndexQualys.
type GetIndexQualysParamsStartCursor string

// GetIndexQubesQsbParams defines parameters for GetIndexQubesQsb.
type GetIndexQubesQsbParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexQubesQsbParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexQubesQsbParamsStartCursor defines parameters for GetIndexQubesQsb.
type GetIndexQubesQsbParamsStartCursor string

// GetIndexRansomwareParams defines parameters for GetIndexRansomware.
type GetIndexRansomwareParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRansomwareParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRansomwareParamsStartCursor defines parameters for GetIndexRansomware.
type GetIndexRansomwareParamsStartCursor string

// GetIndexRedhatParams defines parameters for GetIndexRedhat.
type GetIndexRedhatParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRedhatParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRedhatParamsStartCursor defines parameters for GetIndexRedhat.
type GetIndexRedhatParamsStartCursor string

// GetIndexRenesasParams defines parameters for GetIndexRenesas.
type GetIndexRenesasParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRenesasParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRenesasParamsStartCursor defines parameters for GetIndexRenesas.
type GetIndexRenesasParamsStartCursor string

// GetIndexReviveParams defines parameters for GetIndexRevive.
type GetIndexReviveParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexReviveParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexReviveParamsStartCursor defines parameters for GetIndexRevive.
type GetIndexReviveParamsStartCursor string

// GetIndexRockwellParams defines parameters for GetIndexRockwell.
type GetIndexRockwellParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRockwellParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRockwellParamsStartCursor defines parameters for GetIndexRockwell.
type GetIndexRockwellParamsStartCursor string

// GetIndexRockyParams defines parameters for GetIndexRocky.
type GetIndexRockyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRockyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRockyParamsStartCursor defines parameters for GetIndexRocky.
type GetIndexRockyParamsStartCursor string

// GetIndexRockyErrataParams defines parameters for GetIndexRockyErrata.
type GetIndexRockyErrataParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRockyErrataParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRockyErrataParamsStartCursor defines parameters for GetIndexRockyErrata.
type GetIndexRockyErrataParamsStartCursor string

// GetIndexRuckusParams defines parameters for GetIndexRuckus.
type GetIndexRuckusParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRuckusParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRuckusParamsStartCursor defines parameters for GetIndexRuckus.
type GetIndexRuckusParamsStartCursor string

// GetIndexRustsecAdvisoriesParams defines parameters for GetIndexRustsecAdvisories.
type GetIndexRustsecAdvisoriesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexRustsecAdvisoriesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexRustsecAdvisoriesParamsStartCursor defines parameters for GetIndexRustsecAdvisories.
type GetIndexRustsecAdvisoriesParamsStartCursor string

// GetIndexSacertParams defines parameters for GetIndexSacert.
type GetIndexSacertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSacertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSacertParamsStartCursor defines parameters for GetIndexSacert.
type GetIndexSacertParamsStartCursor string

// GetIndexSaintParams defines parameters for GetIndexSaint.
type GetIndexSaintParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSaintParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSaintParamsStartCursor defines parameters for GetIndexSaint.
type GetIndexSaintParamsStartCursor string

// GetIndexSalesforceParams defines parameters for GetIndexSalesforce.
type GetIndexSalesforceParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSalesforceParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSalesforceParamsStartCursor defines parameters for GetIndexSalesforce.
type GetIndexSalesforceParamsStartCursor string

// GetIndexSambaParams defines parameters for GetIndexSamba.
type GetIndexSambaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSambaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSambaParamsStartCursor defines parameters for GetIndexSamba.
type GetIndexSambaParamsStartCursor string

// GetIndexSapParams defines parameters for GetIndexSap.
type GetIndexSapParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSapParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSapParamsStartCursor defines parameters for GetIndexSap.
type GetIndexSapParamsStartCursor string

// GetIndexSchneiderElectricParams defines parameters for GetIndexSchneiderElectric.
type GetIndexSchneiderElectricParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSchneiderElectricParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSchneiderElectricParamsStartCursor defines parameters for GetIndexSchneiderElectric.
type GetIndexSchneiderElectricParamsStartCursor string

// GetIndexSecConsultParams defines parameters for GetIndexSecConsult.
type GetIndexSecConsultParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSecConsultParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSecConsultParamsStartCursor defines parameters for GetIndexSecConsult.
type GetIndexSecConsultParamsStartCursor string

// GetIndexSecuritylabParams defines parameters for GetIndexSecuritylab.
type GetIndexSecuritylabParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSecuritylabParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSecuritylabParamsStartCursor defines parameters for GetIndexSecuritylab.
type GetIndexSecuritylabParamsStartCursor string

// GetIndexSeebugParams defines parameters for GetIndexSeebug.
type GetIndexSeebugParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSeebugParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSeebugParamsStartCursor defines parameters for GetIndexSeebug.
type GetIndexSeebugParamsStartCursor string

// GetIndexSelParams defines parameters for GetIndexSel.
type GetIndexSelParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSelParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSelParamsStartCursor defines parameters for GetIndexSel.
type GetIndexSelParamsStartCursor string

// GetIndexSentineloneParams defines parameters for GetIndexSentinelone.
type GetIndexSentineloneParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSentineloneParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSentineloneParamsStartCursor defines parameters for GetIndexSentinelone.
type GetIndexSentineloneParamsStartCursor string

// GetIndexServicenowParams defines parameters for GetIndexServicenow.
type GetIndexServicenowParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexServicenowParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexServicenowParamsStartCursor defines parameters for GetIndexServicenow.
type GetIndexServicenowParamsStartCursor string

// GetIndexShadowserverExploitedParams defines parameters for GetIndexShadowserverExploited.
type GetIndexShadowserverExploitedParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexShadowserverExploitedParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexShadowserverExploitedParamsStartCursor defines parameters for GetIndexShadowserverExploited.
type GetIndexShadowserverExploitedParamsStartCursor string

// GetIndexShielderParams defines parameters for GetIndexShielder.
type GetIndexShielderParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexShielderParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexShielderParamsStartCursor defines parameters for GetIndexShielder.
type GetIndexShielderParamsStartCursor string

// GetIndexSickParams defines parameters for GetIndexSick.
type GetIndexSickParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSickParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSickParamsStartCursor defines parameters for GetIndexSick.
type GetIndexSickParamsStartCursor string

// GetIndexSiemensParams defines parameters for GetIndexSiemens.
type GetIndexSiemensParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSiemensParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSiemensParamsStartCursor defines parameters for GetIndexSiemens.
type GetIndexSiemensParamsStartCursor string

// GetIndexSierraWirelessParams defines parameters for GetIndexSierraWireless.
type GetIndexSierraWirelessParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSierraWirelessParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSierraWirelessParamsStartCursor defines parameters for GetIndexSierraWireless.
type GetIndexSierraWirelessParamsStartCursor string

// GetIndexSigmaRulesParams defines parameters for GetIndexSigmaRules.
type GetIndexSigmaRulesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSigmaRulesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSigmaRulesParamsStartCursor defines parameters for GetIndexSigmaRules.
type GetIndexSigmaRulesParamsStartCursor string

// GetIndexSingcertParams defines parameters for GetIndexSingcert.
type GetIndexSingcertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSingcertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSingcertParamsStartCursor defines parameters for GetIndexSingcert.
type GetIndexSingcertParamsStartCursor string

// GetIndexSlackwareParams defines parameters for GetIndexSlackware.
type GetIndexSlackwareParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSlackwareParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSlackwareParamsStartCursor defines parameters for GetIndexSlackware.
type GetIndexSlackwareParamsStartCursor string

// GetIndexSolarwindsParams defines parameters for GetIndexSolarwinds.
type GetIndexSolarwindsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSolarwindsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSolarwindsParamsStartCursor defines parameters for GetIndexSolarwinds.
type GetIndexSolarwindsParamsStartCursor string

// GetIndexSolrParams defines parameters for GetIndexSolr.
type GetIndexSolrParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSolrParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSolrParamsStartCursor defines parameters for GetIndexSolr.
type GetIndexSolrParamsStartCursor string

// GetIndexSonicwallParams defines parameters for GetIndexSonicwall.
type GetIndexSonicwallParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSonicwallParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSonicwallParamsStartCursor defines parameters for GetIndexSonicwall.
type GetIndexSonicwallParamsStartCursor string

// GetIndexSpacelabsHealthcareParams defines parameters for GetIndexSpacelabsHealthcare.
type GetIndexSpacelabsHealthcareParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSpacelabsHealthcareParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSpacelabsHealthcareParamsStartCursor defines parameters for GetIndexSpacelabsHealthcare.
type GetIndexSpacelabsHealthcareParamsStartCursor string

// GetIndexSplunkParams defines parameters for GetIndexSplunk.
type GetIndexSplunkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSplunkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSplunkParamsStartCursor defines parameters for GetIndexSplunk.
type GetIndexSplunkParamsStartCursor string

// GetIndexSpringParams defines parameters for GetIndexSpring.
type GetIndexSpringParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSpringParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSpringParamsStartCursor defines parameters for GetIndexSpring.
type GetIndexSpringParamsStartCursor string

// GetIndexSsdParams defines parameters for GetIndexSsd.
type GetIndexSsdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSsdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSsdParamsStartCursor defines parameters for GetIndexSsd.
type GetIndexSsdParamsStartCursor string

// GetIndexStormshieldParams defines parameters for GetIndexStormshield.
type GetIndexStormshieldParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexStormshieldParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexStormshieldParamsStartCursor defines parameters for GetIndexStormshield.
type GetIndexStormshieldParamsStartCursor string

// GetIndexStrykerParams defines parameters for GetIndexStryker.
type GetIndexStrykerParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexStrykerParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexStrykerParamsStartCursor defines parameters for GetIndexStryker.
type GetIndexStrykerParamsStartCursor string

// GetIndexSudoParams defines parameters for GetIndexSudo.
type GetIndexSudoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSudoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSudoParamsStartCursor defines parameters for GetIndexSudo.
type GetIndexSudoParamsStartCursor string

// GetIndexSuseParams defines parameters for GetIndexSuse.
type GetIndexSuseParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSuseParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSuseParamsStartCursor defines parameters for GetIndexSuse.
type GetIndexSuseParamsStartCursor string

// GetIndexSwiftParams defines parameters for GetIndexSwift.
type GetIndexSwiftParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSwiftParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSwiftParamsStartCursor defines parameters for GetIndexSwift.
type GetIndexSwiftParamsStartCursor string

// GetIndexSwisslogHealthcareParams defines parameters for GetIndexSwisslogHealthcare.
type GetIndexSwisslogHealthcareParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSwisslogHealthcareParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSwisslogHealthcareParamsStartCursor defines parameters for GetIndexSwisslogHealthcare.
type GetIndexSwisslogHealthcareParamsStartCursor string

// GetIndexSymfonyParams defines parameters for GetIndexSymfony.
type GetIndexSymfonyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSymfonyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSymfonyParamsStartCursor defines parameters for GetIndexSymfony.
type GetIndexSymfonyParamsStartCursor string

// GetIndexSynacktivParams defines parameters for GetIndexSynacktiv.
type GetIndexSynacktivParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSynacktivParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSynacktivParamsStartCursor defines parameters for GetIndexSynacktiv.
type GetIndexSynacktivParamsStartCursor string

// GetIndexSyncrosoftParams defines parameters for GetIndexSyncrosoft.
type GetIndexSyncrosoftParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSyncrosoftParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSyncrosoftParamsStartCursor defines parameters for GetIndexSyncrosoft.
type GetIndexSyncrosoftParamsStartCursor string

// GetIndexSynologyParams defines parameters for GetIndexSynology.
type GetIndexSynologyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexSynologyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexSynologyParamsStartCursor defines parameters for GetIndexSynology.
type GetIndexSynologyParamsStartCursor string

// GetIndexTeamviewerParams defines parameters for GetIndexTeamviewer.
type GetIndexTeamviewerParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTeamviewerParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTeamviewerParamsStartCursor defines parameters for GetIndexTeamviewer.
type GetIndexTeamviewerParamsStartCursor string

// GetIndexTenableResearchAdvisoriesParams defines parameters for GetIndexTenableResearchAdvisories.
type GetIndexTenableResearchAdvisoriesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTenableResearchAdvisoriesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTenableResearchAdvisoriesParamsStartCursor defines parameters for GetIndexTenableResearchAdvisories.
type GetIndexTenableResearchAdvisoriesParamsStartCursor string

// GetIndexTencentParams defines parameters for GetIndexTencent.
type GetIndexTencentParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTencentParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTencentParamsStartCursor defines parameters for GetIndexTencent.
type GetIndexTencentParamsStartCursor string

// GetIndexThalesParams defines parameters for GetIndexThales.
type GetIndexThalesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexThalesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexThalesParamsStartCursor defines parameters for GetIndexThales.
type GetIndexThalesParamsStartCursor string

// GetIndexThemissinglinkParams defines parameters for GetIndexThemissinglink.
type GetIndexThemissinglinkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexThemissinglinkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexThemissinglinkParamsStartCursor defines parameters for GetIndexThemissinglink.
type GetIndexThemissinglinkParamsStartCursor string

// GetIndexThreatActorsParams defines parameters for GetIndexThreatActors.
type GetIndexThreatActorsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexThreatActorsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexThreatActorsParamsStartCursor defines parameters for GetIndexThreatActors.
type GetIndexThreatActorsParamsStartCursor string

// GetIndexTiParams defines parameters for GetIndexTi.
type GetIndexTiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTiParamsStartCursor defines parameters for GetIndexTi.
type GetIndexTiParamsStartCursor string

// GetIndexTibcoParams defines parameters for GetIndexTibco.
type GetIndexTibcoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTibcoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTibcoParamsStartCursor defines parameters for GetIndexTibco.
type GetIndexTibcoParamsStartCursor string

// GetIndexTpLinkParams defines parameters for GetIndexTpLink.
type GetIndexTpLinkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTpLinkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTpLinkParamsStartCursor defines parameters for GetIndexTpLink.
type GetIndexTpLinkParamsStartCursor string

// GetIndexTraneTechnologyParams defines parameters for GetIndexTraneTechnology.
type GetIndexTraneTechnologyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTraneTechnologyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTraneTechnologyParamsStartCursor defines parameters for GetIndexTraneTechnology.
type GetIndexTraneTechnologyParamsStartCursor string

// GetIndexTrendmicroParams defines parameters for GetIndexTrendmicro.
type GetIndexTrendmicroParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTrendmicroParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTrendmicroParamsStartCursor defines parameters for GetIndexTrendmicro.
type GetIndexTrendmicroParamsStartCursor string

// GetIndexTrustwaveParams defines parameters for GetIndexTrustwave.
type GetIndexTrustwaveParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTrustwaveParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTrustwaveParamsStartCursor defines parameters for GetIndexTrustwave.
type GetIndexTrustwaveParamsStartCursor string

// GetIndexTwcertParams defines parameters for GetIndexTwcert.
type GetIndexTwcertParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexTwcertParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexTwcertParamsStartCursor defines parameters for GetIndexTwcert.
type GetIndexTwcertParamsStartCursor string

// GetIndexUbiquitiParams defines parameters for GetIndexUbiquiti.
type GetIndexUbiquitiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexUbiquitiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexUbiquitiParamsStartCursor defines parameters for GetIndexUbiquiti.
type GetIndexUbiquitiParamsStartCursor string

// GetIndexUbuntuParams defines parameters for GetIndexUbuntu.
type GetIndexUbuntuParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexUbuntuParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexUbuntuParamsStartCursor defines parameters for GetIndexUbuntu.
type GetIndexUbuntuParamsStartCursor string

// GetIndexUnifyParams defines parameters for GetIndexUnify.
type GetIndexUnifyParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexUnifyParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexUnifyParamsStartCursor defines parameters for GetIndexUnify.
type GetIndexUnifyParamsStartCursor string

// GetIndexUnisocParams defines parameters for GetIndexUnisoc.
type GetIndexUnisocParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexUnisocParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexUnisocParamsStartCursor defines parameters for GetIndexUnisoc.
type GetIndexUnisocParamsStartCursor string

// GetIndexUsdParams defines parameters for GetIndexUsd.
type GetIndexUsdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexUsdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexUsdParamsStartCursor defines parameters for GetIndexUsd.
type GetIndexUsdParamsStartCursor string

// GetIndexUsomParams defines parameters for GetIndexUsom.
type GetIndexUsomParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexUsomParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexUsomParamsStartCursor defines parameters for GetIndexUsom.
type GetIndexUsomParamsStartCursor string

// GetIndexVandykeParams defines parameters for GetIndexVandyke.
type GetIndexVandykeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVandykeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVandykeParamsStartCursor defines parameters for GetIndexVandyke.
type GetIndexVandykeParamsStartCursor string

// GetIndexVapidlabsParams defines parameters for GetIndexVapidlabs.
type GetIndexVapidlabsParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVapidlabsParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVapidlabsParamsStartCursor defines parameters for GetIndexVapidlabs.
type GetIndexVapidlabsParamsStartCursor string

// GetIndexVcCpeDictionaryParams defines parameters for GetIndexVcCpeDictionary.
type GetIndexVcCpeDictionaryParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVcCpeDictionaryParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVcCpeDictionaryParamsStartCursor defines parameters for GetIndexVcCpeDictionary.
type GetIndexVcCpeDictionaryParamsStartCursor string

// GetIndexVdeParams defines parameters for GetIndexVde.
type GetIndexVdeParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVdeParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVdeParamsStartCursor defines parameters for GetIndexVde.
type GetIndexVdeParamsStartCursor string

// GetIndexVeeamParams defines parameters for GetIndexVeeam.
type GetIndexVeeamParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVeeamParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVeeamParamsStartCursor defines parameters for GetIndexVeeam.
type GetIndexVeeamParamsStartCursor string

// GetIndexVeritasParams defines parameters for GetIndexVeritas.
type GetIndexVeritasParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVeritasParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVeritasParamsStartCursor defines parameters for GetIndexVeritas.
type GetIndexVeritasParamsStartCursor string

// GetIndexVmwareParams defines parameters for GetIndexVmware.
type GetIndexVmwareParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVmwareParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVmwareParamsStartCursor defines parameters for GetIndexVmware.
type GetIndexVmwareParamsStartCursor string

// GetIndexVoidsecParams defines parameters for GetIndexVoidsec.
type GetIndexVoidsecParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVoidsecParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVoidsecParamsStartCursor defines parameters for GetIndexVoidsec.
type GetIndexVoidsecParamsStartCursor string

// GetIndexVulncheckParams defines parameters for GetIndexVulncheck.
type GetIndexVulncheckParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulncheckParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulncheckParamsStartCursor defines parameters for GetIndexVulncheck.
type GetIndexVulncheckParamsStartCursor string

// GetIndexVulncheckConfigParams defines parameters for GetIndexVulncheckConfig.
type GetIndexVulncheckConfigParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulncheckConfigParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulncheckConfigParamsStartCursor defines parameters for GetIndexVulncheckConfig.
type GetIndexVulncheckConfigParamsStartCursor string

// GetIndexVulncheckCvelistV5Params defines parameters for GetIndexVulncheckCvelistV5.
type GetIndexVulncheckCvelistV5Params struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulncheckCvelistV5ParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulncheckCvelistV5ParamsStartCursor defines parameters for GetIndexVulncheckCvelistV5.
type GetIndexVulncheckCvelistV5ParamsStartCursor string

// GetIndexVulncheckKevParams defines parameters for GetIndexVulncheckKev.
type GetIndexVulncheckKevParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulncheckKevParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulncheckKevParamsStartCursor defines parameters for GetIndexVulncheckKev.
type GetIndexVulncheckKevParamsStartCursor string

// GetIndexVulncheckNvdParams defines parameters for GetIndexVulncheckNvd.
type GetIndexVulncheckNvdParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulncheckNvdParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulncheckNvdParamsStartCursor defines parameters for GetIndexVulncheckNvd.
type GetIndexVulncheckNvdParamsStartCursor string

// GetIndexVulncheckNvd2Params defines parameters for GetIndexVulncheckNvd2.
type GetIndexVulncheckNvd2Params struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulncheckNvd2ParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulncheckNvd2ParamsStartCursor defines parameters for GetIndexVulncheckNvd2.
type GetIndexVulncheckNvd2ParamsStartCursor string

// GetIndexVulnerabilityAliasesParams defines parameters for GetIndexVulnerabilityAliases.
type GetIndexVulnerabilityAliasesParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulnerabilityAliasesParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulnerabilityAliasesParamsStartCursor defines parameters for GetIndexVulnerabilityAliases.
type GetIndexVulnerabilityAliasesParamsStartCursor string

// GetIndexVulnrichmentParams defines parameters for GetIndexVulnrichment.
type GetIndexVulnrichmentParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVulnrichmentParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVulnrichmentParamsStartCursor defines parameters for GetIndexVulnrichment.
type GetIndexVulnrichmentParamsStartCursor string

// GetIndexVyaireParams defines parameters for GetIndexVyaire.
type GetIndexVyaireParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexVyaireParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexVyaireParamsStartCursor defines parameters for GetIndexVyaire.
type GetIndexVyaireParamsStartCursor string

// GetIndexWatchguardParams defines parameters for GetIndexWatchguard.
type GetIndexWatchguardParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWatchguardParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWatchguardParamsStartCursor defines parameters for GetIndexWatchguard.
type GetIndexWatchguardParamsStartCursor string

// GetIndexWhatsappParams defines parameters for GetIndexWhatsapp.
type GetIndexWhatsappParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWhatsappParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWhatsappParamsStartCursor defines parameters for GetIndexWhatsapp.
type GetIndexWhatsappParamsStartCursor string

// GetIndexWibuParams defines parameters for GetIndexWibu.
type GetIndexWibuParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWibuParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWibuParamsStartCursor defines parameters for GetIndexWibu.
type GetIndexWibuParamsStartCursor string

// GetIndexWiresharkParams defines parameters for GetIndexWireshark.
type GetIndexWiresharkParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWiresharkParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWiresharkParamsStartCursor defines parameters for GetIndexWireshark.
type GetIndexWiresharkParamsStartCursor string

// GetIndexWithSecureParams defines parameters for GetIndexWithSecure.
type GetIndexWithSecureParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWithSecureParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWithSecureParamsStartCursor defines parameters for GetIndexWithSecure.
type GetIndexWithSecureParamsStartCursor string

// GetIndexWolfiParams defines parameters for GetIndexWolfi.
type GetIndexWolfiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWolfiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWolfiParamsStartCursor defines parameters for GetIndexWolfi.
type GetIndexWolfiParamsStartCursor string

// GetIndexWolfsslParams defines parameters for GetIndexWolfssl.
type GetIndexWolfsslParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWolfsslParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWolfsslParamsStartCursor defines parameters for GetIndexWolfssl.
type GetIndexWolfsslParamsStartCursor string

// GetIndexWordfenceParams defines parameters for GetIndexWordfence.
type GetIndexWordfenceParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexWordfenceParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexWordfenceParamsStartCursor defines parameters for GetIndexWordfence.
type GetIndexWordfenceParamsStartCursor string

// GetIndexXenParams defines parameters for GetIndexXen.
type GetIndexXenParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexXenParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexXenParamsStartCursor defines parameters for GetIndexXen.
type GetIndexXenParamsStartCursor string

// GetIndexXeroxParams defines parameters for GetIndexXerox.
type GetIndexXeroxParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexXeroxParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexXeroxParamsStartCursor defines parameters for GetIndexXerox.
type GetIndexXeroxParamsStartCursor string

// GetIndexXiaomiParams defines parameters for GetIndexXiaomi.
type GetIndexXiaomiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexXiaomiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexXiaomiParamsStartCursor defines parameters for GetIndexXiaomi.
type GetIndexXiaomiParamsStartCursor string

// GetIndexXylemParams defines parameters for GetIndexXylem.
type GetIndexXylemParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexXylemParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexXylemParamsStartCursor defines parameters for GetIndexXylem.
type GetIndexXylemParamsStartCursor string

// GetIndexYokogawaParams defines parameters for GetIndexYokogawa.
type GetIndexYokogawaParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexYokogawaParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexYokogawaParamsStartCursor defines parameters for GetIndexYokogawa.
type GetIndexYokogawaParamsStartCursor string

// GetIndexYubicoParams defines parameters for GetIndexYubico.
type GetIndexYubicoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexYubicoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexYubicoParamsStartCursor defines parameters for GetIndexYubico.
type GetIndexYubicoParamsStartCursor string

// GetIndexZdiParams defines parameters for GetIndexZdi.
type GetIndexZdiParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZdiParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZdiParamsStartCursor defines parameters for GetIndexZdi.
type GetIndexZdiParamsStartCursor string

// GetIndexZebraParams defines parameters for GetIndexZebra.
type GetIndexZebraParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZebraParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZebraParamsStartCursor defines parameters for GetIndexZebra.
type GetIndexZebraParamsStartCursor string

// GetIndexZeroscienceParams defines parameters for GetIndexZeroscience.
type GetIndexZeroscienceParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZeroscienceParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZeroscienceParamsStartCursor defines parameters for GetIndexZeroscience.
type GetIndexZeroscienceParamsStartCursor string

// GetIndexZimbraParams defines parameters for GetIndexZimbra.
type GetIndexZimbraParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZimbraParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZimbraParamsStartCursor defines parameters for GetIndexZimbra.
type GetIndexZimbraParamsStartCursor string

// GetIndexZoomParams defines parameters for GetIndexZoom.
type GetIndexZoomParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZoomParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZoomParamsStartCursor defines parameters for GetIndexZoom.
type GetIndexZoomParamsStartCursor string

// GetIndexZscalerParams defines parameters for GetIndexZscaler.
type GetIndexZscalerParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZscalerParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZscalerParamsStartCursor defines parameters for GetIndexZscaler.
type GetIndexZscalerParamsStartCursor string

// GetIndexZusoParams defines parameters for GetIndexZuso.
type GetIndexZusoParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZusoParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZusoParamsStartCursor defines parameters for GetIndexZuso.
type GetIndexZusoParamsStartCursor string

// GetIndexZyxelParams defines parameters for GetIndexZyxel.
type GetIndexZyxelParams struct {
	// Limit set the page number of the response
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page limit the number of findings in the response
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Cursor continue server-side paging using a cursor id
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// StartCursor request server-side paging
	StartCursor *GetIndexZyxelParamsStartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// GetIndexZyxelParamsStartCursor defines parameters for GetIndexZyxel.
type GetIndexZyxelParamsStartCursor string

// GetPdnsVulncheckC2Params defines parameters for GetPdnsVulncheckC2.
type GetPdnsVulncheckC2Params struct {
	// Format Format of the Hostnames in the response (Defaults To: text)
	Format *GetPdnsVulncheckC2ParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetPdnsVulncheckC2ParamsFormat defines parameters for GetPdnsVulncheckC2.
type GetPdnsVulncheckC2ParamsFormat string

// GetPurlParams defines parameters for GetPurl.
type GetPurlParams struct {
	// Purl URL string used to identify and locate a software package
	Purl string `form:"purl" json:"purl"`
}

// GetRulesInitialAccessTypeParamsType defines parameters for GetRulesInitialAccessType.
type GetRulesInitialAccessTypeParamsType string

// GetTagsVulncheckC2Params defines parameters for GetTagsVulncheckC2.
type GetTagsVulncheckC2Params struct {
	// Format Format of the IP Addresses in the response (Defaults To: text)
	Format *GetTagsVulncheckC2ParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetTagsVulncheckC2ParamsFormat defines parameters for GetTagsVulncheckC2.
type GetTagsVulncheckC2ParamsFormat string

// GetIndexA10JSONRequestBody defines body for GetIndexA10 for application/json ContentType.
type GetIndexA10JSONRequestBody = ParamsIdxReqParams

// GetIndexAbbJSONRequestBody defines body for GetIndexAbb for application/json ContentType.
type GetIndexAbbJSONRequestBody = ParamsIdxReqParams

// GetIndexAbbottJSONRequestBody defines body for GetIndexAbbott for application/json ContentType.
type GetIndexAbbottJSONRequestBody = ParamsIdxReqParams

// GetIndexAbsoluteJSONRequestBody defines body for GetIndexAbsolute for application/json ContentType.
type GetIndexAbsoluteJSONRequestBody = ParamsIdxReqParams

// GetIndexAcronisJSONRequestBody defines body for GetIndexAcronis for application/json ContentType.
type GetIndexAcronisJSONRequestBody = ParamsIdxReqParams

// GetIndexAdobeJSONRequestBody defines body for GetIndexAdobe for application/json ContentType.
type GetIndexAdobeJSONRequestBody = ParamsIdxReqParams

// GetIndexAdvisoriesJSONRequestBody defines body for GetIndexAdvisories for application/json ContentType.
type GetIndexAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexAlephResearchJSONRequestBody defines body for GetIndexAlephResearch for application/json ContentType.
type GetIndexAlephResearchJSONRequestBody = ParamsIdxReqParams

// GetIndexAlmaJSONRequestBody defines body for GetIndexAlma for application/json ContentType.
type GetIndexAlmaJSONRequestBody = ParamsIdxReqParams

// GetIndexAlpineJSONRequestBody defines body for GetIndexAlpine for application/json ContentType.
type GetIndexAlpineJSONRequestBody = ParamsIdxReqParams

// GetIndexAmazonJSONRequestBody defines body for GetIndexAmazon for application/json ContentType.
type GetIndexAmazonJSONRequestBody = ParamsIdxReqParams

// GetIndexAmdJSONRequestBody defines body for GetIndexAmd for application/json ContentType.
type GetIndexAmdJSONRequestBody = ParamsIdxReqParams

// GetIndexAmiJSONRequestBody defines body for GetIndexAmi for application/json ContentType.
type GetIndexAmiJSONRequestBody = ParamsIdxReqParams

// GetIndexAnchoreNvdOverrideJSONRequestBody defines body for GetIndexAnchoreNvdOverride for application/json ContentType.
type GetIndexAnchoreNvdOverrideJSONRequestBody = ParamsIdxReqParams

// GetIndexAndroidJSONRequestBody defines body for GetIndexAndroid for application/json ContentType.
type GetIndexAndroidJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheActivemqJSONRequestBody defines body for GetIndexApacheActivemq for application/json ContentType.
type GetIndexApacheActivemqJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheArchivaJSONRequestBody defines body for GetIndexApacheArchiva for application/json ContentType.
type GetIndexApacheArchivaJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheArrowJSONRequestBody defines body for GetIndexApacheArrow for application/json ContentType.
type GetIndexApacheArrowJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheCamelJSONRequestBody defines body for GetIndexApacheCamel for application/json ContentType.
type GetIndexApacheCamelJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheCommonsJSONRequestBody defines body for GetIndexApacheCommons for application/json ContentType.
type GetIndexApacheCommonsJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheCouchdbJSONRequestBody defines body for GetIndexApacheCouchdb for application/json ContentType.
type GetIndexApacheCouchdbJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheFlinkJSONRequestBody defines body for GetIndexApacheFlink for application/json ContentType.
type GetIndexApacheFlinkJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheGuacamoleJSONRequestBody defines body for GetIndexApacheGuacamole for application/json ContentType.
type GetIndexApacheGuacamoleJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheHadoopJSONRequestBody defines body for GetIndexApacheHadoop for application/json ContentType.
type GetIndexApacheHadoopJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheHttpJSONRequestBody defines body for GetIndexApacheHttp for application/json ContentType.
type GetIndexApacheHttpJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheJspwikiJSONRequestBody defines body for GetIndexApacheJspwiki for application/json ContentType.
type GetIndexApacheJspwikiJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheKafkaJSONRequestBody defines body for GetIndexApacheKafka for application/json ContentType.
type GetIndexApacheKafkaJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheLoggingservicesJSONRequestBody defines body for GetIndexApacheLoggingservices for application/json ContentType.
type GetIndexApacheLoggingservicesJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheNifiJSONRequestBody defines body for GetIndexApacheNifi for application/json ContentType.
type GetIndexApacheNifiJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheOfbizJSONRequestBody defines body for GetIndexApacheOfbiz for application/json ContentType.
type GetIndexApacheOfbizJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheOpenmeetingsJSONRequestBody defines body for GetIndexApacheOpenmeetings for application/json ContentType.
type GetIndexApacheOpenmeetingsJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheOpenofficeJSONRequestBody defines body for GetIndexApacheOpenoffice for application/json ContentType.
type GetIndexApacheOpenofficeJSONRequestBody = ParamsIdxReqParams

// GetIndexApachePulsarJSONRequestBody defines body for GetIndexApachePulsar for application/json ContentType.
type GetIndexApachePulsarJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheShiroJSONRequestBody defines body for GetIndexApacheShiro for application/json ContentType.
type GetIndexApacheShiroJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheSparkJSONRequestBody defines body for GetIndexApacheSpark for application/json ContentType.
type GetIndexApacheSparkJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheStrutsJSONRequestBody defines body for GetIndexApacheStruts for application/json ContentType.
type GetIndexApacheStrutsJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheSubversionJSONRequestBody defines body for GetIndexApacheSubversion for application/json ContentType.
type GetIndexApacheSubversionJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheSupersetJSONRequestBody defines body for GetIndexApacheSuperset for application/json ContentType.
type GetIndexApacheSupersetJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheTomcatJSONRequestBody defines body for GetIndexApacheTomcat for application/json ContentType.
type GetIndexApacheTomcatJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheZookeeperJSONRequestBody defines body for GetIndexApacheZookeeper for application/json ContentType.
type GetIndexApacheZookeeperJSONRequestBody = ParamsIdxReqParams

// GetIndexAppcheckJSONRequestBody defines body for GetIndexAppcheck for application/json ContentType.
type GetIndexAppcheckJSONRequestBody = ParamsIdxReqParams

// GetIndexAppgateJSONRequestBody defines body for GetIndexAppgate for application/json ContentType.
type GetIndexAppgateJSONRequestBody = ParamsIdxReqParams

// GetIndexAppleJSONRequestBody defines body for GetIndexApple for application/json ContentType.
type GetIndexAppleJSONRequestBody = ParamsIdxReqParams

// GetIndexArchJSONRequestBody defines body for GetIndexArch for application/json ContentType.
type GetIndexArchJSONRequestBody = ParamsIdxReqParams

// GetIndexAristaJSONRequestBody defines body for GetIndexArista for application/json ContentType.
type GetIndexAristaJSONRequestBody = ParamsIdxReqParams

// GetIndexArubaJSONRequestBody defines body for GetIndexAruba for application/json ContentType.
type GetIndexArubaJSONRequestBody = ParamsIdxReqParams

// GetIndexAsrgJSONRequestBody defines body for GetIndexAsrg for application/json ContentType.
type GetIndexAsrgJSONRequestBody = ParamsIdxReqParams

// GetIndexAssetnoteJSONRequestBody defines body for GetIndexAssetnote for application/json ContentType.
type GetIndexAssetnoteJSONRequestBody = ParamsIdxReqParams

// GetIndexAsteriskJSONRequestBody defines body for GetIndexAsterisk for application/json ContentType.
type GetIndexAsteriskJSONRequestBody = ParamsIdxReqParams

// GetIndexAsusJSONRequestBody defines body for GetIndexAsus for application/json ContentType.
type GetIndexAsusJSONRequestBody = ParamsIdxReqParams

// GetIndexAtlassianJSONRequestBody defines body for GetIndexAtlassian for application/json ContentType.
type GetIndexAtlassianJSONRequestBody = ParamsIdxReqParams

// GetIndexAtlassianVulnsJSONRequestBody defines body for GetIndexAtlassianVulns for application/json ContentType.
type GetIndexAtlassianVulnsJSONRequestBody = ParamsIdxReqParams

// GetIndexAtredisJSONRequestBody defines body for GetIndexAtredis for application/json ContentType.
type GetIndexAtredisJSONRequestBody = ParamsIdxReqParams

// GetIndexAuscertJSONRequestBody defines body for GetIndexAuscert for application/json ContentType.
type GetIndexAuscertJSONRequestBody = ParamsIdxReqParams

// GetIndexAutodeskJSONRequestBody defines body for GetIndexAutodesk for application/json ContentType.
type GetIndexAutodeskJSONRequestBody = ParamsIdxReqParams

// GetIndexAvayaJSONRequestBody defines body for GetIndexAvaya for application/json ContentType.
type GetIndexAvayaJSONRequestBody = ParamsIdxReqParams

// GetIndexAvevaJSONRequestBody defines body for GetIndexAveva for application/json ContentType.
type GetIndexAvevaJSONRequestBody = ParamsIdxReqParams

// GetIndexAvigilonJSONRequestBody defines body for GetIndexAvigilon for application/json ContentType.
type GetIndexAvigilonJSONRequestBody = ParamsIdxReqParams

// GetIndexAwsJSONRequestBody defines body for GetIndexAws for application/json ContentType.
type GetIndexAwsJSONRequestBody = ParamsIdxReqParams

// GetIndexAxisJSONRequestBody defines body for GetIndexAxis for application/json ContentType.
type GetIndexAxisJSONRequestBody = ParamsIdxReqParams

// GetIndexAzulJSONRequestBody defines body for GetIndexAzul for application/json ContentType.
type GetIndexAzulJSONRequestBody = ParamsIdxReqParams

// GetIndexBandrJSONRequestBody defines body for GetIndexBandr for application/json ContentType.
type GetIndexBandrJSONRequestBody = ParamsIdxReqParams

// GetIndexBaxterJSONRequestBody defines body for GetIndexBaxter for application/json ContentType.
type GetIndexBaxterJSONRequestBody = ParamsIdxReqParams

// GetIndexBbraunJSONRequestBody defines body for GetIndexBbraun for application/json ContentType.
type GetIndexBbraunJSONRequestBody = ParamsIdxReqParams

// GetIndexBdJSONRequestBody defines body for GetIndexBd for application/json ContentType.
type GetIndexBdJSONRequestBody = ParamsIdxReqParams

// GetIndexBduJSONRequestBody defines body for GetIndexBdu for application/json ContentType.
type GetIndexBduJSONRequestBody = ParamsIdxReqParams

// GetIndexBeckhoffJSONRequestBody defines body for GetIndexBeckhoff for application/json ContentType.
type GetIndexBeckhoffJSONRequestBody = ParamsIdxReqParams

// GetIndexBeldenJSONRequestBody defines body for GetIndexBelden for application/json ContentType.
type GetIndexBeldenJSONRequestBody = ParamsIdxReqParams

// GetIndexBeyondTrustJSONRequestBody defines body for GetIndexBeyondTrust for application/json ContentType.
type GetIndexBeyondTrustJSONRequestBody = ParamsIdxReqParams

// GetIndexBinarlyJSONRequestBody defines body for GetIndexBinarly for application/json ContentType.
type GetIndexBinarlyJSONRequestBody = ParamsIdxReqParams

// GetIndexBitdefenderJSONRequestBody defines body for GetIndexBitdefender for application/json ContentType.
type GetIndexBitdefenderJSONRequestBody = ParamsIdxReqParams

// GetIndexBlackberryJSONRequestBody defines body for GetIndexBlackberry for application/json ContentType.
type GetIndexBlackberryJSONRequestBody = ParamsIdxReqParams

// GetIndexBlsJSONRequestBody defines body for GetIndexBls for application/json ContentType.
type GetIndexBlsJSONRequestBody = ParamsIdxReqParams

// GetIndexBoschJSONRequestBody defines body for GetIndexBosch for application/json ContentType.
type GetIndexBoschJSONRequestBody = ParamsIdxReqParams

// GetIndexBostonScientificJSONRequestBody defines body for GetIndexBostonScientific for application/json ContentType.
type GetIndexBostonScientificJSONRequestBody = ParamsIdxReqParams

// GetIndexBotnetsJSONRequestBody defines body for GetIndexBotnets for application/json ContentType.
type GetIndexBotnetsJSONRequestBody = ParamsIdxReqParams

// GetIndexCaCyberCentreJSONRequestBody defines body for GetIndexCaCyberCentre for application/json ContentType.
type GetIndexCaCyberCentreJSONRequestBody = ParamsIdxReqParams

// GetIndexCanvasJSONRequestBody defines body for GetIndexCanvas for application/json ContentType.
type GetIndexCanvasJSONRequestBody = ParamsIdxReqParams

// GetIndexCarestreamJSONRequestBody defines body for GetIndexCarestream for application/json ContentType.
type GetIndexCarestreamJSONRequestBody = ParamsIdxReqParams

// GetIndexCargoJSONRequestBody defines body for GetIndexCargo for application/json ContentType.
type GetIndexCargoJSONRequestBody = ParamsIdxReqParams

// GetIndexCarrierJSONRequestBody defines body for GetIndexCarrier for application/json ContentType.
type GetIndexCarrierJSONRequestBody = ParamsIdxReqParams

// GetIndexCblMarinerJSONRequestBody defines body for GetIndexCblMariner for application/json ContentType.
type GetIndexCblMarinerJSONRequestBody = ParamsIdxReqParams

// GetIndexCentosJSONRequestBody defines body for GetIndexCentos for application/json ContentType.
type GetIndexCentosJSONRequestBody = ParamsIdxReqParams

// GetIndexCertBeJSONRequestBody defines body for GetIndexCertBe for application/json ContentType.
type GetIndexCertBeJSONRequestBody = ParamsIdxReqParams

// GetIndexCertInJSONRequestBody defines body for GetIndexCertIn for application/json ContentType.
type GetIndexCertInJSONRequestBody = ParamsIdxReqParams

// GetIndexCertIrSecurityAlertsJSONRequestBody defines body for GetIndexCertIrSecurityAlerts for application/json ContentType.
type GetIndexCertIrSecurityAlertsJSONRequestBody = ParamsIdxReqParams

// GetIndexCertSeJSONRequestBody defines body for GetIndexCertSe for application/json ContentType.
type GetIndexCertSeJSONRequestBody = ParamsIdxReqParams

// GetIndexCertUaJSONRequestBody defines body for GetIndexCertUa for application/json ContentType.
type GetIndexCertUaJSONRequestBody = ParamsIdxReqParams

// GetIndexCerteuJSONRequestBody defines body for GetIndexCerteu for application/json ContentType.
type GetIndexCerteuJSONRequestBody = ParamsIdxReqParams

// GetIndexCertfrJSONRequestBody defines body for GetIndexCertfr for application/json ContentType.
type GetIndexCertfrJSONRequestBody = ParamsIdxReqParams

// GetIndexChainguardJSONRequestBody defines body for GetIndexChainguard for application/json ContentType.
type GetIndexChainguardJSONRequestBody = ParamsIdxReqParams

// GetIndexCheckpointJSONRequestBody defines body for GetIndexCheckpoint for application/json ContentType.
type GetIndexCheckpointJSONRequestBody = ParamsIdxReqParams

// GetIndexChromeJSONRequestBody defines body for GetIndexChrome for application/json ContentType.
type GetIndexChromeJSONRequestBody = ParamsIdxReqParams

// GetIndexCisaAlertsJSONRequestBody defines body for GetIndexCisaAlerts for application/json ContentType.
type GetIndexCisaAlertsJSONRequestBody = ParamsIdxReqParams

// GetIndexCisaKevJSONRequestBody defines body for GetIndexCisaKev for application/json ContentType.
type GetIndexCisaKevJSONRequestBody = ParamsIdxReqParams

// GetIndexCiscoJSONRequestBody defines body for GetIndexCisco for application/json ContentType.
type GetIndexCiscoJSONRequestBody = ParamsIdxReqParams

// GetIndexCiscoTalosJSONRequestBody defines body for GetIndexCiscoTalos for application/json ContentType.
type GetIndexCiscoTalosJSONRequestBody = ParamsIdxReqParams

// GetIndexCitrixJSONRequestBody defines body for GetIndexCitrix for application/json ContentType.
type GetIndexCitrixJSONRequestBody = ParamsIdxReqParams

// GetIndexClarotyJSONRequestBody defines body for GetIndexClaroty for application/json ContentType.
type GetIndexClarotyJSONRequestBody = ParamsIdxReqParams

// GetIndexCloudbeesJSONRequestBody defines body for GetIndexCloudbees for application/json ContentType.
type GetIndexCloudbeesJSONRequestBody = ParamsIdxReqParams

// GetIndexCloudvulndbJSONRequestBody defines body for GetIndexCloudvulndb for application/json ContentType.
type GetIndexCloudvulndbJSONRequestBody = ParamsIdxReqParams

// GetIndexCnnvdJSONRequestBody defines body for GetIndexCnnvd for application/json ContentType.
type GetIndexCnnvdJSONRequestBody = ParamsIdxReqParams

// GetIndexCnvdBulletinsJSONRequestBody defines body for GetIndexCnvdBulletins for application/json ContentType.
type GetIndexCnvdBulletinsJSONRequestBody = ParamsIdxReqParams

// GetIndexCnvdFlawsJSONRequestBody defines body for GetIndexCnvdFlaws for application/json ContentType.
type GetIndexCnvdFlawsJSONRequestBody = ParamsIdxReqParams

// GetIndexCocoapodsJSONRequestBody defines body for GetIndexCocoapods for application/json ContentType.
type GetIndexCocoapodsJSONRequestBody = ParamsIdxReqParams

// GetIndexCodesysJSONRequestBody defines body for GetIndexCodesys for application/json ContentType.
type GetIndexCodesysJSONRequestBody = ParamsIdxReqParams

// GetIndexCompassSecurityJSONRequestBody defines body for GetIndexCompassSecurity for application/json ContentType.
type GetIndexCompassSecurityJSONRequestBody = ParamsIdxReqParams

// GetIndexComposerJSONRequestBody defines body for GetIndexComposer for application/json ContentType.
type GetIndexComposerJSONRequestBody = ParamsIdxReqParams

// GetIndexConanJSONRequestBody defines body for GetIndexConan for application/json ContentType.
type GetIndexConanJSONRequestBody = ParamsIdxReqParams

// GetIndexCrestronJSONRequestBody defines body for GetIndexCrestron for application/json ContentType.
type GetIndexCrestronJSONRequestBody = ParamsIdxReqParams

// GetIndexCurlJSONRequestBody defines body for GetIndexCurl for application/json ContentType.
type GetIndexCurlJSONRequestBody = ParamsIdxReqParams

// GetIndexCweJSONRequestBody defines body for GetIndexCwe for application/json ContentType.
type GetIndexCweJSONRequestBody = ParamsIdxReqParams

// GetIndexDahuaJSONRequestBody defines body for GetIndexDahua for application/json ContentType.
type GetIndexDahuaJSONRequestBody = ParamsIdxReqParams

// GetIndexDassaultJSONRequestBody defines body for GetIndexDassault for application/json ContentType.
type GetIndexDassaultJSONRequestBody = ParamsIdxReqParams

// GetIndexDebianJSONRequestBody defines body for GetIndexDebian for application/json ContentType.
type GetIndexDebianJSONRequestBody = ParamsIdxReqParams

// GetIndexDebianDsaJSONRequestBody defines body for GetIndexDebianDsa for application/json ContentType.
type GetIndexDebianDsaJSONRequestBody = ParamsIdxReqParams

// GetIndexDellJSONRequestBody defines body for GetIndexDell for application/json ContentType.
type GetIndexDellJSONRequestBody = ParamsIdxReqParams

// GetIndexDeltaJSONRequestBody defines body for GetIndexDelta for application/json ContentType.
type GetIndexDeltaJSONRequestBody = ParamsIdxReqParams

// GetIndexDjangoJSONRequestBody defines body for GetIndexDjango for application/json ContentType.
type GetIndexDjangoJSONRequestBody = ParamsIdxReqParams

// GetIndexDnnJSONRequestBody defines body for GetIndexDnn for application/json ContentType.
type GetIndexDnnJSONRequestBody = ParamsIdxReqParams

// GetIndexDotcmsJSONRequestBody defines body for GetIndexDotcms for application/json ContentType.
type GetIndexDotcmsJSONRequestBody = ParamsIdxReqParams

// GetIndexDragosJSONRequestBody defines body for GetIndexDragos for application/json ContentType.
type GetIndexDragosJSONRequestBody = ParamsIdxReqParams

// GetIndexDraytekJSONRequestBody defines body for GetIndexDraytek for application/json ContentType.
type GetIndexDraytekJSONRequestBody = ParamsIdxReqParams

// GetIndexEatonJSONRequestBody defines body for GetIndexEaton for application/json ContentType.
type GetIndexEatonJSONRequestBody = ParamsIdxReqParams

// GetIndexElasticJSONRequestBody defines body for GetIndexElastic for application/json ContentType.
type GetIndexElasticJSONRequestBody = ParamsIdxReqParams

// GetIndexElspecJSONRequestBody defines body for GetIndexElspec for application/json ContentType.
type GetIndexElspecJSONRequestBody = ParamsIdxReqParams

// GetIndexEmergingThreatsSnortJSONRequestBody defines body for GetIndexEmergingThreatsSnort for application/json ContentType.
type GetIndexEmergingThreatsSnortJSONRequestBody = ParamsIdxReqParams

// GetIndexEmersonJSONRequestBody defines body for GetIndexEmerson for application/json ContentType.
type GetIndexEmersonJSONRequestBody = ParamsIdxReqParams

// GetIndexEolJSONRequestBody defines body for GetIndexEol for application/json ContentType.
type GetIndexEolJSONRequestBody = ParamsIdxReqParams

// GetIndexEpssJSONRequestBody defines body for GetIndexEpss for application/json ContentType.
type GetIndexEpssJSONRequestBody = ParamsIdxReqParams

// GetIndexExodusIntelJSONRequestBody defines body for GetIndexExodusIntel for application/json ContentType.
type GetIndexExodusIntelJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitChainsJSONRequestBody defines body for GetIndexExploitChains for application/json ContentType.
type GetIndexExploitChainsJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitdbJSONRequestBody defines body for GetIndexExploitdb for application/json ContentType.
type GetIndexExploitdbJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitsJSONRequestBody defines body for GetIndexExploits for application/json ContentType.
type GetIndexExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitsChangelogJSONRequestBody defines body for GetIndexExploitsChangelog for application/json ContentType.
type GetIndexExploitsChangelogJSONRequestBody = ParamsIdxReqParams

// GetIndexFSecureJSONRequestBody defines body for GetIndexFSecure for application/json ContentType.
type GetIndexFSecureJSONRequestBody = ParamsIdxReqParams

// GetIndexFanucJSONRequestBody defines body for GetIndexFanuc for application/json ContentType.
type GetIndexFanucJSONRequestBody = ParamsIdxReqParams

// GetIndexFastlyJSONRequestBody defines body for GetIndexFastly for application/json ContentType.
type GetIndexFastlyJSONRequestBody = ParamsIdxReqParams

// GetIndexFedoraJSONRequestBody defines body for GetIndexFedora for application/json ContentType.
type GetIndexFedoraJSONRequestBody = ParamsIdxReqParams

// GetIndexFilecloudJSONRequestBody defines body for GetIndexFilecloud for application/json ContentType.
type GetIndexFilecloudJSONRequestBody = ParamsIdxReqParams

// GetIndexFlattSecurityJSONRequestBody defines body for GetIndexFlattSecurity for application/json ContentType.
type GetIndexFlattSecurityJSONRequestBody = ParamsIdxReqParams

// GetIndexForgerockJSONRequestBody defines body for GetIndexForgerock for application/json ContentType.
type GetIndexForgerockJSONRequestBody = ParamsIdxReqParams

// GetIndexFortinetJSONRequestBody defines body for GetIndexFortinet for application/json ContentType.
type GetIndexFortinetJSONRequestBody = ParamsIdxReqParams

// GetIndexFortinetIpsJSONRequestBody defines body for GetIndexFortinetIps for application/json ContentType.
type GetIndexFortinetIpsJSONRequestBody = ParamsIdxReqParams

// GetIndexFoxitJSONRequestBody defines body for GetIndexFoxit for application/json ContentType.
type GetIndexFoxitJSONRequestBody = ParamsIdxReqParams

// GetIndexFreebsdJSONRequestBody defines body for GetIndexFreebsd for application/json ContentType.
type GetIndexFreebsdJSONRequestBody = ParamsIdxReqParams

// GetIndexGallagherJSONRequestBody defines body for GetIndexGallagher for application/json ContentType.
type GetIndexGallagherJSONRequestBody = ParamsIdxReqParams

// GetIndexGcpJSONRequestBody defines body for GetIndexGcp for application/json ContentType.
type GetIndexGcpJSONRequestBody = ParamsIdxReqParams

// GetIndexGeGasJSONRequestBody defines body for GetIndexGeGas for application/json ContentType.
type GetIndexGeGasJSONRequestBody = ParamsIdxReqParams

// GetIndexGeHealthcareJSONRequestBody defines body for GetIndexGeHealthcare for application/json ContentType.
type GetIndexGeHealthcareJSONRequestBody = ParamsIdxReqParams

// GetIndexGemJSONRequestBody defines body for GetIndexGem for application/json ContentType.
type GetIndexGemJSONRequestBody = ParamsIdxReqParams

// GetIndexGenetecJSONRequestBody defines body for GetIndexGenetec for application/json ContentType.
type GetIndexGenetecJSONRequestBody = ParamsIdxReqParams

// GetIndexGigabyteJSONRequestBody defines body for GetIndexGigabyte for application/json ContentType.
type GetIndexGigabyteJSONRequestBody = ParamsIdxReqParams

// GetIndexGiteeExploitsJSONRequestBody defines body for GetIndexGiteeExploits for application/json ContentType.
type GetIndexGiteeExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexGithubExploitsJSONRequestBody defines body for GetIndexGithubExploits for application/json ContentType.
type GetIndexGithubExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexGithubSecurityAdvisoriesJSONRequestBody defines body for GetIndexGithubSecurityAdvisories for application/json ContentType.
type GetIndexGithubSecurityAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexGitlabAdvisoriesCommunityJSONRequestBody defines body for GetIndexGitlabAdvisoriesCommunity for application/json ContentType.
type GetIndexGitlabAdvisoriesCommunityJSONRequestBody = ParamsIdxReqParams

// GetIndexGitlabExploitsJSONRequestBody defines body for GetIndexGitlabExploits for application/json ContentType.
type GetIndexGitlabExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexGnutlsJSONRequestBody defines body for GetIndexGnutls for application/json ContentType.
type GetIndexGnutlsJSONRequestBody = ParamsIdxReqParams

// GetIndexGolangJSONRequestBody defines body for GetIndexGolang for application/json ContentType.
type GetIndexGolangJSONRequestBody = ParamsIdxReqParams

// GetIndexGoogle0dayItwJSONRequestBody defines body for GetIndexGoogle0dayItw for application/json ContentType.
type GetIndexGoogle0dayItwJSONRequestBody = ParamsIdxReqParams

// GetIndexGoogleContainerOptimizedOsJSONRequestBody defines body for GetIndexGoogleContainerOptimizedOs for application/json ContentType.
type GetIndexGoogleContainerOptimizedOsJSONRequestBody = ParamsIdxReqParams

// GetIndexGrafanaJSONRequestBody defines body for GetIndexGrafana for application/json ContentType.
type GetIndexGrafanaJSONRequestBody = ParamsIdxReqParams

// GetIndexGreynoiseMetadataJSONRequestBody defines body for GetIndexGreynoiseMetadata for application/json ContentType.
type GetIndexGreynoiseMetadataJSONRequestBody = ParamsIdxReqParams

// GetIndexHackageJSONRequestBody defines body for GetIndexHackage for application/json ContentType.
type GetIndexHackageJSONRequestBody = ParamsIdxReqParams

// GetIndexHarmonyosJSONRequestBody defines body for GetIndexHarmonyos for application/json ContentType.
type GetIndexHarmonyosJSONRequestBody = ParamsIdxReqParams

// GetIndexHashicorpJSONRequestBody defines body for GetIndexHashicorp for application/json ContentType.
type GetIndexHashicorpJSONRequestBody = ParamsIdxReqParams

// GetIndexHaskellSadbJSONRequestBody defines body for GetIndexHaskellSadb for application/json ContentType.
type GetIndexHaskellSadbJSONRequestBody = ParamsIdxReqParams

// GetIndexHclJSONRequestBody defines body for GetIndexHcl for application/json ContentType.
type GetIndexHclJSONRequestBody = ParamsIdxReqParams

// GetIndexHexJSONRequestBody defines body for GetIndexHex for application/json ContentType.
type GetIndexHexJSONRequestBody = ParamsIdxReqParams

// GetIndexHikvisionJSONRequestBody defines body for GetIndexHikvision for application/json ContentType.
type GetIndexHikvisionJSONRequestBody = ParamsIdxReqParams

// GetIndexHillromJSONRequestBody defines body for GetIndexHillrom for application/json ContentType.
type GetIndexHillromJSONRequestBody = ParamsIdxReqParams

// GetIndexHitachiJSONRequestBody defines body for GetIndexHitachi for application/json ContentType.
type GetIndexHitachiJSONRequestBody = ParamsIdxReqParams

// GetIndexHitachiEnergyJSONRequestBody defines body for GetIndexHitachiEnergy for application/json ContentType.
type GetIndexHitachiEnergyJSONRequestBody = ParamsIdxReqParams

// GetIndexHkcertJSONRequestBody defines body for GetIndexHkcert for application/json ContentType.
type GetIndexHkcertJSONRequestBody = ParamsIdxReqParams

// GetIndexHoneywellJSONRequestBody defines body for GetIndexHoneywell for application/json ContentType.
type GetIndexHoneywellJSONRequestBody = ParamsIdxReqParams

// GetIndexHpJSONRequestBody defines body for GetIndexHp for application/json ContentType.
type GetIndexHpJSONRequestBody = ParamsIdxReqParams

// GetIndexHuaweiEulerosJSONRequestBody defines body for GetIndexHuaweiEuleros for application/json ContentType.
type GetIndexHuaweiEulerosJSONRequestBody = ParamsIdxReqParams

// GetIndexHuaweiIpsJSONRequestBody defines body for GetIndexHuaweiIps for application/json ContentType.
type GetIndexHuaweiIpsJSONRequestBody = ParamsIdxReqParams

// GetIndexHuaweiPsirtJSONRequestBody defines body for GetIndexHuaweiPsirt for application/json ContentType.
type GetIndexHuaweiPsirtJSONRequestBody = ParamsIdxReqParams

// GetIndexIavaJSONRequestBody defines body for GetIndexIava for application/json ContentType.
type GetIndexIavaJSONRequestBody = ParamsIdxReqParams

// GetIndexIbmJSONRequestBody defines body for GetIndexIbm for application/json ContentType.
type GetIndexIbmJSONRequestBody = ParamsIdxReqParams

// GetIndexIdemiaJSONRequestBody defines body for GetIndexIdemia for application/json ContentType.
type GetIndexIdemiaJSONRequestBody = ParamsIdxReqParams

// GetIndexIlAlertsJSONRequestBody defines body for GetIndexIlAlerts for application/json ContentType.
type GetIndexIlAlertsJSONRequestBody = ParamsIdxReqParams

// GetIndexIlVulnerabilitiesJSONRequestBody defines body for GetIndexIlVulnerabilities for application/json ContentType.
type GetIndexIlVulnerabilitiesJSONRequestBody = ParamsIdxReqParams

// GetIndexIncibeJSONRequestBody defines body for GetIndexIncibe for application/json ContentType.
type GetIndexIncibeJSONRequestBody = ParamsIdxReqParams

// GetIndexInitialAccessJSONRequestBody defines body for GetIndexInitialAccess for application/json ContentType.
type GetIndexInitialAccessJSONRequestBody = ParamsIdxReqParams

// GetIndexInitialAccessGitJSONRequestBody defines body for GetIndexInitialAccessGit for application/json ContentType.
type GetIndexInitialAccessGitJSONRequestBody = ParamsIdxReqParams

// GetIndexIntelJSONRequestBody defines body for GetIndexIntel for application/json ContentType.
type GetIndexIntelJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel10dJSONRequestBody defines body for GetIndexIpintel10d for application/json ContentType.
type GetIndexIpintel10dJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel30dJSONRequestBody defines body for GetIndexIpintel30d for application/json ContentType.
type GetIndexIpintel30dJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel3dJSONRequestBody defines body for GetIndexIpintel3d for application/json ContentType.
type GetIndexIpintel3dJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel90dJSONRequestBody defines body for GetIndexIpintel90d for application/json ContentType.
type GetIndexIpintel90dJSONRequestBody = ParamsIdxReqParams

// GetIndexIstioJSONRequestBody defines body for GetIndexIstio for application/json ContentType.
type GetIndexIstioJSONRequestBody = ParamsIdxReqParams

// GetIndexIvantiJSONRequestBody defines body for GetIndexIvanti for application/json ContentType.
type GetIndexIvantiJSONRequestBody = ParamsIdxReqParams

// GetIndexIvantiRssJSONRequestBody defines body for GetIndexIvantiRss for application/json ContentType.
type GetIndexIvantiRssJSONRequestBody = ParamsIdxReqParams

// GetIndexJenkinsJSONRequestBody defines body for GetIndexJenkins for application/json ContentType.
type GetIndexJenkinsJSONRequestBody = ParamsIdxReqParams

// GetIndexJetbrainsJSONRequestBody defines body for GetIndexJetbrains for application/json ContentType.
type GetIndexJetbrainsJSONRequestBody = ParamsIdxReqParams

// GetIndexJfrogJSONRequestBody defines body for GetIndexJfrog for application/json ContentType.
type GetIndexJfrogJSONRequestBody = ParamsIdxReqParams

// GetIndexJnjJSONRequestBody defines body for GetIndexJnj for application/json ContentType.
type GetIndexJnjJSONRequestBody = ParamsIdxReqParams

// GetIndexJvnJSONRequestBody defines body for GetIndexJvn for application/json ContentType.
type GetIndexJvnJSONRequestBody = ParamsIdxReqParams

// GetIndexJvndbJSONRequestBody defines body for GetIndexJvndb for application/json ContentType.
type GetIndexJvndbJSONRequestBody = ParamsIdxReqParams

// GetIndexKasperskyIcsCertJSONRequestBody defines body for GetIndexKasperskyIcsCert for application/json ContentType.
type GetIndexKasperskyIcsCertJSONRequestBody = ParamsIdxReqParams

// GetIndexKorelogicJSONRequestBody defines body for GetIndexKorelogic for application/json ContentType.
type GetIndexKorelogicJSONRequestBody = ParamsIdxReqParams

// GetIndexKrcertSecurityNoticesJSONRequestBody defines body for GetIndexKrcertSecurityNotices for application/json ContentType.
type GetIndexKrcertSecurityNoticesJSONRequestBody = ParamsIdxReqParams

// GetIndexKrcertVulnerabilitiesJSONRequestBody defines body for GetIndexKrcertVulnerabilities for application/json ContentType.
type GetIndexKrcertVulnerabilitiesJSONRequestBody = ParamsIdxReqParams

// GetIndexKubernetesJSONRequestBody defines body for GetIndexKubernetes for application/json ContentType.
type GetIndexKubernetesJSONRequestBody = ParamsIdxReqParams

// GetIndexLenovoJSONRequestBody defines body for GetIndexLenovo for application/json ContentType.
type GetIndexLenovoJSONRequestBody = ParamsIdxReqParams

// GetIndexLexmarkJSONRequestBody defines body for GetIndexLexmark for application/json ContentType.
type GetIndexLexmarkJSONRequestBody = ParamsIdxReqParams

// GetIndexLgJSONRequestBody defines body for GetIndexLg for application/json ContentType.
type GetIndexLgJSONRequestBody = ParamsIdxReqParams

// GetIndexLibreOfficeJSONRequestBody defines body for GetIndexLibreOffice for application/json ContentType.
type GetIndexLibreOfficeJSONRequestBody = ParamsIdxReqParams

// GetIndexLinuxJSONRequestBody defines body for GetIndexLinux for application/json ContentType.
type GetIndexLinuxJSONRequestBody = ParamsIdxReqParams

// GetIndexMFilesJSONRequestBody defines body for GetIndexMFiles for application/json ContentType.
type GetIndexMFilesJSONRequestBody = ParamsIdxReqParams

// GetIndexMacertJSONRequestBody defines body for GetIndexMacert for application/json ContentType.
type GetIndexMacertJSONRequestBody = ParamsIdxReqParams

// GetIndexManageengineJSONRequestBody defines body for GetIndexManageengine for application/json ContentType.
type GetIndexManageengineJSONRequestBody = ParamsIdxReqParams

// GetIndexMavenJSONRequestBody defines body for GetIndexMaven for application/json ContentType.
type GetIndexMavenJSONRequestBody = ParamsIdxReqParams

// GetIndexMbedTlsJSONRequestBody defines body for GetIndexMbedTls for application/json ContentType.
type GetIndexMbedTlsJSONRequestBody = ParamsIdxReqParams

// GetIndexMediatekJSONRequestBody defines body for GetIndexMediatek for application/json ContentType.
type GetIndexMediatekJSONRequestBody = ParamsIdxReqParams

// GetIndexMedtronicJSONRequestBody defines body for GetIndexMedtronic for application/json ContentType.
type GetIndexMedtronicJSONRequestBody = ParamsIdxReqParams

// GetIndexMendixJSONRequestBody defines body for GetIndexMendix for application/json ContentType.
type GetIndexMendixJSONRequestBody = ParamsIdxReqParams

// GetIndexMetasploitJSONRequestBody defines body for GetIndexMetasploit for application/json ContentType.
type GetIndexMetasploitJSONRequestBody = ParamsIdxReqParams

// GetIndexMicrosoftCvrfJSONRequestBody defines body for GetIndexMicrosoftCvrf for application/json ContentType.
type GetIndexMicrosoftCvrfJSONRequestBody = ParamsIdxReqParams

// GetIndexMicrosoftKbJSONRequestBody defines body for GetIndexMicrosoftKb for application/json ContentType.
type GetIndexMicrosoftKbJSONRequestBody = ParamsIdxReqParams

// GetIndexMikrotikJSONRequestBody defines body for GetIndexMikrotik for application/json ContentType.
type GetIndexMikrotikJSONRequestBody = ParamsIdxReqParams

// GetIndexMindrayJSONRequestBody defines body for GetIndexMindray for application/json ContentType.
type GetIndexMindrayJSONRequestBody = ParamsIdxReqParams

// GetIndexMispThreatActorsJSONRequestBody defines body for GetIndexMispThreatActors for application/json ContentType.
type GetIndexMispThreatActorsJSONRequestBody = ParamsIdxReqParams

// GetIndexMitelJSONRequestBody defines body for GetIndexMitel for application/json ContentType.
type GetIndexMitelJSONRequestBody = ParamsIdxReqParams

// GetIndexMitreAttackCveJSONRequestBody defines body for GetIndexMitreAttackCve for application/json ContentType.
type GetIndexMitreAttackCveJSONRequestBody = ParamsIdxReqParams

// GetIndexMitreCvelistV5JSONRequestBody defines body for GetIndexMitreCvelistV5 for application/json ContentType.
type GetIndexMitreCvelistV5JSONRequestBody = ParamsIdxReqParams

// GetIndexMitsubishiElectricJSONRequestBody defines body for GetIndexMitsubishiElectric for application/json ContentType.
type GetIndexMitsubishiElectricJSONRequestBody = ParamsIdxReqParams

// GetIndexMongodbJSONRequestBody defines body for GetIndexMongodb for application/json ContentType.
type GetIndexMongodbJSONRequestBody = ParamsIdxReqParams

// GetIndexMoxaJSONRequestBody defines body for GetIndexMoxa for application/json ContentType.
type GetIndexMoxaJSONRequestBody = ParamsIdxReqParams

// GetIndexMozillaJSONRequestBody defines body for GetIndexMozilla for application/json ContentType.
type GetIndexMozillaJSONRequestBody = ParamsIdxReqParams

// GetIndexNaverJSONRequestBody defines body for GetIndexNaver for application/json ContentType.
type GetIndexNaverJSONRequestBody = ParamsIdxReqParams

// GetIndexNcscJSONRequestBody defines body for GetIndexNcsc for application/json ContentType.
type GetIndexNcscJSONRequestBody = ParamsIdxReqParams

// GetIndexNcscCvesJSONRequestBody defines body for GetIndexNcscCves for application/json ContentType.
type GetIndexNcscCvesJSONRequestBody = ParamsIdxReqParams

// GetIndexNecJSONRequestBody defines body for GetIndexNec for application/json ContentType.
type GetIndexNecJSONRequestBody = ParamsIdxReqParams

// GetIndexNetappJSONRequestBody defines body for GetIndexNetapp for application/json ContentType.
type GetIndexNetappJSONRequestBody = ParamsIdxReqParams

// GetIndexNetgateJSONRequestBody defines body for GetIndexNetgate for application/json ContentType.
type GetIndexNetgateJSONRequestBody = ParamsIdxReqParams

// GetIndexNetgearJSONRequestBody defines body for GetIndexNetgear for application/json ContentType.
type GetIndexNetgearJSONRequestBody = ParamsIdxReqParams

// GetIndexNetskopeJSONRequestBody defines body for GetIndexNetskope for application/json ContentType.
type GetIndexNetskopeJSONRequestBody = ParamsIdxReqParams

// GetIndexNginxJSONRequestBody defines body for GetIndexNginx for application/json ContentType.
type GetIndexNginxJSONRequestBody = ParamsIdxReqParams

// GetIndexNhsJSONRequestBody defines body for GetIndexNhs for application/json ContentType.
type GetIndexNhsJSONRequestBody = ParamsIdxReqParams

// GetIndexNiJSONRequestBody defines body for GetIndexNi for application/json ContentType.
type GetIndexNiJSONRequestBody = ParamsIdxReqParams

// GetIndexNistNvdJSONRequestBody defines body for GetIndexNistNvd for application/json ContentType.
type GetIndexNistNvdJSONRequestBody = ParamsIdxReqParams

// GetIndexNistNvd2JSONRequestBody defines body for GetIndexNistNvd2 for application/json ContentType.
type GetIndexNistNvd2JSONRequestBody = ParamsIdxReqParams

// GetIndexNistNvd2CpematchJSONRequestBody defines body for GetIndexNistNvd2Cpematch for application/json ContentType.
type GetIndexNistNvd2CpematchJSONRequestBody = ParamsIdxReqParams

// GetIndexNodeSecurityJSONRequestBody defines body for GetIndexNodeSecurity for application/json ContentType.
type GetIndexNodeSecurityJSONRequestBody = ParamsIdxReqParams

// GetIndexNodejsJSONRequestBody defines body for GetIndexNodejs for application/json ContentType.
type GetIndexNodejsJSONRequestBody = ParamsIdxReqParams

// GetIndexNokiaJSONRequestBody defines body for GetIndexNokia for application/json ContentType.
type GetIndexNokiaJSONRequestBody = ParamsIdxReqParams

// GetIndexNozomiJSONRequestBody defines body for GetIndexNozomi for application/json ContentType.
type GetIndexNozomiJSONRequestBody = ParamsIdxReqParams

// GetIndexNpmJSONRequestBody defines body for GetIndexNpm for application/json ContentType.
type GetIndexNpmJSONRequestBody = ParamsIdxReqParams

// GetIndexNtpJSONRequestBody defines body for GetIndexNtp for application/json ContentType.
type GetIndexNtpJSONRequestBody = ParamsIdxReqParams

// GetIndexNugetJSONRequestBody defines body for GetIndexNuget for application/json ContentType.
type GetIndexNugetJSONRequestBody = ParamsIdxReqParams

// GetIndexNvidiaJSONRequestBody defines body for GetIndexNvidia for application/json ContentType.
type GetIndexNvidiaJSONRequestBody = ParamsIdxReqParams

// GetIndexNzAdvisoriesJSONRequestBody defines body for GetIndexNzAdvisories for application/json ContentType.
type GetIndexNzAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexOctopusDeployJSONRequestBody defines body for GetIndexOctopusDeploy for application/json ContentType.
type GetIndexOctopusDeployJSONRequestBody = ParamsIdxReqParams

// GetIndexOktaJSONRequestBody defines body for GetIndexOkta for application/json ContentType.
type GetIndexOktaJSONRequestBody = ParamsIdxReqParams

// GetIndexOmronJSONRequestBody defines body for GetIndexOmron for application/json ContentType.
type GetIndexOmronJSONRequestBody = ParamsIdxReqParams

// GetIndexOneEJSONRequestBody defines body for GetIndexOneE for application/json ContentType.
type GetIndexOneEJSONRequestBody = ParamsIdxReqParams

// GetIndexOpamJSONRequestBody defines body for GetIndexOpam for application/json ContentType.
type GetIndexOpamJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenCvdbJSONRequestBody defines body for GetIndexOpenCvdb for application/json ContentType.
type GetIndexOpenCvdbJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenbsdJSONRequestBody defines body for GetIndexOpenbsd for application/json ContentType.
type GetIndexOpenbsdJSONRequestBody = ParamsIdxReqParams

// GetIndexOpensshJSONRequestBody defines body for GetIndexOpenssh for application/json ContentType.
type GetIndexOpensshJSONRequestBody = ParamsIdxReqParams

// GetIndexOpensslSecadvJSONRequestBody defines body for GetIndexOpensslSecadv for application/json ContentType.
type GetIndexOpensslSecadvJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenstackJSONRequestBody defines body for GetIndexOpenstack for application/json ContentType.
type GetIndexOpenstackJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenwrtJSONRequestBody defines body for GetIndexOpenwrt for application/json ContentType.
type GetIndexOpenwrtJSONRequestBody = ParamsIdxReqParams

// GetIndexOracleJSONRequestBody defines body for GetIndexOracle for application/json ContentType.
type GetIndexOracleJSONRequestBody = ParamsIdxReqParams

// GetIndexOracleCpuJSONRequestBody defines body for GetIndexOracleCpu for application/json ContentType.
type GetIndexOracleCpuJSONRequestBody = ParamsIdxReqParams

// GetIndexOracleCpuCsafJSONRequestBody defines body for GetIndexOracleCpuCsaf for application/json ContentType.
type GetIndexOracleCpuCsafJSONRequestBody = ParamsIdxReqParams

// GetIndexOsvJSONRequestBody defines body for GetIndexOsv for application/json ContentType.
type GetIndexOsvJSONRequestBody = ParamsIdxReqParams

// GetIndexOtrsJSONRequestBody defines body for GetIndexOtrs for application/json ContentType.
type GetIndexOtrsJSONRequestBody = ParamsIdxReqParams

// GetIndexOwncloudJSONRequestBody defines body for GetIndexOwncloud for application/json ContentType.
type GetIndexOwncloudJSONRequestBody = ParamsIdxReqParams

// GetIndexPalantirJSONRequestBody defines body for GetIndexPalantir for application/json ContentType.
type GetIndexPalantirJSONRequestBody = ParamsIdxReqParams

// GetIndexPaloAltoJSONRequestBody defines body for GetIndexPaloAlto for application/json ContentType.
type GetIndexPaloAltoJSONRequestBody = ParamsIdxReqParams

// GetIndexPanasonicJSONRequestBody defines body for GetIndexPanasonic for application/json ContentType.
type GetIndexPanasonicJSONRequestBody = ParamsIdxReqParams

// GetIndexPapercutJSONRequestBody defines body for GetIndexPapercut for application/json ContentType.
type GetIndexPapercutJSONRequestBody = ParamsIdxReqParams

// GetIndexPegaJSONRequestBody defines body for GetIndexPega for application/json ContentType.
type GetIndexPegaJSONRequestBody = ParamsIdxReqParams

// GetIndexPhilipsJSONRequestBody defines body for GetIndexPhilips for application/json ContentType.
type GetIndexPhilipsJSONRequestBody = ParamsIdxReqParams

// GetIndexPhoenixContactJSONRequestBody defines body for GetIndexPhoenixContact for application/json ContentType.
type GetIndexPhoenixContactJSONRequestBody = ParamsIdxReqParams

// GetIndexPhpMyAdminJSONRequestBody defines body for GetIndexPhpMyAdmin for application/json ContentType.
type GetIndexPhpMyAdminJSONRequestBody = ParamsIdxReqParams

// GetIndexPostgressqlJSONRequestBody defines body for GetIndexPostgressql for application/json ContentType.
type GetIndexPostgressqlJSONRequestBody = ParamsIdxReqParams

// GetIndexPowerdnsJSONRequestBody defines body for GetIndexPowerdns for application/json ContentType.
type GetIndexPowerdnsJSONRequestBody = ParamsIdxReqParams

// GetIndexProgressJSONRequestBody defines body for GetIndexProgress for application/json ContentType.
type GetIndexProgressJSONRequestBody = ParamsIdxReqParams

// GetIndexProofpointJSONRequestBody defines body for GetIndexProofpoint for application/json ContentType.
type GetIndexProofpointJSONRequestBody = ParamsIdxReqParams

// GetIndexPtcJSONRequestBody defines body for GetIndexPtc for application/json ContentType.
type GetIndexPtcJSONRequestBody = ParamsIdxReqParams

// GetIndexPubJSONRequestBody defines body for GetIndexPub for application/json ContentType.
type GetIndexPubJSONRequestBody = ParamsIdxReqParams

// GetIndexPureStorageJSONRequestBody defines body for GetIndexPureStorage for application/json ContentType.
type GetIndexPureStorageJSONRequestBody = ParamsIdxReqParams

// GetIndexPypaAdvisoriesJSONRequestBody defines body for GetIndexPypaAdvisories for application/json ContentType.
type GetIndexPypaAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexPypiJSONRequestBody defines body for GetIndexPypi for application/json ContentType.
type GetIndexPypiJSONRequestBody = ParamsIdxReqParams

// GetIndexQnapJSONRequestBody defines body for GetIndexQnap for application/json ContentType.
type GetIndexQnapJSONRequestBody = ParamsIdxReqParams

// GetIndexQualcommJSONRequestBody defines body for GetIndexQualcomm for application/json ContentType.
type GetIndexQualcommJSONRequestBody = ParamsIdxReqParams

// GetIndexQualysJSONRequestBody defines body for GetIndexQualys for application/json ContentType.
type GetIndexQualysJSONRequestBody = ParamsIdxReqParams

// GetIndexQubesQsbJSONRequestBody defines body for GetIndexQubesQsb for application/json ContentType.
type GetIndexQubesQsbJSONRequestBody = ParamsIdxReqParams

// GetIndexRansomwareJSONRequestBody defines body for GetIndexRansomware for application/json ContentType.
type GetIndexRansomwareJSONRequestBody = ParamsIdxReqParams

// GetIndexRedhatJSONRequestBody defines body for GetIndexRedhat for application/json ContentType.
type GetIndexRedhatJSONRequestBody = ParamsIdxReqParams

// GetIndexRenesasJSONRequestBody defines body for GetIndexRenesas for application/json ContentType.
type GetIndexRenesasJSONRequestBody = ParamsIdxReqParams

// GetIndexReviveJSONRequestBody defines body for GetIndexRevive for application/json ContentType.
type GetIndexReviveJSONRequestBody = ParamsIdxReqParams

// GetIndexRockwellJSONRequestBody defines body for GetIndexRockwell for application/json ContentType.
type GetIndexRockwellJSONRequestBody = ParamsIdxReqParams

// GetIndexRockyJSONRequestBody defines body for GetIndexRocky for application/json ContentType.
type GetIndexRockyJSONRequestBody = ParamsIdxReqParams

// GetIndexRockyErrataJSONRequestBody defines body for GetIndexRockyErrata for application/json ContentType.
type GetIndexRockyErrataJSONRequestBody = ParamsIdxReqParams

// GetIndexRuckusJSONRequestBody defines body for GetIndexRuckus for application/json ContentType.
type GetIndexRuckusJSONRequestBody = ParamsIdxReqParams

// GetIndexRustsecAdvisoriesJSONRequestBody defines body for GetIndexRustsecAdvisories for application/json ContentType.
type GetIndexRustsecAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexSacertJSONRequestBody defines body for GetIndexSacert for application/json ContentType.
type GetIndexSacertJSONRequestBody = ParamsIdxReqParams

// GetIndexSaintJSONRequestBody defines body for GetIndexSaint for application/json ContentType.
type GetIndexSaintJSONRequestBody = ParamsIdxReqParams

// GetIndexSalesforceJSONRequestBody defines body for GetIndexSalesforce for application/json ContentType.
type GetIndexSalesforceJSONRequestBody = ParamsIdxReqParams

// GetIndexSambaJSONRequestBody defines body for GetIndexSamba for application/json ContentType.
type GetIndexSambaJSONRequestBody = ParamsIdxReqParams

// GetIndexSapJSONRequestBody defines body for GetIndexSap for application/json ContentType.
type GetIndexSapJSONRequestBody = ParamsIdxReqParams

// GetIndexSchneiderElectricJSONRequestBody defines body for GetIndexSchneiderElectric for application/json ContentType.
type GetIndexSchneiderElectricJSONRequestBody = ParamsIdxReqParams

// GetIndexSecConsultJSONRequestBody defines body for GetIndexSecConsult for application/json ContentType.
type GetIndexSecConsultJSONRequestBody = ParamsIdxReqParams

// GetIndexSecuritylabJSONRequestBody defines body for GetIndexSecuritylab for application/json ContentType.
type GetIndexSecuritylabJSONRequestBody = ParamsIdxReqParams

// GetIndexSeebugJSONRequestBody defines body for GetIndexSeebug for application/json ContentType.
type GetIndexSeebugJSONRequestBody = ParamsIdxReqParams

// GetIndexSelJSONRequestBody defines body for GetIndexSel for application/json ContentType.
type GetIndexSelJSONRequestBody = ParamsIdxReqParams

// GetIndexSentineloneJSONRequestBody defines body for GetIndexSentinelone for application/json ContentType.
type GetIndexSentineloneJSONRequestBody = ParamsIdxReqParams

// GetIndexServicenowJSONRequestBody defines body for GetIndexServicenow for application/json ContentType.
type GetIndexServicenowJSONRequestBody = ParamsIdxReqParams

// GetIndexShadowserverExploitedJSONRequestBody defines body for GetIndexShadowserverExploited for application/json ContentType.
type GetIndexShadowserverExploitedJSONRequestBody = ParamsIdxReqParams

// GetIndexShielderJSONRequestBody defines body for GetIndexShielder for application/json ContentType.
type GetIndexShielderJSONRequestBody = ParamsIdxReqParams

// GetIndexSickJSONRequestBody defines body for GetIndexSick for application/json ContentType.
type GetIndexSickJSONRequestBody = ParamsIdxReqParams

// GetIndexSiemensJSONRequestBody defines body for GetIndexSiemens for application/json ContentType.
type GetIndexSiemensJSONRequestBody = ParamsIdxReqParams

// GetIndexSierraWirelessJSONRequestBody defines body for GetIndexSierraWireless for application/json ContentType.
type GetIndexSierraWirelessJSONRequestBody = ParamsIdxReqParams

// GetIndexSigmaRulesJSONRequestBody defines body for GetIndexSigmaRules for application/json ContentType.
type GetIndexSigmaRulesJSONRequestBody = ParamsIdxReqParams

// GetIndexSingcertJSONRequestBody defines body for GetIndexSingcert for application/json ContentType.
type GetIndexSingcertJSONRequestBody = ParamsIdxReqParams

// GetIndexSlackwareJSONRequestBody defines body for GetIndexSlackware for application/json ContentType.
type GetIndexSlackwareJSONRequestBody = ParamsIdxReqParams

// GetIndexSolarwindsJSONRequestBody defines body for GetIndexSolarwinds for application/json ContentType.
type GetIndexSolarwindsJSONRequestBody = ParamsIdxReqParams

// GetIndexSolrJSONRequestBody defines body for GetIndexSolr for application/json ContentType.
type GetIndexSolrJSONRequestBody = ParamsIdxReqParams

// GetIndexSonicwallJSONRequestBody defines body for GetIndexSonicwall for application/json ContentType.
type GetIndexSonicwallJSONRequestBody = ParamsIdxReqParams

// GetIndexSpacelabsHealthcareJSONRequestBody defines body for GetIndexSpacelabsHealthcare for application/json ContentType.
type GetIndexSpacelabsHealthcareJSONRequestBody = ParamsIdxReqParams

// GetIndexSplunkJSONRequestBody defines body for GetIndexSplunk for application/json ContentType.
type GetIndexSplunkJSONRequestBody = ParamsIdxReqParams

// GetIndexSpringJSONRequestBody defines body for GetIndexSpring for application/json ContentType.
type GetIndexSpringJSONRequestBody = ParamsIdxReqParams

// GetIndexSsdJSONRequestBody defines body for GetIndexSsd for application/json ContentType.
type GetIndexSsdJSONRequestBody = ParamsIdxReqParams

// GetIndexStormshieldJSONRequestBody defines body for GetIndexStormshield for application/json ContentType.
type GetIndexStormshieldJSONRequestBody = ParamsIdxReqParams

// GetIndexStrykerJSONRequestBody defines body for GetIndexStryker for application/json ContentType.
type GetIndexStrykerJSONRequestBody = ParamsIdxReqParams

// GetIndexSudoJSONRequestBody defines body for GetIndexSudo for application/json ContentType.
type GetIndexSudoJSONRequestBody = ParamsIdxReqParams

// GetIndexSuseJSONRequestBody defines body for GetIndexSuse for application/json ContentType.
type GetIndexSuseJSONRequestBody = ParamsIdxReqParams

// GetIndexSwiftJSONRequestBody defines body for GetIndexSwift for application/json ContentType.
type GetIndexSwiftJSONRequestBody = ParamsIdxReqParams

// GetIndexSwisslogHealthcareJSONRequestBody defines body for GetIndexSwisslogHealthcare for application/json ContentType.
type GetIndexSwisslogHealthcareJSONRequestBody = ParamsIdxReqParams

// GetIndexSymfonyJSONRequestBody defines body for GetIndexSymfony for application/json ContentType.
type GetIndexSymfonyJSONRequestBody = ParamsIdxReqParams

// GetIndexSynacktivJSONRequestBody defines body for GetIndexSynacktiv for application/json ContentType.
type GetIndexSynacktivJSONRequestBody = ParamsIdxReqParams

// GetIndexSyncrosoftJSONRequestBody defines body for GetIndexSyncrosoft for application/json ContentType.
type GetIndexSyncrosoftJSONRequestBody = ParamsIdxReqParams

// GetIndexSynologyJSONRequestBody defines body for GetIndexSynology for application/json ContentType.
type GetIndexSynologyJSONRequestBody = ParamsIdxReqParams

// GetIndexTeamviewerJSONRequestBody defines body for GetIndexTeamviewer for application/json ContentType.
type GetIndexTeamviewerJSONRequestBody = ParamsIdxReqParams

// GetIndexTenableResearchAdvisoriesJSONRequestBody defines body for GetIndexTenableResearchAdvisories for application/json ContentType.
type GetIndexTenableResearchAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexTencentJSONRequestBody defines body for GetIndexTencent for application/json ContentType.
type GetIndexTencentJSONRequestBody = ParamsIdxReqParams

// GetIndexThalesJSONRequestBody defines body for GetIndexThales for application/json ContentType.
type GetIndexThalesJSONRequestBody = ParamsIdxReqParams

// GetIndexThemissinglinkJSONRequestBody defines body for GetIndexThemissinglink for application/json ContentType.
type GetIndexThemissinglinkJSONRequestBody = ParamsIdxReqParams

// GetIndexThreatActorsJSONRequestBody defines body for GetIndexThreatActors for application/json ContentType.
type GetIndexThreatActorsJSONRequestBody = ParamsIdxReqParams

// GetIndexTiJSONRequestBody defines body for GetIndexTi for application/json ContentType.
type GetIndexTiJSONRequestBody = ParamsIdxReqParams

// GetIndexTibcoJSONRequestBody defines body for GetIndexTibco for application/json ContentType.
type GetIndexTibcoJSONRequestBody = ParamsIdxReqParams

// GetIndexTpLinkJSONRequestBody defines body for GetIndexTpLink for application/json ContentType.
type GetIndexTpLinkJSONRequestBody = ParamsIdxReqParams

// GetIndexTraneTechnologyJSONRequestBody defines body for GetIndexTraneTechnology for application/json ContentType.
type GetIndexTraneTechnologyJSONRequestBody = ParamsIdxReqParams

// GetIndexTrendmicroJSONRequestBody defines body for GetIndexTrendmicro for application/json ContentType.
type GetIndexTrendmicroJSONRequestBody = ParamsIdxReqParams

// GetIndexTrustwaveJSONRequestBody defines body for GetIndexTrustwave for application/json ContentType.
type GetIndexTrustwaveJSONRequestBody = ParamsIdxReqParams

// GetIndexTwcertJSONRequestBody defines body for GetIndexTwcert for application/json ContentType.
type GetIndexTwcertJSONRequestBody = ParamsIdxReqParams

// GetIndexUbiquitiJSONRequestBody defines body for GetIndexUbiquiti for application/json ContentType.
type GetIndexUbiquitiJSONRequestBody = ParamsIdxReqParams

// GetIndexUbuntuJSONRequestBody defines body for GetIndexUbuntu for application/json ContentType.
type GetIndexUbuntuJSONRequestBody = ParamsIdxReqParams

// GetIndexUnifyJSONRequestBody defines body for GetIndexUnify for application/json ContentType.
type GetIndexUnifyJSONRequestBody = ParamsIdxReqParams

// GetIndexUnisocJSONRequestBody defines body for GetIndexUnisoc for application/json ContentType.
type GetIndexUnisocJSONRequestBody = ParamsIdxReqParams

// GetIndexUsdJSONRequestBody defines body for GetIndexUsd for application/json ContentType.
type GetIndexUsdJSONRequestBody = ParamsIdxReqParams

// GetIndexUsomJSONRequestBody defines body for GetIndexUsom for application/json ContentType.
type GetIndexUsomJSONRequestBody = ParamsIdxReqParams

// GetIndexVandykeJSONRequestBody defines body for GetIndexVandyke for application/json ContentType.
type GetIndexVandykeJSONRequestBody = ParamsIdxReqParams

// GetIndexVapidlabsJSONRequestBody defines body for GetIndexVapidlabs for application/json ContentType.
type GetIndexVapidlabsJSONRequestBody = ParamsIdxReqParams

// GetIndexVcCpeDictionaryJSONRequestBody defines body for GetIndexVcCpeDictionary for application/json ContentType.
type GetIndexVcCpeDictionaryJSONRequestBody = ParamsIdxReqParams

// GetIndexVdeJSONRequestBody defines body for GetIndexVde for application/json ContentType.
type GetIndexVdeJSONRequestBody = ParamsIdxReqParams

// GetIndexVeeamJSONRequestBody defines body for GetIndexVeeam for application/json ContentType.
type GetIndexVeeamJSONRequestBody = ParamsIdxReqParams

// GetIndexVeritasJSONRequestBody defines body for GetIndexVeritas for application/json ContentType.
type GetIndexVeritasJSONRequestBody = ParamsIdxReqParams

// GetIndexVmwareJSONRequestBody defines body for GetIndexVmware for application/json ContentType.
type GetIndexVmwareJSONRequestBody = ParamsIdxReqParams

// GetIndexVoidsecJSONRequestBody defines body for GetIndexVoidsec for application/json ContentType.
type GetIndexVoidsecJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckJSONRequestBody defines body for GetIndexVulncheck for application/json ContentType.
type GetIndexVulncheckJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckConfigJSONRequestBody defines body for GetIndexVulncheckConfig for application/json ContentType.
type GetIndexVulncheckConfigJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckCvelistV5JSONRequestBody defines body for GetIndexVulncheckCvelistV5 for application/json ContentType.
type GetIndexVulncheckCvelistV5JSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckKevJSONRequestBody defines body for GetIndexVulncheckKev for application/json ContentType.
type GetIndexVulncheckKevJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckNvdJSONRequestBody defines body for GetIndexVulncheckNvd for application/json ContentType.
type GetIndexVulncheckNvdJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckNvd2JSONRequestBody defines body for GetIndexVulncheckNvd2 for application/json ContentType.
type GetIndexVulncheckNvd2JSONRequestBody = ParamsIdxReqParams

// GetIndexVulnerabilityAliasesJSONRequestBody defines body for GetIndexVulnerabilityAliases for application/json ContentType.
type GetIndexVulnerabilityAliasesJSONRequestBody = ParamsIdxReqParams

// GetIndexVulnrichmentJSONRequestBody defines body for GetIndexVulnrichment for application/json ContentType.
type GetIndexVulnrichmentJSONRequestBody = ParamsIdxReqParams

// GetIndexVyaireJSONRequestBody defines body for GetIndexVyaire for application/json ContentType.
type GetIndexVyaireJSONRequestBody = ParamsIdxReqParams

// GetIndexWatchguardJSONRequestBody defines body for GetIndexWatchguard for application/json ContentType.
type GetIndexWatchguardJSONRequestBody = ParamsIdxReqParams

// GetIndexWhatsappJSONRequestBody defines body for GetIndexWhatsapp for application/json ContentType.
type GetIndexWhatsappJSONRequestBody = ParamsIdxReqParams

// GetIndexWibuJSONRequestBody defines body for GetIndexWibu for application/json ContentType.
type GetIndexWibuJSONRequestBody = ParamsIdxReqParams

// GetIndexWiresharkJSONRequestBody defines body for GetIndexWireshark for application/json ContentType.
type GetIndexWiresharkJSONRequestBody = ParamsIdxReqParams

// GetIndexWithSecureJSONRequestBody defines body for GetIndexWithSecure for application/json ContentType.
type GetIndexWithSecureJSONRequestBody = ParamsIdxReqParams

// GetIndexWolfiJSONRequestBody defines body for GetIndexWolfi for application/json ContentType.
type GetIndexWolfiJSONRequestBody = ParamsIdxReqParams

// GetIndexWolfsslJSONRequestBody defines body for GetIndexWolfssl for application/json ContentType.
type GetIndexWolfsslJSONRequestBody = ParamsIdxReqParams

// GetIndexWordfenceJSONRequestBody defines body for GetIndexWordfence for application/json ContentType.
type GetIndexWordfenceJSONRequestBody = ParamsIdxReqParams

// GetIndexXenJSONRequestBody defines body for GetIndexXen for application/json ContentType.
type GetIndexXenJSONRequestBody = ParamsIdxReqParams

// GetIndexXeroxJSONRequestBody defines body for GetIndexXerox for application/json ContentType.
type GetIndexXeroxJSONRequestBody = ParamsIdxReqParams

// GetIndexXiaomiJSONRequestBody defines body for GetIndexXiaomi for application/json ContentType.
type GetIndexXiaomiJSONRequestBody = ParamsIdxReqParams

// GetIndexXylemJSONRequestBody defines body for GetIndexXylem for application/json ContentType.
type GetIndexXylemJSONRequestBody = ParamsIdxReqParams

// GetIndexYokogawaJSONRequestBody defines body for GetIndexYokogawa for application/json ContentType.
type GetIndexYokogawaJSONRequestBody = ParamsIdxReqParams

// GetIndexYubicoJSONRequestBody defines body for GetIndexYubico for application/json ContentType.
type GetIndexYubicoJSONRequestBody = ParamsIdxReqParams

// GetIndexZdiJSONRequestBody defines body for GetIndexZdi for application/json ContentType.
type GetIndexZdiJSONRequestBody = ParamsIdxReqParams

// GetIndexZebraJSONRequestBody defines body for GetIndexZebra for application/json ContentType.
type GetIndexZebraJSONRequestBody = ParamsIdxReqParams

// GetIndexZeroscienceJSONRequestBody defines body for GetIndexZeroscience for application/json ContentType.
type GetIndexZeroscienceJSONRequestBody = ParamsIdxReqParams

// GetIndexZimbraJSONRequestBody defines body for GetIndexZimbra for application/json ContentType.
type GetIndexZimbraJSONRequestBody = ParamsIdxReqParams

// GetIndexZoomJSONRequestBody defines body for GetIndexZoom for application/json ContentType.
type GetIndexZoomJSONRequestBody = ParamsIdxReqParams

// GetIndexZscalerJSONRequestBody defines body for GetIndexZscaler for application/json ContentType.
type GetIndexZscalerJSONRequestBody = ParamsIdxReqParams

// GetIndexZusoJSONRequestBody defines body for GetIndexZuso for application/json ContentType.
type GetIndexZusoJSONRequestBody = ParamsIdxReqParams

// GetIndexZyxelJSONRequestBody defines body for GetIndexZyxel for application/json ContentType.
type GetIndexZyxelJSONRequestBody = ParamsIdxReqParams

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBackup request
	GetBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackupIndex request
	GetBackupIndex(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCpe request
	GetCpe(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntitlements request
	GetEntitlements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndex request
	GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexA10WithBody request with any body
	GetIndexA10WithBody(ctx context.Context, params *GetIndexA10Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexA10(ctx context.Context, params *GetIndexA10Params, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAbbWithBody request with any body
	GetIndexAbbWithBody(ctx context.Context, params *GetIndexAbbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAbb(ctx context.Context, params *GetIndexAbbParams, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAbbottWithBody request with any body
	GetIndexAbbottWithBody(ctx context.Context, params *GetIndexAbbottParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAbbott(ctx context.Context, params *GetIndexAbbottParams, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAbsoluteWithBody request with any body
	GetIndexAbsoluteWithBody(ctx context.Context, params *GetIndexAbsoluteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAbsolute(ctx context.Context, params *GetIndexAbsoluteParams, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAcronisWithBody request with any body
	GetIndexAcronisWithBody(ctx context.Context, params *GetIndexAcronisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAcronis(ctx context.Context, params *GetIndexAcronisParams, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAdobeWithBody request with any body
	GetIndexAdobeWithBody(ctx context.Context, params *GetIndexAdobeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAdobe(ctx context.Context, params *GetIndexAdobeParams, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAdvisoriesWithBody request with any body
	GetIndexAdvisoriesWithBody(ctx context.Context, params *GetIndexAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAdvisories(ctx context.Context, params *GetIndexAdvisoriesParams, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAlephResearchWithBody request with any body
	GetIndexAlephResearchWithBody(ctx context.Context, params *GetIndexAlephResearchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAlephResearch(ctx context.Context, params *GetIndexAlephResearchParams, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAlmaWithBody request with any body
	GetIndexAlmaWithBody(ctx context.Context, params *GetIndexAlmaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAlma(ctx context.Context, params *GetIndexAlmaParams, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAlpineWithBody request with any body
	GetIndexAlpineWithBody(ctx context.Context, params *GetIndexAlpineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAlpine(ctx context.Context, params *GetIndexAlpineParams, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAmazonWithBody request with any body
	GetIndexAmazonWithBody(ctx context.Context, params *GetIndexAmazonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAmazon(ctx context.Context, params *GetIndexAmazonParams, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAmdWithBody request with any body
	GetIndexAmdWithBody(ctx context.Context, params *GetIndexAmdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAmd(ctx context.Context, params *GetIndexAmdParams, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAmiWithBody request with any body
	GetIndexAmiWithBody(ctx context.Context, params *GetIndexAmiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAmi(ctx context.Context, params *GetIndexAmiParams, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAnchoreNvdOverrideWithBody request with any body
	GetIndexAnchoreNvdOverrideWithBody(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAnchoreNvdOverride(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAndroidWithBody request with any body
	GetIndexAndroidWithBody(ctx context.Context, params *GetIndexAndroidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAndroid(ctx context.Context, params *GetIndexAndroidParams, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheActivemqWithBody request with any body
	GetIndexApacheActivemqWithBody(ctx context.Context, params *GetIndexApacheActivemqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheActivemq(ctx context.Context, params *GetIndexApacheActivemqParams, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheArchivaWithBody request with any body
	GetIndexApacheArchivaWithBody(ctx context.Context, params *GetIndexApacheArchivaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheArchiva(ctx context.Context, params *GetIndexApacheArchivaParams, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheArrowWithBody request with any body
	GetIndexApacheArrowWithBody(ctx context.Context, params *GetIndexApacheArrowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheArrow(ctx context.Context, params *GetIndexApacheArrowParams, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheCamelWithBody request with any body
	GetIndexApacheCamelWithBody(ctx context.Context, params *GetIndexApacheCamelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheCamel(ctx context.Context, params *GetIndexApacheCamelParams, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheCommonsWithBody request with any body
	GetIndexApacheCommonsWithBody(ctx context.Context, params *GetIndexApacheCommonsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheCommons(ctx context.Context, params *GetIndexApacheCommonsParams, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheCouchdbWithBody request with any body
	GetIndexApacheCouchdbWithBody(ctx context.Context, params *GetIndexApacheCouchdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheCouchdb(ctx context.Context, params *GetIndexApacheCouchdbParams, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheFlinkWithBody request with any body
	GetIndexApacheFlinkWithBody(ctx context.Context, params *GetIndexApacheFlinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheFlink(ctx context.Context, params *GetIndexApacheFlinkParams, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheGuacamoleWithBody request with any body
	GetIndexApacheGuacamoleWithBody(ctx context.Context, params *GetIndexApacheGuacamoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheGuacamole(ctx context.Context, params *GetIndexApacheGuacamoleParams, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheHadoopWithBody request with any body
	GetIndexApacheHadoopWithBody(ctx context.Context, params *GetIndexApacheHadoopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheHadoop(ctx context.Context, params *GetIndexApacheHadoopParams, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheHttpWithBody request with any body
	GetIndexApacheHttpWithBody(ctx context.Context, params *GetIndexApacheHttpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheHttp(ctx context.Context, params *GetIndexApacheHttpParams, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheJspwikiWithBody request with any body
	GetIndexApacheJspwikiWithBody(ctx context.Context, params *GetIndexApacheJspwikiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheJspwiki(ctx context.Context, params *GetIndexApacheJspwikiParams, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheKafkaWithBody request with any body
	GetIndexApacheKafkaWithBody(ctx context.Context, params *GetIndexApacheKafkaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheKafka(ctx context.Context, params *GetIndexApacheKafkaParams, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheLoggingservicesWithBody request with any body
	GetIndexApacheLoggingservicesWithBody(ctx context.Context, params *GetIndexApacheLoggingservicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheLoggingservices(ctx context.Context, params *GetIndexApacheLoggingservicesParams, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheNifiWithBody request with any body
	GetIndexApacheNifiWithBody(ctx context.Context, params *GetIndexApacheNifiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheNifi(ctx context.Context, params *GetIndexApacheNifiParams, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheOfbizWithBody request with any body
	GetIndexApacheOfbizWithBody(ctx context.Context, params *GetIndexApacheOfbizParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheOfbiz(ctx context.Context, params *GetIndexApacheOfbizParams, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheOpenmeetingsWithBody request with any body
	GetIndexApacheOpenmeetingsWithBody(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheOpenmeetings(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheOpenofficeWithBody request with any body
	GetIndexApacheOpenofficeWithBody(ctx context.Context, params *GetIndexApacheOpenofficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheOpenoffice(ctx context.Context, params *GetIndexApacheOpenofficeParams, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApachePulsarWithBody request with any body
	GetIndexApachePulsarWithBody(ctx context.Context, params *GetIndexApachePulsarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApachePulsar(ctx context.Context, params *GetIndexApachePulsarParams, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheShiroWithBody request with any body
	GetIndexApacheShiroWithBody(ctx context.Context, params *GetIndexApacheShiroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheShiro(ctx context.Context, params *GetIndexApacheShiroParams, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheSparkWithBody request with any body
	GetIndexApacheSparkWithBody(ctx context.Context, params *GetIndexApacheSparkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheSpark(ctx context.Context, params *GetIndexApacheSparkParams, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheStrutsWithBody request with any body
	GetIndexApacheStrutsWithBody(ctx context.Context, params *GetIndexApacheStrutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheStruts(ctx context.Context, params *GetIndexApacheStrutsParams, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheSubversionWithBody request with any body
	GetIndexApacheSubversionWithBody(ctx context.Context, params *GetIndexApacheSubversionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheSubversion(ctx context.Context, params *GetIndexApacheSubversionParams, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheSupersetWithBody request with any body
	GetIndexApacheSupersetWithBody(ctx context.Context, params *GetIndexApacheSupersetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheSuperset(ctx context.Context, params *GetIndexApacheSupersetParams, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheTomcatWithBody request with any body
	GetIndexApacheTomcatWithBody(ctx context.Context, params *GetIndexApacheTomcatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheTomcat(ctx context.Context, params *GetIndexApacheTomcatParams, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheZookeeperWithBody request with any body
	GetIndexApacheZookeeperWithBody(ctx context.Context, params *GetIndexApacheZookeeperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheZookeeper(ctx context.Context, params *GetIndexApacheZookeeperParams, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAppcheckWithBody request with any body
	GetIndexAppcheckWithBody(ctx context.Context, params *GetIndexAppcheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAppcheck(ctx context.Context, params *GetIndexAppcheckParams, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAppgateWithBody request with any body
	GetIndexAppgateWithBody(ctx context.Context, params *GetIndexAppgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAppgate(ctx context.Context, params *GetIndexAppgateParams, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAppleWithBody request with any body
	GetIndexAppleWithBody(ctx context.Context, params *GetIndexAppleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApple(ctx context.Context, params *GetIndexAppleParams, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexArchWithBody request with any body
	GetIndexArchWithBody(ctx context.Context, params *GetIndexArchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexArch(ctx context.Context, params *GetIndexArchParams, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAristaWithBody request with any body
	GetIndexAristaWithBody(ctx context.Context, params *GetIndexAristaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexArista(ctx context.Context, params *GetIndexAristaParams, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexArubaWithBody request with any body
	GetIndexArubaWithBody(ctx context.Context, params *GetIndexArubaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAruba(ctx context.Context, params *GetIndexArubaParams, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAsrgWithBody request with any body
	GetIndexAsrgWithBody(ctx context.Context, params *GetIndexAsrgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAsrg(ctx context.Context, params *GetIndexAsrgParams, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAssetnoteWithBody request with any body
	GetIndexAssetnoteWithBody(ctx context.Context, params *GetIndexAssetnoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAssetnote(ctx context.Context, params *GetIndexAssetnoteParams, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAsteriskWithBody request with any body
	GetIndexAsteriskWithBody(ctx context.Context, params *GetIndexAsteriskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAsterisk(ctx context.Context, params *GetIndexAsteriskParams, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAsusWithBody request with any body
	GetIndexAsusWithBody(ctx context.Context, params *GetIndexAsusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAsus(ctx context.Context, params *GetIndexAsusParams, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAtlassianWithBody request with any body
	GetIndexAtlassianWithBody(ctx context.Context, params *GetIndexAtlassianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAtlassian(ctx context.Context, params *GetIndexAtlassianParams, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAtlassianVulnsWithBody request with any body
	GetIndexAtlassianVulnsWithBody(ctx context.Context, params *GetIndexAtlassianVulnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAtlassianVulns(ctx context.Context, params *GetIndexAtlassianVulnsParams, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAtredisWithBody request with any body
	GetIndexAtredisWithBody(ctx context.Context, params *GetIndexAtredisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAtredis(ctx context.Context, params *GetIndexAtredisParams, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAuscertWithBody request with any body
	GetIndexAuscertWithBody(ctx context.Context, params *GetIndexAuscertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAuscert(ctx context.Context, params *GetIndexAuscertParams, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAutodeskWithBody request with any body
	GetIndexAutodeskWithBody(ctx context.Context, params *GetIndexAutodeskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAutodesk(ctx context.Context, params *GetIndexAutodeskParams, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAvayaWithBody request with any body
	GetIndexAvayaWithBody(ctx context.Context, params *GetIndexAvayaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAvaya(ctx context.Context, params *GetIndexAvayaParams, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAvevaWithBody request with any body
	GetIndexAvevaWithBody(ctx context.Context, params *GetIndexAvevaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAveva(ctx context.Context, params *GetIndexAvevaParams, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAvigilonWithBody request with any body
	GetIndexAvigilonWithBody(ctx context.Context, params *GetIndexAvigilonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAvigilon(ctx context.Context, params *GetIndexAvigilonParams, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAwsWithBody request with any body
	GetIndexAwsWithBody(ctx context.Context, params *GetIndexAwsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAws(ctx context.Context, params *GetIndexAwsParams, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAxisWithBody request with any body
	GetIndexAxisWithBody(ctx context.Context, params *GetIndexAxisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAxis(ctx context.Context, params *GetIndexAxisParams, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAzulWithBody request with any body
	GetIndexAzulWithBody(ctx context.Context, params *GetIndexAzulParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAzul(ctx context.Context, params *GetIndexAzulParams, body GetIndexAzulJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBandrWithBody request with any body
	GetIndexBandrWithBody(ctx context.Context, params *GetIndexBandrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBandr(ctx context.Context, params *GetIndexBandrParams, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBaxterWithBody request with any body
	GetIndexBaxterWithBody(ctx context.Context, params *GetIndexBaxterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBaxter(ctx context.Context, params *GetIndexBaxterParams, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBbraunWithBody request with any body
	GetIndexBbraunWithBody(ctx context.Context, params *GetIndexBbraunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBbraun(ctx context.Context, params *GetIndexBbraunParams, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBdWithBody request with any body
	GetIndexBdWithBody(ctx context.Context, params *GetIndexBdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBd(ctx context.Context, params *GetIndexBdParams, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBduWithBody request with any body
	GetIndexBduWithBody(ctx context.Context, params *GetIndexBduParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBdu(ctx context.Context, params *GetIndexBduParams, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBeckhoffWithBody request with any body
	GetIndexBeckhoffWithBody(ctx context.Context, params *GetIndexBeckhoffParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBeckhoff(ctx context.Context, params *GetIndexBeckhoffParams, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBeldenWithBody request with any body
	GetIndexBeldenWithBody(ctx context.Context, params *GetIndexBeldenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBelden(ctx context.Context, params *GetIndexBeldenParams, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBeyondTrustWithBody request with any body
	GetIndexBeyondTrustWithBody(ctx context.Context, params *GetIndexBeyondTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBeyondTrust(ctx context.Context, params *GetIndexBeyondTrustParams, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBinarlyWithBody request with any body
	GetIndexBinarlyWithBody(ctx context.Context, params *GetIndexBinarlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBinarly(ctx context.Context, params *GetIndexBinarlyParams, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBitdefenderWithBody request with any body
	GetIndexBitdefenderWithBody(ctx context.Context, params *GetIndexBitdefenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBitdefender(ctx context.Context, params *GetIndexBitdefenderParams, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBlackberryWithBody request with any body
	GetIndexBlackberryWithBody(ctx context.Context, params *GetIndexBlackberryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBlackberry(ctx context.Context, params *GetIndexBlackberryParams, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBlsWithBody request with any body
	GetIndexBlsWithBody(ctx context.Context, params *GetIndexBlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBls(ctx context.Context, params *GetIndexBlsParams, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBoschWithBody request with any body
	GetIndexBoschWithBody(ctx context.Context, params *GetIndexBoschParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBosch(ctx context.Context, params *GetIndexBoschParams, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBostonScientificWithBody request with any body
	GetIndexBostonScientificWithBody(ctx context.Context, params *GetIndexBostonScientificParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBostonScientific(ctx context.Context, params *GetIndexBostonScientificParams, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBotnetsWithBody request with any body
	GetIndexBotnetsWithBody(ctx context.Context, params *GetIndexBotnetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBotnets(ctx context.Context, params *GetIndexBotnetsParams, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCaCyberCentreWithBody request with any body
	GetIndexCaCyberCentreWithBody(ctx context.Context, params *GetIndexCaCyberCentreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCaCyberCentre(ctx context.Context, params *GetIndexCaCyberCentreParams, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCanvasWithBody request with any body
	GetIndexCanvasWithBody(ctx context.Context, params *GetIndexCanvasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCanvas(ctx context.Context, params *GetIndexCanvasParams, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCarestreamWithBody request with any body
	GetIndexCarestreamWithBody(ctx context.Context, params *GetIndexCarestreamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCarestream(ctx context.Context, params *GetIndexCarestreamParams, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCargoWithBody request with any body
	GetIndexCargoWithBody(ctx context.Context, params *GetIndexCargoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCargo(ctx context.Context, params *GetIndexCargoParams, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCarrierWithBody request with any body
	GetIndexCarrierWithBody(ctx context.Context, params *GetIndexCarrierParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCarrier(ctx context.Context, params *GetIndexCarrierParams, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCblMarinerWithBody request with any body
	GetIndexCblMarinerWithBody(ctx context.Context, params *GetIndexCblMarinerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCblMariner(ctx context.Context, params *GetIndexCblMarinerParams, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCentosWithBody request with any body
	GetIndexCentosWithBody(ctx context.Context, params *GetIndexCentosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCentos(ctx context.Context, params *GetIndexCentosParams, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertBeWithBody request with any body
	GetIndexCertBeWithBody(ctx context.Context, params *GetIndexCertBeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertBe(ctx context.Context, params *GetIndexCertBeParams, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertInWithBody request with any body
	GetIndexCertInWithBody(ctx context.Context, params *GetIndexCertInParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertIn(ctx context.Context, params *GetIndexCertInParams, body GetIndexCertInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertIrSecurityAlertsWithBody request with any body
	GetIndexCertIrSecurityAlertsWithBody(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertIrSecurityAlerts(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, body GetIndexCertIrSecurityAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertSeWithBody request with any body
	GetIndexCertSeWithBody(ctx context.Context, params *GetIndexCertSeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertSe(ctx context.Context, params *GetIndexCertSeParams, body GetIndexCertSeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertUaWithBody request with any body
	GetIndexCertUaWithBody(ctx context.Context, params *GetIndexCertUaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertUa(ctx context.Context, params *GetIndexCertUaParams, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCerteuWithBody request with any body
	GetIndexCerteuWithBody(ctx context.Context, params *GetIndexCerteuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCerteu(ctx context.Context, params *GetIndexCerteuParams, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertfrWithBody request with any body
	GetIndexCertfrWithBody(ctx context.Context, params *GetIndexCertfrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertfr(ctx context.Context, params *GetIndexCertfrParams, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexChainguardWithBody request with any body
	GetIndexChainguardWithBody(ctx context.Context, params *GetIndexChainguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexChainguard(ctx context.Context, params *GetIndexChainguardParams, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCheckpointWithBody request with any body
	GetIndexCheckpointWithBody(ctx context.Context, params *GetIndexCheckpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCheckpoint(ctx context.Context, params *GetIndexCheckpointParams, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexChromeWithBody request with any body
	GetIndexChromeWithBody(ctx context.Context, params *GetIndexChromeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexChrome(ctx context.Context, params *GetIndexChromeParams, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCisaAlertsWithBody request with any body
	GetIndexCisaAlertsWithBody(ctx context.Context, params *GetIndexCisaAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCisaAlerts(ctx context.Context, params *GetIndexCisaAlertsParams, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCisaKevWithBody request with any body
	GetIndexCisaKevWithBody(ctx context.Context, params *GetIndexCisaKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCisaKev(ctx context.Context, params *GetIndexCisaKevParams, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCiscoWithBody request with any body
	GetIndexCiscoWithBody(ctx context.Context, params *GetIndexCiscoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCisco(ctx context.Context, params *GetIndexCiscoParams, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCiscoTalosWithBody request with any body
	GetIndexCiscoTalosWithBody(ctx context.Context, params *GetIndexCiscoTalosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCiscoTalos(ctx context.Context, params *GetIndexCiscoTalosParams, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCitrixWithBody request with any body
	GetIndexCitrixWithBody(ctx context.Context, params *GetIndexCitrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCitrix(ctx context.Context, params *GetIndexCitrixParams, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexClarotyWithBody request with any body
	GetIndexClarotyWithBody(ctx context.Context, params *GetIndexClarotyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexClaroty(ctx context.Context, params *GetIndexClarotyParams, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCloudbeesWithBody request with any body
	GetIndexCloudbeesWithBody(ctx context.Context, params *GetIndexCloudbeesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCloudbees(ctx context.Context, params *GetIndexCloudbeesParams, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCloudvulndbWithBody request with any body
	GetIndexCloudvulndbWithBody(ctx context.Context, params *GetIndexCloudvulndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCloudvulndb(ctx context.Context, params *GetIndexCloudvulndbParams, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnnvdWithBody request with any body
	GetIndexCnnvdWithBody(ctx context.Context, params *GetIndexCnnvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnnvd(ctx context.Context, params *GetIndexCnnvdParams, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnvdBulletinsWithBody request with any body
	GetIndexCnvdBulletinsWithBody(ctx context.Context, params *GetIndexCnvdBulletinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnvdBulletins(ctx context.Context, params *GetIndexCnvdBulletinsParams, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnvdFlawsWithBody request with any body
	GetIndexCnvdFlawsWithBody(ctx context.Context, params *GetIndexCnvdFlawsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnvdFlaws(ctx context.Context, params *GetIndexCnvdFlawsParams, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCocoapodsWithBody request with any body
	GetIndexCocoapodsWithBody(ctx context.Context, params *GetIndexCocoapodsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCocoapods(ctx context.Context, params *GetIndexCocoapodsParams, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCodesysWithBody request with any body
	GetIndexCodesysWithBody(ctx context.Context, params *GetIndexCodesysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCodesys(ctx context.Context, params *GetIndexCodesysParams, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCompassSecurityWithBody request with any body
	GetIndexCompassSecurityWithBody(ctx context.Context, params *GetIndexCompassSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCompassSecurity(ctx context.Context, params *GetIndexCompassSecurityParams, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexComposerWithBody request with any body
	GetIndexComposerWithBody(ctx context.Context, params *GetIndexComposerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexComposer(ctx context.Context, params *GetIndexComposerParams, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexConanWithBody request with any body
	GetIndexConanWithBody(ctx context.Context, params *GetIndexConanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexConan(ctx context.Context, params *GetIndexConanParams, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCrestronWithBody request with any body
	GetIndexCrestronWithBody(ctx context.Context, params *GetIndexCrestronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCrestron(ctx context.Context, params *GetIndexCrestronParams, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCurlWithBody request with any body
	GetIndexCurlWithBody(ctx context.Context, params *GetIndexCurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCurl(ctx context.Context, params *GetIndexCurlParams, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCweWithBody request with any body
	GetIndexCweWithBody(ctx context.Context, params *GetIndexCweParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCwe(ctx context.Context, params *GetIndexCweParams, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDahuaWithBody request with any body
	GetIndexDahuaWithBody(ctx context.Context, params *GetIndexDahuaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDahua(ctx context.Context, params *GetIndexDahuaParams, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDassaultWithBody request with any body
	GetIndexDassaultWithBody(ctx context.Context, params *GetIndexDassaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDassault(ctx context.Context, params *GetIndexDassaultParams, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDebianWithBody request with any body
	GetIndexDebianWithBody(ctx context.Context, params *GetIndexDebianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDebian(ctx context.Context, params *GetIndexDebianParams, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDebianDsaWithBody request with any body
	GetIndexDebianDsaWithBody(ctx context.Context, params *GetIndexDebianDsaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDebianDsa(ctx context.Context, params *GetIndexDebianDsaParams, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDellWithBody request with any body
	GetIndexDellWithBody(ctx context.Context, params *GetIndexDellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDell(ctx context.Context, params *GetIndexDellParams, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDeltaWithBody request with any body
	GetIndexDeltaWithBody(ctx context.Context, params *GetIndexDeltaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDelta(ctx context.Context, params *GetIndexDeltaParams, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDjangoWithBody request with any body
	GetIndexDjangoWithBody(ctx context.Context, params *GetIndexDjangoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDjango(ctx context.Context, params *GetIndexDjangoParams, body GetIndexDjangoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDnnWithBody request with any body
	GetIndexDnnWithBody(ctx context.Context, params *GetIndexDnnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDnn(ctx context.Context, params *GetIndexDnnParams, body GetIndexDnnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDotcmsWithBody request with any body
	GetIndexDotcmsWithBody(ctx context.Context, params *GetIndexDotcmsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDotcms(ctx context.Context, params *GetIndexDotcmsParams, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDragosWithBody request with any body
	GetIndexDragosWithBody(ctx context.Context, params *GetIndexDragosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDragos(ctx context.Context, params *GetIndexDragosParams, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDraytekWithBody request with any body
	GetIndexDraytekWithBody(ctx context.Context, params *GetIndexDraytekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDraytek(ctx context.Context, params *GetIndexDraytekParams, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEatonWithBody request with any body
	GetIndexEatonWithBody(ctx context.Context, params *GetIndexEatonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEaton(ctx context.Context, params *GetIndexEatonParams, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexElasticWithBody request with any body
	GetIndexElasticWithBody(ctx context.Context, params *GetIndexElasticParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexElastic(ctx context.Context, params *GetIndexElasticParams, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexElspecWithBody request with any body
	GetIndexElspecWithBody(ctx context.Context, params *GetIndexElspecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexElspec(ctx context.Context, params *GetIndexElspecParams, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEmergingThreatsSnortWithBody request with any body
	GetIndexEmergingThreatsSnortWithBody(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEmergingThreatsSnort(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, body GetIndexEmergingThreatsSnortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEmersonWithBody request with any body
	GetIndexEmersonWithBody(ctx context.Context, params *GetIndexEmersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEmerson(ctx context.Context, params *GetIndexEmersonParams, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEolWithBody request with any body
	GetIndexEolWithBody(ctx context.Context, params *GetIndexEolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEol(ctx context.Context, params *GetIndexEolParams, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEpssWithBody request with any body
	GetIndexEpssWithBody(ctx context.Context, params *GetIndexEpssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEpss(ctx context.Context, params *GetIndexEpssParams, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExodusIntelWithBody request with any body
	GetIndexExodusIntelWithBody(ctx context.Context, params *GetIndexExodusIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExodusIntel(ctx context.Context, params *GetIndexExodusIntelParams, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitChainsWithBody request with any body
	GetIndexExploitChainsWithBody(ctx context.Context, params *GetIndexExploitChainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploitChains(ctx context.Context, params *GetIndexExploitChainsParams, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitdbWithBody request with any body
	GetIndexExploitdbWithBody(ctx context.Context, params *GetIndexExploitdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploitdb(ctx context.Context, params *GetIndexExploitdbParams, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitsWithBody request with any body
	GetIndexExploitsWithBody(ctx context.Context, params *GetIndexExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploits(ctx context.Context, params *GetIndexExploitsParams, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitsChangelogWithBody request with any body
	GetIndexExploitsChangelogWithBody(ctx context.Context, params *GetIndexExploitsChangelogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploitsChangelog(ctx context.Context, params *GetIndexExploitsChangelogParams, body GetIndexExploitsChangelogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFSecureWithBody request with any body
	GetIndexFSecureWithBody(ctx context.Context, params *GetIndexFSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFSecure(ctx context.Context, params *GetIndexFSecureParams, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFanucWithBody request with any body
	GetIndexFanucWithBody(ctx context.Context, params *GetIndexFanucParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFanuc(ctx context.Context, params *GetIndexFanucParams, body GetIndexFanucJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFastlyWithBody request with any body
	GetIndexFastlyWithBody(ctx context.Context, params *GetIndexFastlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFastly(ctx context.Context, params *GetIndexFastlyParams, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFedoraWithBody request with any body
	GetIndexFedoraWithBody(ctx context.Context, params *GetIndexFedoraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFedora(ctx context.Context, params *GetIndexFedoraParams, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFilecloudWithBody request with any body
	GetIndexFilecloudWithBody(ctx context.Context, params *GetIndexFilecloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFilecloud(ctx context.Context, params *GetIndexFilecloudParams, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFlattSecurityWithBody request with any body
	GetIndexFlattSecurityWithBody(ctx context.Context, params *GetIndexFlattSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFlattSecurity(ctx context.Context, params *GetIndexFlattSecurityParams, body GetIndexFlattSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexForgerockWithBody request with any body
	GetIndexForgerockWithBody(ctx context.Context, params *GetIndexForgerockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexForgerock(ctx context.Context, params *GetIndexForgerockParams, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFortinetWithBody request with any body
	GetIndexFortinetWithBody(ctx context.Context, params *GetIndexFortinetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFortinet(ctx context.Context, params *GetIndexFortinetParams, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFortinetIpsWithBody request with any body
	GetIndexFortinetIpsWithBody(ctx context.Context, params *GetIndexFortinetIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFortinetIps(ctx context.Context, params *GetIndexFortinetIpsParams, body GetIndexFortinetIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFoxitWithBody request with any body
	GetIndexFoxitWithBody(ctx context.Context, params *GetIndexFoxitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFoxit(ctx context.Context, params *GetIndexFoxitParams, body GetIndexFoxitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFreebsdWithBody request with any body
	GetIndexFreebsdWithBody(ctx context.Context, params *GetIndexFreebsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFreebsd(ctx context.Context, params *GetIndexFreebsdParams, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGallagherWithBody request with any body
	GetIndexGallagherWithBody(ctx context.Context, params *GetIndexGallagherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGallagher(ctx context.Context, params *GetIndexGallagherParams, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGcpWithBody request with any body
	GetIndexGcpWithBody(ctx context.Context, params *GetIndexGcpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGcp(ctx context.Context, params *GetIndexGcpParams, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGeGasWithBody request with any body
	GetIndexGeGasWithBody(ctx context.Context, params *GetIndexGeGasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGeGas(ctx context.Context, params *GetIndexGeGasParams, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGeHealthcareWithBody request with any body
	GetIndexGeHealthcareWithBody(ctx context.Context, params *GetIndexGeHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGeHealthcare(ctx context.Context, params *GetIndexGeHealthcareParams, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGemWithBody request with any body
	GetIndexGemWithBody(ctx context.Context, params *GetIndexGemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGem(ctx context.Context, params *GetIndexGemParams, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGenetecWithBody request with any body
	GetIndexGenetecWithBody(ctx context.Context, params *GetIndexGenetecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGenetec(ctx context.Context, params *GetIndexGenetecParams, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGigabyteWithBody request with any body
	GetIndexGigabyteWithBody(ctx context.Context, params *GetIndexGigabyteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGigabyte(ctx context.Context, params *GetIndexGigabyteParams, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGiteeExploitsWithBody request with any body
	GetIndexGiteeExploitsWithBody(ctx context.Context, params *GetIndexGiteeExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGiteeExploits(ctx context.Context, params *GetIndexGiteeExploitsParams, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGithubExploitsWithBody request with any body
	GetIndexGithubExploitsWithBody(ctx context.Context, params *GetIndexGithubExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGithubExploits(ctx context.Context, params *GetIndexGithubExploitsParams, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGithubSecurityAdvisoriesWithBody request with any body
	GetIndexGithubSecurityAdvisoriesWithBody(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGithubSecurityAdvisories(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGitlabAdvisoriesCommunityWithBody request with any body
	GetIndexGitlabAdvisoriesCommunityWithBody(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGitlabAdvisoriesCommunity(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGitlabExploitsWithBody request with any body
	GetIndexGitlabExploitsWithBody(ctx context.Context, params *GetIndexGitlabExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGitlabExploits(ctx context.Context, params *GetIndexGitlabExploitsParams, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGnutlsWithBody request with any body
	GetIndexGnutlsWithBody(ctx context.Context, params *GetIndexGnutlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGnutls(ctx context.Context, params *GetIndexGnutlsParams, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGolangWithBody request with any body
	GetIndexGolangWithBody(ctx context.Context, params *GetIndexGolangParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGolang(ctx context.Context, params *GetIndexGolangParams, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGoogle0dayItwWithBody request with any body
	GetIndexGoogle0dayItwWithBody(ctx context.Context, params *GetIndexGoogle0dayItwParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGoogle0dayItw(ctx context.Context, params *GetIndexGoogle0dayItwParams, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGoogleContainerOptimizedOsWithBody request with any body
	GetIndexGoogleContainerOptimizedOsWithBody(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGoogleContainerOptimizedOs(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGrafanaWithBody request with any body
	GetIndexGrafanaWithBody(ctx context.Context, params *GetIndexGrafanaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGrafana(ctx context.Context, params *GetIndexGrafanaParams, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGreynoiseMetadataWithBody request with any body
	GetIndexGreynoiseMetadataWithBody(ctx context.Context, params *GetIndexGreynoiseMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGreynoiseMetadata(ctx context.Context, params *GetIndexGreynoiseMetadataParams, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHackageWithBody request with any body
	GetIndexHackageWithBody(ctx context.Context, params *GetIndexHackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHackage(ctx context.Context, params *GetIndexHackageParams, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHarmonyosWithBody request with any body
	GetIndexHarmonyosWithBody(ctx context.Context, params *GetIndexHarmonyosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHarmonyos(ctx context.Context, params *GetIndexHarmonyosParams, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHashicorpWithBody request with any body
	GetIndexHashicorpWithBody(ctx context.Context, params *GetIndexHashicorpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHashicorp(ctx context.Context, params *GetIndexHashicorpParams, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHaskellSadbWithBody request with any body
	GetIndexHaskellSadbWithBody(ctx context.Context, params *GetIndexHaskellSadbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHaskellSadb(ctx context.Context, params *GetIndexHaskellSadbParams, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHclWithBody request with any body
	GetIndexHclWithBody(ctx context.Context, params *GetIndexHclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHcl(ctx context.Context, params *GetIndexHclParams, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHexWithBody request with any body
	GetIndexHexWithBody(ctx context.Context, params *GetIndexHexParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHex(ctx context.Context, params *GetIndexHexParams, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHikvisionWithBody request with any body
	GetIndexHikvisionWithBody(ctx context.Context, params *GetIndexHikvisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHikvision(ctx context.Context, params *GetIndexHikvisionParams, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHillromWithBody request with any body
	GetIndexHillromWithBody(ctx context.Context, params *GetIndexHillromParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHillrom(ctx context.Context, params *GetIndexHillromParams, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHitachiWithBody request with any body
	GetIndexHitachiWithBody(ctx context.Context, params *GetIndexHitachiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHitachi(ctx context.Context, params *GetIndexHitachiParams, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHitachiEnergyWithBody request with any body
	GetIndexHitachiEnergyWithBody(ctx context.Context, params *GetIndexHitachiEnergyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHitachiEnergy(ctx context.Context, params *GetIndexHitachiEnergyParams, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHkcertWithBody request with any body
	GetIndexHkcertWithBody(ctx context.Context, params *GetIndexHkcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHkcert(ctx context.Context, params *GetIndexHkcertParams, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHoneywellWithBody request with any body
	GetIndexHoneywellWithBody(ctx context.Context, params *GetIndexHoneywellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHoneywell(ctx context.Context, params *GetIndexHoneywellParams, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHpWithBody request with any body
	GetIndexHpWithBody(ctx context.Context, params *GetIndexHpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHp(ctx context.Context, params *GetIndexHpParams, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHuaweiEulerosWithBody request with any body
	GetIndexHuaweiEulerosWithBody(ctx context.Context, params *GetIndexHuaweiEulerosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHuaweiEuleros(ctx context.Context, params *GetIndexHuaweiEulerosParams, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHuaweiIpsWithBody request with any body
	GetIndexHuaweiIpsWithBody(ctx context.Context, params *GetIndexHuaweiIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHuaweiIps(ctx context.Context, params *GetIndexHuaweiIpsParams, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHuaweiPsirtWithBody request with any body
	GetIndexHuaweiPsirtWithBody(ctx context.Context, params *GetIndexHuaweiPsirtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHuaweiPsirt(ctx context.Context, params *GetIndexHuaweiPsirtParams, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIavaWithBody request with any body
	GetIndexIavaWithBody(ctx context.Context, params *GetIndexIavaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIava(ctx context.Context, params *GetIndexIavaParams, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIbmWithBody request with any body
	GetIndexIbmWithBody(ctx context.Context, params *GetIndexIbmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIbm(ctx context.Context, params *GetIndexIbmParams, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIdemiaWithBody request with any body
	GetIndexIdemiaWithBody(ctx context.Context, params *GetIndexIdemiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIdemia(ctx context.Context, params *GetIndexIdemiaParams, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIlAlertsWithBody request with any body
	GetIndexIlAlertsWithBody(ctx context.Context, params *GetIndexIlAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIlAlerts(ctx context.Context, params *GetIndexIlAlertsParams, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIlVulnerabilitiesWithBody request with any body
	GetIndexIlVulnerabilitiesWithBody(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIlVulnerabilities(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIncibeWithBody request with any body
	GetIndexIncibeWithBody(ctx context.Context, params *GetIndexIncibeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIncibe(ctx context.Context, params *GetIndexIncibeParams, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexInitialAccessWithBody request with any body
	GetIndexInitialAccessWithBody(ctx context.Context, params *GetIndexInitialAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexInitialAccess(ctx context.Context, params *GetIndexInitialAccessParams, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexInitialAccessGitWithBody request with any body
	GetIndexInitialAccessGitWithBody(ctx context.Context, params *GetIndexInitialAccessGitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexInitialAccessGit(ctx context.Context, params *GetIndexInitialAccessGitParams, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIntelWithBody request with any body
	GetIndexIntelWithBody(ctx context.Context, params *GetIndexIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIntel(ctx context.Context, params *GetIndexIntelParams, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel10dWithBody request with any body
	GetIndexIpintel10dWithBody(ctx context.Context, params *GetIndexIpintel10dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel10d(ctx context.Context, params *GetIndexIpintel10dParams, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel30dWithBody request with any body
	GetIndexIpintel30dWithBody(ctx context.Context, params *GetIndexIpintel30dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel30d(ctx context.Context, params *GetIndexIpintel30dParams, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel3dWithBody request with any body
	GetIndexIpintel3dWithBody(ctx context.Context, params *GetIndexIpintel3dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel3d(ctx context.Context, params *GetIndexIpintel3dParams, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel90dWithBody request with any body
	GetIndexIpintel90dWithBody(ctx context.Context, params *GetIndexIpintel90dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel90d(ctx context.Context, params *GetIndexIpintel90dParams, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIstioWithBody request with any body
	GetIndexIstioWithBody(ctx context.Context, params *GetIndexIstioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIstio(ctx context.Context, params *GetIndexIstioParams, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIvantiWithBody request with any body
	GetIndexIvantiWithBody(ctx context.Context, params *GetIndexIvantiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIvanti(ctx context.Context, params *GetIndexIvantiParams, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIvantiRssWithBody request with any body
	GetIndexIvantiRssWithBody(ctx context.Context, params *GetIndexIvantiRssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIvantiRss(ctx context.Context, params *GetIndexIvantiRssParams, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJenkinsWithBody request with any body
	GetIndexJenkinsWithBody(ctx context.Context, params *GetIndexJenkinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJenkins(ctx context.Context, params *GetIndexJenkinsParams, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJetbrainsWithBody request with any body
	GetIndexJetbrainsWithBody(ctx context.Context, params *GetIndexJetbrainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJetbrains(ctx context.Context, params *GetIndexJetbrainsParams, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJfrogWithBody request with any body
	GetIndexJfrogWithBody(ctx context.Context, params *GetIndexJfrogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJfrog(ctx context.Context, params *GetIndexJfrogParams, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJnjWithBody request with any body
	GetIndexJnjWithBody(ctx context.Context, params *GetIndexJnjParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJnj(ctx context.Context, params *GetIndexJnjParams, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJvnWithBody request with any body
	GetIndexJvnWithBody(ctx context.Context, params *GetIndexJvnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJvn(ctx context.Context, params *GetIndexJvnParams, body GetIndexJvnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJvndbWithBody request with any body
	GetIndexJvndbWithBody(ctx context.Context, params *GetIndexJvndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJvndb(ctx context.Context, params *GetIndexJvndbParams, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKasperskyIcsCertWithBody request with any body
	GetIndexKasperskyIcsCertWithBody(ctx context.Context, params *GetIndexKasperskyIcsCertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKasperskyIcsCert(ctx context.Context, params *GetIndexKasperskyIcsCertParams, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKorelogicWithBody request with any body
	GetIndexKorelogicWithBody(ctx context.Context, params *GetIndexKorelogicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKorelogic(ctx context.Context, params *GetIndexKorelogicParams, body GetIndexKorelogicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKrcertSecurityNoticesWithBody request with any body
	GetIndexKrcertSecurityNoticesWithBody(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKrcertSecurityNotices(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKrcertVulnerabilitiesWithBody request with any body
	GetIndexKrcertVulnerabilitiesWithBody(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKrcertVulnerabilities(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKubernetesWithBody request with any body
	GetIndexKubernetesWithBody(ctx context.Context, params *GetIndexKubernetesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKubernetes(ctx context.Context, params *GetIndexKubernetesParams, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLenovoWithBody request with any body
	GetIndexLenovoWithBody(ctx context.Context, params *GetIndexLenovoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLenovo(ctx context.Context, params *GetIndexLenovoParams, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLexmarkWithBody request with any body
	GetIndexLexmarkWithBody(ctx context.Context, params *GetIndexLexmarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLexmark(ctx context.Context, params *GetIndexLexmarkParams, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLgWithBody request with any body
	GetIndexLgWithBody(ctx context.Context, params *GetIndexLgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLg(ctx context.Context, params *GetIndexLgParams, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLibreOfficeWithBody request with any body
	GetIndexLibreOfficeWithBody(ctx context.Context, params *GetIndexLibreOfficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLibreOffice(ctx context.Context, params *GetIndexLibreOfficeParams, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLinuxWithBody request with any body
	GetIndexLinuxWithBody(ctx context.Context, params *GetIndexLinuxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLinux(ctx context.Context, params *GetIndexLinuxParams, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMFilesWithBody request with any body
	GetIndexMFilesWithBody(ctx context.Context, params *GetIndexMFilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMFiles(ctx context.Context, params *GetIndexMFilesParams, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMacertWithBody request with any body
	GetIndexMacertWithBody(ctx context.Context, params *GetIndexMacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMacert(ctx context.Context, params *GetIndexMacertParams, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexManageengineWithBody request with any body
	GetIndexManageengineWithBody(ctx context.Context, params *GetIndexManageengineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexManageengine(ctx context.Context, params *GetIndexManageengineParams, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMavenWithBody request with any body
	GetIndexMavenWithBody(ctx context.Context, params *GetIndexMavenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMaven(ctx context.Context, params *GetIndexMavenParams, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMbedTlsWithBody request with any body
	GetIndexMbedTlsWithBody(ctx context.Context, params *GetIndexMbedTlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMbedTls(ctx context.Context, params *GetIndexMbedTlsParams, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMediatekWithBody request with any body
	GetIndexMediatekWithBody(ctx context.Context, params *GetIndexMediatekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMediatek(ctx context.Context, params *GetIndexMediatekParams, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMedtronicWithBody request with any body
	GetIndexMedtronicWithBody(ctx context.Context, params *GetIndexMedtronicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMedtronic(ctx context.Context, params *GetIndexMedtronicParams, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMendixWithBody request with any body
	GetIndexMendixWithBody(ctx context.Context, params *GetIndexMendixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMendix(ctx context.Context, params *GetIndexMendixParams, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMetasploitWithBody request with any body
	GetIndexMetasploitWithBody(ctx context.Context, params *GetIndexMetasploitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMetasploit(ctx context.Context, params *GetIndexMetasploitParams, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMicrosoftCvrfWithBody request with any body
	GetIndexMicrosoftCvrfWithBody(ctx context.Context, params *GetIndexMicrosoftCvrfParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMicrosoftCvrf(ctx context.Context, params *GetIndexMicrosoftCvrfParams, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMicrosoftKbWithBody request with any body
	GetIndexMicrosoftKbWithBody(ctx context.Context, params *GetIndexMicrosoftKbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMicrosoftKb(ctx context.Context, params *GetIndexMicrosoftKbParams, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMikrotikWithBody request with any body
	GetIndexMikrotikWithBody(ctx context.Context, params *GetIndexMikrotikParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMikrotik(ctx context.Context, params *GetIndexMikrotikParams, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMindrayWithBody request with any body
	GetIndexMindrayWithBody(ctx context.Context, params *GetIndexMindrayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMindray(ctx context.Context, params *GetIndexMindrayParams, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMispThreatActorsWithBody request with any body
	GetIndexMispThreatActorsWithBody(ctx context.Context, params *GetIndexMispThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMispThreatActors(ctx context.Context, params *GetIndexMispThreatActorsParams, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitelWithBody request with any body
	GetIndexMitelWithBody(ctx context.Context, params *GetIndexMitelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitel(ctx context.Context, params *GetIndexMitelParams, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitreAttackCveWithBody request with any body
	GetIndexMitreAttackCveWithBody(ctx context.Context, params *GetIndexMitreAttackCveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitreAttackCve(ctx context.Context, params *GetIndexMitreAttackCveParams, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitreCvelistV5WithBody request with any body
	GetIndexMitreCvelistV5WithBody(ctx context.Context, params *GetIndexMitreCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitreCvelistV5(ctx context.Context, params *GetIndexMitreCvelistV5Params, body GetIndexMitreCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitsubishiElectricWithBody request with any body
	GetIndexMitsubishiElectricWithBody(ctx context.Context, params *GetIndexMitsubishiElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitsubishiElectric(ctx context.Context, params *GetIndexMitsubishiElectricParams, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMongodbWithBody request with any body
	GetIndexMongodbWithBody(ctx context.Context, params *GetIndexMongodbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMongodb(ctx context.Context, params *GetIndexMongodbParams, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMoxaWithBody request with any body
	GetIndexMoxaWithBody(ctx context.Context, params *GetIndexMoxaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMoxa(ctx context.Context, params *GetIndexMoxaParams, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMozillaWithBody request with any body
	GetIndexMozillaWithBody(ctx context.Context, params *GetIndexMozillaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMozilla(ctx context.Context, params *GetIndexMozillaParams, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNaverWithBody request with any body
	GetIndexNaverWithBody(ctx context.Context, params *GetIndexNaverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNaver(ctx context.Context, params *GetIndexNaverParams, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNcscWithBody request with any body
	GetIndexNcscWithBody(ctx context.Context, params *GetIndexNcscParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNcsc(ctx context.Context, params *GetIndexNcscParams, body GetIndexNcscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNcscCvesWithBody request with any body
	GetIndexNcscCvesWithBody(ctx context.Context, params *GetIndexNcscCvesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNcscCves(ctx context.Context, params *GetIndexNcscCvesParams, body GetIndexNcscCvesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNecWithBody request with any body
	GetIndexNecWithBody(ctx context.Context, params *GetIndexNecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNec(ctx context.Context, params *GetIndexNecParams, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetappWithBody request with any body
	GetIndexNetappWithBody(ctx context.Context, params *GetIndexNetappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetapp(ctx context.Context, params *GetIndexNetappParams, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetgateWithBody request with any body
	GetIndexNetgateWithBody(ctx context.Context, params *GetIndexNetgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetgate(ctx context.Context, params *GetIndexNetgateParams, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetgearWithBody request with any body
	GetIndexNetgearWithBody(ctx context.Context, params *GetIndexNetgearParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetgear(ctx context.Context, params *GetIndexNetgearParams, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetskopeWithBody request with any body
	GetIndexNetskopeWithBody(ctx context.Context, params *GetIndexNetskopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetskope(ctx context.Context, params *GetIndexNetskopeParams, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNginxWithBody request with any body
	GetIndexNginxWithBody(ctx context.Context, params *GetIndexNginxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNginx(ctx context.Context, params *GetIndexNginxParams, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNhsWithBody request with any body
	GetIndexNhsWithBody(ctx context.Context, params *GetIndexNhsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNhs(ctx context.Context, params *GetIndexNhsParams, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNiWithBody request with any body
	GetIndexNiWithBody(ctx context.Context, params *GetIndexNiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNi(ctx context.Context, params *GetIndexNiParams, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNistNvdWithBody request with any body
	GetIndexNistNvdWithBody(ctx context.Context, params *GetIndexNistNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNistNvd(ctx context.Context, params *GetIndexNistNvdParams, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNistNvd2WithBody request with any body
	GetIndexNistNvd2WithBody(ctx context.Context, params *GetIndexNistNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNistNvd2(ctx context.Context, params *GetIndexNistNvd2Params, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNistNvd2CpematchWithBody request with any body
	GetIndexNistNvd2CpematchWithBody(ctx context.Context, params *GetIndexNistNvd2CpematchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNistNvd2Cpematch(ctx context.Context, params *GetIndexNistNvd2CpematchParams, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNodeSecurityWithBody request with any body
	GetIndexNodeSecurityWithBody(ctx context.Context, params *GetIndexNodeSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNodeSecurity(ctx context.Context, params *GetIndexNodeSecurityParams, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNodejsWithBody request with any body
	GetIndexNodejsWithBody(ctx context.Context, params *GetIndexNodejsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNodejs(ctx context.Context, params *GetIndexNodejsParams, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNokiaWithBody request with any body
	GetIndexNokiaWithBody(ctx context.Context, params *GetIndexNokiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNokia(ctx context.Context, params *GetIndexNokiaParams, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNozomiWithBody request with any body
	GetIndexNozomiWithBody(ctx context.Context, params *GetIndexNozomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNozomi(ctx context.Context, params *GetIndexNozomiParams, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNpmWithBody request with any body
	GetIndexNpmWithBody(ctx context.Context, params *GetIndexNpmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNpm(ctx context.Context, params *GetIndexNpmParams, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNtpWithBody request with any body
	GetIndexNtpWithBody(ctx context.Context, params *GetIndexNtpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNtp(ctx context.Context, params *GetIndexNtpParams, body GetIndexNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNugetWithBody request with any body
	GetIndexNugetWithBody(ctx context.Context, params *GetIndexNugetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNuget(ctx context.Context, params *GetIndexNugetParams, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNvidiaWithBody request with any body
	GetIndexNvidiaWithBody(ctx context.Context, params *GetIndexNvidiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNvidia(ctx context.Context, params *GetIndexNvidiaParams, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNzAdvisoriesWithBody request with any body
	GetIndexNzAdvisoriesWithBody(ctx context.Context, params *GetIndexNzAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNzAdvisories(ctx context.Context, params *GetIndexNzAdvisoriesParams, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOctopusDeployWithBody request with any body
	GetIndexOctopusDeployWithBody(ctx context.Context, params *GetIndexOctopusDeployParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOctopusDeploy(ctx context.Context, params *GetIndexOctopusDeployParams, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOktaWithBody request with any body
	GetIndexOktaWithBody(ctx context.Context, params *GetIndexOktaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOkta(ctx context.Context, params *GetIndexOktaParams, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOmronWithBody request with any body
	GetIndexOmronWithBody(ctx context.Context, params *GetIndexOmronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOmron(ctx context.Context, params *GetIndexOmronParams, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOneEWithBody request with any body
	GetIndexOneEWithBody(ctx context.Context, params *GetIndexOneEParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOneE(ctx context.Context, params *GetIndexOneEParams, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpamWithBody request with any body
	GetIndexOpamWithBody(ctx context.Context, params *GetIndexOpamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpam(ctx context.Context, params *GetIndexOpamParams, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenCvdbWithBody request with any body
	GetIndexOpenCvdbWithBody(ctx context.Context, params *GetIndexOpenCvdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenCvdb(ctx context.Context, params *GetIndexOpenCvdbParams, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenbsdWithBody request with any body
	GetIndexOpenbsdWithBody(ctx context.Context, params *GetIndexOpenbsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenbsd(ctx context.Context, params *GetIndexOpenbsdParams, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpensshWithBody request with any body
	GetIndexOpensshWithBody(ctx context.Context, params *GetIndexOpensshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenssh(ctx context.Context, params *GetIndexOpensshParams, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpensslSecadvWithBody request with any body
	GetIndexOpensslSecadvWithBody(ctx context.Context, params *GetIndexOpensslSecadvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpensslSecadv(ctx context.Context, params *GetIndexOpensslSecadvParams, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenstackWithBody request with any body
	GetIndexOpenstackWithBody(ctx context.Context, params *GetIndexOpenstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenstack(ctx context.Context, params *GetIndexOpenstackParams, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenwrtWithBody request with any body
	GetIndexOpenwrtWithBody(ctx context.Context, params *GetIndexOpenwrtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenwrt(ctx context.Context, params *GetIndexOpenwrtParams, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOracleWithBody request with any body
	GetIndexOracleWithBody(ctx context.Context, params *GetIndexOracleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOracle(ctx context.Context, params *GetIndexOracleParams, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOracleCpuWithBody request with any body
	GetIndexOracleCpuWithBody(ctx context.Context, params *GetIndexOracleCpuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOracleCpu(ctx context.Context, params *GetIndexOracleCpuParams, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOracleCpuCsafWithBody request with any body
	GetIndexOracleCpuCsafWithBody(ctx context.Context, params *GetIndexOracleCpuCsafParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOracleCpuCsaf(ctx context.Context, params *GetIndexOracleCpuCsafParams, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOsvWithBody request with any body
	GetIndexOsvWithBody(ctx context.Context, params *GetIndexOsvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOsv(ctx context.Context, params *GetIndexOsvParams, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOtrsWithBody request with any body
	GetIndexOtrsWithBody(ctx context.Context, params *GetIndexOtrsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOtrs(ctx context.Context, params *GetIndexOtrsParams, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOwncloudWithBody request with any body
	GetIndexOwncloudWithBody(ctx context.Context, params *GetIndexOwncloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOwncloud(ctx context.Context, params *GetIndexOwncloudParams, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPalantirWithBody request with any body
	GetIndexPalantirWithBody(ctx context.Context, params *GetIndexPalantirParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPalantir(ctx context.Context, params *GetIndexPalantirParams, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPaloAltoWithBody request with any body
	GetIndexPaloAltoWithBody(ctx context.Context, params *GetIndexPaloAltoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPaloAlto(ctx context.Context, params *GetIndexPaloAltoParams, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPanasonicWithBody request with any body
	GetIndexPanasonicWithBody(ctx context.Context, params *GetIndexPanasonicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPanasonic(ctx context.Context, params *GetIndexPanasonicParams, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPapercutWithBody request with any body
	GetIndexPapercutWithBody(ctx context.Context, params *GetIndexPapercutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPapercut(ctx context.Context, params *GetIndexPapercutParams, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPegaWithBody request with any body
	GetIndexPegaWithBody(ctx context.Context, params *GetIndexPegaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPega(ctx context.Context, params *GetIndexPegaParams, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPhilipsWithBody request with any body
	GetIndexPhilipsWithBody(ctx context.Context, params *GetIndexPhilipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPhilips(ctx context.Context, params *GetIndexPhilipsParams, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPhoenixContactWithBody request with any body
	GetIndexPhoenixContactWithBody(ctx context.Context, params *GetIndexPhoenixContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPhoenixContact(ctx context.Context, params *GetIndexPhoenixContactParams, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPhpMyAdminWithBody request with any body
	GetIndexPhpMyAdminWithBody(ctx context.Context, params *GetIndexPhpMyAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPhpMyAdmin(ctx context.Context, params *GetIndexPhpMyAdminParams, body GetIndexPhpMyAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPostgressqlWithBody request with any body
	GetIndexPostgressqlWithBody(ctx context.Context, params *GetIndexPostgressqlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPostgressql(ctx context.Context, params *GetIndexPostgressqlParams, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPowerdnsWithBody request with any body
	GetIndexPowerdnsWithBody(ctx context.Context, params *GetIndexPowerdnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPowerdns(ctx context.Context, params *GetIndexPowerdnsParams, body GetIndexPowerdnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexProgressWithBody request with any body
	GetIndexProgressWithBody(ctx context.Context, params *GetIndexProgressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexProgress(ctx context.Context, params *GetIndexProgressParams, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexProofpointWithBody request with any body
	GetIndexProofpointWithBody(ctx context.Context, params *GetIndexProofpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexProofpoint(ctx context.Context, params *GetIndexProofpointParams, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPtcWithBody request with any body
	GetIndexPtcWithBody(ctx context.Context, params *GetIndexPtcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPtc(ctx context.Context, params *GetIndexPtcParams, body GetIndexPtcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPubWithBody request with any body
	GetIndexPubWithBody(ctx context.Context, params *GetIndexPubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPub(ctx context.Context, params *GetIndexPubParams, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPureStorageWithBody request with any body
	GetIndexPureStorageWithBody(ctx context.Context, params *GetIndexPureStorageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPureStorage(ctx context.Context, params *GetIndexPureStorageParams, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPypaAdvisoriesWithBody request with any body
	GetIndexPypaAdvisoriesWithBody(ctx context.Context, params *GetIndexPypaAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPypaAdvisories(ctx context.Context, params *GetIndexPypaAdvisoriesParams, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPypiWithBody request with any body
	GetIndexPypiWithBody(ctx context.Context, params *GetIndexPypiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPypi(ctx context.Context, params *GetIndexPypiParams, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQnapWithBody request with any body
	GetIndexQnapWithBody(ctx context.Context, params *GetIndexQnapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQnap(ctx context.Context, params *GetIndexQnapParams, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQualcommWithBody request with any body
	GetIndexQualcommWithBody(ctx context.Context, params *GetIndexQualcommParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQualcomm(ctx context.Context, params *GetIndexQualcommParams, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQualysWithBody request with any body
	GetIndexQualysWithBody(ctx context.Context, params *GetIndexQualysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQualys(ctx context.Context, params *GetIndexQualysParams, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQubesQsbWithBody request with any body
	GetIndexQubesQsbWithBody(ctx context.Context, params *GetIndexQubesQsbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQubesQsb(ctx context.Context, params *GetIndexQubesQsbParams, body GetIndexQubesQsbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRansomwareWithBody request with any body
	GetIndexRansomwareWithBody(ctx context.Context, params *GetIndexRansomwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRansomware(ctx context.Context, params *GetIndexRansomwareParams, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRedhatWithBody request with any body
	GetIndexRedhatWithBody(ctx context.Context, params *GetIndexRedhatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRedhat(ctx context.Context, params *GetIndexRedhatParams, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRenesasWithBody request with any body
	GetIndexRenesasWithBody(ctx context.Context, params *GetIndexRenesasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRenesas(ctx context.Context, params *GetIndexRenesasParams, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexReviveWithBody request with any body
	GetIndexReviveWithBody(ctx context.Context, params *GetIndexReviveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRevive(ctx context.Context, params *GetIndexReviveParams, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRockwellWithBody request with any body
	GetIndexRockwellWithBody(ctx context.Context, params *GetIndexRockwellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRockwell(ctx context.Context, params *GetIndexRockwellParams, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRockyWithBody request with any body
	GetIndexRockyWithBody(ctx context.Context, params *GetIndexRockyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRocky(ctx context.Context, params *GetIndexRockyParams, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRockyErrataWithBody request with any body
	GetIndexRockyErrataWithBody(ctx context.Context, params *GetIndexRockyErrataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRockyErrata(ctx context.Context, params *GetIndexRockyErrataParams, body GetIndexRockyErrataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRuckusWithBody request with any body
	GetIndexRuckusWithBody(ctx context.Context, params *GetIndexRuckusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRuckus(ctx context.Context, params *GetIndexRuckusParams, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRustsecAdvisoriesWithBody request with any body
	GetIndexRustsecAdvisoriesWithBody(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRustsecAdvisories(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSacertWithBody request with any body
	GetIndexSacertWithBody(ctx context.Context, params *GetIndexSacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSacert(ctx context.Context, params *GetIndexSacertParams, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSaintWithBody request with any body
	GetIndexSaintWithBody(ctx context.Context, params *GetIndexSaintParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSaint(ctx context.Context, params *GetIndexSaintParams, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSalesforceWithBody request with any body
	GetIndexSalesforceWithBody(ctx context.Context, params *GetIndexSalesforceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSalesforce(ctx context.Context, params *GetIndexSalesforceParams, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSambaWithBody request with any body
	GetIndexSambaWithBody(ctx context.Context, params *GetIndexSambaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSamba(ctx context.Context, params *GetIndexSambaParams, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSapWithBody request with any body
	GetIndexSapWithBody(ctx context.Context, params *GetIndexSapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSap(ctx context.Context, params *GetIndexSapParams, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSchneiderElectricWithBody request with any body
	GetIndexSchneiderElectricWithBody(ctx context.Context, params *GetIndexSchneiderElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSchneiderElectric(ctx context.Context, params *GetIndexSchneiderElectricParams, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSecConsultWithBody request with any body
	GetIndexSecConsultWithBody(ctx context.Context, params *GetIndexSecConsultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSecConsult(ctx context.Context, params *GetIndexSecConsultParams, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSecuritylabWithBody request with any body
	GetIndexSecuritylabWithBody(ctx context.Context, params *GetIndexSecuritylabParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSecuritylab(ctx context.Context, params *GetIndexSecuritylabParams, body GetIndexSecuritylabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSeebugWithBody request with any body
	GetIndexSeebugWithBody(ctx context.Context, params *GetIndexSeebugParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSeebug(ctx context.Context, params *GetIndexSeebugParams, body GetIndexSeebugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSelWithBody request with any body
	GetIndexSelWithBody(ctx context.Context, params *GetIndexSelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSel(ctx context.Context, params *GetIndexSelParams, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSentineloneWithBody request with any body
	GetIndexSentineloneWithBody(ctx context.Context, params *GetIndexSentineloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSentinelone(ctx context.Context, params *GetIndexSentineloneParams, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexServicenowWithBody request with any body
	GetIndexServicenowWithBody(ctx context.Context, params *GetIndexServicenowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexServicenow(ctx context.Context, params *GetIndexServicenowParams, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexShadowserverExploitedWithBody request with any body
	GetIndexShadowserverExploitedWithBody(ctx context.Context, params *GetIndexShadowserverExploitedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexShadowserverExploited(ctx context.Context, params *GetIndexShadowserverExploitedParams, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexShielderWithBody request with any body
	GetIndexShielderWithBody(ctx context.Context, params *GetIndexShielderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexShielder(ctx context.Context, params *GetIndexShielderParams, body GetIndexShielderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSickWithBody request with any body
	GetIndexSickWithBody(ctx context.Context, params *GetIndexSickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSick(ctx context.Context, params *GetIndexSickParams, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSiemensWithBody request with any body
	GetIndexSiemensWithBody(ctx context.Context, params *GetIndexSiemensParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSiemens(ctx context.Context, params *GetIndexSiemensParams, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSierraWirelessWithBody request with any body
	GetIndexSierraWirelessWithBody(ctx context.Context, params *GetIndexSierraWirelessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSierraWireless(ctx context.Context, params *GetIndexSierraWirelessParams, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSigmaRulesWithBody request with any body
	GetIndexSigmaRulesWithBody(ctx context.Context, params *GetIndexSigmaRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSigmaRules(ctx context.Context, params *GetIndexSigmaRulesParams, body GetIndexSigmaRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSingcertWithBody request with any body
	GetIndexSingcertWithBody(ctx context.Context, params *GetIndexSingcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSingcert(ctx context.Context, params *GetIndexSingcertParams, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSlackwareWithBody request with any body
	GetIndexSlackwareWithBody(ctx context.Context, params *GetIndexSlackwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSlackware(ctx context.Context, params *GetIndexSlackwareParams, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSolarwindsWithBody request with any body
	GetIndexSolarwindsWithBody(ctx context.Context, params *GetIndexSolarwindsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSolarwinds(ctx context.Context, params *GetIndexSolarwindsParams, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSolrWithBody request with any body
	GetIndexSolrWithBody(ctx context.Context, params *GetIndexSolrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSolr(ctx context.Context, params *GetIndexSolrParams, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSonicwallWithBody request with any body
	GetIndexSonicwallWithBody(ctx context.Context, params *GetIndexSonicwallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSonicwall(ctx context.Context, params *GetIndexSonicwallParams, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSpacelabsHealthcareWithBody request with any body
	GetIndexSpacelabsHealthcareWithBody(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSpacelabsHealthcare(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSplunkWithBody request with any body
	GetIndexSplunkWithBody(ctx context.Context, params *GetIndexSplunkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSplunk(ctx context.Context, params *GetIndexSplunkParams, body GetIndexSplunkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSpringWithBody request with any body
	GetIndexSpringWithBody(ctx context.Context, params *GetIndexSpringParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSpring(ctx context.Context, params *GetIndexSpringParams, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSsdWithBody request with any body
	GetIndexSsdWithBody(ctx context.Context, params *GetIndexSsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSsd(ctx context.Context, params *GetIndexSsdParams, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexStormshieldWithBody request with any body
	GetIndexStormshieldWithBody(ctx context.Context, params *GetIndexStormshieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexStormshield(ctx context.Context, params *GetIndexStormshieldParams, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexStrykerWithBody request with any body
	GetIndexStrykerWithBody(ctx context.Context, params *GetIndexStrykerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexStryker(ctx context.Context, params *GetIndexStrykerParams, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSudoWithBody request with any body
	GetIndexSudoWithBody(ctx context.Context, params *GetIndexSudoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSudo(ctx context.Context, params *GetIndexSudoParams, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSuseWithBody request with any body
	GetIndexSuseWithBody(ctx context.Context, params *GetIndexSuseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSuse(ctx context.Context, params *GetIndexSuseParams, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSwiftWithBody request with any body
	GetIndexSwiftWithBody(ctx context.Context, params *GetIndexSwiftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSwift(ctx context.Context, params *GetIndexSwiftParams, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSwisslogHealthcareWithBody request with any body
	GetIndexSwisslogHealthcareWithBody(ctx context.Context, params *GetIndexSwisslogHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSwisslogHealthcare(ctx context.Context, params *GetIndexSwisslogHealthcareParams, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSymfonyWithBody request with any body
	GetIndexSymfonyWithBody(ctx context.Context, params *GetIndexSymfonyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSymfony(ctx context.Context, params *GetIndexSymfonyParams, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSynacktivWithBody request with any body
	GetIndexSynacktivWithBody(ctx context.Context, params *GetIndexSynacktivParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSynacktiv(ctx context.Context, params *GetIndexSynacktivParams, body GetIndexSynacktivJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSyncrosoftWithBody request with any body
	GetIndexSyncrosoftWithBody(ctx context.Context, params *GetIndexSyncrosoftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSyncrosoft(ctx context.Context, params *GetIndexSyncrosoftParams, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSynologyWithBody request with any body
	GetIndexSynologyWithBody(ctx context.Context, params *GetIndexSynologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSynology(ctx context.Context, params *GetIndexSynologyParams, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTeamviewerWithBody request with any body
	GetIndexTeamviewerWithBody(ctx context.Context, params *GetIndexTeamviewerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTeamviewer(ctx context.Context, params *GetIndexTeamviewerParams, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTenableResearchAdvisoriesWithBody request with any body
	GetIndexTenableResearchAdvisoriesWithBody(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTenableResearchAdvisories(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, body GetIndexTenableResearchAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTencentWithBody request with any body
	GetIndexTencentWithBody(ctx context.Context, params *GetIndexTencentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTencent(ctx context.Context, params *GetIndexTencentParams, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexThalesWithBody request with any body
	GetIndexThalesWithBody(ctx context.Context, params *GetIndexThalesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexThales(ctx context.Context, params *GetIndexThalesParams, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexThemissinglinkWithBody request with any body
	GetIndexThemissinglinkWithBody(ctx context.Context, params *GetIndexThemissinglinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexThemissinglink(ctx context.Context, params *GetIndexThemissinglinkParams, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexThreatActorsWithBody request with any body
	GetIndexThreatActorsWithBody(ctx context.Context, params *GetIndexThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexThreatActors(ctx context.Context, params *GetIndexThreatActorsParams, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTiWithBody request with any body
	GetIndexTiWithBody(ctx context.Context, params *GetIndexTiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTi(ctx context.Context, params *GetIndexTiParams, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTibcoWithBody request with any body
	GetIndexTibcoWithBody(ctx context.Context, params *GetIndexTibcoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTibco(ctx context.Context, params *GetIndexTibcoParams, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTpLinkWithBody request with any body
	GetIndexTpLinkWithBody(ctx context.Context, params *GetIndexTpLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTpLink(ctx context.Context, params *GetIndexTpLinkParams, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTraneTechnologyWithBody request with any body
	GetIndexTraneTechnologyWithBody(ctx context.Context, params *GetIndexTraneTechnologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTraneTechnology(ctx context.Context, params *GetIndexTraneTechnologyParams, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTrendmicroWithBody request with any body
	GetIndexTrendmicroWithBody(ctx context.Context, params *GetIndexTrendmicroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTrendmicro(ctx context.Context, params *GetIndexTrendmicroParams, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTrustwaveWithBody request with any body
	GetIndexTrustwaveWithBody(ctx context.Context, params *GetIndexTrustwaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTrustwave(ctx context.Context, params *GetIndexTrustwaveParams, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTwcertWithBody request with any body
	GetIndexTwcertWithBody(ctx context.Context, params *GetIndexTwcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTwcert(ctx context.Context, params *GetIndexTwcertParams, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUbiquitiWithBody request with any body
	GetIndexUbiquitiWithBody(ctx context.Context, params *GetIndexUbiquitiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUbiquiti(ctx context.Context, params *GetIndexUbiquitiParams, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUbuntuWithBody request with any body
	GetIndexUbuntuWithBody(ctx context.Context, params *GetIndexUbuntuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUbuntu(ctx context.Context, params *GetIndexUbuntuParams, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUnifyWithBody request with any body
	GetIndexUnifyWithBody(ctx context.Context, params *GetIndexUnifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUnify(ctx context.Context, params *GetIndexUnifyParams, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUnisocWithBody request with any body
	GetIndexUnisocWithBody(ctx context.Context, params *GetIndexUnisocParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUnisoc(ctx context.Context, params *GetIndexUnisocParams, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUsdWithBody request with any body
	GetIndexUsdWithBody(ctx context.Context, params *GetIndexUsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUsd(ctx context.Context, params *GetIndexUsdParams, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUsomWithBody request with any body
	GetIndexUsomWithBody(ctx context.Context, params *GetIndexUsomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUsom(ctx context.Context, params *GetIndexUsomParams, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVandykeWithBody request with any body
	GetIndexVandykeWithBody(ctx context.Context, params *GetIndexVandykeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVandyke(ctx context.Context, params *GetIndexVandykeParams, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVapidlabsWithBody request with any body
	GetIndexVapidlabsWithBody(ctx context.Context, params *GetIndexVapidlabsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVapidlabs(ctx context.Context, params *GetIndexVapidlabsParams, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVcCpeDictionaryWithBody request with any body
	GetIndexVcCpeDictionaryWithBody(ctx context.Context, params *GetIndexVcCpeDictionaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVcCpeDictionary(ctx context.Context, params *GetIndexVcCpeDictionaryParams, body GetIndexVcCpeDictionaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVdeWithBody request with any body
	GetIndexVdeWithBody(ctx context.Context, params *GetIndexVdeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVde(ctx context.Context, params *GetIndexVdeParams, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVeeamWithBody request with any body
	GetIndexVeeamWithBody(ctx context.Context, params *GetIndexVeeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVeeam(ctx context.Context, params *GetIndexVeeamParams, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVeritasWithBody request with any body
	GetIndexVeritasWithBody(ctx context.Context, params *GetIndexVeritasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVeritas(ctx context.Context, params *GetIndexVeritasParams, body GetIndexVeritasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVmwareWithBody request with any body
	GetIndexVmwareWithBody(ctx context.Context, params *GetIndexVmwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVmware(ctx context.Context, params *GetIndexVmwareParams, body GetIndexVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVoidsecWithBody request with any body
	GetIndexVoidsecWithBody(ctx context.Context, params *GetIndexVoidsecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVoidsec(ctx context.Context, params *GetIndexVoidsecParams, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckWithBody request with any body
	GetIndexVulncheckWithBody(ctx context.Context, params *GetIndexVulncheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheck(ctx context.Context, params *GetIndexVulncheckParams, body GetIndexVulncheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckConfigWithBody request with any body
	GetIndexVulncheckConfigWithBody(ctx context.Context, params *GetIndexVulncheckConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckConfig(ctx context.Context, params *GetIndexVulncheckConfigParams, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckCvelistV5WithBody request with any body
	GetIndexVulncheckCvelistV5WithBody(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckCvelistV5(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, body GetIndexVulncheckCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckKevWithBody request with any body
	GetIndexVulncheckKevWithBody(ctx context.Context, params *GetIndexVulncheckKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckKev(ctx context.Context, params *GetIndexVulncheckKevParams, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckNvdWithBody request with any body
	GetIndexVulncheckNvdWithBody(ctx context.Context, params *GetIndexVulncheckNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckNvd(ctx context.Context, params *GetIndexVulncheckNvdParams, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckNvd2WithBody request with any body
	GetIndexVulncheckNvd2WithBody(ctx context.Context, params *GetIndexVulncheckNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckNvd2(ctx context.Context, params *GetIndexVulncheckNvd2Params, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulnerabilityAliasesWithBody request with any body
	GetIndexVulnerabilityAliasesWithBody(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulnerabilityAliases(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulnrichmentWithBody request with any body
	GetIndexVulnrichmentWithBody(ctx context.Context, params *GetIndexVulnrichmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulnrichment(ctx context.Context, params *GetIndexVulnrichmentParams, body GetIndexVulnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVyaireWithBody request with any body
	GetIndexVyaireWithBody(ctx context.Context, params *GetIndexVyaireParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVyaire(ctx context.Context, params *GetIndexVyaireParams, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWatchguardWithBody request with any body
	GetIndexWatchguardWithBody(ctx context.Context, params *GetIndexWatchguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWatchguard(ctx context.Context, params *GetIndexWatchguardParams, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWhatsappWithBody request with any body
	GetIndexWhatsappWithBody(ctx context.Context, params *GetIndexWhatsappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWhatsapp(ctx context.Context, params *GetIndexWhatsappParams, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWibuWithBody request with any body
	GetIndexWibuWithBody(ctx context.Context, params *GetIndexWibuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWibu(ctx context.Context, params *GetIndexWibuParams, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWiresharkWithBody request with any body
	GetIndexWiresharkWithBody(ctx context.Context, params *GetIndexWiresharkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWireshark(ctx context.Context, params *GetIndexWiresharkParams, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWithSecureWithBody request with any body
	GetIndexWithSecureWithBody(ctx context.Context, params *GetIndexWithSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWithSecure(ctx context.Context, params *GetIndexWithSecureParams, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWolfiWithBody request with any body
	GetIndexWolfiWithBody(ctx context.Context, params *GetIndexWolfiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWolfi(ctx context.Context, params *GetIndexWolfiParams, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWolfsslWithBody request with any body
	GetIndexWolfsslWithBody(ctx context.Context, params *GetIndexWolfsslParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWolfssl(ctx context.Context, params *GetIndexWolfsslParams, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWordfenceWithBody request with any body
	GetIndexWordfenceWithBody(ctx context.Context, params *GetIndexWordfenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWordfence(ctx context.Context, params *GetIndexWordfenceParams, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXenWithBody request with any body
	GetIndexXenWithBody(ctx context.Context, params *GetIndexXenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXen(ctx context.Context, params *GetIndexXenParams, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXeroxWithBody request with any body
	GetIndexXeroxWithBody(ctx context.Context, params *GetIndexXeroxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXerox(ctx context.Context, params *GetIndexXeroxParams, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXiaomiWithBody request with any body
	GetIndexXiaomiWithBody(ctx context.Context, params *GetIndexXiaomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXiaomi(ctx context.Context, params *GetIndexXiaomiParams, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXylemWithBody request with any body
	GetIndexXylemWithBody(ctx context.Context, params *GetIndexXylemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXylem(ctx context.Context, params *GetIndexXylemParams, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexYokogawaWithBody request with any body
	GetIndexYokogawaWithBody(ctx context.Context, params *GetIndexYokogawaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexYokogawa(ctx context.Context, params *GetIndexYokogawaParams, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexYubicoWithBody request with any body
	GetIndexYubicoWithBody(ctx context.Context, params *GetIndexYubicoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexYubico(ctx context.Context, params *GetIndexYubicoParams, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZdiWithBody request with any body
	GetIndexZdiWithBody(ctx context.Context, params *GetIndexZdiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZdi(ctx context.Context, params *GetIndexZdiParams, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZebraWithBody request with any body
	GetIndexZebraWithBody(ctx context.Context, params *GetIndexZebraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZebra(ctx context.Context, params *GetIndexZebraParams, body GetIndexZebraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZeroscienceWithBody request with any body
	GetIndexZeroscienceWithBody(ctx context.Context, params *GetIndexZeroscienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZeroscience(ctx context.Context, params *GetIndexZeroscienceParams, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZimbraWithBody request with any body
	GetIndexZimbraWithBody(ctx context.Context, params *GetIndexZimbraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZimbra(ctx context.Context, params *GetIndexZimbraParams, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZoomWithBody request with any body
	GetIndexZoomWithBody(ctx context.Context, params *GetIndexZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZoom(ctx context.Context, params *GetIndexZoomParams, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZscalerWithBody request with any body
	GetIndexZscalerWithBody(ctx context.Context, params *GetIndexZscalerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZscaler(ctx context.Context, params *GetIndexZscalerParams, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZusoWithBody request with any body
	GetIndexZusoWithBody(ctx context.Context, params *GetIndexZusoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZuso(ctx context.Context, params *GetIndexZusoParams, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZyxelWithBody request with any body
	GetIndexZyxelWithBody(ctx context.Context, params *GetIndexZyxelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZyxel(ctx context.Context, params *GetIndexZyxelParams, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenapi request
	GetOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPdnsVulncheckC2 request
	GetPdnsVulncheckC2(ctx context.Context, params *GetPdnsVulncheckC2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPurl request
	GetPurl(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRulesInitialAccessType request
	GetRulesInitialAccessType(ctx context.Context, pType GetRulesInitialAccessTypeParamsType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsVulncheckC2 request
	GetTagsVulncheckC2(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBackup(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackupIndex(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupIndexRequest(c.Server, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCpe(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCpeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntitlements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntitlementsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexA10WithBody(ctx context.Context, params *GetIndexA10Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexA10RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexA10(ctx context.Context, params *GetIndexA10Params, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexA10Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbbWithBody(ctx context.Context, params *GetIndexAbbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbb(ctx context.Context, params *GetIndexAbbParams, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbbottWithBody(ctx context.Context, params *GetIndexAbbottParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbottRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbbott(ctx context.Context, params *GetIndexAbbottParams, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbottRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbsoluteWithBody(ctx context.Context, params *GetIndexAbsoluteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbsoluteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbsolute(ctx context.Context, params *GetIndexAbsoluteParams, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbsoluteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAcronisWithBody(ctx context.Context, params *GetIndexAcronisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAcronisRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAcronis(ctx context.Context, params *GetIndexAcronisParams, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAcronisRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdobeWithBody(ctx context.Context, params *GetIndexAdobeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdobeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdobe(ctx context.Context, params *GetIndexAdobeParams, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdobeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdvisoriesWithBody(ctx context.Context, params *GetIndexAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdvisoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdvisories(ctx context.Context, params *GetIndexAdvisoriesParams, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdvisoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlephResearchWithBody(ctx context.Context, params *GetIndexAlephResearchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlephResearchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlephResearch(ctx context.Context, params *GetIndexAlephResearchParams, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlephResearchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlmaWithBody(ctx context.Context, params *GetIndexAlmaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlmaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlma(ctx context.Context, params *GetIndexAlmaParams, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlmaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlpineWithBody(ctx context.Context, params *GetIndexAlpineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlpineRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlpine(ctx context.Context, params *GetIndexAlpineParams, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlpineRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmazonWithBody(ctx context.Context, params *GetIndexAmazonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmazonRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmazon(ctx context.Context, params *GetIndexAmazonParams, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmazonRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmdWithBody(ctx context.Context, params *GetIndexAmdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmd(ctx context.Context, params *GetIndexAmdParams, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmiWithBody(ctx context.Context, params *GetIndexAmiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmi(ctx context.Context, params *GetIndexAmiParams, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAnchoreNvdOverrideWithBody(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAnchoreNvdOverrideRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAnchoreNvdOverride(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAnchoreNvdOverrideRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAndroidWithBody(ctx context.Context, params *GetIndexAndroidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAndroidRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAndroid(ctx context.Context, params *GetIndexAndroidParams, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAndroidRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheActivemqWithBody(ctx context.Context, params *GetIndexApacheActivemqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheActivemqRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheActivemq(ctx context.Context, params *GetIndexApacheActivemqParams, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheActivemqRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArchivaWithBody(ctx context.Context, params *GetIndexApacheArchivaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArchivaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArchiva(ctx context.Context, params *GetIndexApacheArchivaParams, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArchivaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArrowWithBody(ctx context.Context, params *GetIndexApacheArrowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArrowRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArrow(ctx context.Context, params *GetIndexApacheArrowParams, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArrowRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCamelWithBody(ctx context.Context, params *GetIndexApacheCamelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCamelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCamel(ctx context.Context, params *GetIndexApacheCamelParams, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCamelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCommonsWithBody(ctx context.Context, params *GetIndexApacheCommonsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCommonsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCommons(ctx context.Context, params *GetIndexApacheCommonsParams, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCommonsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCouchdbWithBody(ctx context.Context, params *GetIndexApacheCouchdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCouchdbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCouchdb(ctx context.Context, params *GetIndexApacheCouchdbParams, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCouchdbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheFlinkWithBody(ctx context.Context, params *GetIndexApacheFlinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheFlinkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheFlink(ctx context.Context, params *GetIndexApacheFlinkParams, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheFlinkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheGuacamoleWithBody(ctx context.Context, params *GetIndexApacheGuacamoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheGuacamoleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheGuacamole(ctx context.Context, params *GetIndexApacheGuacamoleParams, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheGuacamoleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHadoopWithBody(ctx context.Context, params *GetIndexApacheHadoopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHadoopRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHadoop(ctx context.Context, params *GetIndexApacheHadoopParams, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHadoopRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHttpWithBody(ctx context.Context, params *GetIndexApacheHttpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHttpRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHttp(ctx context.Context, params *GetIndexApacheHttpParams, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHttpRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheJspwikiWithBody(ctx context.Context, params *GetIndexApacheJspwikiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheJspwikiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheJspwiki(ctx context.Context, params *GetIndexApacheJspwikiParams, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheJspwikiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheKafkaWithBody(ctx context.Context, params *GetIndexApacheKafkaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheKafkaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheKafka(ctx context.Context, params *GetIndexApacheKafkaParams, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheKafkaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheLoggingservicesWithBody(ctx context.Context, params *GetIndexApacheLoggingservicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheLoggingservicesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheLoggingservices(ctx context.Context, params *GetIndexApacheLoggingservicesParams, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheLoggingservicesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheNifiWithBody(ctx context.Context, params *GetIndexApacheNifiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheNifiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheNifi(ctx context.Context, params *GetIndexApacheNifiParams, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheNifiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOfbizWithBody(ctx context.Context, params *GetIndexApacheOfbizParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOfbizRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOfbiz(ctx context.Context, params *GetIndexApacheOfbizParams, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOfbizRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenmeetingsWithBody(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenmeetingsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenmeetings(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenmeetingsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenofficeWithBody(ctx context.Context, params *GetIndexApacheOpenofficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenofficeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenoffice(ctx context.Context, params *GetIndexApacheOpenofficeParams, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenofficeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApachePulsarWithBody(ctx context.Context, params *GetIndexApachePulsarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApachePulsarRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApachePulsar(ctx context.Context, params *GetIndexApachePulsarParams, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApachePulsarRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheShiroWithBody(ctx context.Context, params *GetIndexApacheShiroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheShiroRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheShiro(ctx context.Context, params *GetIndexApacheShiroParams, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheShiroRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSparkWithBody(ctx context.Context, params *GetIndexApacheSparkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSparkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSpark(ctx context.Context, params *GetIndexApacheSparkParams, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSparkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheStrutsWithBody(ctx context.Context, params *GetIndexApacheStrutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheStrutsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheStruts(ctx context.Context, params *GetIndexApacheStrutsParams, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheStrutsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSubversionWithBody(ctx context.Context, params *GetIndexApacheSubversionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSubversionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSubversion(ctx context.Context, params *GetIndexApacheSubversionParams, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSubversionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSupersetWithBody(ctx context.Context, params *GetIndexApacheSupersetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSupersetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSuperset(ctx context.Context, params *GetIndexApacheSupersetParams, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSupersetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheTomcatWithBody(ctx context.Context, params *GetIndexApacheTomcatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheTomcatRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheTomcat(ctx context.Context, params *GetIndexApacheTomcatParams, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheTomcatRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheZookeeperWithBody(ctx context.Context, params *GetIndexApacheZookeeperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheZookeeperRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheZookeeper(ctx context.Context, params *GetIndexApacheZookeeperParams, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheZookeeperRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppcheckWithBody(ctx context.Context, params *GetIndexAppcheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppcheckRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppcheck(ctx context.Context, params *GetIndexAppcheckParams, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppcheckRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppgateWithBody(ctx context.Context, params *GetIndexAppgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppgateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppgate(ctx context.Context, params *GetIndexAppgateParams, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppgateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppleWithBody(ctx context.Context, params *GetIndexAppleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApple(ctx context.Context, params *GetIndexAppleParams, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArchWithBody(ctx context.Context, params *GetIndexArchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArch(ctx context.Context, params *GetIndexArchParams, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAristaWithBody(ctx context.Context, params *GetIndexAristaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAristaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArista(ctx context.Context, params *GetIndexAristaParams, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAristaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArubaWithBody(ctx context.Context, params *GetIndexArubaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArubaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAruba(ctx context.Context, params *GetIndexArubaParams, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArubaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsrgWithBody(ctx context.Context, params *GetIndexAsrgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsrgRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsrg(ctx context.Context, params *GetIndexAsrgParams, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsrgRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAssetnoteWithBody(ctx context.Context, params *GetIndexAssetnoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAssetnoteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAssetnote(ctx context.Context, params *GetIndexAssetnoteParams, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAssetnoteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsteriskWithBody(ctx context.Context, params *GetIndexAsteriskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsteriskRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsterisk(ctx context.Context, params *GetIndexAsteriskParams, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsteriskRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsusWithBody(ctx context.Context, params *GetIndexAsusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsusRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsus(ctx context.Context, params *GetIndexAsusParams, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsusRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassianWithBody(ctx context.Context, params *GetIndexAtlassianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassian(ctx context.Context, params *GetIndexAtlassianParams, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassianVulnsWithBody(ctx context.Context, params *GetIndexAtlassianVulnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianVulnsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassianVulns(ctx context.Context, params *GetIndexAtlassianVulnsParams, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianVulnsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtredisWithBody(ctx context.Context, params *GetIndexAtredisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtredisRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtredis(ctx context.Context, params *GetIndexAtredisParams, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtredisRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAuscertWithBody(ctx context.Context, params *GetIndexAuscertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAuscertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAuscert(ctx context.Context, params *GetIndexAuscertParams, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAuscertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAutodeskWithBody(ctx context.Context, params *GetIndexAutodeskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAutodeskRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAutodesk(ctx context.Context, params *GetIndexAutodeskParams, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAutodeskRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvayaWithBody(ctx context.Context, params *GetIndexAvayaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvayaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvaya(ctx context.Context, params *GetIndexAvayaParams, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvayaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvevaWithBody(ctx context.Context, params *GetIndexAvevaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvevaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAveva(ctx context.Context, params *GetIndexAvevaParams, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvevaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvigilonWithBody(ctx context.Context, params *GetIndexAvigilonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvigilonRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvigilon(ctx context.Context, params *GetIndexAvigilonParams, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvigilonRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAwsWithBody(ctx context.Context, params *GetIndexAwsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAwsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAws(ctx context.Context, params *GetIndexAwsParams, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAwsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAxisWithBody(ctx context.Context, params *GetIndexAxisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAxisRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAxis(ctx context.Context, params *GetIndexAxisParams, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAxisRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAzulWithBody(ctx context.Context, params *GetIndexAzulParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAzulRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAzul(ctx context.Context, params *GetIndexAzulParams, body GetIndexAzulJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAzulRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBandrWithBody(ctx context.Context, params *GetIndexBandrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBandrRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBandr(ctx context.Context, params *GetIndexBandrParams, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBandrRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBaxterWithBody(ctx context.Context, params *GetIndexBaxterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBaxterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBaxter(ctx context.Context, params *GetIndexBaxterParams, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBaxterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBbraunWithBody(ctx context.Context, params *GetIndexBbraunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBbraunRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBbraun(ctx context.Context, params *GetIndexBbraunParams, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBbraunRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBdWithBody(ctx context.Context, params *GetIndexBdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBd(ctx context.Context, params *GetIndexBdParams, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBduWithBody(ctx context.Context, params *GetIndexBduParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBduRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBdu(ctx context.Context, params *GetIndexBduParams, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBduRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeckhoffWithBody(ctx context.Context, params *GetIndexBeckhoffParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeckhoffRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeckhoff(ctx context.Context, params *GetIndexBeckhoffParams, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeckhoffRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeldenWithBody(ctx context.Context, params *GetIndexBeldenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeldenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBelden(ctx context.Context, params *GetIndexBeldenParams, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeldenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeyondTrustWithBody(ctx context.Context, params *GetIndexBeyondTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeyondTrustRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeyondTrust(ctx context.Context, params *GetIndexBeyondTrustParams, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeyondTrustRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBinarlyWithBody(ctx context.Context, params *GetIndexBinarlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBinarlyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBinarly(ctx context.Context, params *GetIndexBinarlyParams, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBinarlyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBitdefenderWithBody(ctx context.Context, params *GetIndexBitdefenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBitdefenderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBitdefender(ctx context.Context, params *GetIndexBitdefenderParams, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBitdefenderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBlackberryWithBody(ctx context.Context, params *GetIndexBlackberryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlackberryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBlackberry(ctx context.Context, params *GetIndexBlackberryParams, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlackberryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBlsWithBody(ctx context.Context, params *GetIndexBlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBls(ctx context.Context, params *GetIndexBlsParams, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBoschWithBody(ctx context.Context, params *GetIndexBoschParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBoschRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBosch(ctx context.Context, params *GetIndexBoschParams, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBoschRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBostonScientificWithBody(ctx context.Context, params *GetIndexBostonScientificParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBostonScientificRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBostonScientific(ctx context.Context, params *GetIndexBostonScientificParams, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBostonScientificRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBotnetsWithBody(ctx context.Context, params *GetIndexBotnetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBotnetsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBotnets(ctx context.Context, params *GetIndexBotnetsParams, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBotnetsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCaCyberCentreWithBody(ctx context.Context, params *GetIndexCaCyberCentreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCaCyberCentreRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCaCyberCentre(ctx context.Context, params *GetIndexCaCyberCentreParams, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCaCyberCentreRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCanvasWithBody(ctx context.Context, params *GetIndexCanvasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCanvasRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCanvas(ctx context.Context, params *GetIndexCanvasParams, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCanvasRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarestreamWithBody(ctx context.Context, params *GetIndexCarestreamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarestreamRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarestream(ctx context.Context, params *GetIndexCarestreamParams, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarestreamRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCargoWithBody(ctx context.Context, params *GetIndexCargoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCargoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCargo(ctx context.Context, params *GetIndexCargoParams, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCargoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarrierWithBody(ctx context.Context, params *GetIndexCarrierParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarrierRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarrier(ctx context.Context, params *GetIndexCarrierParams, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarrierRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCblMarinerWithBody(ctx context.Context, params *GetIndexCblMarinerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCblMarinerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCblMariner(ctx context.Context, params *GetIndexCblMarinerParams, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCblMarinerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCentosWithBody(ctx context.Context, params *GetIndexCentosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCentosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCentos(ctx context.Context, params *GetIndexCentosParams, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCentosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertBeWithBody(ctx context.Context, params *GetIndexCertBeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertBeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertBe(ctx context.Context, params *GetIndexCertBeParams, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertBeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertInWithBody(ctx context.Context, params *GetIndexCertInParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertInRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertIn(ctx context.Context, params *GetIndexCertInParams, body GetIndexCertInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertInRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertIrSecurityAlertsWithBody(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertIrSecurityAlertsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertIrSecurityAlerts(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, body GetIndexCertIrSecurityAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertIrSecurityAlertsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertSeWithBody(ctx context.Context, params *GetIndexCertSeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertSeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertSe(ctx context.Context, params *GetIndexCertSeParams, body GetIndexCertSeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertSeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertUaWithBody(ctx context.Context, params *GetIndexCertUaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertUaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertUa(ctx context.Context, params *GetIndexCertUaParams, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertUaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCerteuWithBody(ctx context.Context, params *GetIndexCerteuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCerteuRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCerteu(ctx context.Context, params *GetIndexCerteuParams, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCerteuRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertfrWithBody(ctx context.Context, params *GetIndexCertfrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertfrRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertfr(ctx context.Context, params *GetIndexCertfrParams, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertfrRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChainguardWithBody(ctx context.Context, params *GetIndexChainguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChainguardRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChainguard(ctx context.Context, params *GetIndexChainguardParams, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChainguardRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCheckpointWithBody(ctx context.Context, params *GetIndexCheckpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCheckpointRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCheckpoint(ctx context.Context, params *GetIndexCheckpointParams, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCheckpointRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChromeWithBody(ctx context.Context, params *GetIndexChromeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChromeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChrome(ctx context.Context, params *GetIndexChromeParams, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChromeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaAlertsWithBody(ctx context.Context, params *GetIndexCisaAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaAlertsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaAlerts(ctx context.Context, params *GetIndexCisaAlertsParams, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaAlertsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaKevWithBody(ctx context.Context, params *GetIndexCisaKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaKevRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaKev(ctx context.Context, params *GetIndexCisaKevParams, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaKevRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCiscoWithBody(ctx context.Context, params *GetIndexCiscoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisco(ctx context.Context, params *GetIndexCiscoParams, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCiscoTalosWithBody(ctx context.Context, params *GetIndexCiscoTalosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoTalosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCiscoTalos(ctx context.Context, params *GetIndexCiscoTalosParams, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoTalosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCitrixWithBody(ctx context.Context, params *GetIndexCitrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCitrixRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCitrix(ctx context.Context, params *GetIndexCitrixParams, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCitrixRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexClarotyWithBody(ctx context.Context, params *GetIndexClarotyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexClarotyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexClaroty(ctx context.Context, params *GetIndexClarotyParams, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexClarotyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudbeesWithBody(ctx context.Context, params *GetIndexCloudbeesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudbeesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudbees(ctx context.Context, params *GetIndexCloudbeesParams, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudbeesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudvulndbWithBody(ctx context.Context, params *GetIndexCloudvulndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudvulndbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudvulndb(ctx context.Context, params *GetIndexCloudvulndbParams, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudvulndbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnnvdWithBody(ctx context.Context, params *GetIndexCnnvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnnvdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnnvd(ctx context.Context, params *GetIndexCnnvdParams, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnnvdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdBulletinsWithBody(ctx context.Context, params *GetIndexCnvdBulletinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdBulletinsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdBulletins(ctx context.Context, params *GetIndexCnvdBulletinsParams, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdBulletinsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdFlawsWithBody(ctx context.Context, params *GetIndexCnvdFlawsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdFlawsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdFlaws(ctx context.Context, params *GetIndexCnvdFlawsParams, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdFlawsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCocoapodsWithBody(ctx context.Context, params *GetIndexCocoapodsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCocoapodsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCocoapods(ctx context.Context, params *GetIndexCocoapodsParams, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCocoapodsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCodesysWithBody(ctx context.Context, params *GetIndexCodesysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCodesysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCodesys(ctx context.Context, params *GetIndexCodesysParams, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCodesysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCompassSecurityWithBody(ctx context.Context, params *GetIndexCompassSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCompassSecurityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCompassSecurity(ctx context.Context, params *GetIndexCompassSecurityParams, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCompassSecurityRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexComposerWithBody(ctx context.Context, params *GetIndexComposerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexComposerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexComposer(ctx context.Context, params *GetIndexComposerParams, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexComposerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexConanWithBody(ctx context.Context, params *GetIndexConanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexConanRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexConan(ctx context.Context, params *GetIndexConanParams, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexConanRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCrestronWithBody(ctx context.Context, params *GetIndexCrestronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCrestronRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCrestron(ctx context.Context, params *GetIndexCrestronParams, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCrestronRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCurlWithBody(ctx context.Context, params *GetIndexCurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCurlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCurl(ctx context.Context, params *GetIndexCurlParams, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCurlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCweWithBody(ctx context.Context, params *GetIndexCweParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCweRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCwe(ctx context.Context, params *GetIndexCweParams, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCweRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDahuaWithBody(ctx context.Context, params *GetIndexDahuaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDahuaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDahua(ctx context.Context, params *GetIndexDahuaParams, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDahuaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDassaultWithBody(ctx context.Context, params *GetIndexDassaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDassaultRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDassault(ctx context.Context, params *GetIndexDassaultParams, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDassaultRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebianWithBody(ctx context.Context, params *GetIndexDebianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebian(ctx context.Context, params *GetIndexDebianParams, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebianDsaWithBody(ctx context.Context, params *GetIndexDebianDsaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianDsaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebianDsa(ctx context.Context, params *GetIndexDebianDsaParams, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianDsaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDellWithBody(ctx context.Context, params *GetIndexDellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDellRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDell(ctx context.Context, params *GetIndexDellParams, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDellRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDeltaWithBody(ctx context.Context, params *GetIndexDeltaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDeltaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDelta(ctx context.Context, params *GetIndexDeltaParams, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDeltaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDjangoWithBody(ctx context.Context, params *GetIndexDjangoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDjangoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDjango(ctx context.Context, params *GetIndexDjangoParams, body GetIndexDjangoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDjangoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDnnWithBody(ctx context.Context, params *GetIndexDnnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDnnRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDnn(ctx context.Context, params *GetIndexDnnParams, body GetIndexDnnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDnnRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDotcmsWithBody(ctx context.Context, params *GetIndexDotcmsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDotcmsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDotcms(ctx context.Context, params *GetIndexDotcmsParams, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDotcmsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDragosWithBody(ctx context.Context, params *GetIndexDragosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDragosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDragos(ctx context.Context, params *GetIndexDragosParams, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDragosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDraytekWithBody(ctx context.Context, params *GetIndexDraytekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDraytekRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDraytek(ctx context.Context, params *GetIndexDraytekParams, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDraytekRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEatonWithBody(ctx context.Context, params *GetIndexEatonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEatonRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEaton(ctx context.Context, params *GetIndexEatonParams, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEatonRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElasticWithBody(ctx context.Context, params *GetIndexElasticParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElasticRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElastic(ctx context.Context, params *GetIndexElasticParams, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElasticRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElspecWithBody(ctx context.Context, params *GetIndexElspecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElspecRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElspec(ctx context.Context, params *GetIndexElspecParams, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElspecRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEmergingThreatsSnortWithBody(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEmergingThreatsSnortRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEmergingThreatsSnort(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, body GetIndexEmergingThreatsSnortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEmergingThreatsSnortRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEmersonWithBody(ctx context.Context, params *GetIndexEmersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEmersonRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEmerson(ctx context.Context, params *GetIndexEmersonParams, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEmersonRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEolWithBody(ctx context.Context, params *GetIndexEolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEolRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEol(ctx context.Context, params *GetIndexEolParams, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEolRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEpssWithBody(ctx context.Context, params *GetIndexEpssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEpssRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEpss(ctx context.Context, params *GetIndexEpssParams, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEpssRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExodusIntelWithBody(ctx context.Context, params *GetIndexExodusIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExodusIntelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExodusIntel(ctx context.Context, params *GetIndexExodusIntelParams, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExodusIntelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitChainsWithBody(ctx context.Context, params *GetIndexExploitChainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitChainsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitChains(ctx context.Context, params *GetIndexExploitChainsParams, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitChainsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitdbWithBody(ctx context.Context, params *GetIndexExploitdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitdbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitdb(ctx context.Context, params *GetIndexExploitdbParams, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitdbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitsWithBody(ctx context.Context, params *GetIndexExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploits(ctx context.Context, params *GetIndexExploitsParams, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitsChangelogWithBody(ctx context.Context, params *GetIndexExploitsChangelogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitsChangelogRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitsChangelog(ctx context.Context, params *GetIndexExploitsChangelogParams, body GetIndexExploitsChangelogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitsChangelogRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFSecureWithBody(ctx context.Context, params *GetIndexFSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFSecureRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFSecure(ctx context.Context, params *GetIndexFSecureParams, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFSecureRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFanucWithBody(ctx context.Context, params *GetIndexFanucParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFanucRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFanuc(ctx context.Context, params *GetIndexFanucParams, body GetIndexFanucJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFanucRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFastlyWithBody(ctx context.Context, params *GetIndexFastlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFastlyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFastly(ctx context.Context, params *GetIndexFastlyParams, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFastlyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFedoraWithBody(ctx context.Context, params *GetIndexFedoraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFedoraRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFedora(ctx context.Context, params *GetIndexFedoraParams, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFedoraRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFilecloudWithBody(ctx context.Context, params *GetIndexFilecloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFilecloudRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFilecloud(ctx context.Context, params *GetIndexFilecloudParams, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFilecloudRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFlattSecurityWithBody(ctx context.Context, params *GetIndexFlattSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFlattSecurityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFlattSecurity(ctx context.Context, params *GetIndexFlattSecurityParams, body GetIndexFlattSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFlattSecurityRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexForgerockWithBody(ctx context.Context, params *GetIndexForgerockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexForgerockRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexForgerock(ctx context.Context, params *GetIndexForgerockParams, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexForgerockRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFortinetWithBody(ctx context.Context, params *GetIndexFortinetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFortinetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFortinet(ctx context.Context, params *GetIndexFortinetParams, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFortinetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFortinetIpsWithBody(ctx context.Context, params *GetIndexFortinetIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFortinetIpsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFortinetIps(ctx context.Context, params *GetIndexFortinetIpsParams, body GetIndexFortinetIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFortinetIpsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFoxitWithBody(ctx context.Context, params *GetIndexFoxitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFoxitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFoxit(ctx context.Context, params *GetIndexFoxitParams, body GetIndexFoxitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFoxitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFreebsdWithBody(ctx context.Context, params *GetIndexFreebsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFreebsdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFreebsd(ctx context.Context, params *GetIndexFreebsdParams, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFreebsdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGallagherWithBody(ctx context.Context, params *GetIndexGallagherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGallagherRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGallagher(ctx context.Context, params *GetIndexGallagherParams, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGallagherRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGcpWithBody(ctx context.Context, params *GetIndexGcpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGcpRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGcp(ctx context.Context, params *GetIndexGcpParams, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGcpRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeGasWithBody(ctx context.Context, params *GetIndexGeGasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeGasRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeGas(ctx context.Context, params *GetIndexGeGasParams, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeGasRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeHealthcareWithBody(ctx context.Context, params *GetIndexGeHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeHealthcareRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeHealthcare(ctx context.Context, params *GetIndexGeHealthcareParams, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeHealthcareRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGemWithBody(ctx context.Context, params *GetIndexGemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGemRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGem(ctx context.Context, params *GetIndexGemParams, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGemRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGenetecWithBody(ctx context.Context, params *GetIndexGenetecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGenetecRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGenetec(ctx context.Context, params *GetIndexGenetecParams, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGenetecRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGigabyteWithBody(ctx context.Context, params *GetIndexGigabyteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGigabyteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGigabyte(ctx context.Context, params *GetIndexGigabyteParams, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGigabyteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGiteeExploitsWithBody(ctx context.Context, params *GetIndexGiteeExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGiteeExploitsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGiteeExploits(ctx context.Context, params *GetIndexGiteeExploitsParams, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGiteeExploitsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubExploitsWithBody(ctx context.Context, params *GetIndexGithubExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubExploitsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubExploits(ctx context.Context, params *GetIndexGithubExploitsParams, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubExploitsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubSecurityAdvisoriesWithBody(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubSecurityAdvisoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubSecurityAdvisories(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubSecurityAdvisoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabAdvisoriesCommunityWithBody(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabAdvisoriesCommunityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabAdvisoriesCommunity(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabAdvisoriesCommunityRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabExploitsWithBody(ctx context.Context, params *GetIndexGitlabExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabExploitsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabExploits(ctx context.Context, params *GetIndexGitlabExploitsParams, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabExploitsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGnutlsWithBody(ctx context.Context, params *GetIndexGnutlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGnutlsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGnutls(ctx context.Context, params *GetIndexGnutlsParams, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGnutlsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGolangWithBody(ctx context.Context, params *GetIndexGolangParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGolangRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGolang(ctx context.Context, params *GetIndexGolangParams, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGolangRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogle0dayItwWithBody(ctx context.Context, params *GetIndexGoogle0dayItwParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogle0dayItwRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogle0dayItw(ctx context.Context, params *GetIndexGoogle0dayItwParams, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogle0dayItwRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogleContainerOptimizedOsWithBody(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogleContainerOptimizedOsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogleContainerOptimizedOs(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogleContainerOptimizedOsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGrafanaWithBody(ctx context.Context, params *GetIndexGrafanaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGrafanaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGrafana(ctx context.Context, params *GetIndexGrafanaParams, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGrafanaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGreynoiseMetadataWithBody(ctx context.Context, params *GetIndexGreynoiseMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGreynoiseMetadataRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGreynoiseMetadata(ctx context.Context, params *GetIndexGreynoiseMetadataParams, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGreynoiseMetadataRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHackageWithBody(ctx context.Context, params *GetIndexHackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHackageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHackage(ctx context.Context, params *GetIndexHackageParams, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHackageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHarmonyosWithBody(ctx context.Context, params *GetIndexHarmonyosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHarmonyosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHarmonyos(ctx context.Context, params *GetIndexHarmonyosParams, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHarmonyosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHashicorpWithBody(ctx context.Context, params *GetIndexHashicorpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHashicorpRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHashicorp(ctx context.Context, params *GetIndexHashicorpParams, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHashicorpRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHaskellSadbWithBody(ctx context.Context, params *GetIndexHaskellSadbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHaskellSadbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHaskellSadb(ctx context.Context, params *GetIndexHaskellSadbParams, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHaskellSadbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHclWithBody(ctx context.Context, params *GetIndexHclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHclRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHcl(ctx context.Context, params *GetIndexHclParams, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHclRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHexWithBody(ctx context.Context, params *GetIndexHexParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHexRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHex(ctx context.Context, params *GetIndexHexParams, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHexRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHikvisionWithBody(ctx context.Context, params *GetIndexHikvisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHikvisionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHikvision(ctx context.Context, params *GetIndexHikvisionParams, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHikvisionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHillromWithBody(ctx context.Context, params *GetIndexHillromParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHillromRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHillrom(ctx context.Context, params *GetIndexHillromParams, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHillromRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachiWithBody(ctx context.Context, params *GetIndexHitachiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachi(ctx context.Context, params *GetIndexHitachiParams, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachiEnergyWithBody(ctx context.Context, params *GetIndexHitachiEnergyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiEnergyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachiEnergy(ctx context.Context, params *GetIndexHitachiEnergyParams, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiEnergyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHkcertWithBody(ctx context.Context, params *GetIndexHkcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHkcertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHkcert(ctx context.Context, params *GetIndexHkcertParams, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHkcertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHoneywellWithBody(ctx context.Context, params *GetIndexHoneywellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHoneywellRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHoneywell(ctx context.Context, params *GetIndexHoneywellParams, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHoneywellRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHpWithBody(ctx context.Context, params *GetIndexHpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHpRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHp(ctx context.Context, params *GetIndexHpParams, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHpRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiEulerosWithBody(ctx context.Context, params *GetIndexHuaweiEulerosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiEulerosRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiEuleros(ctx context.Context, params *GetIndexHuaweiEulerosParams, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiEulerosRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiIpsWithBody(ctx context.Context, params *GetIndexHuaweiIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiIpsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiIps(ctx context.Context, params *GetIndexHuaweiIpsParams, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiIpsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiPsirtWithBody(ctx context.Context, params *GetIndexHuaweiPsirtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiPsirtRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiPsirt(ctx context.Context, params *GetIndexHuaweiPsirtParams, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiPsirtRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIavaWithBody(ctx context.Context, params *GetIndexIavaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIavaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIava(ctx context.Context, params *GetIndexIavaParams, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIavaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIbmWithBody(ctx context.Context, params *GetIndexIbmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIbmRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIbm(ctx context.Context, params *GetIndexIbmParams, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIbmRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIdemiaWithBody(ctx context.Context, params *GetIndexIdemiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIdemiaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIdemia(ctx context.Context, params *GetIndexIdemiaParams, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIdemiaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlAlertsWithBody(ctx context.Context, params *GetIndexIlAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlAlertsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlAlerts(ctx context.Context, params *GetIndexIlAlertsParams, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlAlertsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlVulnerabilitiesWithBody(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlVulnerabilitiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlVulnerabilities(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlVulnerabilitiesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIncibeWithBody(ctx context.Context, params *GetIndexIncibeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIncibeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIncibe(ctx context.Context, params *GetIndexIncibeParams, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIncibeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccessWithBody(ctx context.Context, params *GetIndexInitialAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccess(ctx context.Context, params *GetIndexInitialAccessParams, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccessGitWithBody(ctx context.Context, params *GetIndexInitialAccessGitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessGitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccessGit(ctx context.Context, params *GetIndexInitialAccessGitParams, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessGitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIntelWithBody(ctx context.Context, params *GetIndexIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIntelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIntel(ctx context.Context, params *GetIndexIntelParams, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIntelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel10dWithBody(ctx context.Context, params *GetIndexIpintel10dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel10dRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel10d(ctx context.Context, params *GetIndexIpintel10dParams, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel10dRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel30dWithBody(ctx context.Context, params *GetIndexIpintel30dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel30dRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel30d(ctx context.Context, params *GetIndexIpintel30dParams, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel30dRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel3dWithBody(ctx context.Context, params *GetIndexIpintel3dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel3dRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel3d(ctx context.Context, params *GetIndexIpintel3dParams, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel3dRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel90dWithBody(ctx context.Context, params *GetIndexIpintel90dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel90dRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel90d(ctx context.Context, params *GetIndexIpintel90dParams, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel90dRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIstioWithBody(ctx context.Context, params *GetIndexIstioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIstioRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIstio(ctx context.Context, params *GetIndexIstioParams, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIstioRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvantiWithBody(ctx context.Context, params *GetIndexIvantiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvanti(ctx context.Context, params *GetIndexIvantiParams, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvantiRssWithBody(ctx context.Context, params *GetIndexIvantiRssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRssRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvantiRss(ctx context.Context, params *GetIndexIvantiRssParams, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRssRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJenkinsWithBody(ctx context.Context, params *GetIndexJenkinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJenkinsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJenkins(ctx context.Context, params *GetIndexJenkinsParams, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJenkinsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJetbrainsWithBody(ctx context.Context, params *GetIndexJetbrainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJetbrainsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJetbrains(ctx context.Context, params *GetIndexJetbrainsParams, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJetbrainsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJfrogWithBody(ctx context.Context, params *GetIndexJfrogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJfrogRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJfrog(ctx context.Context, params *GetIndexJfrogParams, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJfrogRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJnjWithBody(ctx context.Context, params *GetIndexJnjParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJnjRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJnj(ctx context.Context, params *GetIndexJnjParams, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJnjRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJvnWithBody(ctx context.Context, params *GetIndexJvnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJvnRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJvn(ctx context.Context, params *GetIndexJvnParams, body GetIndexJvnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJvnRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJvndbWithBody(ctx context.Context, params *GetIndexJvndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJvndbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJvndb(ctx context.Context, params *GetIndexJvndbParams, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJvndbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKasperskyIcsCertWithBody(ctx context.Context, params *GetIndexKasperskyIcsCertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKasperskyIcsCertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKasperskyIcsCert(ctx context.Context, params *GetIndexKasperskyIcsCertParams, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKasperskyIcsCertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKorelogicWithBody(ctx context.Context, params *GetIndexKorelogicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKorelogicRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKorelogic(ctx context.Context, params *GetIndexKorelogicParams, body GetIndexKorelogicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKorelogicRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertSecurityNoticesWithBody(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertSecurityNoticesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertSecurityNotices(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertSecurityNoticesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertVulnerabilitiesWithBody(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertVulnerabilitiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertVulnerabilities(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertVulnerabilitiesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKubernetesWithBody(ctx context.Context, params *GetIndexKubernetesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKubernetesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKubernetes(ctx context.Context, params *GetIndexKubernetesParams, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKubernetesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLenovoWithBody(ctx context.Context, params *GetIndexLenovoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLenovoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLenovo(ctx context.Context, params *GetIndexLenovoParams, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLenovoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLexmarkWithBody(ctx context.Context, params *GetIndexLexmarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLexmarkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLexmark(ctx context.Context, params *GetIndexLexmarkParams, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLexmarkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLgWithBody(ctx context.Context, params *GetIndexLgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLgRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLg(ctx context.Context, params *GetIndexLgParams, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLgRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLibreOfficeWithBody(ctx context.Context, params *GetIndexLibreOfficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLibreOfficeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLibreOffice(ctx context.Context, params *GetIndexLibreOfficeParams, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLibreOfficeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLinuxWithBody(ctx context.Context, params *GetIndexLinuxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLinuxRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLinux(ctx context.Context, params *GetIndexLinuxParams, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLinuxRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMFilesWithBody(ctx context.Context, params *GetIndexMFilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMFilesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMFiles(ctx context.Context, params *GetIndexMFilesParams, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMFilesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMacertWithBody(ctx context.Context, params *GetIndexMacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMacertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMacert(ctx context.Context, params *GetIndexMacertParams, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMacertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexManageengineWithBody(ctx context.Context, params *GetIndexManageengineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexManageengineRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexManageengine(ctx context.Context, params *GetIndexManageengineParams, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexManageengineRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMavenWithBody(ctx context.Context, params *GetIndexMavenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMavenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMaven(ctx context.Context, params *GetIndexMavenParams, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMavenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMbedTlsWithBody(ctx context.Context, params *GetIndexMbedTlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMbedTlsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMbedTls(ctx context.Context, params *GetIndexMbedTlsParams, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMbedTlsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMediatekWithBody(ctx context.Context, params *GetIndexMediatekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMediatekRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMediatek(ctx context.Context, params *GetIndexMediatekParams, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMediatekRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMedtronicWithBody(ctx context.Context, params *GetIndexMedtronicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMedtronicRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMedtronic(ctx context.Context, params *GetIndexMedtronicParams, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMedtronicRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMendixWithBody(ctx context.Context, params *GetIndexMendixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMendixRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMendix(ctx context.Context, params *GetIndexMendixParams, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMendixRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMetasploitWithBody(ctx context.Context, params *GetIndexMetasploitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMetasploitRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMetasploit(ctx context.Context, params *GetIndexMetasploitParams, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMetasploitRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftCvrfWithBody(ctx context.Context, params *GetIndexMicrosoftCvrfParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftCvrfRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftCvrf(ctx context.Context, params *GetIndexMicrosoftCvrfParams, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftCvrfRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftKbWithBody(ctx context.Context, params *GetIndexMicrosoftKbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftKbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftKb(ctx context.Context, params *GetIndexMicrosoftKbParams, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftKbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMikrotikWithBody(ctx context.Context, params *GetIndexMikrotikParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMikrotikRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMikrotik(ctx context.Context, params *GetIndexMikrotikParams, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMikrotikRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMindrayWithBody(ctx context.Context, params *GetIndexMindrayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMindrayRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMindray(ctx context.Context, params *GetIndexMindrayParams, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMindrayRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMispThreatActorsWithBody(ctx context.Context, params *GetIndexMispThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMispThreatActorsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMispThreatActors(ctx context.Context, params *GetIndexMispThreatActorsParams, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMispThreatActorsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitelWithBody(ctx context.Context, params *GetIndexMitelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitel(ctx context.Context, params *GetIndexMitelParams, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreAttackCveWithBody(ctx context.Context, params *GetIndexMitreAttackCveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreAttackCveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreAttackCve(ctx context.Context, params *GetIndexMitreAttackCveParams, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreAttackCveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreCvelistV5WithBody(ctx context.Context, params *GetIndexMitreCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreCvelistV5RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreCvelistV5(ctx context.Context, params *GetIndexMitreCvelistV5Params, body GetIndexMitreCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreCvelistV5Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitsubishiElectricWithBody(ctx context.Context, params *GetIndexMitsubishiElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitsubishiElectricRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitsubishiElectric(ctx context.Context, params *GetIndexMitsubishiElectricParams, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitsubishiElectricRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMongodbWithBody(ctx context.Context, params *GetIndexMongodbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMongodbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMongodb(ctx context.Context, params *GetIndexMongodbParams, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMongodbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMoxaWithBody(ctx context.Context, params *GetIndexMoxaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMoxaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMoxa(ctx context.Context, params *GetIndexMoxaParams, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMoxaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMozillaWithBody(ctx context.Context, params *GetIndexMozillaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMozillaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMozilla(ctx context.Context, params *GetIndexMozillaParams, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMozillaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNaverWithBody(ctx context.Context, params *GetIndexNaverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNaverRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNaver(ctx context.Context, params *GetIndexNaverParams, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNaverRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNcscWithBody(ctx context.Context, params *GetIndexNcscParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNcscRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNcsc(ctx context.Context, params *GetIndexNcscParams, body GetIndexNcscJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNcscRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNcscCvesWithBody(ctx context.Context, params *GetIndexNcscCvesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNcscCvesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNcscCves(ctx context.Context, params *GetIndexNcscCvesParams, body GetIndexNcscCvesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNcscCvesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNecWithBody(ctx context.Context, params *GetIndexNecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNecRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNec(ctx context.Context, params *GetIndexNecParams, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNecRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetappWithBody(ctx context.Context, params *GetIndexNetappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetappRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetapp(ctx context.Context, params *GetIndexNetappParams, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetappRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgateWithBody(ctx context.Context, params *GetIndexNetgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgate(ctx context.Context, params *GetIndexNetgateParams, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgearWithBody(ctx context.Context, params *GetIndexNetgearParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgearRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgear(ctx context.Context, params *GetIndexNetgearParams, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgearRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetskopeWithBody(ctx context.Context, params *GetIndexNetskopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetskopeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetskope(ctx context.Context, params *GetIndexNetskopeParams, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetskopeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNginxWithBody(ctx context.Context, params *GetIndexNginxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNginxRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNginx(ctx context.Context, params *GetIndexNginxParams, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNginxRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNhsWithBody(ctx context.Context, params *GetIndexNhsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNhsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNhs(ctx context.Context, params *GetIndexNhsParams, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNhsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNiWithBody(ctx context.Context, params *GetIndexNiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNi(ctx context.Context, params *GetIndexNiParams, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvdWithBody(ctx context.Context, params *GetIndexNistNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd(ctx context.Context, params *GetIndexNistNvdParams, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2WithBody(ctx context.Context, params *GetIndexNistNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2(ctx context.Context, params *GetIndexNistNvd2Params, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2CpematchWithBody(ctx context.Context, params *GetIndexNistNvd2CpematchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2CpematchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2Cpematch(ctx context.Context, params *GetIndexNistNvd2CpematchParams, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2CpematchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodeSecurityWithBody(ctx context.Context, params *GetIndexNodeSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodeSecurityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodeSecurity(ctx context.Context, params *GetIndexNodeSecurityParams, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodeSecurityRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodejsWithBody(ctx context.Context, params *GetIndexNodejsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodejsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodejs(ctx context.Context, params *GetIndexNodejsParams, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodejsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNokiaWithBody(ctx context.Context, params *GetIndexNokiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNokiaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNokia(ctx context.Context, params *GetIndexNokiaParams, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNokiaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNozomiWithBody(ctx context.Context, params *GetIndexNozomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNozomiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNozomi(ctx context.Context, params *GetIndexNozomiParams, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNozomiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNpmWithBody(ctx context.Context, params *GetIndexNpmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNpmRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNpm(ctx context.Context, params *GetIndexNpmParams, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNpmRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNtpWithBody(ctx context.Context, params *GetIndexNtpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNtpRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNtp(ctx context.Context, params *GetIndexNtpParams, body GetIndexNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNtpRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNugetWithBody(ctx context.Context, params *GetIndexNugetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNugetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNuget(ctx context.Context, params *GetIndexNugetParams, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNugetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNvidiaWithBody(ctx context.Context, params *GetIndexNvidiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNvidiaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNvidia(ctx context.Context, params *GetIndexNvidiaParams, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNvidiaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNzAdvisoriesWithBody(ctx context.Context, params *GetIndexNzAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNzAdvisoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNzAdvisories(ctx context.Context, params *GetIndexNzAdvisoriesParams, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNzAdvisoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOctopusDeployWithBody(ctx context.Context, params *GetIndexOctopusDeployParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOctopusDeployRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOctopusDeploy(ctx context.Context, params *GetIndexOctopusDeployParams, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOctopusDeployRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOktaWithBody(ctx context.Context, params *GetIndexOktaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOktaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOkta(ctx context.Context, params *GetIndexOktaParams, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOktaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOmronWithBody(ctx context.Context, params *GetIndexOmronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOmronRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOmron(ctx context.Context, params *GetIndexOmronParams, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOmronRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOneEWithBody(ctx context.Context, params *GetIndexOneEParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOneERequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOneE(ctx context.Context, params *GetIndexOneEParams, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOneERequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpamWithBody(ctx context.Context, params *GetIndexOpamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpamRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpam(ctx context.Context, params *GetIndexOpamParams, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpamRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenCvdbWithBody(ctx context.Context, params *GetIndexOpenCvdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenCvdbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenCvdb(ctx context.Context, params *GetIndexOpenCvdbParams, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenCvdbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenbsdWithBody(ctx context.Context, params *GetIndexOpenbsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenbsdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenbsd(ctx context.Context, params *GetIndexOpenbsdParams, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenbsdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpensshWithBody(ctx context.Context, params *GetIndexOpensshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensshRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenssh(ctx context.Context, params *GetIndexOpensshParams, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensshRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpensslSecadvWithBody(ctx context.Context, params *GetIndexOpensslSecadvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensslSecadvRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpensslSecadv(ctx context.Context, params *GetIndexOpensslSecadvParams, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensslSecadvRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenstackWithBody(ctx context.Context, params *GetIndexOpenstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenstackRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenstack(ctx context.Context, params *GetIndexOpenstackParams, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenstackRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenwrtWithBody(ctx context.Context, params *GetIndexOpenwrtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenwrtRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenwrt(ctx context.Context, params *GetIndexOpenwrtParams, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenwrtRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleWithBody(ctx context.Context, params *GetIndexOracleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracle(ctx context.Context, params *GetIndexOracleParams, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpuWithBody(ctx context.Context, params *GetIndexOracleCpuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpu(ctx context.Context, params *GetIndexOracleCpuParams, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpuCsafWithBody(ctx context.Context, params *GetIndexOracleCpuCsafParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuCsafRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpuCsaf(ctx context.Context, params *GetIndexOracleCpuCsafParams, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuCsafRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOsvWithBody(ctx context.Context, params *GetIndexOsvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOsvRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOsv(ctx context.Context, params *GetIndexOsvParams, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOsvRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOtrsWithBody(ctx context.Context, params *GetIndexOtrsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOtrsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOtrs(ctx context.Context, params *GetIndexOtrsParams, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOtrsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOwncloudWithBody(ctx context.Context, params *GetIndexOwncloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOwncloudRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOwncloud(ctx context.Context, params *GetIndexOwncloudParams, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOwncloudRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPalantirWithBody(ctx context.Context, params *GetIndexPalantirParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPalantirRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPalantir(ctx context.Context, params *GetIndexPalantirParams, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPalantirRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPaloAltoWithBody(ctx context.Context, params *GetIndexPaloAltoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPaloAltoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPaloAlto(ctx context.Context, params *GetIndexPaloAltoParams, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPaloAltoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPanasonicWithBody(ctx context.Context, params *GetIndexPanasonicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPanasonicRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPanasonic(ctx context.Context, params *GetIndexPanasonicParams, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPanasonicRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPapercutWithBody(ctx context.Context, params *GetIndexPapercutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPapercutRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPapercut(ctx context.Context, params *GetIndexPapercutParams, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPapercutRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPegaWithBody(ctx context.Context, params *GetIndexPegaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPegaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPega(ctx context.Context, params *GetIndexPegaParams, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPegaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhilipsWithBody(ctx context.Context, params *GetIndexPhilipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhilipsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhilips(ctx context.Context, params *GetIndexPhilipsParams, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhilipsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhoenixContactWithBody(ctx context.Context, params *GetIndexPhoenixContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhoenixContactRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhoenixContact(ctx context.Context, params *GetIndexPhoenixContactParams, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhoenixContactRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhpMyAdminWithBody(ctx context.Context, params *GetIndexPhpMyAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhpMyAdminRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhpMyAdmin(ctx context.Context, params *GetIndexPhpMyAdminParams, body GetIndexPhpMyAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhpMyAdminRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPostgressqlWithBody(ctx context.Context, params *GetIndexPostgressqlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPostgressqlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPostgressql(ctx context.Context, params *GetIndexPostgressqlParams, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPostgressqlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPowerdnsWithBody(ctx context.Context, params *GetIndexPowerdnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPowerdnsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPowerdns(ctx context.Context, params *GetIndexPowerdnsParams, body GetIndexPowerdnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPowerdnsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProgressWithBody(ctx context.Context, params *GetIndexProgressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProgressRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProgress(ctx context.Context, params *GetIndexProgressParams, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProgressRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProofpointWithBody(ctx context.Context, params *GetIndexProofpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProofpointRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProofpoint(ctx context.Context, params *GetIndexProofpointParams, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProofpointRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPtcWithBody(ctx context.Context, params *GetIndexPtcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPtcRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPtc(ctx context.Context, params *GetIndexPtcParams, body GetIndexPtcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPtcRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPubWithBody(ctx context.Context, params *GetIndexPubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPubRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPub(ctx context.Context, params *GetIndexPubParams, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPubRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPureStorageWithBody(ctx context.Context, params *GetIndexPureStorageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPureStorageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPureStorage(ctx context.Context, params *GetIndexPureStorageParams, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPureStorageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypaAdvisoriesWithBody(ctx context.Context, params *GetIndexPypaAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypaAdvisoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypaAdvisories(ctx context.Context, params *GetIndexPypaAdvisoriesParams, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypaAdvisoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypiWithBody(ctx context.Context, params *GetIndexPypiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypi(ctx context.Context, params *GetIndexPypiParams, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQnapWithBody(ctx context.Context, params *GetIndexQnapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQnapRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQnap(ctx context.Context, params *GetIndexQnapParams, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQnapRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualcommWithBody(ctx context.Context, params *GetIndexQualcommParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualcommRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualcomm(ctx context.Context, params *GetIndexQualcommParams, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualcommRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualysWithBody(ctx context.Context, params *GetIndexQualysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualysRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualys(ctx context.Context, params *GetIndexQualysParams, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualysRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQubesQsbWithBody(ctx context.Context, params *GetIndexQubesQsbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQubesQsbRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQubesQsb(ctx context.Context, params *GetIndexQubesQsbParams, body GetIndexQubesQsbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQubesQsbRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRansomwareWithBody(ctx context.Context, params *GetIndexRansomwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRansomwareRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRansomware(ctx context.Context, params *GetIndexRansomwareParams, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRansomwareRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRedhatWithBody(ctx context.Context, params *GetIndexRedhatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRedhatRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRedhat(ctx context.Context, params *GetIndexRedhatParams, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRedhatRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRenesasWithBody(ctx context.Context, params *GetIndexRenesasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRenesasRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRenesas(ctx context.Context, params *GetIndexRenesasParams, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRenesasRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexReviveWithBody(ctx context.Context, params *GetIndexReviveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexReviveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRevive(ctx context.Context, params *GetIndexReviveParams, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexReviveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockwellWithBody(ctx context.Context, params *GetIndexRockwellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockwellRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockwell(ctx context.Context, params *GetIndexRockwellParams, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockwellRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockyWithBody(ctx context.Context, params *GetIndexRockyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRocky(ctx context.Context, params *GetIndexRockyParams, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockyErrataWithBody(ctx context.Context, params *GetIndexRockyErrataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockyErrataRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockyErrata(ctx context.Context, params *GetIndexRockyErrataParams, body GetIndexRockyErrataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockyErrataRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRuckusWithBody(ctx context.Context, params *GetIndexRuckusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRuckusRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRuckus(ctx context.Context, params *GetIndexRuckusParams, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRuckusRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRustsecAdvisoriesWithBody(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRustsecAdvisoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRustsecAdvisories(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRustsecAdvisoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSacertWithBody(ctx context.Context, params *GetIndexSacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSacertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSacert(ctx context.Context, params *GetIndexSacertParams, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSacertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSaintWithBody(ctx context.Context, params *GetIndexSaintParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSaintRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSaint(ctx context.Context, params *GetIndexSaintParams, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSaintRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSalesforceWithBody(ctx context.Context, params *GetIndexSalesforceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSalesforceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSalesforce(ctx context.Context, params *GetIndexSalesforceParams, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSalesforceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSambaWithBody(ctx context.Context, params *GetIndexSambaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSambaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSamba(ctx context.Context, params *GetIndexSambaParams, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSambaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSapWithBody(ctx context.Context, params *GetIndexSapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSapRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSap(ctx context.Context, params *GetIndexSapParams, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSapRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSchneiderElectricWithBody(ctx context.Context, params *GetIndexSchneiderElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSchneiderElectricRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSchneiderElectric(ctx context.Context, params *GetIndexSchneiderElectricParams, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSchneiderElectricRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSecConsultWithBody(ctx context.Context, params *GetIndexSecConsultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSecConsultRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSecConsult(ctx context.Context, params *GetIndexSecConsultParams, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSecConsultRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSecuritylabWithBody(ctx context.Context, params *GetIndexSecuritylabParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSecuritylabRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSecuritylab(ctx context.Context, params *GetIndexSecuritylabParams, body GetIndexSecuritylabJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSecuritylabRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSeebugWithBody(ctx context.Context, params *GetIndexSeebugParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSeebugRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSeebug(ctx context.Context, params *GetIndexSeebugParams, body GetIndexSeebugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSeebugRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSelWithBody(ctx context.Context, params *GetIndexSelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSel(ctx context.Context, params *GetIndexSelParams, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSentineloneWithBody(ctx context.Context, params *GetIndexSentineloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSentineloneRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSentinelone(ctx context.Context, params *GetIndexSentineloneParams, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSentineloneRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexServicenowWithBody(ctx context.Context, params *GetIndexServicenowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexServicenowRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexServicenow(ctx context.Context, params *GetIndexServicenowParams, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexServicenowRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexShadowserverExploitedWithBody(ctx context.Context, params *GetIndexShadowserverExploitedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexShadowserverExploitedRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexShadowserverExploited(ctx context.Context, params *GetIndexShadowserverExploitedParams, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexShadowserverExploitedRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexShielderWithBody(ctx context.Context, params *GetIndexShielderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexShielderRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexShielder(ctx context.Context, params *GetIndexShielderParams, body GetIndexShielderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexShielderRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSickWithBody(ctx context.Context, params *GetIndexSickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSickRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSick(ctx context.Context, params *GetIndexSickParams, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSickRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSiemensWithBody(ctx context.Context, params *GetIndexSiemensParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSiemensRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSiemens(ctx context.Context, params *GetIndexSiemensParams, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSiemensRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSierraWirelessWithBody(ctx context.Context, params *GetIndexSierraWirelessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSierraWirelessRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSierraWireless(ctx context.Context, params *GetIndexSierraWirelessParams, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSierraWirelessRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSigmaRulesWithBody(ctx context.Context, params *GetIndexSigmaRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSigmaRulesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSigmaRules(ctx context.Context, params *GetIndexSigmaRulesParams, body GetIndexSigmaRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSigmaRulesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSingcertWithBody(ctx context.Context, params *GetIndexSingcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSingcertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSingcert(ctx context.Context, params *GetIndexSingcertParams, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSingcertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSlackwareWithBody(ctx context.Context, params *GetIndexSlackwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSlackwareRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSlackware(ctx context.Context, params *GetIndexSlackwareParams, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSlackwareRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolarwindsWithBody(ctx context.Context, params *GetIndexSolarwindsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolarwindsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolarwinds(ctx context.Context, params *GetIndexSolarwindsParams, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolarwindsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolrWithBody(ctx context.Context, params *GetIndexSolrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolrRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolr(ctx context.Context, params *GetIndexSolrParams, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolrRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSonicwallWithBody(ctx context.Context, params *GetIndexSonicwallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSonicwallRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSonicwall(ctx context.Context, params *GetIndexSonicwallParams, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSonicwallRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpacelabsHealthcareWithBody(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpacelabsHealthcareRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpacelabsHealthcare(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpacelabsHealthcareRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSplunkWithBody(ctx context.Context, params *GetIndexSplunkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSplunkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSplunk(ctx context.Context, params *GetIndexSplunkParams, body GetIndexSplunkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSplunkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpringWithBody(ctx context.Context, params *GetIndexSpringParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpringRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpring(ctx context.Context, params *GetIndexSpringParams, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpringRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSsdWithBody(ctx context.Context, params *GetIndexSsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSsdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSsd(ctx context.Context, params *GetIndexSsdParams, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSsdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStormshieldWithBody(ctx context.Context, params *GetIndexStormshieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStormshieldRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStormshield(ctx context.Context, params *GetIndexStormshieldParams, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStormshieldRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStrykerWithBody(ctx context.Context, params *GetIndexStrykerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStrykerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStryker(ctx context.Context, params *GetIndexStrykerParams, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStrykerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSudoWithBody(ctx context.Context, params *GetIndexSudoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSudoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSudo(ctx context.Context, params *GetIndexSudoParams, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSudoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSuseWithBody(ctx context.Context, params *GetIndexSuseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSuseRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSuse(ctx context.Context, params *GetIndexSuseParams, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSuseRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwiftWithBody(ctx context.Context, params *GetIndexSwiftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwiftRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwift(ctx context.Context, params *GetIndexSwiftParams, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwiftRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwisslogHealthcareWithBody(ctx context.Context, params *GetIndexSwisslogHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwisslogHealthcareRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwisslogHealthcare(ctx context.Context, params *GetIndexSwisslogHealthcareParams, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwisslogHealthcareRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSymfonyWithBody(ctx context.Context, params *GetIndexSymfonyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSymfonyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSymfony(ctx context.Context, params *GetIndexSymfonyParams, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSymfonyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSynacktivWithBody(ctx context.Context, params *GetIndexSynacktivParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSynacktivRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSynacktiv(ctx context.Context, params *GetIndexSynacktivParams, body GetIndexSynacktivJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSynacktivRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSyncrosoftWithBody(ctx context.Context, params *GetIndexSyncrosoftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSyncrosoftRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSyncrosoft(ctx context.Context, params *GetIndexSyncrosoftParams, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSyncrosoftRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSynologyWithBody(ctx context.Context, params *GetIndexSynologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSynologyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSynology(ctx context.Context, params *GetIndexSynologyParams, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSynologyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTeamviewerWithBody(ctx context.Context, params *GetIndexTeamviewerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTeamviewerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTeamviewer(ctx context.Context, params *GetIndexTeamviewerParams, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTeamviewerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTenableResearchAdvisoriesWithBody(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTenableResearchAdvisoriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTenableResearchAdvisories(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, body GetIndexTenableResearchAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTenableResearchAdvisoriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTencentWithBody(ctx context.Context, params *GetIndexTencentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTencentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTencent(ctx context.Context, params *GetIndexTencentParams, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTencentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThalesWithBody(ctx context.Context, params *GetIndexThalesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThalesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThales(ctx context.Context, params *GetIndexThalesParams, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThalesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThemissinglinkWithBody(ctx context.Context, params *GetIndexThemissinglinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThemissinglinkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThemissinglink(ctx context.Context, params *GetIndexThemissinglinkParams, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThemissinglinkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThreatActorsWithBody(ctx context.Context, params *GetIndexThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThreatActorsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThreatActors(ctx context.Context, params *GetIndexThreatActorsParams, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThreatActorsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTiWithBody(ctx context.Context, params *GetIndexTiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTi(ctx context.Context, params *GetIndexTiParams, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTibcoWithBody(ctx context.Context, params *GetIndexTibcoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTibcoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTibco(ctx context.Context, params *GetIndexTibcoParams, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTibcoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTpLinkWithBody(ctx context.Context, params *GetIndexTpLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTpLinkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTpLink(ctx context.Context, params *GetIndexTpLinkParams, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTpLinkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTraneTechnologyWithBody(ctx context.Context, params *GetIndexTraneTechnologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTraneTechnologyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTraneTechnology(ctx context.Context, params *GetIndexTraneTechnologyParams, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTraneTechnologyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrendmicroWithBody(ctx context.Context, params *GetIndexTrendmicroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrendmicroRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrendmicro(ctx context.Context, params *GetIndexTrendmicroParams, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrendmicroRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrustwaveWithBody(ctx context.Context, params *GetIndexTrustwaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrustwaveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrustwave(ctx context.Context, params *GetIndexTrustwaveParams, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrustwaveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTwcertWithBody(ctx context.Context, params *GetIndexTwcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTwcertRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTwcert(ctx context.Context, params *GetIndexTwcertParams, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTwcertRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbiquitiWithBody(ctx context.Context, params *GetIndexUbiquitiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbiquitiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbiquiti(ctx context.Context, params *GetIndexUbiquitiParams, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbiquitiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbuntuWithBody(ctx context.Context, params *GetIndexUbuntuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbuntuRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbuntu(ctx context.Context, params *GetIndexUbuntuParams, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbuntuRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnifyWithBody(ctx context.Context, params *GetIndexUnifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnifyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnify(ctx context.Context, params *GetIndexUnifyParams, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnifyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnisocWithBody(ctx context.Context, params *GetIndexUnisocParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnisocRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnisoc(ctx context.Context, params *GetIndexUnisocParams, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnisocRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsdWithBody(ctx context.Context, params *GetIndexUsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsd(ctx context.Context, params *GetIndexUsdParams, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsomWithBody(ctx context.Context, params *GetIndexUsomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsomRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsom(ctx context.Context, params *GetIndexUsomParams, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsomRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVandykeWithBody(ctx context.Context, params *GetIndexVandykeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVandykeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVandyke(ctx context.Context, params *GetIndexVandykeParams, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVandykeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVapidlabsWithBody(ctx context.Context, params *GetIndexVapidlabsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVapidlabsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVapidlabs(ctx context.Context, params *GetIndexVapidlabsParams, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVapidlabsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVcCpeDictionaryWithBody(ctx context.Context, params *GetIndexVcCpeDictionaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVcCpeDictionaryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVcCpeDictionary(ctx context.Context, params *GetIndexVcCpeDictionaryParams, body GetIndexVcCpeDictionaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVcCpeDictionaryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVdeWithBody(ctx context.Context, params *GetIndexVdeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVdeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVde(ctx context.Context, params *GetIndexVdeParams, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVdeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVeeamWithBody(ctx context.Context, params *GetIndexVeeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVeeamRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVeeam(ctx context.Context, params *GetIndexVeeamParams, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVeeamRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVeritasWithBody(ctx context.Context, params *GetIndexVeritasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVeritasRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVeritas(ctx context.Context, params *GetIndexVeritasParams, body GetIndexVeritasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVeritasRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVmwareWithBody(ctx context.Context, params *GetIndexVmwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVmwareRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVmware(ctx context.Context, params *GetIndexVmwareParams, body GetIndexVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVmwareRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVoidsecWithBody(ctx context.Context, params *GetIndexVoidsecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVoidsecRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVoidsec(ctx context.Context, params *GetIndexVoidsecParams, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVoidsecRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckWithBody(ctx context.Context, params *GetIndexVulncheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheck(ctx context.Context, params *GetIndexVulncheckParams, body GetIndexVulncheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckConfigWithBody(ctx context.Context, params *GetIndexVulncheckConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckConfig(ctx context.Context, params *GetIndexVulncheckConfigParams, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckCvelistV5WithBody(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckCvelistV5RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckCvelistV5(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, body GetIndexVulncheckCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckCvelistV5Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckKevWithBody(ctx context.Context, params *GetIndexVulncheckKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckKevRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckKev(ctx context.Context, params *GetIndexVulncheckKevParams, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckKevRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvdWithBody(ctx context.Context, params *GetIndexVulncheckNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvd(ctx context.Context, params *GetIndexVulncheckNvdParams, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvd2WithBody(ctx context.Context, params *GetIndexVulncheckNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvd2RequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvd2(ctx context.Context, params *GetIndexVulncheckNvd2Params, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvd2Request(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulnerabilityAliasesWithBody(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulnerabilityAliasesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulnerabilityAliases(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulnerabilityAliasesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulnrichmentWithBody(ctx context.Context, params *GetIndexVulnrichmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulnrichmentRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulnrichment(ctx context.Context, params *GetIndexVulnrichmentParams, body GetIndexVulnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulnrichmentRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVyaireWithBody(ctx context.Context, params *GetIndexVyaireParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVyaireRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVyaire(ctx context.Context, params *GetIndexVyaireParams, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVyaireRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWatchguardWithBody(ctx context.Context, params *GetIndexWatchguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWatchguardRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWatchguard(ctx context.Context, params *GetIndexWatchguardParams, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWatchguardRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWhatsappWithBody(ctx context.Context, params *GetIndexWhatsappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWhatsappRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWhatsapp(ctx context.Context, params *GetIndexWhatsappParams, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWhatsappRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWibuWithBody(ctx context.Context, params *GetIndexWibuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWibuRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWibu(ctx context.Context, params *GetIndexWibuParams, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWibuRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWiresharkWithBody(ctx context.Context, params *GetIndexWiresharkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWiresharkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWireshark(ctx context.Context, params *GetIndexWiresharkParams, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWiresharkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWithSecureWithBody(ctx context.Context, params *GetIndexWithSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWithSecureRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWithSecure(ctx context.Context, params *GetIndexWithSecureParams, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWithSecureRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfiWithBody(ctx context.Context, params *GetIndexWolfiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfi(ctx context.Context, params *GetIndexWolfiParams, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfsslWithBody(ctx context.Context, params *GetIndexWolfsslParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfsslRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfssl(ctx context.Context, params *GetIndexWolfsslParams, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfsslRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWordfenceWithBody(ctx context.Context, params *GetIndexWordfenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWordfenceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWordfence(ctx context.Context, params *GetIndexWordfenceParams, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWordfenceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXenWithBody(ctx context.Context, params *GetIndexXenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXen(ctx context.Context, params *GetIndexXenParams, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXeroxWithBody(ctx context.Context, params *GetIndexXeroxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXeroxRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXerox(ctx context.Context, params *GetIndexXeroxParams, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXeroxRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXiaomiWithBody(ctx context.Context, params *GetIndexXiaomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXiaomiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXiaomi(ctx context.Context, params *GetIndexXiaomiParams, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXiaomiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXylemWithBody(ctx context.Context, params *GetIndexXylemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXylemRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXylem(ctx context.Context, params *GetIndexXylemParams, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXylemRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYokogawaWithBody(ctx context.Context, params *GetIndexYokogawaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYokogawaRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYokogawa(ctx context.Context, params *GetIndexYokogawaParams, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYokogawaRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYubicoWithBody(ctx context.Context, params *GetIndexYubicoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYubicoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYubico(ctx context.Context, params *GetIndexYubicoParams, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYubicoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZdiWithBody(ctx context.Context, params *GetIndexZdiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZdiRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZdi(ctx context.Context, params *GetIndexZdiParams, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZdiRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZebraWithBody(ctx context.Context, params *GetIndexZebraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZebraRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZebra(ctx context.Context, params *GetIndexZebraParams, body GetIndexZebraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZebraRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZeroscienceWithBody(ctx context.Context, params *GetIndexZeroscienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZeroscienceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZeroscience(ctx context.Context, params *GetIndexZeroscienceParams, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZeroscienceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZimbraWithBody(ctx context.Context, params *GetIndexZimbraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZimbraRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZimbra(ctx context.Context, params *GetIndexZimbraParams, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZimbraRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZoomWithBody(ctx context.Context, params *GetIndexZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZoomRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZoom(ctx context.Context, params *GetIndexZoomParams, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZoomRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZscalerWithBody(ctx context.Context, params *GetIndexZscalerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZscalerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZscaler(ctx context.Context, params *GetIndexZscalerParams, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZscalerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZusoWithBody(ctx context.Context, params *GetIndexZusoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZusoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZuso(ctx context.Context, params *GetIndexZusoParams, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZusoRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZyxelWithBody(ctx context.Context, params *GetIndexZyxelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZyxelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZyxel(ctx context.Context, params *GetIndexZyxelParams, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZyxelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPdnsVulncheckC2(ctx context.Context, params *GetPdnsVulncheckC2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPdnsVulncheckC2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPurl(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPurlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRulesInitialAccessType(ctx context.Context, pType GetRulesInitialAccessTypeParamsType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesInitialAccessTypeRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsVulncheckC2(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsVulncheckC2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBackupRequest generates requests for GetBackup
func NewGetBackupRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackupIndexRequest generates requests for GetBackupIndex
func NewGetBackupIndexRequest(server string, index GetBackupIndexParamsIndex) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCpeRequest generates requests for GetCpe
func NewGetCpeRequest(server string, params *GetCpeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cpe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cpe", runtime.ParamLocationQuery, params.Cpe); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntitlementsRequest generates requests for GetEntitlements
func NewGetEntitlementsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/entitlements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndexRequest generates requests for GetIndex
func NewGetIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndexA10Request calls the generic GetIndexA10 builder with application/json body
func NewGetIndexA10Request(server string, params *GetIndexA10Params, body GetIndexA10JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexA10RequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexA10RequestWithBody generates requests for GetIndexA10 with any type of body
func NewGetIndexA10RequestWithBody(server string, params *GetIndexA10Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/a10")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAbbRequest calls the generic GetIndexAbb builder with application/json body
func NewGetIndexAbbRequest(server string, params *GetIndexAbbParams, body GetIndexAbbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAbbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAbbRequestWithBody generates requests for GetIndexAbb with any type of body
func NewGetIndexAbbRequestWithBody(server string, params *GetIndexAbbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/abb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAbbottRequest calls the generic GetIndexAbbott builder with application/json body
func NewGetIndexAbbottRequest(server string, params *GetIndexAbbottParams, body GetIndexAbbottJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAbbottRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAbbottRequestWithBody generates requests for GetIndexAbbott with any type of body
func NewGetIndexAbbottRequestWithBody(server string, params *GetIndexAbbottParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/abbott")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAbsoluteRequest calls the generic GetIndexAbsolute builder with application/json body
func NewGetIndexAbsoluteRequest(server string, params *GetIndexAbsoluteParams, body GetIndexAbsoluteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAbsoluteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAbsoluteRequestWithBody generates requests for GetIndexAbsolute with any type of body
func NewGetIndexAbsoluteRequestWithBody(server string, params *GetIndexAbsoluteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/absolute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAcronisRequest calls the generic GetIndexAcronis builder with application/json body
func NewGetIndexAcronisRequest(server string, params *GetIndexAcronisParams, body GetIndexAcronisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAcronisRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAcronisRequestWithBody generates requests for GetIndexAcronis with any type of body
func NewGetIndexAcronisRequestWithBody(server string, params *GetIndexAcronisParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/acronis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAdobeRequest calls the generic GetIndexAdobe builder with application/json body
func NewGetIndexAdobeRequest(server string, params *GetIndexAdobeParams, body GetIndexAdobeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAdobeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAdobeRequestWithBody generates requests for GetIndexAdobe with any type of body
func NewGetIndexAdobeRequestWithBody(server string, params *GetIndexAdobeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/adobe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAdvisoriesRequest calls the generic GetIndexAdvisories builder with application/json body
func NewGetIndexAdvisoriesRequest(server string, params *GetIndexAdvisoriesParams, body GetIndexAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAdvisoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAdvisoriesRequestWithBody generates requests for GetIndexAdvisories with any type of body
func NewGetIndexAdvisoriesRequestWithBody(server string, params *GetIndexAdvisoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAlephResearchRequest calls the generic GetIndexAlephResearch builder with application/json body
func NewGetIndexAlephResearchRequest(server string, params *GetIndexAlephResearchParams, body GetIndexAlephResearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAlephResearchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAlephResearchRequestWithBody generates requests for GetIndexAlephResearch with any type of body
func NewGetIndexAlephResearchRequestWithBody(server string, params *GetIndexAlephResearchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aleph-research")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAlmaRequest calls the generic GetIndexAlma builder with application/json body
func NewGetIndexAlmaRequest(server string, params *GetIndexAlmaParams, body GetIndexAlmaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAlmaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAlmaRequestWithBody generates requests for GetIndexAlma with any type of body
func NewGetIndexAlmaRequestWithBody(server string, params *GetIndexAlmaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/alma")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAlpineRequest calls the generic GetIndexAlpine builder with application/json body
func NewGetIndexAlpineRequest(server string, params *GetIndexAlpineParams, body GetIndexAlpineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAlpineRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAlpineRequestWithBody generates requests for GetIndexAlpine with any type of body
func NewGetIndexAlpineRequestWithBody(server string, params *GetIndexAlpineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/alpine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAmazonRequest calls the generic GetIndexAmazon builder with application/json body
func NewGetIndexAmazonRequest(server string, params *GetIndexAmazonParams, body GetIndexAmazonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAmazonRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAmazonRequestWithBody generates requests for GetIndexAmazon with any type of body
func NewGetIndexAmazonRequestWithBody(server string, params *GetIndexAmazonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/amazon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAmdRequest calls the generic GetIndexAmd builder with application/json body
func NewGetIndexAmdRequest(server string, params *GetIndexAmdParams, body GetIndexAmdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAmdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAmdRequestWithBody generates requests for GetIndexAmd with any type of body
func NewGetIndexAmdRequestWithBody(server string, params *GetIndexAmdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/amd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAmiRequest calls the generic GetIndexAmi builder with application/json body
func NewGetIndexAmiRequest(server string, params *GetIndexAmiParams, body GetIndexAmiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAmiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAmiRequestWithBody generates requests for GetIndexAmi with any type of body
func NewGetIndexAmiRequestWithBody(server string, params *GetIndexAmiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAnchoreNvdOverrideRequest calls the generic GetIndexAnchoreNvdOverride builder with application/json body
func NewGetIndexAnchoreNvdOverrideRequest(server string, params *GetIndexAnchoreNvdOverrideParams, body GetIndexAnchoreNvdOverrideJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAnchoreNvdOverrideRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAnchoreNvdOverrideRequestWithBody generates requests for GetIndexAnchoreNvdOverride with any type of body
func NewGetIndexAnchoreNvdOverrideRequestWithBody(server string, params *GetIndexAnchoreNvdOverrideParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/anchore-nvd-override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAndroidRequest calls the generic GetIndexAndroid builder with application/json body
func NewGetIndexAndroidRequest(server string, params *GetIndexAndroidParams, body GetIndexAndroidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAndroidRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAndroidRequestWithBody generates requests for GetIndexAndroid with any type of body
func NewGetIndexAndroidRequestWithBody(server string, params *GetIndexAndroidParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/android")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheActivemqRequest calls the generic GetIndexApacheActivemq builder with application/json body
func NewGetIndexApacheActivemqRequest(server string, params *GetIndexApacheActivemqParams, body GetIndexApacheActivemqJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheActivemqRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheActivemqRequestWithBody generates requests for GetIndexApacheActivemq with any type of body
func NewGetIndexApacheActivemqRequestWithBody(server string, params *GetIndexApacheActivemqParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-activemq")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheArchivaRequest calls the generic GetIndexApacheArchiva builder with application/json body
func NewGetIndexApacheArchivaRequest(server string, params *GetIndexApacheArchivaParams, body GetIndexApacheArchivaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheArchivaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheArchivaRequestWithBody generates requests for GetIndexApacheArchiva with any type of body
func NewGetIndexApacheArchivaRequestWithBody(server string, params *GetIndexApacheArchivaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-archiva")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheArrowRequest calls the generic GetIndexApacheArrow builder with application/json body
func NewGetIndexApacheArrowRequest(server string, params *GetIndexApacheArrowParams, body GetIndexApacheArrowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheArrowRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheArrowRequestWithBody generates requests for GetIndexApacheArrow with any type of body
func NewGetIndexApacheArrowRequestWithBody(server string, params *GetIndexApacheArrowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-arrow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheCamelRequest calls the generic GetIndexApacheCamel builder with application/json body
func NewGetIndexApacheCamelRequest(server string, params *GetIndexApacheCamelParams, body GetIndexApacheCamelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheCamelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheCamelRequestWithBody generates requests for GetIndexApacheCamel with any type of body
func NewGetIndexApacheCamelRequestWithBody(server string, params *GetIndexApacheCamelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-camel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheCommonsRequest calls the generic GetIndexApacheCommons builder with application/json body
func NewGetIndexApacheCommonsRequest(server string, params *GetIndexApacheCommonsParams, body GetIndexApacheCommonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheCommonsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheCommonsRequestWithBody generates requests for GetIndexApacheCommons with any type of body
func NewGetIndexApacheCommonsRequestWithBody(server string, params *GetIndexApacheCommonsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-commons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheCouchdbRequest calls the generic GetIndexApacheCouchdb builder with application/json body
func NewGetIndexApacheCouchdbRequest(server string, params *GetIndexApacheCouchdbParams, body GetIndexApacheCouchdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheCouchdbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheCouchdbRequestWithBody generates requests for GetIndexApacheCouchdb with any type of body
func NewGetIndexApacheCouchdbRequestWithBody(server string, params *GetIndexApacheCouchdbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-couchdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheFlinkRequest calls the generic GetIndexApacheFlink builder with application/json body
func NewGetIndexApacheFlinkRequest(server string, params *GetIndexApacheFlinkParams, body GetIndexApacheFlinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheFlinkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheFlinkRequestWithBody generates requests for GetIndexApacheFlink with any type of body
func NewGetIndexApacheFlinkRequestWithBody(server string, params *GetIndexApacheFlinkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-flink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheGuacamoleRequest calls the generic GetIndexApacheGuacamole builder with application/json body
func NewGetIndexApacheGuacamoleRequest(server string, params *GetIndexApacheGuacamoleParams, body GetIndexApacheGuacamoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheGuacamoleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheGuacamoleRequestWithBody generates requests for GetIndexApacheGuacamole with any type of body
func NewGetIndexApacheGuacamoleRequestWithBody(server string, params *GetIndexApacheGuacamoleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-guacamole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheHadoopRequest calls the generic GetIndexApacheHadoop builder with application/json body
func NewGetIndexApacheHadoopRequest(server string, params *GetIndexApacheHadoopParams, body GetIndexApacheHadoopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheHadoopRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheHadoopRequestWithBody generates requests for GetIndexApacheHadoop with any type of body
func NewGetIndexApacheHadoopRequestWithBody(server string, params *GetIndexApacheHadoopParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-hadoop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheHttpRequest calls the generic GetIndexApacheHttp builder with application/json body
func NewGetIndexApacheHttpRequest(server string, params *GetIndexApacheHttpParams, body GetIndexApacheHttpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheHttpRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheHttpRequestWithBody generates requests for GetIndexApacheHttp with any type of body
func NewGetIndexApacheHttpRequestWithBody(server string, params *GetIndexApacheHttpParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-http")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheJspwikiRequest calls the generic GetIndexApacheJspwiki builder with application/json body
func NewGetIndexApacheJspwikiRequest(server string, params *GetIndexApacheJspwikiParams, body GetIndexApacheJspwikiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheJspwikiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheJspwikiRequestWithBody generates requests for GetIndexApacheJspwiki with any type of body
func NewGetIndexApacheJspwikiRequestWithBody(server string, params *GetIndexApacheJspwikiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-jspwiki")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheKafkaRequest calls the generic GetIndexApacheKafka builder with application/json body
func NewGetIndexApacheKafkaRequest(server string, params *GetIndexApacheKafkaParams, body GetIndexApacheKafkaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheKafkaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheKafkaRequestWithBody generates requests for GetIndexApacheKafka with any type of body
func NewGetIndexApacheKafkaRequestWithBody(server string, params *GetIndexApacheKafkaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-kafka")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheLoggingservicesRequest calls the generic GetIndexApacheLoggingservices builder with application/json body
func NewGetIndexApacheLoggingservicesRequest(server string, params *GetIndexApacheLoggingservicesParams, body GetIndexApacheLoggingservicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheLoggingservicesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheLoggingservicesRequestWithBody generates requests for GetIndexApacheLoggingservices with any type of body
func NewGetIndexApacheLoggingservicesRequestWithBody(server string, params *GetIndexApacheLoggingservicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-loggingservices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheNifiRequest calls the generic GetIndexApacheNifi builder with application/json body
func NewGetIndexApacheNifiRequest(server string, params *GetIndexApacheNifiParams, body GetIndexApacheNifiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheNifiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheNifiRequestWithBody generates requests for GetIndexApacheNifi with any type of body
func NewGetIndexApacheNifiRequestWithBody(server string, params *GetIndexApacheNifiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-nifi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheOfbizRequest calls the generic GetIndexApacheOfbiz builder with application/json body
func NewGetIndexApacheOfbizRequest(server string, params *GetIndexApacheOfbizParams, body GetIndexApacheOfbizJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheOfbizRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheOfbizRequestWithBody generates requests for GetIndexApacheOfbiz with any type of body
func NewGetIndexApacheOfbizRequestWithBody(server string, params *GetIndexApacheOfbizParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-ofbiz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheOpenmeetingsRequest calls the generic GetIndexApacheOpenmeetings builder with application/json body
func NewGetIndexApacheOpenmeetingsRequest(server string, params *GetIndexApacheOpenmeetingsParams, body GetIndexApacheOpenmeetingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheOpenmeetingsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheOpenmeetingsRequestWithBody generates requests for GetIndexApacheOpenmeetings with any type of body
func NewGetIndexApacheOpenmeetingsRequestWithBody(server string, params *GetIndexApacheOpenmeetingsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-openmeetings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheOpenofficeRequest calls the generic GetIndexApacheOpenoffice builder with application/json body
func NewGetIndexApacheOpenofficeRequest(server string, params *GetIndexApacheOpenofficeParams, body GetIndexApacheOpenofficeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheOpenofficeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheOpenofficeRequestWithBody generates requests for GetIndexApacheOpenoffice with any type of body
func NewGetIndexApacheOpenofficeRequestWithBody(server string, params *GetIndexApacheOpenofficeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-openoffice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApachePulsarRequest calls the generic GetIndexApachePulsar builder with application/json body
func NewGetIndexApachePulsarRequest(server string, params *GetIndexApachePulsarParams, body GetIndexApachePulsarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApachePulsarRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApachePulsarRequestWithBody generates requests for GetIndexApachePulsar with any type of body
func NewGetIndexApachePulsarRequestWithBody(server string, params *GetIndexApachePulsarParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-pulsar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheShiroRequest calls the generic GetIndexApacheShiro builder with application/json body
func NewGetIndexApacheShiroRequest(server string, params *GetIndexApacheShiroParams, body GetIndexApacheShiroJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheShiroRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheShiroRequestWithBody generates requests for GetIndexApacheShiro with any type of body
func NewGetIndexApacheShiroRequestWithBody(server string, params *GetIndexApacheShiroParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-shiro")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheSparkRequest calls the generic GetIndexApacheSpark builder with application/json body
func NewGetIndexApacheSparkRequest(server string, params *GetIndexApacheSparkParams, body GetIndexApacheSparkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheSparkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheSparkRequestWithBody generates requests for GetIndexApacheSpark with any type of body
func NewGetIndexApacheSparkRequestWithBody(server string, params *GetIndexApacheSparkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-spark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheStrutsRequest calls the generic GetIndexApacheStruts builder with application/json body
func NewGetIndexApacheStrutsRequest(server string, params *GetIndexApacheStrutsParams, body GetIndexApacheStrutsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheStrutsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheStrutsRequestWithBody generates requests for GetIndexApacheStruts with any type of body
func NewGetIndexApacheStrutsRequestWithBody(server string, params *GetIndexApacheStrutsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-struts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheSubversionRequest calls the generic GetIndexApacheSubversion builder with application/json body
func NewGetIndexApacheSubversionRequest(server string, params *GetIndexApacheSubversionParams, body GetIndexApacheSubversionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheSubversionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheSubversionRequestWithBody generates requests for GetIndexApacheSubversion with any type of body
func NewGetIndexApacheSubversionRequestWithBody(server string, params *GetIndexApacheSubversionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-subversion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheSupersetRequest calls the generic GetIndexApacheSuperset builder with application/json body
func NewGetIndexApacheSupersetRequest(server string, params *GetIndexApacheSupersetParams, body GetIndexApacheSupersetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheSupersetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheSupersetRequestWithBody generates requests for GetIndexApacheSuperset with any type of body
func NewGetIndexApacheSupersetRequestWithBody(server string, params *GetIndexApacheSupersetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-superset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheTomcatRequest calls the generic GetIndexApacheTomcat builder with application/json body
func NewGetIndexApacheTomcatRequest(server string, params *GetIndexApacheTomcatParams, body GetIndexApacheTomcatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheTomcatRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheTomcatRequestWithBody generates requests for GetIndexApacheTomcat with any type of body
func NewGetIndexApacheTomcatRequestWithBody(server string, params *GetIndexApacheTomcatParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-tomcat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheZookeeperRequest calls the generic GetIndexApacheZookeeper builder with application/json body
func NewGetIndexApacheZookeeperRequest(server string, params *GetIndexApacheZookeeperParams, body GetIndexApacheZookeeperJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheZookeeperRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexApacheZookeeperRequestWithBody generates requests for GetIndexApacheZookeeper with any type of body
func NewGetIndexApacheZookeeperRequestWithBody(server string, params *GetIndexApacheZookeeperParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-zookeeper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAppcheckRequest calls the generic GetIndexAppcheck builder with application/json body
func NewGetIndexAppcheckRequest(server string, params *GetIndexAppcheckParams, body GetIndexAppcheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAppcheckRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAppcheckRequestWithBody generates requests for GetIndexAppcheck with any type of body
func NewGetIndexAppcheckRequestWithBody(server string, params *GetIndexAppcheckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/appcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAppgateRequest calls the generic GetIndexAppgate builder with application/json body
func NewGetIndexAppgateRequest(server string, params *GetIndexAppgateParams, body GetIndexAppgateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAppgateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAppgateRequestWithBody generates requests for GetIndexAppgate with any type of body
func NewGetIndexAppgateRequestWithBody(server string, params *GetIndexAppgateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/appgate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAppleRequest calls the generic GetIndexApple builder with application/json body
func NewGetIndexAppleRequest(server string, params *GetIndexAppleParams, body GetIndexAppleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAppleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAppleRequestWithBody generates requests for GetIndexApple with any type of body
func NewGetIndexAppleRequestWithBody(server string, params *GetIndexAppleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexArchRequest calls the generic GetIndexArch builder with application/json body
func NewGetIndexArchRequest(server string, params *GetIndexArchParams, body GetIndexArchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexArchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexArchRequestWithBody generates requests for GetIndexArch with any type of body
func NewGetIndexArchRequestWithBody(server string, params *GetIndexArchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/arch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAristaRequest calls the generic GetIndexArista builder with application/json body
func NewGetIndexAristaRequest(server string, params *GetIndexAristaParams, body GetIndexAristaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAristaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAristaRequestWithBody generates requests for GetIndexArista with any type of body
func NewGetIndexAristaRequestWithBody(server string, params *GetIndexAristaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/arista")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexArubaRequest calls the generic GetIndexAruba builder with application/json body
func NewGetIndexArubaRequest(server string, params *GetIndexArubaParams, body GetIndexArubaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexArubaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexArubaRequestWithBody generates requests for GetIndexAruba with any type of body
func NewGetIndexArubaRequestWithBody(server string, params *GetIndexArubaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aruba")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAsrgRequest calls the generic GetIndexAsrg builder with application/json body
func NewGetIndexAsrgRequest(server string, params *GetIndexAsrgParams, body GetIndexAsrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAsrgRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAsrgRequestWithBody generates requests for GetIndexAsrg with any type of body
func NewGetIndexAsrgRequestWithBody(server string, params *GetIndexAsrgParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/asrg")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAssetnoteRequest calls the generic GetIndexAssetnote builder with application/json body
func NewGetIndexAssetnoteRequest(server string, params *GetIndexAssetnoteParams, body GetIndexAssetnoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAssetnoteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAssetnoteRequestWithBody generates requests for GetIndexAssetnote with any type of body
func NewGetIndexAssetnoteRequestWithBody(server string, params *GetIndexAssetnoteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/assetnote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAsteriskRequest calls the generic GetIndexAsterisk builder with application/json body
func NewGetIndexAsteriskRequest(server string, params *GetIndexAsteriskParams, body GetIndexAsteriskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAsteriskRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAsteriskRequestWithBody generates requests for GetIndexAsterisk with any type of body
func NewGetIndexAsteriskRequestWithBody(server string, params *GetIndexAsteriskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/asterisk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAsusRequest calls the generic GetIndexAsus builder with application/json body
func NewGetIndexAsusRequest(server string, params *GetIndexAsusParams, body GetIndexAsusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAsusRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAsusRequestWithBody generates requests for GetIndexAsus with any type of body
func NewGetIndexAsusRequestWithBody(server string, params *GetIndexAsusParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/asus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAtlassianRequest calls the generic GetIndexAtlassian builder with application/json body
func NewGetIndexAtlassianRequest(server string, params *GetIndexAtlassianParams, body GetIndexAtlassianJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAtlassianRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAtlassianRequestWithBody generates requests for GetIndexAtlassian with any type of body
func NewGetIndexAtlassianRequestWithBody(server string, params *GetIndexAtlassianParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/atlassian")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAtlassianVulnsRequest calls the generic GetIndexAtlassianVulns builder with application/json body
func NewGetIndexAtlassianVulnsRequest(server string, params *GetIndexAtlassianVulnsParams, body GetIndexAtlassianVulnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAtlassianVulnsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAtlassianVulnsRequestWithBody generates requests for GetIndexAtlassianVulns with any type of body
func NewGetIndexAtlassianVulnsRequestWithBody(server string, params *GetIndexAtlassianVulnsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/atlassian-vulns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAtredisRequest calls the generic GetIndexAtredis builder with application/json body
func NewGetIndexAtredisRequest(server string, params *GetIndexAtredisParams, body GetIndexAtredisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAtredisRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAtredisRequestWithBody generates requests for GetIndexAtredis with any type of body
func NewGetIndexAtredisRequestWithBody(server string, params *GetIndexAtredisParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/atredis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAuscertRequest calls the generic GetIndexAuscert builder with application/json body
func NewGetIndexAuscertRequest(server string, params *GetIndexAuscertParams, body GetIndexAuscertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAuscertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAuscertRequestWithBody generates requests for GetIndexAuscert with any type of body
func NewGetIndexAuscertRequestWithBody(server string, params *GetIndexAuscertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/auscert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAutodeskRequest calls the generic GetIndexAutodesk builder with application/json body
func NewGetIndexAutodeskRequest(server string, params *GetIndexAutodeskParams, body GetIndexAutodeskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAutodeskRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAutodeskRequestWithBody generates requests for GetIndexAutodesk with any type of body
func NewGetIndexAutodeskRequestWithBody(server string, params *GetIndexAutodeskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/autodesk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAvayaRequest calls the generic GetIndexAvaya builder with application/json body
func NewGetIndexAvayaRequest(server string, params *GetIndexAvayaParams, body GetIndexAvayaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAvayaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAvayaRequestWithBody generates requests for GetIndexAvaya with any type of body
func NewGetIndexAvayaRequestWithBody(server string, params *GetIndexAvayaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/avaya")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAvevaRequest calls the generic GetIndexAveva builder with application/json body
func NewGetIndexAvevaRequest(server string, params *GetIndexAvevaParams, body GetIndexAvevaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAvevaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAvevaRequestWithBody generates requests for GetIndexAveva with any type of body
func NewGetIndexAvevaRequestWithBody(server string, params *GetIndexAvevaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aveva")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAvigilonRequest calls the generic GetIndexAvigilon builder with application/json body
func NewGetIndexAvigilonRequest(server string, params *GetIndexAvigilonParams, body GetIndexAvigilonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAvigilonRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAvigilonRequestWithBody generates requests for GetIndexAvigilon with any type of body
func NewGetIndexAvigilonRequestWithBody(server string, params *GetIndexAvigilonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/avigilon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAwsRequest calls the generic GetIndexAws builder with application/json body
func NewGetIndexAwsRequest(server string, params *GetIndexAwsParams, body GetIndexAwsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAwsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAwsRequestWithBody generates requests for GetIndexAws with any type of body
func NewGetIndexAwsRequestWithBody(server string, params *GetIndexAwsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAxisRequest calls the generic GetIndexAxis builder with application/json body
func NewGetIndexAxisRequest(server string, params *GetIndexAxisParams, body GetIndexAxisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAxisRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAxisRequestWithBody generates requests for GetIndexAxis with any type of body
func NewGetIndexAxisRequestWithBody(server string, params *GetIndexAxisParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/axis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAzulRequest calls the generic GetIndexAzul builder with application/json body
func NewGetIndexAzulRequest(server string, params *GetIndexAzulParams, body GetIndexAzulJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAzulRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexAzulRequestWithBody generates requests for GetIndexAzul with any type of body
func NewGetIndexAzulRequestWithBody(server string, params *GetIndexAzulParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/azul")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBandrRequest calls the generic GetIndexBandr builder with application/json body
func NewGetIndexBandrRequest(server string, params *GetIndexBandrParams, body GetIndexBandrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBandrRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBandrRequestWithBody generates requests for GetIndexBandr with any type of body
func NewGetIndexBandrRequestWithBody(server string, params *GetIndexBandrParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bandr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBaxterRequest calls the generic GetIndexBaxter builder with application/json body
func NewGetIndexBaxterRequest(server string, params *GetIndexBaxterParams, body GetIndexBaxterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBaxterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBaxterRequestWithBody generates requests for GetIndexBaxter with any type of body
func NewGetIndexBaxterRequestWithBody(server string, params *GetIndexBaxterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/baxter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBbraunRequest calls the generic GetIndexBbraun builder with application/json body
func NewGetIndexBbraunRequest(server string, params *GetIndexBbraunParams, body GetIndexBbraunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBbraunRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBbraunRequestWithBody generates requests for GetIndexBbraun with any type of body
func NewGetIndexBbraunRequestWithBody(server string, params *GetIndexBbraunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bbraun")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBdRequest calls the generic GetIndexBd builder with application/json body
func NewGetIndexBdRequest(server string, params *GetIndexBdParams, body GetIndexBdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBdRequestWithBody generates requests for GetIndexBd with any type of body
func NewGetIndexBdRequestWithBody(server string, params *GetIndexBdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBduRequest calls the generic GetIndexBdu builder with application/json body
func NewGetIndexBduRequest(server string, params *GetIndexBduParams, body GetIndexBduJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBduRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBduRequestWithBody generates requests for GetIndexBdu with any type of body
func NewGetIndexBduRequestWithBody(server string, params *GetIndexBduParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bdu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBeckhoffRequest calls the generic GetIndexBeckhoff builder with application/json body
func NewGetIndexBeckhoffRequest(server string, params *GetIndexBeckhoffParams, body GetIndexBeckhoffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBeckhoffRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBeckhoffRequestWithBody generates requests for GetIndexBeckhoff with any type of body
func NewGetIndexBeckhoffRequestWithBody(server string, params *GetIndexBeckhoffParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/beckhoff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBeldenRequest calls the generic GetIndexBelden builder with application/json body
func NewGetIndexBeldenRequest(server string, params *GetIndexBeldenParams, body GetIndexBeldenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBeldenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBeldenRequestWithBody generates requests for GetIndexBelden with any type of body
func NewGetIndexBeldenRequestWithBody(server string, params *GetIndexBeldenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/belden")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBeyondTrustRequest calls the generic GetIndexBeyondTrust builder with application/json body
func NewGetIndexBeyondTrustRequest(server string, params *GetIndexBeyondTrustParams, body GetIndexBeyondTrustJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBeyondTrustRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBeyondTrustRequestWithBody generates requests for GetIndexBeyondTrust with any type of body
func NewGetIndexBeyondTrustRequestWithBody(server string, params *GetIndexBeyondTrustParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/beyond-trust")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBinarlyRequest calls the generic GetIndexBinarly builder with application/json body
func NewGetIndexBinarlyRequest(server string, params *GetIndexBinarlyParams, body GetIndexBinarlyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBinarlyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBinarlyRequestWithBody generates requests for GetIndexBinarly with any type of body
func NewGetIndexBinarlyRequestWithBody(server string, params *GetIndexBinarlyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/binarly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBitdefenderRequest calls the generic GetIndexBitdefender builder with application/json body
func NewGetIndexBitdefenderRequest(server string, params *GetIndexBitdefenderParams, body GetIndexBitdefenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBitdefenderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBitdefenderRequestWithBody generates requests for GetIndexBitdefender with any type of body
func NewGetIndexBitdefenderRequestWithBody(server string, params *GetIndexBitdefenderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bitdefender")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBlackberryRequest calls the generic GetIndexBlackberry builder with application/json body
func NewGetIndexBlackberryRequest(server string, params *GetIndexBlackberryParams, body GetIndexBlackberryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBlackberryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBlackberryRequestWithBody generates requests for GetIndexBlackberry with any type of body
func NewGetIndexBlackberryRequestWithBody(server string, params *GetIndexBlackberryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/blackberry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBlsRequest calls the generic GetIndexBls builder with application/json body
func NewGetIndexBlsRequest(server string, params *GetIndexBlsParams, body GetIndexBlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBlsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBlsRequestWithBody generates requests for GetIndexBls with any type of body
func NewGetIndexBlsRequestWithBody(server string, params *GetIndexBlsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBoschRequest calls the generic GetIndexBosch builder with application/json body
func NewGetIndexBoschRequest(server string, params *GetIndexBoschParams, body GetIndexBoschJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBoschRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBoschRequestWithBody generates requests for GetIndexBosch with any type of body
func NewGetIndexBoschRequestWithBody(server string, params *GetIndexBoschParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bosch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBostonScientificRequest calls the generic GetIndexBostonScientific builder with application/json body
func NewGetIndexBostonScientificRequest(server string, params *GetIndexBostonScientificParams, body GetIndexBostonScientificJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBostonScientificRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBostonScientificRequestWithBody generates requests for GetIndexBostonScientific with any type of body
func NewGetIndexBostonScientificRequestWithBody(server string, params *GetIndexBostonScientificParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/boston-scientific")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBotnetsRequest calls the generic GetIndexBotnets builder with application/json body
func NewGetIndexBotnetsRequest(server string, params *GetIndexBotnetsParams, body GetIndexBotnetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBotnetsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexBotnetsRequestWithBody generates requests for GetIndexBotnets with any type of body
func NewGetIndexBotnetsRequestWithBody(server string, params *GetIndexBotnetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/botnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCaCyberCentreRequest calls the generic GetIndexCaCyberCentre builder with application/json body
func NewGetIndexCaCyberCentreRequest(server string, params *GetIndexCaCyberCentreParams, body GetIndexCaCyberCentreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCaCyberCentreRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCaCyberCentreRequestWithBody generates requests for GetIndexCaCyberCentre with any type of body
func NewGetIndexCaCyberCentreRequestWithBody(server string, params *GetIndexCaCyberCentreParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ca-cyber-centre")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCanvasRequest calls the generic GetIndexCanvas builder with application/json body
func NewGetIndexCanvasRequest(server string, params *GetIndexCanvasParams, body GetIndexCanvasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCanvasRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCanvasRequestWithBody generates requests for GetIndexCanvas with any type of body
func NewGetIndexCanvasRequestWithBody(server string, params *GetIndexCanvasParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/canvas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCarestreamRequest calls the generic GetIndexCarestream builder with application/json body
func NewGetIndexCarestreamRequest(server string, params *GetIndexCarestreamParams, body GetIndexCarestreamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCarestreamRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCarestreamRequestWithBody generates requests for GetIndexCarestream with any type of body
func NewGetIndexCarestreamRequestWithBody(server string, params *GetIndexCarestreamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/carestream")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCargoRequest calls the generic GetIndexCargo builder with application/json body
func NewGetIndexCargoRequest(server string, params *GetIndexCargoParams, body GetIndexCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCargoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCargoRequestWithBody generates requests for GetIndexCargo with any type of body
func NewGetIndexCargoRequestWithBody(server string, params *GetIndexCargoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cargo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCarrierRequest calls the generic GetIndexCarrier builder with application/json body
func NewGetIndexCarrierRequest(server string, params *GetIndexCarrierParams, body GetIndexCarrierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCarrierRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCarrierRequestWithBody generates requests for GetIndexCarrier with any type of body
func NewGetIndexCarrierRequestWithBody(server string, params *GetIndexCarrierParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/carrier")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCblMarinerRequest calls the generic GetIndexCblMariner builder with application/json body
func NewGetIndexCblMarinerRequest(server string, params *GetIndexCblMarinerParams, body GetIndexCblMarinerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCblMarinerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCblMarinerRequestWithBody generates requests for GetIndexCblMariner with any type of body
func NewGetIndexCblMarinerRequestWithBody(server string, params *GetIndexCblMarinerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cbl-mariner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCentosRequest calls the generic GetIndexCentos builder with application/json body
func NewGetIndexCentosRequest(server string, params *GetIndexCentosParams, body GetIndexCentosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCentosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCentosRequestWithBody generates requests for GetIndexCentos with any type of body
func NewGetIndexCentosRequestWithBody(server string, params *GetIndexCentosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/centos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertBeRequest calls the generic GetIndexCertBe builder with application/json body
func NewGetIndexCertBeRequest(server string, params *GetIndexCertBeParams, body GetIndexCertBeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertBeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCertBeRequestWithBody generates requests for GetIndexCertBe with any type of body
func NewGetIndexCertBeRequestWithBody(server string, params *GetIndexCertBeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-be")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertInRequest calls the generic GetIndexCertIn builder with application/json body
func NewGetIndexCertInRequest(server string, params *GetIndexCertInParams, body GetIndexCertInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertInRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCertInRequestWithBody generates requests for GetIndexCertIn with any type of body
func NewGetIndexCertInRequestWithBody(server string, params *GetIndexCertInParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertIrSecurityAlertsRequest calls the generic GetIndexCertIrSecurityAlerts builder with application/json body
func NewGetIndexCertIrSecurityAlertsRequest(server string, params *GetIndexCertIrSecurityAlertsParams, body GetIndexCertIrSecurityAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertIrSecurityAlertsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCertIrSecurityAlertsRequestWithBody generates requests for GetIndexCertIrSecurityAlerts with any type of body
func NewGetIndexCertIrSecurityAlertsRequestWithBody(server string, params *GetIndexCertIrSecurityAlertsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-ir-security-alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertSeRequest calls the generic GetIndexCertSe builder with application/json body
func NewGetIndexCertSeRequest(server string, params *GetIndexCertSeParams, body GetIndexCertSeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertSeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCertSeRequestWithBody generates requests for GetIndexCertSe with any type of body
func NewGetIndexCertSeRequestWithBody(server string, params *GetIndexCertSeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-se")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertUaRequest calls the generic GetIndexCertUa builder with application/json body
func NewGetIndexCertUaRequest(server string, params *GetIndexCertUaParams, body GetIndexCertUaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertUaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCertUaRequestWithBody generates requests for GetIndexCertUa with any type of body
func NewGetIndexCertUaRequestWithBody(server string, params *GetIndexCertUaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-ua")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCerteuRequest calls the generic GetIndexCerteu builder with application/json body
func NewGetIndexCerteuRequest(server string, params *GetIndexCerteuParams, body GetIndexCerteuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCerteuRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCerteuRequestWithBody generates requests for GetIndexCerteu with any type of body
func NewGetIndexCerteuRequestWithBody(server string, params *GetIndexCerteuParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/certeu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertfrRequest calls the generic GetIndexCertfr builder with application/json body
func NewGetIndexCertfrRequest(server string, params *GetIndexCertfrParams, body GetIndexCertfrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertfrRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCertfrRequestWithBody generates requests for GetIndexCertfr with any type of body
func NewGetIndexCertfrRequestWithBody(server string, params *GetIndexCertfrParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/certfr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexChainguardRequest calls the generic GetIndexChainguard builder with application/json body
func NewGetIndexChainguardRequest(server string, params *GetIndexChainguardParams, body GetIndexChainguardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexChainguardRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexChainguardRequestWithBody generates requests for GetIndexChainguard with any type of body
func NewGetIndexChainguardRequestWithBody(server string, params *GetIndexChainguardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/chainguard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCheckpointRequest calls the generic GetIndexCheckpoint builder with application/json body
func NewGetIndexCheckpointRequest(server string, params *GetIndexCheckpointParams, body GetIndexCheckpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCheckpointRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCheckpointRequestWithBody generates requests for GetIndexCheckpoint with any type of body
func NewGetIndexCheckpointRequestWithBody(server string, params *GetIndexCheckpointParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/checkpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexChromeRequest calls the generic GetIndexChrome builder with application/json body
func NewGetIndexChromeRequest(server string, params *GetIndexChromeParams, body GetIndexChromeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexChromeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexChromeRequestWithBody generates requests for GetIndexChrome with any type of body
func NewGetIndexChromeRequestWithBody(server string, params *GetIndexChromeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/chrome")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCisaAlertsRequest calls the generic GetIndexCisaAlerts builder with application/json body
func NewGetIndexCisaAlertsRequest(server string, params *GetIndexCisaAlertsParams, body GetIndexCisaAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCisaAlertsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCisaAlertsRequestWithBody generates requests for GetIndexCisaAlerts with any type of body
func NewGetIndexCisaAlertsRequestWithBody(server string, params *GetIndexCisaAlertsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisa-alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCisaKevRequest calls the generic GetIndexCisaKev builder with application/json body
func NewGetIndexCisaKevRequest(server string, params *GetIndexCisaKevParams, body GetIndexCisaKevJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCisaKevRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCisaKevRequestWithBody generates requests for GetIndexCisaKev with any type of body
func NewGetIndexCisaKevRequestWithBody(server string, params *GetIndexCisaKevParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisa-kev")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCiscoRequest calls the generic GetIndexCisco builder with application/json body
func NewGetIndexCiscoRequest(server string, params *GetIndexCiscoParams, body GetIndexCiscoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCiscoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCiscoRequestWithBody generates requests for GetIndexCisco with any type of body
func NewGetIndexCiscoRequestWithBody(server string, params *GetIndexCiscoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisco")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCiscoTalosRequest calls the generic GetIndexCiscoTalos builder with application/json body
func NewGetIndexCiscoTalosRequest(server string, params *GetIndexCiscoTalosParams, body GetIndexCiscoTalosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCiscoTalosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCiscoTalosRequestWithBody generates requests for GetIndexCiscoTalos with any type of body
func NewGetIndexCiscoTalosRequestWithBody(server string, params *GetIndexCiscoTalosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisco-talos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCitrixRequest calls the generic GetIndexCitrix builder with application/json body
func NewGetIndexCitrixRequest(server string, params *GetIndexCitrixParams, body GetIndexCitrixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCitrixRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCitrixRequestWithBody generates requests for GetIndexCitrix with any type of body
func NewGetIndexCitrixRequestWithBody(server string, params *GetIndexCitrixParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/citrix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexClarotyRequest calls the generic GetIndexClaroty builder with application/json body
func NewGetIndexClarotyRequest(server string, params *GetIndexClarotyParams, body GetIndexClarotyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexClarotyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexClarotyRequestWithBody generates requests for GetIndexClaroty with any type of body
func NewGetIndexClarotyRequestWithBody(server string, params *GetIndexClarotyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/claroty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCloudbeesRequest calls the generic GetIndexCloudbees builder with application/json body
func NewGetIndexCloudbeesRequest(server string, params *GetIndexCloudbeesParams, body GetIndexCloudbeesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCloudbeesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCloudbeesRequestWithBody generates requests for GetIndexCloudbees with any type of body
func NewGetIndexCloudbeesRequestWithBody(server string, params *GetIndexCloudbeesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cloudbees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCloudvulndbRequest calls the generic GetIndexCloudvulndb builder with application/json body
func NewGetIndexCloudvulndbRequest(server string, params *GetIndexCloudvulndbParams, body GetIndexCloudvulndbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCloudvulndbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCloudvulndbRequestWithBody generates requests for GetIndexCloudvulndb with any type of body
func NewGetIndexCloudvulndbRequestWithBody(server string, params *GetIndexCloudvulndbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cloudvulndb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnnvdRequest calls the generic GetIndexCnnvd builder with application/json body
func NewGetIndexCnnvdRequest(server string, params *GetIndexCnnvdParams, body GetIndexCnnvdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnnvdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCnnvdRequestWithBody generates requests for GetIndexCnnvd with any type of body
func NewGetIndexCnnvdRequestWithBody(server string, params *GetIndexCnnvdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cnnvd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnvdBulletinsRequest calls the generic GetIndexCnvdBulletins builder with application/json body
func NewGetIndexCnvdBulletinsRequest(server string, params *GetIndexCnvdBulletinsParams, body GetIndexCnvdBulletinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnvdBulletinsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCnvdBulletinsRequestWithBody generates requests for GetIndexCnvdBulletins with any type of body
func NewGetIndexCnvdBulletinsRequestWithBody(server string, params *GetIndexCnvdBulletinsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cnvd-bulletins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnvdFlawsRequest calls the generic GetIndexCnvdFlaws builder with application/json body
func NewGetIndexCnvdFlawsRequest(server string, params *GetIndexCnvdFlawsParams, body GetIndexCnvdFlawsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnvdFlawsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCnvdFlawsRequestWithBody generates requests for GetIndexCnvdFlaws with any type of body
func NewGetIndexCnvdFlawsRequestWithBody(server string, params *GetIndexCnvdFlawsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cnvd-flaws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCocoapodsRequest calls the generic GetIndexCocoapods builder with application/json body
func NewGetIndexCocoapodsRequest(server string, params *GetIndexCocoapodsParams, body GetIndexCocoapodsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCocoapodsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCocoapodsRequestWithBody generates requests for GetIndexCocoapods with any type of body
func NewGetIndexCocoapodsRequestWithBody(server string, params *GetIndexCocoapodsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cocoapods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCodesysRequest calls the generic GetIndexCodesys builder with application/json body
func NewGetIndexCodesysRequest(server string, params *GetIndexCodesysParams, body GetIndexCodesysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCodesysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCodesysRequestWithBody generates requests for GetIndexCodesys with any type of body
func NewGetIndexCodesysRequestWithBody(server string, params *GetIndexCodesysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/codesys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCompassSecurityRequest calls the generic GetIndexCompassSecurity builder with application/json body
func NewGetIndexCompassSecurityRequest(server string, params *GetIndexCompassSecurityParams, body GetIndexCompassSecurityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCompassSecurityRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCompassSecurityRequestWithBody generates requests for GetIndexCompassSecurity with any type of body
func NewGetIndexCompassSecurityRequestWithBody(server string, params *GetIndexCompassSecurityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/compass-security")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexComposerRequest calls the generic GetIndexComposer builder with application/json body
func NewGetIndexComposerRequest(server string, params *GetIndexComposerParams, body GetIndexComposerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexComposerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexComposerRequestWithBody generates requests for GetIndexComposer with any type of body
func NewGetIndexComposerRequestWithBody(server string, params *GetIndexComposerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/composer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexConanRequest calls the generic GetIndexConan builder with application/json body
func NewGetIndexConanRequest(server string, params *GetIndexConanParams, body GetIndexConanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexConanRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexConanRequestWithBody generates requests for GetIndexConan with any type of body
func NewGetIndexConanRequestWithBody(server string, params *GetIndexConanParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/conan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCrestronRequest calls the generic GetIndexCrestron builder with application/json body
func NewGetIndexCrestronRequest(server string, params *GetIndexCrestronParams, body GetIndexCrestronJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCrestronRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCrestronRequestWithBody generates requests for GetIndexCrestron with any type of body
func NewGetIndexCrestronRequestWithBody(server string, params *GetIndexCrestronParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/crestron")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCurlRequest calls the generic GetIndexCurl builder with application/json body
func NewGetIndexCurlRequest(server string, params *GetIndexCurlParams, body GetIndexCurlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCurlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCurlRequestWithBody generates requests for GetIndexCurl with any type of body
func NewGetIndexCurlRequestWithBody(server string, params *GetIndexCurlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/curl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCweRequest calls the generic GetIndexCwe builder with application/json body
func NewGetIndexCweRequest(server string, params *GetIndexCweParams, body GetIndexCweJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCweRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexCweRequestWithBody generates requests for GetIndexCwe with any type of body
func NewGetIndexCweRequestWithBody(server string, params *GetIndexCweParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cwe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDahuaRequest calls the generic GetIndexDahua builder with application/json body
func NewGetIndexDahuaRequest(server string, params *GetIndexDahuaParams, body GetIndexDahuaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDahuaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDahuaRequestWithBody generates requests for GetIndexDahua with any type of body
func NewGetIndexDahuaRequestWithBody(server string, params *GetIndexDahuaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dahua")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDassaultRequest calls the generic GetIndexDassault builder with application/json body
func NewGetIndexDassaultRequest(server string, params *GetIndexDassaultParams, body GetIndexDassaultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDassaultRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDassaultRequestWithBody generates requests for GetIndexDassault with any type of body
func NewGetIndexDassaultRequestWithBody(server string, params *GetIndexDassaultParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dassault")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDebianRequest calls the generic GetIndexDebian builder with application/json body
func NewGetIndexDebianRequest(server string, params *GetIndexDebianParams, body GetIndexDebianJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDebianRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDebianRequestWithBody generates requests for GetIndexDebian with any type of body
func NewGetIndexDebianRequestWithBody(server string, params *GetIndexDebianParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/debian")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDebianDsaRequest calls the generic GetIndexDebianDsa builder with application/json body
func NewGetIndexDebianDsaRequest(server string, params *GetIndexDebianDsaParams, body GetIndexDebianDsaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDebianDsaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDebianDsaRequestWithBody generates requests for GetIndexDebianDsa with any type of body
func NewGetIndexDebianDsaRequestWithBody(server string, params *GetIndexDebianDsaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/debian-dsa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDellRequest calls the generic GetIndexDell builder with application/json body
func NewGetIndexDellRequest(server string, params *GetIndexDellParams, body GetIndexDellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDellRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDellRequestWithBody generates requests for GetIndexDell with any type of body
func NewGetIndexDellRequestWithBody(server string, params *GetIndexDellParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDeltaRequest calls the generic GetIndexDelta builder with application/json body
func NewGetIndexDeltaRequest(server string, params *GetIndexDeltaParams, body GetIndexDeltaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDeltaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDeltaRequestWithBody generates requests for GetIndexDelta with any type of body
func NewGetIndexDeltaRequestWithBody(server string, params *GetIndexDeltaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/delta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDjangoRequest calls the generic GetIndexDjango builder with application/json body
func NewGetIndexDjangoRequest(server string, params *GetIndexDjangoParams, body GetIndexDjangoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDjangoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDjangoRequestWithBody generates requests for GetIndexDjango with any type of body
func NewGetIndexDjangoRequestWithBody(server string, params *GetIndexDjangoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/django")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDnnRequest calls the generic GetIndexDnn builder with application/json body
func NewGetIndexDnnRequest(server string, params *GetIndexDnnParams, body GetIndexDnnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDnnRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDnnRequestWithBody generates requests for GetIndexDnn with any type of body
func NewGetIndexDnnRequestWithBody(server string, params *GetIndexDnnParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dnn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDotcmsRequest calls the generic GetIndexDotcms builder with application/json body
func NewGetIndexDotcmsRequest(server string, params *GetIndexDotcmsParams, body GetIndexDotcmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDotcmsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDotcmsRequestWithBody generates requests for GetIndexDotcms with any type of body
func NewGetIndexDotcmsRequestWithBody(server string, params *GetIndexDotcmsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dotcms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDragosRequest calls the generic GetIndexDragos builder with application/json body
func NewGetIndexDragosRequest(server string, params *GetIndexDragosParams, body GetIndexDragosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDragosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDragosRequestWithBody generates requests for GetIndexDragos with any type of body
func NewGetIndexDragosRequestWithBody(server string, params *GetIndexDragosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dragos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDraytekRequest calls the generic GetIndexDraytek builder with application/json body
func NewGetIndexDraytekRequest(server string, params *GetIndexDraytekParams, body GetIndexDraytekJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDraytekRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexDraytekRequestWithBody generates requests for GetIndexDraytek with any type of body
func NewGetIndexDraytekRequestWithBody(server string, params *GetIndexDraytekParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/draytek")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEatonRequest calls the generic GetIndexEaton builder with application/json body
func NewGetIndexEatonRequest(server string, params *GetIndexEatonParams, body GetIndexEatonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEatonRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexEatonRequestWithBody generates requests for GetIndexEaton with any type of body
func NewGetIndexEatonRequestWithBody(server string, params *GetIndexEatonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/eaton")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexElasticRequest calls the generic GetIndexElastic builder with application/json body
func NewGetIndexElasticRequest(server string, params *GetIndexElasticParams, body GetIndexElasticJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexElasticRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexElasticRequestWithBody generates requests for GetIndexElastic with any type of body
func NewGetIndexElasticRequestWithBody(server string, params *GetIndexElasticParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/elastic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexElspecRequest calls the generic GetIndexElspec builder with application/json body
func NewGetIndexElspecRequest(server string, params *GetIndexElspecParams, body GetIndexElspecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexElspecRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexElspecRequestWithBody generates requests for GetIndexElspec with any type of body
func NewGetIndexElspecRequestWithBody(server string, params *GetIndexElspecParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/elspec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEmergingThreatsSnortRequest calls the generic GetIndexEmergingThreatsSnort builder with application/json body
func NewGetIndexEmergingThreatsSnortRequest(server string, params *GetIndexEmergingThreatsSnortParams, body GetIndexEmergingThreatsSnortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEmergingThreatsSnortRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexEmergingThreatsSnortRequestWithBody generates requests for GetIndexEmergingThreatsSnort with any type of body
func NewGetIndexEmergingThreatsSnortRequestWithBody(server string, params *GetIndexEmergingThreatsSnortParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/emerging-threats-snort")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEmersonRequest calls the generic GetIndexEmerson builder with application/json body
func NewGetIndexEmersonRequest(server string, params *GetIndexEmersonParams, body GetIndexEmersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEmersonRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexEmersonRequestWithBody generates requests for GetIndexEmerson with any type of body
func NewGetIndexEmersonRequestWithBody(server string, params *GetIndexEmersonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/emerson")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEolRequest calls the generic GetIndexEol builder with application/json body
func NewGetIndexEolRequest(server string, params *GetIndexEolParams, body GetIndexEolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEolRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexEolRequestWithBody generates requests for GetIndexEol with any type of body
func NewGetIndexEolRequestWithBody(server string, params *GetIndexEolParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/eol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEpssRequest calls the generic GetIndexEpss builder with application/json body
func NewGetIndexEpssRequest(server string, params *GetIndexEpssParams, body GetIndexEpssJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEpssRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexEpssRequestWithBody generates requests for GetIndexEpss with any type of body
func NewGetIndexEpssRequestWithBody(server string, params *GetIndexEpssParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/epss")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExodusIntelRequest calls the generic GetIndexExodusIntel builder with application/json body
func NewGetIndexExodusIntelRequest(server string, params *GetIndexExodusIntelParams, body GetIndexExodusIntelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExodusIntelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexExodusIntelRequestWithBody generates requests for GetIndexExodusIntel with any type of body
func NewGetIndexExodusIntelRequestWithBody(server string, params *GetIndexExodusIntelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exodus-intel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitChainsRequest calls the generic GetIndexExploitChains builder with application/json body
func NewGetIndexExploitChainsRequest(server string, params *GetIndexExploitChainsParams, body GetIndexExploitChainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitChainsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexExploitChainsRequestWithBody generates requests for GetIndexExploitChains with any type of body
func NewGetIndexExploitChainsRequestWithBody(server string, params *GetIndexExploitChainsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploit-chains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitdbRequest calls the generic GetIndexExploitdb builder with application/json body
func NewGetIndexExploitdbRequest(server string, params *GetIndexExploitdbParams, body GetIndexExploitdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitdbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexExploitdbRequestWithBody generates requests for GetIndexExploitdb with any type of body
func NewGetIndexExploitdbRequestWithBody(server string, params *GetIndexExploitdbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploitdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitsRequest calls the generic GetIndexExploits builder with application/json body
func NewGetIndexExploitsRequest(server string, params *GetIndexExploitsParams, body GetIndexExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexExploitsRequestWithBody generates requests for GetIndexExploits with any type of body
func NewGetIndexExploitsRequestWithBody(server string, params *GetIndexExploitsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitsChangelogRequest calls the generic GetIndexExploitsChangelog builder with application/json body
func NewGetIndexExploitsChangelogRequest(server string, params *GetIndexExploitsChangelogParams, body GetIndexExploitsChangelogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitsChangelogRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexExploitsChangelogRequestWithBody generates requests for GetIndexExploitsChangelog with any type of body
func NewGetIndexExploitsChangelogRequestWithBody(server string, params *GetIndexExploitsChangelogParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploits-changelog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFSecureRequest calls the generic GetIndexFSecure builder with application/json body
func NewGetIndexFSecureRequest(server string, params *GetIndexFSecureParams, body GetIndexFSecureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFSecureRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFSecureRequestWithBody generates requests for GetIndexFSecure with any type of body
func NewGetIndexFSecureRequestWithBody(server string, params *GetIndexFSecureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/f-secure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFanucRequest calls the generic GetIndexFanuc builder with application/json body
func NewGetIndexFanucRequest(server string, params *GetIndexFanucParams, body GetIndexFanucJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFanucRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFanucRequestWithBody generates requests for GetIndexFanuc with any type of body
func NewGetIndexFanucRequestWithBody(server string, params *GetIndexFanucParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fanuc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFastlyRequest calls the generic GetIndexFastly builder with application/json body
func NewGetIndexFastlyRequest(server string, params *GetIndexFastlyParams, body GetIndexFastlyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFastlyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFastlyRequestWithBody generates requests for GetIndexFastly with any type of body
func NewGetIndexFastlyRequestWithBody(server string, params *GetIndexFastlyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fastly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFedoraRequest calls the generic GetIndexFedora builder with application/json body
func NewGetIndexFedoraRequest(server string, params *GetIndexFedoraParams, body GetIndexFedoraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFedoraRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFedoraRequestWithBody generates requests for GetIndexFedora with any type of body
func NewGetIndexFedoraRequestWithBody(server string, params *GetIndexFedoraParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fedora")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFilecloudRequest calls the generic GetIndexFilecloud builder with application/json body
func NewGetIndexFilecloudRequest(server string, params *GetIndexFilecloudParams, body GetIndexFilecloudJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFilecloudRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFilecloudRequestWithBody generates requests for GetIndexFilecloud with any type of body
func NewGetIndexFilecloudRequestWithBody(server string, params *GetIndexFilecloudParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/filecloud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFlattSecurityRequest calls the generic GetIndexFlattSecurity builder with application/json body
func NewGetIndexFlattSecurityRequest(server string, params *GetIndexFlattSecurityParams, body GetIndexFlattSecurityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFlattSecurityRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFlattSecurityRequestWithBody generates requests for GetIndexFlattSecurity with any type of body
func NewGetIndexFlattSecurityRequestWithBody(server string, params *GetIndexFlattSecurityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/flatt-security")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexForgerockRequest calls the generic GetIndexForgerock builder with application/json body
func NewGetIndexForgerockRequest(server string, params *GetIndexForgerockParams, body GetIndexForgerockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexForgerockRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexForgerockRequestWithBody generates requests for GetIndexForgerock with any type of body
func NewGetIndexForgerockRequestWithBody(server string, params *GetIndexForgerockParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/forgerock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFortinetRequest calls the generic GetIndexFortinet builder with application/json body
func NewGetIndexFortinetRequest(server string, params *GetIndexFortinetParams, body GetIndexFortinetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFortinetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFortinetRequestWithBody generates requests for GetIndexFortinet with any type of body
func NewGetIndexFortinetRequestWithBody(server string, params *GetIndexFortinetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fortinet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFortinetIpsRequest calls the generic GetIndexFortinetIps builder with application/json body
func NewGetIndexFortinetIpsRequest(server string, params *GetIndexFortinetIpsParams, body GetIndexFortinetIpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFortinetIpsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFortinetIpsRequestWithBody generates requests for GetIndexFortinetIps with any type of body
func NewGetIndexFortinetIpsRequestWithBody(server string, params *GetIndexFortinetIpsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fortinet-ips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFoxitRequest calls the generic GetIndexFoxit builder with application/json body
func NewGetIndexFoxitRequest(server string, params *GetIndexFoxitParams, body GetIndexFoxitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFoxitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFoxitRequestWithBody generates requests for GetIndexFoxit with any type of body
func NewGetIndexFoxitRequestWithBody(server string, params *GetIndexFoxitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/foxit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFreebsdRequest calls the generic GetIndexFreebsd builder with application/json body
func NewGetIndexFreebsdRequest(server string, params *GetIndexFreebsdParams, body GetIndexFreebsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFreebsdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexFreebsdRequestWithBody generates requests for GetIndexFreebsd with any type of body
func NewGetIndexFreebsdRequestWithBody(server string, params *GetIndexFreebsdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/freebsd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGallagherRequest calls the generic GetIndexGallagher builder with application/json body
func NewGetIndexGallagherRequest(server string, params *GetIndexGallagherParams, body GetIndexGallagherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGallagherRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGallagherRequestWithBody generates requests for GetIndexGallagher with any type of body
func NewGetIndexGallagherRequestWithBody(server string, params *GetIndexGallagherParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gallagher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGcpRequest calls the generic GetIndexGcp builder with application/json body
func NewGetIndexGcpRequest(server string, params *GetIndexGcpParams, body GetIndexGcpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGcpRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGcpRequestWithBody generates requests for GetIndexGcp with any type of body
func NewGetIndexGcpRequestWithBody(server string, params *GetIndexGcpParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGeGasRequest calls the generic GetIndexGeGas builder with application/json body
func NewGetIndexGeGasRequest(server string, params *GetIndexGeGasParams, body GetIndexGeGasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGeGasRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGeGasRequestWithBody generates requests for GetIndexGeGas with any type of body
func NewGetIndexGeGasRequestWithBody(server string, params *GetIndexGeGasParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ge-gas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGeHealthcareRequest calls the generic GetIndexGeHealthcare builder with application/json body
func NewGetIndexGeHealthcareRequest(server string, params *GetIndexGeHealthcareParams, body GetIndexGeHealthcareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGeHealthcareRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGeHealthcareRequestWithBody generates requests for GetIndexGeHealthcare with any type of body
func NewGetIndexGeHealthcareRequestWithBody(server string, params *GetIndexGeHealthcareParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ge-healthcare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGemRequest calls the generic GetIndexGem builder with application/json body
func NewGetIndexGemRequest(server string, params *GetIndexGemParams, body GetIndexGemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGemRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGemRequestWithBody generates requests for GetIndexGem with any type of body
func NewGetIndexGemRequestWithBody(server string, params *GetIndexGemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGenetecRequest calls the generic GetIndexGenetec builder with application/json body
func NewGetIndexGenetecRequest(server string, params *GetIndexGenetecParams, body GetIndexGenetecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGenetecRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGenetecRequestWithBody generates requests for GetIndexGenetec with any type of body
func NewGetIndexGenetecRequestWithBody(server string, params *GetIndexGenetecParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/genetec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGigabyteRequest calls the generic GetIndexGigabyte builder with application/json body
func NewGetIndexGigabyteRequest(server string, params *GetIndexGigabyteParams, body GetIndexGigabyteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGigabyteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGigabyteRequestWithBody generates requests for GetIndexGigabyte with any type of body
func NewGetIndexGigabyteRequestWithBody(server string, params *GetIndexGigabyteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gigabyte")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGiteeExploitsRequest calls the generic GetIndexGiteeExploits builder with application/json body
func NewGetIndexGiteeExploitsRequest(server string, params *GetIndexGiteeExploitsParams, body GetIndexGiteeExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGiteeExploitsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGiteeExploitsRequestWithBody generates requests for GetIndexGiteeExploits with any type of body
func NewGetIndexGiteeExploitsRequestWithBody(server string, params *GetIndexGiteeExploitsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gitee-exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGithubExploitsRequest calls the generic GetIndexGithubExploits builder with application/json body
func NewGetIndexGithubExploitsRequest(server string, params *GetIndexGithubExploitsParams, body GetIndexGithubExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGithubExploitsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGithubExploitsRequestWithBody generates requests for GetIndexGithubExploits with any type of body
func NewGetIndexGithubExploitsRequestWithBody(server string, params *GetIndexGithubExploitsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/github-exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGithubSecurityAdvisoriesRequest calls the generic GetIndexGithubSecurityAdvisories builder with application/json body
func NewGetIndexGithubSecurityAdvisoriesRequest(server string, params *GetIndexGithubSecurityAdvisoriesParams, body GetIndexGithubSecurityAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGithubSecurityAdvisoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGithubSecurityAdvisoriesRequestWithBody generates requests for GetIndexGithubSecurityAdvisories with any type of body
func NewGetIndexGithubSecurityAdvisoriesRequestWithBody(server string, params *GetIndexGithubSecurityAdvisoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/github-security-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGitlabAdvisoriesCommunityRequest calls the generic GetIndexGitlabAdvisoriesCommunity builder with application/json body
func NewGetIndexGitlabAdvisoriesCommunityRequest(server string, params *GetIndexGitlabAdvisoriesCommunityParams, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGitlabAdvisoriesCommunityRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGitlabAdvisoriesCommunityRequestWithBody generates requests for GetIndexGitlabAdvisoriesCommunity with any type of body
func NewGetIndexGitlabAdvisoriesCommunityRequestWithBody(server string, params *GetIndexGitlabAdvisoriesCommunityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gitlab-advisories-community")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGitlabExploitsRequest calls the generic GetIndexGitlabExploits builder with application/json body
func NewGetIndexGitlabExploitsRequest(server string, params *GetIndexGitlabExploitsParams, body GetIndexGitlabExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGitlabExploitsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGitlabExploitsRequestWithBody generates requests for GetIndexGitlabExploits with any type of body
func NewGetIndexGitlabExploitsRequestWithBody(server string, params *GetIndexGitlabExploitsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gitlab-exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGnutlsRequest calls the generic GetIndexGnutls builder with application/json body
func NewGetIndexGnutlsRequest(server string, params *GetIndexGnutlsParams, body GetIndexGnutlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGnutlsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGnutlsRequestWithBody generates requests for GetIndexGnutls with any type of body
func NewGetIndexGnutlsRequestWithBody(server string, params *GetIndexGnutlsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gnutls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGolangRequest calls the generic GetIndexGolang builder with application/json body
func NewGetIndexGolangRequest(server string, params *GetIndexGolangParams, body GetIndexGolangJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGolangRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGolangRequestWithBody generates requests for GetIndexGolang with any type of body
func NewGetIndexGolangRequestWithBody(server string, params *GetIndexGolangParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/golang")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGoogle0dayItwRequest calls the generic GetIndexGoogle0dayItw builder with application/json body
func NewGetIndexGoogle0dayItwRequest(server string, params *GetIndexGoogle0dayItwParams, body GetIndexGoogle0dayItwJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGoogle0dayItwRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGoogle0dayItwRequestWithBody generates requests for GetIndexGoogle0dayItw with any type of body
func NewGetIndexGoogle0dayItwRequestWithBody(server string, params *GetIndexGoogle0dayItwParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/google-0day-itw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGoogleContainerOptimizedOsRequest calls the generic GetIndexGoogleContainerOptimizedOs builder with application/json body
func NewGetIndexGoogleContainerOptimizedOsRequest(server string, params *GetIndexGoogleContainerOptimizedOsParams, body GetIndexGoogleContainerOptimizedOsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGoogleContainerOptimizedOsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGoogleContainerOptimizedOsRequestWithBody generates requests for GetIndexGoogleContainerOptimizedOs with any type of body
func NewGetIndexGoogleContainerOptimizedOsRequestWithBody(server string, params *GetIndexGoogleContainerOptimizedOsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/google-container-optimized-os")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGrafanaRequest calls the generic GetIndexGrafana builder with application/json body
func NewGetIndexGrafanaRequest(server string, params *GetIndexGrafanaParams, body GetIndexGrafanaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGrafanaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGrafanaRequestWithBody generates requests for GetIndexGrafana with any type of body
func NewGetIndexGrafanaRequestWithBody(server string, params *GetIndexGrafanaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/grafana")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGreynoiseMetadataRequest calls the generic GetIndexGreynoiseMetadata builder with application/json body
func NewGetIndexGreynoiseMetadataRequest(server string, params *GetIndexGreynoiseMetadataParams, body GetIndexGreynoiseMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGreynoiseMetadataRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexGreynoiseMetadataRequestWithBody generates requests for GetIndexGreynoiseMetadata with any type of body
func NewGetIndexGreynoiseMetadataRequestWithBody(server string, params *GetIndexGreynoiseMetadataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/greynoise-metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHackageRequest calls the generic GetIndexHackage builder with application/json body
func NewGetIndexHackageRequest(server string, params *GetIndexHackageParams, body GetIndexHackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHackageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHackageRequestWithBody generates requests for GetIndexHackage with any type of body
func NewGetIndexHackageRequestWithBody(server string, params *GetIndexHackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hackage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHarmonyosRequest calls the generic GetIndexHarmonyos builder with application/json body
func NewGetIndexHarmonyosRequest(server string, params *GetIndexHarmonyosParams, body GetIndexHarmonyosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHarmonyosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHarmonyosRequestWithBody generates requests for GetIndexHarmonyos with any type of body
func NewGetIndexHarmonyosRequestWithBody(server string, params *GetIndexHarmonyosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/harmonyos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHashicorpRequest calls the generic GetIndexHashicorp builder with application/json body
func NewGetIndexHashicorpRequest(server string, params *GetIndexHashicorpParams, body GetIndexHashicorpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHashicorpRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHashicorpRequestWithBody generates requests for GetIndexHashicorp with any type of body
func NewGetIndexHashicorpRequestWithBody(server string, params *GetIndexHashicorpParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hashicorp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHaskellSadbRequest calls the generic GetIndexHaskellSadb builder with application/json body
func NewGetIndexHaskellSadbRequest(server string, params *GetIndexHaskellSadbParams, body GetIndexHaskellSadbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHaskellSadbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHaskellSadbRequestWithBody generates requests for GetIndexHaskellSadb with any type of body
func NewGetIndexHaskellSadbRequestWithBody(server string, params *GetIndexHaskellSadbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/haskell-sadb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHclRequest calls the generic GetIndexHcl builder with application/json body
func NewGetIndexHclRequest(server string, params *GetIndexHclParams, body GetIndexHclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHclRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHclRequestWithBody generates requests for GetIndexHcl with any type of body
func NewGetIndexHclRequestWithBody(server string, params *GetIndexHclParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hcl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHexRequest calls the generic GetIndexHex builder with application/json body
func NewGetIndexHexRequest(server string, params *GetIndexHexParams, body GetIndexHexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHexRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHexRequestWithBody generates requests for GetIndexHex with any type of body
func NewGetIndexHexRequestWithBody(server string, params *GetIndexHexParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHikvisionRequest calls the generic GetIndexHikvision builder with application/json body
func NewGetIndexHikvisionRequest(server string, params *GetIndexHikvisionParams, body GetIndexHikvisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHikvisionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHikvisionRequestWithBody generates requests for GetIndexHikvision with any type of body
func NewGetIndexHikvisionRequestWithBody(server string, params *GetIndexHikvisionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hikvision")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHillromRequest calls the generic GetIndexHillrom builder with application/json body
func NewGetIndexHillromRequest(server string, params *GetIndexHillromParams, body GetIndexHillromJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHillromRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHillromRequestWithBody generates requests for GetIndexHillrom with any type of body
func NewGetIndexHillromRequestWithBody(server string, params *GetIndexHillromParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hillrom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHitachiRequest calls the generic GetIndexHitachi builder with application/json body
func NewGetIndexHitachiRequest(server string, params *GetIndexHitachiParams, body GetIndexHitachiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHitachiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHitachiRequestWithBody generates requests for GetIndexHitachi with any type of body
func NewGetIndexHitachiRequestWithBody(server string, params *GetIndexHitachiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hitachi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHitachiEnergyRequest calls the generic GetIndexHitachiEnergy builder with application/json body
func NewGetIndexHitachiEnergyRequest(server string, params *GetIndexHitachiEnergyParams, body GetIndexHitachiEnergyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHitachiEnergyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHitachiEnergyRequestWithBody generates requests for GetIndexHitachiEnergy with any type of body
func NewGetIndexHitachiEnergyRequestWithBody(server string, params *GetIndexHitachiEnergyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hitachi-energy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHkcertRequest calls the generic GetIndexHkcert builder with application/json body
func NewGetIndexHkcertRequest(server string, params *GetIndexHkcertParams, body GetIndexHkcertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHkcertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHkcertRequestWithBody generates requests for GetIndexHkcert with any type of body
func NewGetIndexHkcertRequestWithBody(server string, params *GetIndexHkcertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hkcert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHoneywellRequest calls the generic GetIndexHoneywell builder with application/json body
func NewGetIndexHoneywellRequest(server string, params *GetIndexHoneywellParams, body GetIndexHoneywellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHoneywellRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHoneywellRequestWithBody generates requests for GetIndexHoneywell with any type of body
func NewGetIndexHoneywellRequestWithBody(server string, params *GetIndexHoneywellParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/honeywell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHpRequest calls the generic GetIndexHp builder with application/json body
func NewGetIndexHpRequest(server string, params *GetIndexHpParams, body GetIndexHpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHpRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHpRequestWithBody generates requests for GetIndexHp with any type of body
func NewGetIndexHpRequestWithBody(server string, params *GetIndexHpParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHuaweiEulerosRequest calls the generic GetIndexHuaweiEuleros builder with application/json body
func NewGetIndexHuaweiEulerosRequest(server string, params *GetIndexHuaweiEulerosParams, body GetIndexHuaweiEulerosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHuaweiEulerosRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHuaweiEulerosRequestWithBody generates requests for GetIndexHuaweiEuleros with any type of body
func NewGetIndexHuaweiEulerosRequestWithBody(server string, params *GetIndexHuaweiEulerosParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/huawei-euleros")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHuaweiIpsRequest calls the generic GetIndexHuaweiIps builder with application/json body
func NewGetIndexHuaweiIpsRequest(server string, params *GetIndexHuaweiIpsParams, body GetIndexHuaweiIpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHuaweiIpsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHuaweiIpsRequestWithBody generates requests for GetIndexHuaweiIps with any type of body
func NewGetIndexHuaweiIpsRequestWithBody(server string, params *GetIndexHuaweiIpsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/huawei-ips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHuaweiPsirtRequest calls the generic GetIndexHuaweiPsirt builder with application/json body
func NewGetIndexHuaweiPsirtRequest(server string, params *GetIndexHuaweiPsirtParams, body GetIndexHuaweiPsirtJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHuaweiPsirtRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexHuaweiPsirtRequestWithBody generates requests for GetIndexHuaweiPsirt with any type of body
func NewGetIndexHuaweiPsirtRequestWithBody(server string, params *GetIndexHuaweiPsirtParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/huawei-psirt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIavaRequest calls the generic GetIndexIava builder with application/json body
func NewGetIndexIavaRequest(server string, params *GetIndexIavaParams, body GetIndexIavaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIavaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIavaRequestWithBody generates requests for GetIndexIava with any type of body
func NewGetIndexIavaRequestWithBody(server string, params *GetIndexIavaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/iava")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIbmRequest calls the generic GetIndexIbm builder with application/json body
func NewGetIndexIbmRequest(server string, params *GetIndexIbmParams, body GetIndexIbmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIbmRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIbmRequestWithBody generates requests for GetIndexIbm with any type of body
func NewGetIndexIbmRequestWithBody(server string, params *GetIndexIbmParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ibm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIdemiaRequest calls the generic GetIndexIdemia builder with application/json body
func NewGetIndexIdemiaRequest(server string, params *GetIndexIdemiaParams, body GetIndexIdemiaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIdemiaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIdemiaRequestWithBody generates requests for GetIndexIdemia with any type of body
func NewGetIndexIdemiaRequestWithBody(server string, params *GetIndexIdemiaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/idemia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIlAlertsRequest calls the generic GetIndexIlAlerts builder with application/json body
func NewGetIndexIlAlertsRequest(server string, params *GetIndexIlAlertsParams, body GetIndexIlAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIlAlertsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIlAlertsRequestWithBody generates requests for GetIndexIlAlerts with any type of body
func NewGetIndexIlAlertsRequestWithBody(server string, params *GetIndexIlAlertsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/il-alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIlVulnerabilitiesRequest calls the generic GetIndexIlVulnerabilities builder with application/json body
func NewGetIndexIlVulnerabilitiesRequest(server string, params *GetIndexIlVulnerabilitiesParams, body GetIndexIlVulnerabilitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIlVulnerabilitiesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIlVulnerabilitiesRequestWithBody generates requests for GetIndexIlVulnerabilities with any type of body
func NewGetIndexIlVulnerabilitiesRequestWithBody(server string, params *GetIndexIlVulnerabilitiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/il-vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIncibeRequest calls the generic GetIndexIncibe builder with application/json body
func NewGetIndexIncibeRequest(server string, params *GetIndexIncibeParams, body GetIndexIncibeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIncibeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIncibeRequestWithBody generates requests for GetIndexIncibe with any type of body
func NewGetIndexIncibeRequestWithBody(server string, params *GetIndexIncibeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/incibe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexInitialAccessRequest calls the generic GetIndexInitialAccess builder with application/json body
func NewGetIndexInitialAccessRequest(server string, params *GetIndexInitialAccessParams, body GetIndexInitialAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexInitialAccessRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexInitialAccessRequestWithBody generates requests for GetIndexInitialAccess with any type of body
func NewGetIndexInitialAccessRequestWithBody(server string, params *GetIndexInitialAccessParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/initial-access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexInitialAccessGitRequest calls the generic GetIndexInitialAccessGit builder with application/json body
func NewGetIndexInitialAccessGitRequest(server string, params *GetIndexInitialAccessGitParams, body GetIndexInitialAccessGitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexInitialAccessGitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexInitialAccessGitRequestWithBody generates requests for GetIndexInitialAccessGit with any type of body
func NewGetIndexInitialAccessGitRequestWithBody(server string, params *GetIndexInitialAccessGitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/initial-access-git")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIntelRequest calls the generic GetIndexIntel builder with application/json body
func NewGetIndexIntelRequest(server string, params *GetIndexIntelParams, body GetIndexIntelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIntelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIntelRequestWithBody generates requests for GetIndexIntel with any type of body
func NewGetIndexIntelRequestWithBody(server string, params *GetIndexIntelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/intel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel10dRequest calls the generic GetIndexIpintel10d builder with application/json body
func NewGetIndexIpintel10dRequest(server string, params *GetIndexIpintel10dParams, body GetIndexIpintel10dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel10dRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIpintel10dRequestWithBody generates requests for GetIndexIpintel10d with any type of body
func NewGetIndexIpintel10dRequestWithBody(server string, params *GetIndexIpintel10dParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-10d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel30dRequest calls the generic GetIndexIpintel30d builder with application/json body
func NewGetIndexIpintel30dRequest(server string, params *GetIndexIpintel30dParams, body GetIndexIpintel30dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel30dRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIpintel30dRequestWithBody generates requests for GetIndexIpintel30d with any type of body
func NewGetIndexIpintel30dRequestWithBody(server string, params *GetIndexIpintel30dParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-30d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel3dRequest calls the generic GetIndexIpintel3d builder with application/json body
func NewGetIndexIpintel3dRequest(server string, params *GetIndexIpintel3dParams, body GetIndexIpintel3dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel3dRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIpintel3dRequestWithBody generates requests for GetIndexIpintel3d with any type of body
func NewGetIndexIpintel3dRequestWithBody(server string, params *GetIndexIpintel3dParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-3d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel90dRequest calls the generic GetIndexIpintel90d builder with application/json body
func NewGetIndexIpintel90dRequest(server string, params *GetIndexIpintel90dParams, body GetIndexIpintel90dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel90dRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIpintel90dRequestWithBody generates requests for GetIndexIpintel90d with any type of body
func NewGetIndexIpintel90dRequestWithBody(server string, params *GetIndexIpintel90dParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-90d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIstioRequest calls the generic GetIndexIstio builder with application/json body
func NewGetIndexIstioRequest(server string, params *GetIndexIstioParams, body GetIndexIstioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIstioRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIstioRequestWithBody generates requests for GetIndexIstio with any type of body
func NewGetIndexIstioRequestWithBody(server string, params *GetIndexIstioParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/istio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIvantiRequest calls the generic GetIndexIvanti builder with application/json body
func NewGetIndexIvantiRequest(server string, params *GetIndexIvantiParams, body GetIndexIvantiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIvantiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIvantiRequestWithBody generates requests for GetIndexIvanti with any type of body
func NewGetIndexIvantiRequestWithBody(server string, params *GetIndexIvantiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ivanti")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIvantiRssRequest calls the generic GetIndexIvantiRss builder with application/json body
func NewGetIndexIvantiRssRequest(server string, params *GetIndexIvantiRssParams, body GetIndexIvantiRssJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIvantiRssRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexIvantiRssRequestWithBody generates requests for GetIndexIvantiRss with any type of body
func NewGetIndexIvantiRssRequestWithBody(server string, params *GetIndexIvantiRssParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ivanti-rss")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJenkinsRequest calls the generic GetIndexJenkins builder with application/json body
func NewGetIndexJenkinsRequest(server string, params *GetIndexJenkinsParams, body GetIndexJenkinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJenkinsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexJenkinsRequestWithBody generates requests for GetIndexJenkins with any type of body
func NewGetIndexJenkinsRequestWithBody(server string, params *GetIndexJenkinsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jenkins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJetbrainsRequest calls the generic GetIndexJetbrains builder with application/json body
func NewGetIndexJetbrainsRequest(server string, params *GetIndexJetbrainsParams, body GetIndexJetbrainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJetbrainsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexJetbrainsRequestWithBody generates requests for GetIndexJetbrains with any type of body
func NewGetIndexJetbrainsRequestWithBody(server string, params *GetIndexJetbrainsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jetbrains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJfrogRequest calls the generic GetIndexJfrog builder with application/json body
func NewGetIndexJfrogRequest(server string, params *GetIndexJfrogParams, body GetIndexJfrogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJfrogRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexJfrogRequestWithBody generates requests for GetIndexJfrog with any type of body
func NewGetIndexJfrogRequestWithBody(server string, params *GetIndexJfrogParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jfrog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJnjRequest calls the generic GetIndexJnj builder with application/json body
func NewGetIndexJnjRequest(server string, params *GetIndexJnjParams, body GetIndexJnjJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJnjRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexJnjRequestWithBody generates requests for GetIndexJnj with any type of body
func NewGetIndexJnjRequestWithBody(server string, params *GetIndexJnjParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jnj")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJvnRequest calls the generic GetIndexJvn builder with application/json body
func NewGetIndexJvnRequest(server string, params *GetIndexJvnParams, body GetIndexJvnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJvnRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexJvnRequestWithBody generates requests for GetIndexJvn with any type of body
func NewGetIndexJvnRequestWithBody(server string, params *GetIndexJvnParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jvn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJvndbRequest calls the generic GetIndexJvndb builder with application/json body
func NewGetIndexJvndbRequest(server string, params *GetIndexJvndbParams, body GetIndexJvndbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJvndbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexJvndbRequestWithBody generates requests for GetIndexJvndb with any type of body
func NewGetIndexJvndbRequestWithBody(server string, params *GetIndexJvndbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jvndb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKasperskyIcsCertRequest calls the generic GetIndexKasperskyIcsCert builder with application/json body
func NewGetIndexKasperskyIcsCertRequest(server string, params *GetIndexKasperskyIcsCertParams, body GetIndexKasperskyIcsCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKasperskyIcsCertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexKasperskyIcsCertRequestWithBody generates requests for GetIndexKasperskyIcsCert with any type of body
func NewGetIndexKasperskyIcsCertRequestWithBody(server string, params *GetIndexKasperskyIcsCertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/kaspersky-ics-cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKorelogicRequest calls the generic GetIndexKorelogic builder with application/json body
func NewGetIndexKorelogicRequest(server string, params *GetIndexKorelogicParams, body GetIndexKorelogicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKorelogicRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexKorelogicRequestWithBody generates requests for GetIndexKorelogic with any type of body
func NewGetIndexKorelogicRequestWithBody(server string, params *GetIndexKorelogicParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/korelogic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKrcertSecurityNoticesRequest calls the generic GetIndexKrcertSecurityNotices builder with application/json body
func NewGetIndexKrcertSecurityNoticesRequest(server string, params *GetIndexKrcertSecurityNoticesParams, body GetIndexKrcertSecurityNoticesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKrcertSecurityNoticesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexKrcertSecurityNoticesRequestWithBody generates requests for GetIndexKrcertSecurityNotices with any type of body
func NewGetIndexKrcertSecurityNoticesRequestWithBody(server string, params *GetIndexKrcertSecurityNoticesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/krcert-security-notices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKrcertVulnerabilitiesRequest calls the generic GetIndexKrcertVulnerabilities builder with application/json body
func NewGetIndexKrcertVulnerabilitiesRequest(server string, params *GetIndexKrcertVulnerabilitiesParams, body GetIndexKrcertVulnerabilitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKrcertVulnerabilitiesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexKrcertVulnerabilitiesRequestWithBody generates requests for GetIndexKrcertVulnerabilities with any type of body
func NewGetIndexKrcertVulnerabilitiesRequestWithBody(server string, params *GetIndexKrcertVulnerabilitiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/krcert-vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKubernetesRequest calls the generic GetIndexKubernetes builder with application/json body
func NewGetIndexKubernetesRequest(server string, params *GetIndexKubernetesParams, body GetIndexKubernetesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKubernetesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexKubernetesRequestWithBody generates requests for GetIndexKubernetes with any type of body
func NewGetIndexKubernetesRequestWithBody(server string, params *GetIndexKubernetesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/kubernetes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLenovoRequest calls the generic GetIndexLenovo builder with application/json body
func NewGetIndexLenovoRequest(server string, params *GetIndexLenovoParams, body GetIndexLenovoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLenovoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexLenovoRequestWithBody generates requests for GetIndexLenovo with any type of body
func NewGetIndexLenovoRequestWithBody(server string, params *GetIndexLenovoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/lenovo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLexmarkRequest calls the generic GetIndexLexmark builder with application/json body
func NewGetIndexLexmarkRequest(server string, params *GetIndexLexmarkParams, body GetIndexLexmarkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLexmarkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexLexmarkRequestWithBody generates requests for GetIndexLexmark with any type of body
func NewGetIndexLexmarkRequestWithBody(server string, params *GetIndexLexmarkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/lexmark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLgRequest calls the generic GetIndexLg builder with application/json body
func NewGetIndexLgRequest(server string, params *GetIndexLgParams, body GetIndexLgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLgRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexLgRequestWithBody generates requests for GetIndexLg with any type of body
func NewGetIndexLgRequestWithBody(server string, params *GetIndexLgParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/lg")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLibreOfficeRequest calls the generic GetIndexLibreOffice builder with application/json body
func NewGetIndexLibreOfficeRequest(server string, params *GetIndexLibreOfficeParams, body GetIndexLibreOfficeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLibreOfficeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexLibreOfficeRequestWithBody generates requests for GetIndexLibreOffice with any type of body
func NewGetIndexLibreOfficeRequestWithBody(server string, params *GetIndexLibreOfficeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/libre-office")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLinuxRequest calls the generic GetIndexLinux builder with application/json body
func NewGetIndexLinuxRequest(server string, params *GetIndexLinuxParams, body GetIndexLinuxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLinuxRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexLinuxRequestWithBody generates requests for GetIndexLinux with any type of body
func NewGetIndexLinuxRequestWithBody(server string, params *GetIndexLinuxParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/linux")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMFilesRequest calls the generic GetIndexMFiles builder with application/json body
func NewGetIndexMFilesRequest(server string, params *GetIndexMFilesParams, body GetIndexMFilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMFilesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMFilesRequestWithBody generates requests for GetIndexMFiles with any type of body
func NewGetIndexMFilesRequestWithBody(server string, params *GetIndexMFilesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/m-files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMacertRequest calls the generic GetIndexMacert builder with application/json body
func NewGetIndexMacertRequest(server string, params *GetIndexMacertParams, body GetIndexMacertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMacertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMacertRequestWithBody generates requests for GetIndexMacert with any type of body
func NewGetIndexMacertRequestWithBody(server string, params *GetIndexMacertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/macert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexManageengineRequest calls the generic GetIndexManageengine builder with application/json body
func NewGetIndexManageengineRequest(server string, params *GetIndexManageengineParams, body GetIndexManageengineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexManageengineRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexManageengineRequestWithBody generates requests for GetIndexManageengine with any type of body
func NewGetIndexManageengineRequestWithBody(server string, params *GetIndexManageengineParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/manageengine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMavenRequest calls the generic GetIndexMaven builder with application/json body
func NewGetIndexMavenRequest(server string, params *GetIndexMavenParams, body GetIndexMavenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMavenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMavenRequestWithBody generates requests for GetIndexMaven with any type of body
func NewGetIndexMavenRequestWithBody(server string, params *GetIndexMavenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/maven")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMbedTlsRequest calls the generic GetIndexMbedTls builder with application/json body
func NewGetIndexMbedTlsRequest(server string, params *GetIndexMbedTlsParams, body GetIndexMbedTlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMbedTlsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMbedTlsRequestWithBody generates requests for GetIndexMbedTls with any type of body
func NewGetIndexMbedTlsRequestWithBody(server string, params *GetIndexMbedTlsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mbed-tls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMediatekRequest calls the generic GetIndexMediatek builder with application/json body
func NewGetIndexMediatekRequest(server string, params *GetIndexMediatekParams, body GetIndexMediatekJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMediatekRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMediatekRequestWithBody generates requests for GetIndexMediatek with any type of body
func NewGetIndexMediatekRequestWithBody(server string, params *GetIndexMediatekParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mediatek")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMedtronicRequest calls the generic GetIndexMedtronic builder with application/json body
func NewGetIndexMedtronicRequest(server string, params *GetIndexMedtronicParams, body GetIndexMedtronicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMedtronicRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMedtronicRequestWithBody generates requests for GetIndexMedtronic with any type of body
func NewGetIndexMedtronicRequestWithBody(server string, params *GetIndexMedtronicParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/medtronic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMendixRequest calls the generic GetIndexMendix builder with application/json body
func NewGetIndexMendixRequest(server string, params *GetIndexMendixParams, body GetIndexMendixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMendixRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMendixRequestWithBody generates requests for GetIndexMendix with any type of body
func NewGetIndexMendixRequestWithBody(server string, params *GetIndexMendixParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mendix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMetasploitRequest calls the generic GetIndexMetasploit builder with application/json body
func NewGetIndexMetasploitRequest(server string, params *GetIndexMetasploitParams, body GetIndexMetasploitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMetasploitRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMetasploitRequestWithBody generates requests for GetIndexMetasploit with any type of body
func NewGetIndexMetasploitRequestWithBody(server string, params *GetIndexMetasploitParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/metasploit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMicrosoftCvrfRequest calls the generic GetIndexMicrosoftCvrf builder with application/json body
func NewGetIndexMicrosoftCvrfRequest(server string, params *GetIndexMicrosoftCvrfParams, body GetIndexMicrosoftCvrfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMicrosoftCvrfRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMicrosoftCvrfRequestWithBody generates requests for GetIndexMicrosoftCvrf with any type of body
func NewGetIndexMicrosoftCvrfRequestWithBody(server string, params *GetIndexMicrosoftCvrfParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/microsoft-cvrf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMicrosoftKbRequest calls the generic GetIndexMicrosoftKb builder with application/json body
func NewGetIndexMicrosoftKbRequest(server string, params *GetIndexMicrosoftKbParams, body GetIndexMicrosoftKbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMicrosoftKbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMicrosoftKbRequestWithBody generates requests for GetIndexMicrosoftKb with any type of body
func NewGetIndexMicrosoftKbRequestWithBody(server string, params *GetIndexMicrosoftKbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/microsoft-kb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMikrotikRequest calls the generic GetIndexMikrotik builder with application/json body
func NewGetIndexMikrotikRequest(server string, params *GetIndexMikrotikParams, body GetIndexMikrotikJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMikrotikRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMikrotikRequestWithBody generates requests for GetIndexMikrotik with any type of body
func NewGetIndexMikrotikRequestWithBody(server string, params *GetIndexMikrotikParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mikrotik")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMindrayRequest calls the generic GetIndexMindray builder with application/json body
func NewGetIndexMindrayRequest(server string, params *GetIndexMindrayParams, body GetIndexMindrayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMindrayRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMindrayRequestWithBody generates requests for GetIndexMindray with any type of body
func NewGetIndexMindrayRequestWithBody(server string, params *GetIndexMindrayParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mindray")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMispThreatActorsRequest calls the generic GetIndexMispThreatActors builder with application/json body
func NewGetIndexMispThreatActorsRequest(server string, params *GetIndexMispThreatActorsParams, body GetIndexMispThreatActorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMispThreatActorsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMispThreatActorsRequestWithBody generates requests for GetIndexMispThreatActors with any type of body
func NewGetIndexMispThreatActorsRequestWithBody(server string, params *GetIndexMispThreatActorsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/misp-threat-actors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitelRequest calls the generic GetIndexMitel builder with application/json body
func NewGetIndexMitelRequest(server string, params *GetIndexMitelParams, body GetIndexMitelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMitelRequestWithBody generates requests for GetIndexMitel with any type of body
func NewGetIndexMitelRequestWithBody(server string, params *GetIndexMitelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitreAttackCveRequest calls the generic GetIndexMitreAttackCve builder with application/json body
func NewGetIndexMitreAttackCveRequest(server string, params *GetIndexMitreAttackCveParams, body GetIndexMitreAttackCveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitreAttackCveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMitreAttackCveRequestWithBody generates requests for GetIndexMitreAttackCve with any type of body
func NewGetIndexMitreAttackCveRequestWithBody(server string, params *GetIndexMitreAttackCveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitre-attack-cve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitreCvelistV5Request calls the generic GetIndexMitreCvelistV5 builder with application/json body
func NewGetIndexMitreCvelistV5Request(server string, params *GetIndexMitreCvelistV5Params, body GetIndexMitreCvelistV5JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitreCvelistV5RequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMitreCvelistV5RequestWithBody generates requests for GetIndexMitreCvelistV5 with any type of body
func NewGetIndexMitreCvelistV5RequestWithBody(server string, params *GetIndexMitreCvelistV5Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitre-cvelist-v5")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitsubishiElectricRequest calls the generic GetIndexMitsubishiElectric builder with application/json body
func NewGetIndexMitsubishiElectricRequest(server string, params *GetIndexMitsubishiElectricParams, body GetIndexMitsubishiElectricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitsubishiElectricRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMitsubishiElectricRequestWithBody generates requests for GetIndexMitsubishiElectric with any type of body
func NewGetIndexMitsubishiElectricRequestWithBody(server string, params *GetIndexMitsubishiElectricParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitsubishi-electric")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMongodbRequest calls the generic GetIndexMongodb builder with application/json body
func NewGetIndexMongodbRequest(server string, params *GetIndexMongodbParams, body GetIndexMongodbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMongodbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMongodbRequestWithBody generates requests for GetIndexMongodb with any type of body
func NewGetIndexMongodbRequestWithBody(server string, params *GetIndexMongodbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mongodb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMoxaRequest calls the generic GetIndexMoxa builder with application/json body
func NewGetIndexMoxaRequest(server string, params *GetIndexMoxaParams, body GetIndexMoxaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMoxaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMoxaRequestWithBody generates requests for GetIndexMoxa with any type of body
func NewGetIndexMoxaRequestWithBody(server string, params *GetIndexMoxaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/moxa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMozillaRequest calls the generic GetIndexMozilla builder with application/json body
func NewGetIndexMozillaRequest(server string, params *GetIndexMozillaParams, body GetIndexMozillaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMozillaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexMozillaRequestWithBody generates requests for GetIndexMozilla with any type of body
func NewGetIndexMozillaRequestWithBody(server string, params *GetIndexMozillaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mozilla")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNaverRequest calls the generic GetIndexNaver builder with application/json body
func NewGetIndexNaverRequest(server string, params *GetIndexNaverParams, body GetIndexNaverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNaverRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNaverRequestWithBody generates requests for GetIndexNaver with any type of body
func NewGetIndexNaverRequestWithBody(server string, params *GetIndexNaverParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/naver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNcscRequest calls the generic GetIndexNcsc builder with application/json body
func NewGetIndexNcscRequest(server string, params *GetIndexNcscParams, body GetIndexNcscJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNcscRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNcscRequestWithBody generates requests for GetIndexNcsc with any type of body
func NewGetIndexNcscRequestWithBody(server string, params *GetIndexNcscParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ncsc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNcscCvesRequest calls the generic GetIndexNcscCves builder with application/json body
func NewGetIndexNcscCvesRequest(server string, params *GetIndexNcscCvesParams, body GetIndexNcscCvesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNcscCvesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNcscCvesRequestWithBody generates requests for GetIndexNcscCves with any type of body
func NewGetIndexNcscCvesRequestWithBody(server string, params *GetIndexNcscCvesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ncsc-cves")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNecRequest calls the generic GetIndexNec builder with application/json body
func NewGetIndexNecRequest(server string, params *GetIndexNecParams, body GetIndexNecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNecRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNecRequestWithBody generates requests for GetIndexNec with any type of body
func NewGetIndexNecRequestWithBody(server string, params *GetIndexNecParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetappRequest calls the generic GetIndexNetapp builder with application/json body
func NewGetIndexNetappRequest(server string, params *GetIndexNetappParams, body GetIndexNetappJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetappRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNetappRequestWithBody generates requests for GetIndexNetapp with any type of body
func NewGetIndexNetappRequestWithBody(server string, params *GetIndexNetappParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netapp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetgateRequest calls the generic GetIndexNetgate builder with application/json body
func NewGetIndexNetgateRequest(server string, params *GetIndexNetgateParams, body GetIndexNetgateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetgateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNetgateRequestWithBody generates requests for GetIndexNetgate with any type of body
func NewGetIndexNetgateRequestWithBody(server string, params *GetIndexNetgateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netgate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetgearRequest calls the generic GetIndexNetgear builder with application/json body
func NewGetIndexNetgearRequest(server string, params *GetIndexNetgearParams, body GetIndexNetgearJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetgearRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNetgearRequestWithBody generates requests for GetIndexNetgear with any type of body
func NewGetIndexNetgearRequestWithBody(server string, params *GetIndexNetgearParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netgear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetskopeRequest calls the generic GetIndexNetskope builder with application/json body
func NewGetIndexNetskopeRequest(server string, params *GetIndexNetskopeParams, body GetIndexNetskopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetskopeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNetskopeRequestWithBody generates requests for GetIndexNetskope with any type of body
func NewGetIndexNetskopeRequestWithBody(server string, params *GetIndexNetskopeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netskope")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNginxRequest calls the generic GetIndexNginx builder with application/json body
func NewGetIndexNginxRequest(server string, params *GetIndexNginxParams, body GetIndexNginxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNginxRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNginxRequestWithBody generates requests for GetIndexNginx with any type of body
func NewGetIndexNginxRequestWithBody(server string, params *GetIndexNginxParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nginx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNhsRequest calls the generic GetIndexNhs builder with application/json body
func NewGetIndexNhsRequest(server string, params *GetIndexNhsParams, body GetIndexNhsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNhsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNhsRequestWithBody generates requests for GetIndexNhs with any type of body
func NewGetIndexNhsRequestWithBody(server string, params *GetIndexNhsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nhs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNiRequest calls the generic GetIndexNi builder with application/json body
func NewGetIndexNiRequest(server string, params *GetIndexNiParams, body GetIndexNiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNiRequestWithBody generates requests for GetIndexNi with any type of body
func NewGetIndexNiRequestWithBody(server string, params *GetIndexNiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ni")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNistNvdRequest calls the generic GetIndexNistNvd builder with application/json body
func NewGetIndexNistNvdRequest(server string, params *GetIndexNistNvdParams, body GetIndexNistNvdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNistNvdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNistNvdRequestWithBody generates requests for GetIndexNistNvd with any type of body
func NewGetIndexNistNvdRequestWithBody(server string, params *GetIndexNistNvdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nist-nvd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNistNvd2Request calls the generic GetIndexNistNvd2 builder with application/json body
func NewGetIndexNistNvd2Request(server string, params *GetIndexNistNvd2Params, body GetIndexNistNvd2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNistNvd2RequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNistNvd2RequestWithBody generates requests for GetIndexNistNvd2 with any type of body
func NewGetIndexNistNvd2RequestWithBody(server string, params *GetIndexNistNvd2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nist-nvd2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNistNvd2CpematchRequest calls the generic GetIndexNistNvd2Cpematch builder with application/json body
func NewGetIndexNistNvd2CpematchRequest(server string, params *GetIndexNistNvd2CpematchParams, body GetIndexNistNvd2CpematchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNistNvd2CpematchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNistNvd2CpematchRequestWithBody generates requests for GetIndexNistNvd2Cpematch with any type of body
func NewGetIndexNistNvd2CpematchRequestWithBody(server string, params *GetIndexNistNvd2CpematchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nist-nvd2-cpematch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNodeSecurityRequest calls the generic GetIndexNodeSecurity builder with application/json body
func NewGetIndexNodeSecurityRequest(server string, params *GetIndexNodeSecurityParams, body GetIndexNodeSecurityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNodeSecurityRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNodeSecurityRequestWithBody generates requests for GetIndexNodeSecurity with any type of body
func NewGetIndexNodeSecurityRequestWithBody(server string, params *GetIndexNodeSecurityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/node-security")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNodejsRequest calls the generic GetIndexNodejs builder with application/json body
func NewGetIndexNodejsRequest(server string, params *GetIndexNodejsParams, body GetIndexNodejsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNodejsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNodejsRequestWithBody generates requests for GetIndexNodejs with any type of body
func NewGetIndexNodejsRequestWithBody(server string, params *GetIndexNodejsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nodejs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNokiaRequest calls the generic GetIndexNokia builder with application/json body
func NewGetIndexNokiaRequest(server string, params *GetIndexNokiaParams, body GetIndexNokiaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNokiaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNokiaRequestWithBody generates requests for GetIndexNokia with any type of body
func NewGetIndexNokiaRequestWithBody(server string, params *GetIndexNokiaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nokia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNozomiRequest calls the generic GetIndexNozomi builder with application/json body
func NewGetIndexNozomiRequest(server string, params *GetIndexNozomiParams, body GetIndexNozomiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNozomiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNozomiRequestWithBody generates requests for GetIndexNozomi with any type of body
func NewGetIndexNozomiRequestWithBody(server string, params *GetIndexNozomiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nozomi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNpmRequest calls the generic GetIndexNpm builder with application/json body
func NewGetIndexNpmRequest(server string, params *GetIndexNpmParams, body GetIndexNpmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNpmRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNpmRequestWithBody generates requests for GetIndexNpm with any type of body
func NewGetIndexNpmRequestWithBody(server string, params *GetIndexNpmParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/npm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNtpRequest calls the generic GetIndexNtp builder with application/json body
func NewGetIndexNtpRequest(server string, params *GetIndexNtpParams, body GetIndexNtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNtpRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNtpRequestWithBody generates requests for GetIndexNtp with any type of body
func NewGetIndexNtpRequestWithBody(server string, params *GetIndexNtpParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ntp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNugetRequest calls the generic GetIndexNuget builder with application/json body
func NewGetIndexNugetRequest(server string, params *GetIndexNugetParams, body GetIndexNugetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNugetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNugetRequestWithBody generates requests for GetIndexNuget with any type of body
func NewGetIndexNugetRequestWithBody(server string, params *GetIndexNugetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nuget")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNvidiaRequest calls the generic GetIndexNvidia builder with application/json body
func NewGetIndexNvidiaRequest(server string, params *GetIndexNvidiaParams, body GetIndexNvidiaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNvidiaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNvidiaRequestWithBody generates requests for GetIndexNvidia with any type of body
func NewGetIndexNvidiaRequestWithBody(server string, params *GetIndexNvidiaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nvidia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNzAdvisoriesRequest calls the generic GetIndexNzAdvisories builder with application/json body
func NewGetIndexNzAdvisoriesRequest(server string, params *GetIndexNzAdvisoriesParams, body GetIndexNzAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNzAdvisoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexNzAdvisoriesRequestWithBody generates requests for GetIndexNzAdvisories with any type of body
func NewGetIndexNzAdvisoriesRequestWithBody(server string, params *GetIndexNzAdvisoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nz-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOctopusDeployRequest calls the generic GetIndexOctopusDeploy builder with application/json body
func NewGetIndexOctopusDeployRequest(server string, params *GetIndexOctopusDeployParams, body GetIndexOctopusDeployJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOctopusDeployRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOctopusDeployRequestWithBody generates requests for GetIndexOctopusDeploy with any type of body
func NewGetIndexOctopusDeployRequestWithBody(server string, params *GetIndexOctopusDeployParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/octopus-deploy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOktaRequest calls the generic GetIndexOkta builder with application/json body
func NewGetIndexOktaRequest(server string, params *GetIndexOktaParams, body GetIndexOktaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOktaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOktaRequestWithBody generates requests for GetIndexOkta with any type of body
func NewGetIndexOktaRequestWithBody(server string, params *GetIndexOktaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/okta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOmronRequest calls the generic GetIndexOmron builder with application/json body
func NewGetIndexOmronRequest(server string, params *GetIndexOmronParams, body GetIndexOmronJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOmronRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOmronRequestWithBody generates requests for GetIndexOmron with any type of body
func NewGetIndexOmronRequestWithBody(server string, params *GetIndexOmronParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/omron")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOneERequest calls the generic GetIndexOneE builder with application/json body
func NewGetIndexOneERequest(server string, params *GetIndexOneEParams, body GetIndexOneEJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOneERequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOneERequestWithBody generates requests for GetIndexOneE with any type of body
func NewGetIndexOneERequestWithBody(server string, params *GetIndexOneEParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/one-e")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpamRequest calls the generic GetIndexOpam builder with application/json body
func NewGetIndexOpamRequest(server string, params *GetIndexOpamParams, body GetIndexOpamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpamRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpamRequestWithBody generates requests for GetIndexOpam with any type of body
func NewGetIndexOpamRequestWithBody(server string, params *GetIndexOpamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/opam")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenCvdbRequest calls the generic GetIndexOpenCvdb builder with application/json body
func NewGetIndexOpenCvdbRequest(server string, params *GetIndexOpenCvdbParams, body GetIndexOpenCvdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenCvdbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpenCvdbRequestWithBody generates requests for GetIndexOpenCvdb with any type of body
func NewGetIndexOpenCvdbRequestWithBody(server string, params *GetIndexOpenCvdbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/open-cvdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenbsdRequest calls the generic GetIndexOpenbsd builder with application/json body
func NewGetIndexOpenbsdRequest(server string, params *GetIndexOpenbsdParams, body GetIndexOpenbsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenbsdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpenbsdRequestWithBody generates requests for GetIndexOpenbsd with any type of body
func NewGetIndexOpenbsdRequestWithBody(server string, params *GetIndexOpenbsdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openbsd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpensshRequest calls the generic GetIndexOpenssh builder with application/json body
func NewGetIndexOpensshRequest(server string, params *GetIndexOpensshParams, body GetIndexOpensshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpensshRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpensshRequestWithBody generates requests for GetIndexOpenssh with any type of body
func NewGetIndexOpensshRequestWithBody(server string, params *GetIndexOpensshParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openssh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpensslSecadvRequest calls the generic GetIndexOpensslSecadv builder with application/json body
func NewGetIndexOpensslSecadvRequest(server string, params *GetIndexOpensslSecadvParams, body GetIndexOpensslSecadvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpensslSecadvRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpensslSecadvRequestWithBody generates requests for GetIndexOpensslSecadv with any type of body
func NewGetIndexOpensslSecadvRequestWithBody(server string, params *GetIndexOpensslSecadvParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openssl-secadv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenstackRequest calls the generic GetIndexOpenstack builder with application/json body
func NewGetIndexOpenstackRequest(server string, params *GetIndexOpenstackParams, body GetIndexOpenstackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenstackRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpenstackRequestWithBody generates requests for GetIndexOpenstack with any type of body
func NewGetIndexOpenstackRequestWithBody(server string, params *GetIndexOpenstackParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openstack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenwrtRequest calls the generic GetIndexOpenwrt builder with application/json body
func NewGetIndexOpenwrtRequest(server string, params *GetIndexOpenwrtParams, body GetIndexOpenwrtJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenwrtRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOpenwrtRequestWithBody generates requests for GetIndexOpenwrt with any type of body
func NewGetIndexOpenwrtRequestWithBody(server string, params *GetIndexOpenwrtParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openwrt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOracleRequest calls the generic GetIndexOracle builder with application/json body
func NewGetIndexOracleRequest(server string, params *GetIndexOracleParams, body GetIndexOracleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOracleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOracleRequestWithBody generates requests for GetIndexOracle with any type of body
func NewGetIndexOracleRequestWithBody(server string, params *GetIndexOracleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/oracle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOracleCpuRequest calls the generic GetIndexOracleCpu builder with application/json body
func NewGetIndexOracleCpuRequest(server string, params *GetIndexOracleCpuParams, body GetIndexOracleCpuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOracleCpuRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOracleCpuRequestWithBody generates requests for GetIndexOracleCpu with any type of body
func NewGetIndexOracleCpuRequestWithBody(server string, params *GetIndexOracleCpuParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/oracle-cpu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOracleCpuCsafRequest calls the generic GetIndexOracleCpuCsaf builder with application/json body
func NewGetIndexOracleCpuCsafRequest(server string, params *GetIndexOracleCpuCsafParams, body GetIndexOracleCpuCsafJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOracleCpuCsafRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOracleCpuCsafRequestWithBody generates requests for GetIndexOracleCpuCsaf with any type of body
func NewGetIndexOracleCpuCsafRequestWithBody(server string, params *GetIndexOracleCpuCsafParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/oracle-cpu-csaf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOsvRequest calls the generic GetIndexOsv builder with application/json body
func NewGetIndexOsvRequest(server string, params *GetIndexOsvParams, body GetIndexOsvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOsvRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOsvRequestWithBody generates requests for GetIndexOsv with any type of body
func NewGetIndexOsvRequestWithBody(server string, params *GetIndexOsvParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/osv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOtrsRequest calls the generic GetIndexOtrs builder with application/json body
func NewGetIndexOtrsRequest(server string, params *GetIndexOtrsParams, body GetIndexOtrsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOtrsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOtrsRequestWithBody generates requests for GetIndexOtrs with any type of body
func NewGetIndexOtrsRequestWithBody(server string, params *GetIndexOtrsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/otrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOwncloudRequest calls the generic GetIndexOwncloud builder with application/json body
func NewGetIndexOwncloudRequest(server string, params *GetIndexOwncloudParams, body GetIndexOwncloudJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOwncloudRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexOwncloudRequestWithBody generates requests for GetIndexOwncloud with any type of body
func NewGetIndexOwncloudRequestWithBody(server string, params *GetIndexOwncloudParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/owncloud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPalantirRequest calls the generic GetIndexPalantir builder with application/json body
func NewGetIndexPalantirRequest(server string, params *GetIndexPalantirParams, body GetIndexPalantirJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPalantirRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPalantirRequestWithBody generates requests for GetIndexPalantir with any type of body
func NewGetIndexPalantirRequestWithBody(server string, params *GetIndexPalantirParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/palantir")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPaloAltoRequest calls the generic GetIndexPaloAlto builder with application/json body
func NewGetIndexPaloAltoRequest(server string, params *GetIndexPaloAltoParams, body GetIndexPaloAltoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPaloAltoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPaloAltoRequestWithBody generates requests for GetIndexPaloAlto with any type of body
func NewGetIndexPaloAltoRequestWithBody(server string, params *GetIndexPaloAltoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/palo-alto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPanasonicRequest calls the generic GetIndexPanasonic builder with application/json body
func NewGetIndexPanasonicRequest(server string, params *GetIndexPanasonicParams, body GetIndexPanasonicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPanasonicRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPanasonicRequestWithBody generates requests for GetIndexPanasonic with any type of body
func NewGetIndexPanasonicRequestWithBody(server string, params *GetIndexPanasonicParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/panasonic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPapercutRequest calls the generic GetIndexPapercut builder with application/json body
func NewGetIndexPapercutRequest(server string, params *GetIndexPapercutParams, body GetIndexPapercutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPapercutRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPapercutRequestWithBody generates requests for GetIndexPapercut with any type of body
func NewGetIndexPapercutRequestWithBody(server string, params *GetIndexPapercutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/papercut")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPegaRequest calls the generic GetIndexPega builder with application/json body
func NewGetIndexPegaRequest(server string, params *GetIndexPegaParams, body GetIndexPegaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPegaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPegaRequestWithBody generates requests for GetIndexPega with any type of body
func NewGetIndexPegaRequestWithBody(server string, params *GetIndexPegaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pega")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPhilipsRequest calls the generic GetIndexPhilips builder with application/json body
func NewGetIndexPhilipsRequest(server string, params *GetIndexPhilipsParams, body GetIndexPhilipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPhilipsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPhilipsRequestWithBody generates requests for GetIndexPhilips with any type of body
func NewGetIndexPhilipsRequestWithBody(server string, params *GetIndexPhilipsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/philips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPhoenixContactRequest calls the generic GetIndexPhoenixContact builder with application/json body
func NewGetIndexPhoenixContactRequest(server string, params *GetIndexPhoenixContactParams, body GetIndexPhoenixContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPhoenixContactRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPhoenixContactRequestWithBody generates requests for GetIndexPhoenixContact with any type of body
func NewGetIndexPhoenixContactRequestWithBody(server string, params *GetIndexPhoenixContactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/phoenix-contact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPhpMyAdminRequest calls the generic GetIndexPhpMyAdmin builder with application/json body
func NewGetIndexPhpMyAdminRequest(server string, params *GetIndexPhpMyAdminParams, body GetIndexPhpMyAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPhpMyAdminRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPhpMyAdminRequestWithBody generates requests for GetIndexPhpMyAdmin with any type of body
func NewGetIndexPhpMyAdminRequestWithBody(server string, params *GetIndexPhpMyAdminParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/php-my-admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPostgressqlRequest calls the generic GetIndexPostgressql builder with application/json body
func NewGetIndexPostgressqlRequest(server string, params *GetIndexPostgressqlParams, body GetIndexPostgressqlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPostgressqlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPostgressqlRequestWithBody generates requests for GetIndexPostgressql with any type of body
func NewGetIndexPostgressqlRequestWithBody(server string, params *GetIndexPostgressqlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/postgressql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPowerdnsRequest calls the generic GetIndexPowerdns builder with application/json body
func NewGetIndexPowerdnsRequest(server string, params *GetIndexPowerdnsParams, body GetIndexPowerdnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPowerdnsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPowerdnsRequestWithBody generates requests for GetIndexPowerdns with any type of body
func NewGetIndexPowerdnsRequestWithBody(server string, params *GetIndexPowerdnsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/powerdns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexProgressRequest calls the generic GetIndexProgress builder with application/json body
func NewGetIndexProgressRequest(server string, params *GetIndexProgressParams, body GetIndexProgressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexProgressRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexProgressRequestWithBody generates requests for GetIndexProgress with any type of body
func NewGetIndexProgressRequestWithBody(server string, params *GetIndexProgressParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexProofpointRequest calls the generic GetIndexProofpoint builder with application/json body
func NewGetIndexProofpointRequest(server string, params *GetIndexProofpointParams, body GetIndexProofpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexProofpointRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexProofpointRequestWithBody generates requests for GetIndexProofpoint with any type of body
func NewGetIndexProofpointRequestWithBody(server string, params *GetIndexProofpointParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/proofpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPtcRequest calls the generic GetIndexPtc builder with application/json body
func NewGetIndexPtcRequest(server string, params *GetIndexPtcParams, body GetIndexPtcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPtcRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPtcRequestWithBody generates requests for GetIndexPtc with any type of body
func NewGetIndexPtcRequestWithBody(server string, params *GetIndexPtcParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ptc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPubRequest calls the generic GetIndexPub builder with application/json body
func NewGetIndexPubRequest(server string, params *GetIndexPubParams, body GetIndexPubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPubRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPubRequestWithBody generates requests for GetIndexPub with any type of body
func NewGetIndexPubRequestWithBody(server string, params *GetIndexPubParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pub")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPureStorageRequest calls the generic GetIndexPureStorage builder with application/json body
func NewGetIndexPureStorageRequest(server string, params *GetIndexPureStorageParams, body GetIndexPureStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPureStorageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPureStorageRequestWithBody generates requests for GetIndexPureStorage with any type of body
func NewGetIndexPureStorageRequestWithBody(server string, params *GetIndexPureStorageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pure-storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPypaAdvisoriesRequest calls the generic GetIndexPypaAdvisories builder with application/json body
func NewGetIndexPypaAdvisoriesRequest(server string, params *GetIndexPypaAdvisoriesParams, body GetIndexPypaAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPypaAdvisoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPypaAdvisoriesRequestWithBody generates requests for GetIndexPypaAdvisories with any type of body
func NewGetIndexPypaAdvisoriesRequestWithBody(server string, params *GetIndexPypaAdvisoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pypa-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPypiRequest calls the generic GetIndexPypi builder with application/json body
func NewGetIndexPypiRequest(server string, params *GetIndexPypiParams, body GetIndexPypiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPypiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexPypiRequestWithBody generates requests for GetIndexPypi with any type of body
func NewGetIndexPypiRequestWithBody(server string, params *GetIndexPypiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pypi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQnapRequest calls the generic GetIndexQnap builder with application/json body
func NewGetIndexQnapRequest(server string, params *GetIndexQnapParams, body GetIndexQnapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQnapRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexQnapRequestWithBody generates requests for GetIndexQnap with any type of body
func NewGetIndexQnapRequestWithBody(server string, params *GetIndexQnapParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qnap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQualcommRequest calls the generic GetIndexQualcomm builder with application/json body
func NewGetIndexQualcommRequest(server string, params *GetIndexQualcommParams, body GetIndexQualcommJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQualcommRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexQualcommRequestWithBody generates requests for GetIndexQualcomm with any type of body
func NewGetIndexQualcommRequestWithBody(server string, params *GetIndexQualcommParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qualcomm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQualysRequest calls the generic GetIndexQualys builder with application/json body
func NewGetIndexQualysRequest(server string, params *GetIndexQualysParams, body GetIndexQualysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQualysRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexQualysRequestWithBody generates requests for GetIndexQualys with any type of body
func NewGetIndexQualysRequestWithBody(server string, params *GetIndexQualysParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qualys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQubesQsbRequest calls the generic GetIndexQubesQsb builder with application/json body
func NewGetIndexQubesQsbRequest(server string, params *GetIndexQubesQsbParams, body GetIndexQubesQsbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQubesQsbRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexQubesQsbRequestWithBody generates requests for GetIndexQubesQsb with any type of body
func NewGetIndexQubesQsbRequestWithBody(server string, params *GetIndexQubesQsbParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qubes-qsb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRansomwareRequest calls the generic GetIndexRansomware builder with application/json body
func NewGetIndexRansomwareRequest(server string, params *GetIndexRansomwareParams, body GetIndexRansomwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRansomwareRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRansomwareRequestWithBody generates requests for GetIndexRansomware with any type of body
func NewGetIndexRansomwareRequestWithBody(server string, params *GetIndexRansomwareParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ransomware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRedhatRequest calls the generic GetIndexRedhat builder with application/json body
func NewGetIndexRedhatRequest(server string, params *GetIndexRedhatParams, body GetIndexRedhatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRedhatRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRedhatRequestWithBody generates requests for GetIndexRedhat with any type of body
func NewGetIndexRedhatRequestWithBody(server string, params *GetIndexRedhatParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/redhat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRenesasRequest calls the generic GetIndexRenesas builder with application/json body
func NewGetIndexRenesasRequest(server string, params *GetIndexRenesasParams, body GetIndexRenesasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRenesasRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRenesasRequestWithBody generates requests for GetIndexRenesas with any type of body
func NewGetIndexRenesasRequestWithBody(server string, params *GetIndexRenesasParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/renesas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexReviveRequest calls the generic GetIndexRevive builder with application/json body
func NewGetIndexReviveRequest(server string, params *GetIndexReviveParams, body GetIndexReviveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexReviveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexReviveRequestWithBody generates requests for GetIndexRevive with any type of body
func NewGetIndexReviveRequestWithBody(server string, params *GetIndexReviveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/revive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRockwellRequest calls the generic GetIndexRockwell builder with application/json body
func NewGetIndexRockwellRequest(server string, params *GetIndexRockwellParams, body GetIndexRockwellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRockwellRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRockwellRequestWithBody generates requests for GetIndexRockwell with any type of body
func NewGetIndexRockwellRequestWithBody(server string, params *GetIndexRockwellParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rockwell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRockyRequest calls the generic GetIndexRocky builder with application/json body
func NewGetIndexRockyRequest(server string, params *GetIndexRockyParams, body GetIndexRockyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRockyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRockyRequestWithBody generates requests for GetIndexRocky with any type of body
func NewGetIndexRockyRequestWithBody(server string, params *GetIndexRockyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rocky")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRockyErrataRequest calls the generic GetIndexRockyErrata builder with application/json body
func NewGetIndexRockyErrataRequest(server string, params *GetIndexRockyErrataParams, body GetIndexRockyErrataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRockyErrataRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRockyErrataRequestWithBody generates requests for GetIndexRockyErrata with any type of body
func NewGetIndexRockyErrataRequestWithBody(server string, params *GetIndexRockyErrataParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rocky-errata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRuckusRequest calls the generic GetIndexRuckus builder with application/json body
func NewGetIndexRuckusRequest(server string, params *GetIndexRuckusParams, body GetIndexRuckusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRuckusRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRuckusRequestWithBody generates requests for GetIndexRuckus with any type of body
func NewGetIndexRuckusRequestWithBody(server string, params *GetIndexRuckusParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ruckus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRustsecAdvisoriesRequest calls the generic GetIndexRustsecAdvisories builder with application/json body
func NewGetIndexRustsecAdvisoriesRequest(server string, params *GetIndexRustsecAdvisoriesParams, body GetIndexRustsecAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRustsecAdvisoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexRustsecAdvisoriesRequestWithBody generates requests for GetIndexRustsecAdvisories with any type of body
func NewGetIndexRustsecAdvisoriesRequestWithBody(server string, params *GetIndexRustsecAdvisoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rustsec-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSacertRequest calls the generic GetIndexSacert builder with application/json body
func NewGetIndexSacertRequest(server string, params *GetIndexSacertParams, body GetIndexSacertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSacertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSacertRequestWithBody generates requests for GetIndexSacert with any type of body
func NewGetIndexSacertRequestWithBody(server string, params *GetIndexSacertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sacert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSaintRequest calls the generic GetIndexSaint builder with application/json body
func NewGetIndexSaintRequest(server string, params *GetIndexSaintParams, body GetIndexSaintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSaintRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSaintRequestWithBody generates requests for GetIndexSaint with any type of body
func NewGetIndexSaintRequestWithBody(server string, params *GetIndexSaintParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/saint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSalesforceRequest calls the generic GetIndexSalesforce builder with application/json body
func NewGetIndexSalesforceRequest(server string, params *GetIndexSalesforceParams, body GetIndexSalesforceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSalesforceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSalesforceRequestWithBody generates requests for GetIndexSalesforce with any type of body
func NewGetIndexSalesforceRequestWithBody(server string, params *GetIndexSalesforceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/salesforce")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSambaRequest calls the generic GetIndexSamba builder with application/json body
func NewGetIndexSambaRequest(server string, params *GetIndexSambaParams, body GetIndexSambaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSambaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSambaRequestWithBody generates requests for GetIndexSamba with any type of body
func NewGetIndexSambaRequestWithBody(server string, params *GetIndexSambaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/samba")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSapRequest calls the generic GetIndexSap builder with application/json body
func NewGetIndexSapRequest(server string, params *GetIndexSapParams, body GetIndexSapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSapRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSapRequestWithBody generates requests for GetIndexSap with any type of body
func NewGetIndexSapRequestWithBody(server string, params *GetIndexSapParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSchneiderElectricRequest calls the generic GetIndexSchneiderElectric builder with application/json body
func NewGetIndexSchneiderElectricRequest(server string, params *GetIndexSchneiderElectricParams, body GetIndexSchneiderElectricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSchneiderElectricRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSchneiderElectricRequestWithBody generates requests for GetIndexSchneiderElectric with any type of body
func NewGetIndexSchneiderElectricRequestWithBody(server string, params *GetIndexSchneiderElectricParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/schneider-electric")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSecConsultRequest calls the generic GetIndexSecConsult builder with application/json body
func NewGetIndexSecConsultRequest(server string, params *GetIndexSecConsultParams, body GetIndexSecConsultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSecConsultRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSecConsultRequestWithBody generates requests for GetIndexSecConsult with any type of body
func NewGetIndexSecConsultRequestWithBody(server string, params *GetIndexSecConsultParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sec-consult")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSecuritylabRequest calls the generic GetIndexSecuritylab builder with application/json body
func NewGetIndexSecuritylabRequest(server string, params *GetIndexSecuritylabParams, body GetIndexSecuritylabJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSecuritylabRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSecuritylabRequestWithBody generates requests for GetIndexSecuritylab with any type of body
func NewGetIndexSecuritylabRequestWithBody(server string, params *GetIndexSecuritylabParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/securitylab")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSeebugRequest calls the generic GetIndexSeebug builder with application/json body
func NewGetIndexSeebugRequest(server string, params *GetIndexSeebugParams, body GetIndexSeebugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSeebugRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSeebugRequestWithBody generates requests for GetIndexSeebug with any type of body
func NewGetIndexSeebugRequestWithBody(server string, params *GetIndexSeebugParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/seebug")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSelRequest calls the generic GetIndexSel builder with application/json body
func NewGetIndexSelRequest(server string, params *GetIndexSelParams, body GetIndexSelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSelRequestWithBody generates requests for GetIndexSel with any type of body
func NewGetIndexSelRequestWithBody(server string, params *GetIndexSelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSentineloneRequest calls the generic GetIndexSentinelone builder with application/json body
func NewGetIndexSentineloneRequest(server string, params *GetIndexSentineloneParams, body GetIndexSentineloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSentineloneRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSentineloneRequestWithBody generates requests for GetIndexSentinelone with any type of body
func NewGetIndexSentineloneRequestWithBody(server string, params *GetIndexSentineloneParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sentinelone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexServicenowRequest calls the generic GetIndexServicenow builder with application/json body
func NewGetIndexServicenowRequest(server string, params *GetIndexServicenowParams, body GetIndexServicenowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexServicenowRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexServicenowRequestWithBody generates requests for GetIndexServicenow with any type of body
func NewGetIndexServicenowRequestWithBody(server string, params *GetIndexServicenowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/servicenow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexShadowserverExploitedRequest calls the generic GetIndexShadowserverExploited builder with application/json body
func NewGetIndexShadowserverExploitedRequest(server string, params *GetIndexShadowserverExploitedParams, body GetIndexShadowserverExploitedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexShadowserverExploitedRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexShadowserverExploitedRequestWithBody generates requests for GetIndexShadowserverExploited with any type of body
func NewGetIndexShadowserverExploitedRequestWithBody(server string, params *GetIndexShadowserverExploitedParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/shadowserver-exploited")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexShielderRequest calls the generic GetIndexShielder builder with application/json body
func NewGetIndexShielderRequest(server string, params *GetIndexShielderParams, body GetIndexShielderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexShielderRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexShielderRequestWithBody generates requests for GetIndexShielder with any type of body
func NewGetIndexShielderRequestWithBody(server string, params *GetIndexShielderParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/shielder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSickRequest calls the generic GetIndexSick builder with application/json body
func NewGetIndexSickRequest(server string, params *GetIndexSickParams, body GetIndexSickJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSickRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSickRequestWithBody generates requests for GetIndexSick with any type of body
func NewGetIndexSickRequestWithBody(server string, params *GetIndexSickParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sick")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSiemensRequest calls the generic GetIndexSiemens builder with application/json body
func NewGetIndexSiemensRequest(server string, params *GetIndexSiemensParams, body GetIndexSiemensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSiemensRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSiemensRequestWithBody generates requests for GetIndexSiemens with any type of body
func NewGetIndexSiemensRequestWithBody(server string, params *GetIndexSiemensParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/siemens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSierraWirelessRequest calls the generic GetIndexSierraWireless builder with application/json body
func NewGetIndexSierraWirelessRequest(server string, params *GetIndexSierraWirelessParams, body GetIndexSierraWirelessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSierraWirelessRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSierraWirelessRequestWithBody generates requests for GetIndexSierraWireless with any type of body
func NewGetIndexSierraWirelessRequestWithBody(server string, params *GetIndexSierraWirelessParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sierra-wireless")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSigmaRulesRequest calls the generic GetIndexSigmaRules builder with application/json body
func NewGetIndexSigmaRulesRequest(server string, params *GetIndexSigmaRulesParams, body GetIndexSigmaRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSigmaRulesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSigmaRulesRequestWithBody generates requests for GetIndexSigmaRules with any type of body
func NewGetIndexSigmaRulesRequestWithBody(server string, params *GetIndexSigmaRulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sigma-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSingcertRequest calls the generic GetIndexSingcert builder with application/json body
func NewGetIndexSingcertRequest(server string, params *GetIndexSingcertParams, body GetIndexSingcertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSingcertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSingcertRequestWithBody generates requests for GetIndexSingcert with any type of body
func NewGetIndexSingcertRequestWithBody(server string, params *GetIndexSingcertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/singcert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSlackwareRequest calls the generic GetIndexSlackware builder with application/json body
func NewGetIndexSlackwareRequest(server string, params *GetIndexSlackwareParams, body GetIndexSlackwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSlackwareRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSlackwareRequestWithBody generates requests for GetIndexSlackware with any type of body
func NewGetIndexSlackwareRequestWithBody(server string, params *GetIndexSlackwareParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/slackware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSolarwindsRequest calls the generic GetIndexSolarwinds builder with application/json body
func NewGetIndexSolarwindsRequest(server string, params *GetIndexSolarwindsParams, body GetIndexSolarwindsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSolarwindsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSolarwindsRequestWithBody generates requests for GetIndexSolarwinds with any type of body
func NewGetIndexSolarwindsRequestWithBody(server string, params *GetIndexSolarwindsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/solarwinds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSolrRequest calls the generic GetIndexSolr builder with application/json body
func NewGetIndexSolrRequest(server string, params *GetIndexSolrParams, body GetIndexSolrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSolrRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSolrRequestWithBody generates requests for GetIndexSolr with any type of body
func NewGetIndexSolrRequestWithBody(server string, params *GetIndexSolrParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/solr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSonicwallRequest calls the generic GetIndexSonicwall builder with application/json body
func NewGetIndexSonicwallRequest(server string, params *GetIndexSonicwallParams, body GetIndexSonicwallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSonicwallRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSonicwallRequestWithBody generates requests for GetIndexSonicwall with any type of body
func NewGetIndexSonicwallRequestWithBody(server string, params *GetIndexSonicwallParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sonicwall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSpacelabsHealthcareRequest calls the generic GetIndexSpacelabsHealthcare builder with application/json body
func NewGetIndexSpacelabsHealthcareRequest(server string, params *GetIndexSpacelabsHealthcareParams, body GetIndexSpacelabsHealthcareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSpacelabsHealthcareRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSpacelabsHealthcareRequestWithBody generates requests for GetIndexSpacelabsHealthcare with any type of body
func NewGetIndexSpacelabsHealthcareRequestWithBody(server string, params *GetIndexSpacelabsHealthcareParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/spacelabs-healthcare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSplunkRequest calls the generic GetIndexSplunk builder with application/json body
func NewGetIndexSplunkRequest(server string, params *GetIndexSplunkParams, body GetIndexSplunkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSplunkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSplunkRequestWithBody generates requests for GetIndexSplunk with any type of body
func NewGetIndexSplunkRequestWithBody(server string, params *GetIndexSplunkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/splunk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSpringRequest calls the generic GetIndexSpring builder with application/json body
func NewGetIndexSpringRequest(server string, params *GetIndexSpringParams, body GetIndexSpringJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSpringRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSpringRequestWithBody generates requests for GetIndexSpring with any type of body
func NewGetIndexSpringRequestWithBody(server string, params *GetIndexSpringParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/spring")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSsdRequest calls the generic GetIndexSsd builder with application/json body
func NewGetIndexSsdRequest(server string, params *GetIndexSsdParams, body GetIndexSsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSsdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSsdRequestWithBody generates requests for GetIndexSsd with any type of body
func NewGetIndexSsdRequestWithBody(server string, params *GetIndexSsdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ssd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexStormshieldRequest calls the generic GetIndexStormshield builder with application/json body
func NewGetIndexStormshieldRequest(server string, params *GetIndexStormshieldParams, body GetIndexStormshieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexStormshieldRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexStormshieldRequestWithBody generates requests for GetIndexStormshield with any type of body
func NewGetIndexStormshieldRequestWithBody(server string, params *GetIndexStormshieldParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/stormshield")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexStrykerRequest calls the generic GetIndexStryker builder with application/json body
func NewGetIndexStrykerRequest(server string, params *GetIndexStrykerParams, body GetIndexStrykerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexStrykerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexStrykerRequestWithBody generates requests for GetIndexStryker with any type of body
func NewGetIndexStrykerRequestWithBody(server string, params *GetIndexStrykerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/stryker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSudoRequest calls the generic GetIndexSudo builder with application/json body
func NewGetIndexSudoRequest(server string, params *GetIndexSudoParams, body GetIndexSudoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSudoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSudoRequestWithBody generates requests for GetIndexSudo with any type of body
func NewGetIndexSudoRequestWithBody(server string, params *GetIndexSudoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sudo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSuseRequest calls the generic GetIndexSuse builder with application/json body
func NewGetIndexSuseRequest(server string, params *GetIndexSuseParams, body GetIndexSuseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSuseRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSuseRequestWithBody generates requests for GetIndexSuse with any type of body
func NewGetIndexSuseRequestWithBody(server string, params *GetIndexSuseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/suse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSwiftRequest calls the generic GetIndexSwift builder with application/json body
func NewGetIndexSwiftRequest(server string, params *GetIndexSwiftParams, body GetIndexSwiftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSwiftRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSwiftRequestWithBody generates requests for GetIndexSwift with any type of body
func NewGetIndexSwiftRequestWithBody(server string, params *GetIndexSwiftParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/swift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSwisslogHealthcareRequest calls the generic GetIndexSwisslogHealthcare builder with application/json body
func NewGetIndexSwisslogHealthcareRequest(server string, params *GetIndexSwisslogHealthcareParams, body GetIndexSwisslogHealthcareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSwisslogHealthcareRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSwisslogHealthcareRequestWithBody generates requests for GetIndexSwisslogHealthcare with any type of body
func NewGetIndexSwisslogHealthcareRequestWithBody(server string, params *GetIndexSwisslogHealthcareParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/swisslog-healthcare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSymfonyRequest calls the generic GetIndexSymfony builder with application/json body
func NewGetIndexSymfonyRequest(server string, params *GetIndexSymfonyParams, body GetIndexSymfonyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSymfonyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSymfonyRequestWithBody generates requests for GetIndexSymfony with any type of body
func NewGetIndexSymfonyRequestWithBody(server string, params *GetIndexSymfonyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/symfony")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSynacktivRequest calls the generic GetIndexSynacktiv builder with application/json body
func NewGetIndexSynacktivRequest(server string, params *GetIndexSynacktivParams, body GetIndexSynacktivJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSynacktivRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSynacktivRequestWithBody generates requests for GetIndexSynacktiv with any type of body
func NewGetIndexSynacktivRequestWithBody(server string, params *GetIndexSynacktivParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/synacktiv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSyncrosoftRequest calls the generic GetIndexSyncrosoft builder with application/json body
func NewGetIndexSyncrosoftRequest(server string, params *GetIndexSyncrosoftParams, body GetIndexSyncrosoftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSyncrosoftRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSyncrosoftRequestWithBody generates requests for GetIndexSyncrosoft with any type of body
func NewGetIndexSyncrosoftRequestWithBody(server string, params *GetIndexSyncrosoftParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/syncrosoft")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSynologyRequest calls the generic GetIndexSynology builder with application/json body
func NewGetIndexSynologyRequest(server string, params *GetIndexSynologyParams, body GetIndexSynologyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSynologyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexSynologyRequestWithBody generates requests for GetIndexSynology with any type of body
func NewGetIndexSynologyRequestWithBody(server string, params *GetIndexSynologyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/synology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTeamviewerRequest calls the generic GetIndexTeamviewer builder with application/json body
func NewGetIndexTeamviewerRequest(server string, params *GetIndexTeamviewerParams, body GetIndexTeamviewerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTeamviewerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTeamviewerRequestWithBody generates requests for GetIndexTeamviewer with any type of body
func NewGetIndexTeamviewerRequestWithBody(server string, params *GetIndexTeamviewerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/teamviewer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTenableResearchAdvisoriesRequest calls the generic GetIndexTenableResearchAdvisories builder with application/json body
func NewGetIndexTenableResearchAdvisoriesRequest(server string, params *GetIndexTenableResearchAdvisoriesParams, body GetIndexTenableResearchAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTenableResearchAdvisoriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTenableResearchAdvisoriesRequestWithBody generates requests for GetIndexTenableResearchAdvisories with any type of body
func NewGetIndexTenableResearchAdvisoriesRequestWithBody(server string, params *GetIndexTenableResearchAdvisoriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tenable-research-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTencentRequest calls the generic GetIndexTencent builder with application/json body
func NewGetIndexTencentRequest(server string, params *GetIndexTencentParams, body GetIndexTencentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTencentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTencentRequestWithBody generates requests for GetIndexTencent with any type of body
func NewGetIndexTencentRequestWithBody(server string, params *GetIndexTencentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tencent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexThalesRequest calls the generic GetIndexThales builder with application/json body
func NewGetIndexThalesRequest(server string, params *GetIndexThalesParams, body GetIndexThalesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexThalesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexThalesRequestWithBody generates requests for GetIndexThales with any type of body
func NewGetIndexThalesRequestWithBody(server string, params *GetIndexThalesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/thales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexThemissinglinkRequest calls the generic GetIndexThemissinglink builder with application/json body
func NewGetIndexThemissinglinkRequest(server string, params *GetIndexThemissinglinkParams, body GetIndexThemissinglinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexThemissinglinkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexThemissinglinkRequestWithBody generates requests for GetIndexThemissinglink with any type of body
func NewGetIndexThemissinglinkRequestWithBody(server string, params *GetIndexThemissinglinkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/themissinglink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexThreatActorsRequest calls the generic GetIndexThreatActors builder with application/json body
func NewGetIndexThreatActorsRequest(server string, params *GetIndexThreatActorsParams, body GetIndexThreatActorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexThreatActorsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexThreatActorsRequestWithBody generates requests for GetIndexThreatActors with any type of body
func NewGetIndexThreatActorsRequestWithBody(server string, params *GetIndexThreatActorsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/threat-actors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTiRequest calls the generic GetIndexTi builder with application/json body
func NewGetIndexTiRequest(server string, params *GetIndexTiParams, body GetIndexTiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTiRequestWithBody generates requests for GetIndexTi with any type of body
func NewGetIndexTiRequestWithBody(server string, params *GetIndexTiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ti")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTibcoRequest calls the generic GetIndexTibco builder with application/json body
func NewGetIndexTibcoRequest(server string, params *GetIndexTibcoParams, body GetIndexTibcoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTibcoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTibcoRequestWithBody generates requests for GetIndexTibco with any type of body
func NewGetIndexTibcoRequestWithBody(server string, params *GetIndexTibcoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tibco")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTpLinkRequest calls the generic GetIndexTpLink builder with application/json body
func NewGetIndexTpLinkRequest(server string, params *GetIndexTpLinkParams, body GetIndexTpLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTpLinkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTpLinkRequestWithBody generates requests for GetIndexTpLink with any type of body
func NewGetIndexTpLinkRequestWithBody(server string, params *GetIndexTpLinkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tp-link")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTraneTechnologyRequest calls the generic GetIndexTraneTechnology builder with application/json body
func NewGetIndexTraneTechnologyRequest(server string, params *GetIndexTraneTechnologyParams, body GetIndexTraneTechnologyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTraneTechnologyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTraneTechnologyRequestWithBody generates requests for GetIndexTraneTechnology with any type of body
func NewGetIndexTraneTechnologyRequestWithBody(server string, params *GetIndexTraneTechnologyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/trane-technology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTrendmicroRequest calls the generic GetIndexTrendmicro builder with application/json body
func NewGetIndexTrendmicroRequest(server string, params *GetIndexTrendmicroParams, body GetIndexTrendmicroJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTrendmicroRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTrendmicroRequestWithBody generates requests for GetIndexTrendmicro with any type of body
func NewGetIndexTrendmicroRequestWithBody(server string, params *GetIndexTrendmicroParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/trendmicro")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTrustwaveRequest calls the generic GetIndexTrustwave builder with application/json body
func NewGetIndexTrustwaveRequest(server string, params *GetIndexTrustwaveParams, body GetIndexTrustwaveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTrustwaveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTrustwaveRequestWithBody generates requests for GetIndexTrustwave with any type of body
func NewGetIndexTrustwaveRequestWithBody(server string, params *GetIndexTrustwaveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/trustwave")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTwcertRequest calls the generic GetIndexTwcert builder with application/json body
func NewGetIndexTwcertRequest(server string, params *GetIndexTwcertParams, body GetIndexTwcertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTwcertRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexTwcertRequestWithBody generates requests for GetIndexTwcert with any type of body
func NewGetIndexTwcertRequestWithBody(server string, params *GetIndexTwcertParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/twcert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUbiquitiRequest calls the generic GetIndexUbiquiti builder with application/json body
func NewGetIndexUbiquitiRequest(server string, params *GetIndexUbiquitiParams, body GetIndexUbiquitiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUbiquitiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexUbiquitiRequestWithBody generates requests for GetIndexUbiquiti with any type of body
func NewGetIndexUbiquitiRequestWithBody(server string, params *GetIndexUbiquitiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ubiquiti")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUbuntuRequest calls the generic GetIndexUbuntu builder with application/json body
func NewGetIndexUbuntuRequest(server string, params *GetIndexUbuntuParams, body GetIndexUbuntuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUbuntuRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexUbuntuRequestWithBody generates requests for GetIndexUbuntu with any type of body
func NewGetIndexUbuntuRequestWithBody(server string, params *GetIndexUbuntuParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ubuntu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUnifyRequest calls the generic GetIndexUnify builder with application/json body
func NewGetIndexUnifyRequest(server string, params *GetIndexUnifyParams, body GetIndexUnifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUnifyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexUnifyRequestWithBody generates requests for GetIndexUnify with any type of body
func NewGetIndexUnifyRequestWithBody(server string, params *GetIndexUnifyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/unify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUnisocRequest calls the generic GetIndexUnisoc builder with application/json body
func NewGetIndexUnisocRequest(server string, params *GetIndexUnisocParams, body GetIndexUnisocJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUnisocRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexUnisocRequestWithBody generates requests for GetIndexUnisoc with any type of body
func NewGetIndexUnisocRequestWithBody(server string, params *GetIndexUnisocParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/unisoc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUsdRequest calls the generic GetIndexUsd builder with application/json body
func NewGetIndexUsdRequest(server string, params *GetIndexUsdParams, body GetIndexUsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUsdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexUsdRequestWithBody generates requests for GetIndexUsd with any type of body
func NewGetIndexUsdRequestWithBody(server string, params *GetIndexUsdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/usd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUsomRequest calls the generic GetIndexUsom builder with application/json body
func NewGetIndexUsomRequest(server string, params *GetIndexUsomParams, body GetIndexUsomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUsomRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexUsomRequestWithBody generates requests for GetIndexUsom with any type of body
func NewGetIndexUsomRequestWithBody(server string, params *GetIndexUsomParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/usom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVandykeRequest calls the generic GetIndexVandyke builder with application/json body
func NewGetIndexVandykeRequest(server string, params *GetIndexVandykeParams, body GetIndexVandykeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVandykeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVandykeRequestWithBody generates requests for GetIndexVandyke with any type of body
func NewGetIndexVandykeRequestWithBody(server string, params *GetIndexVandykeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vandyke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVapidlabsRequest calls the generic GetIndexVapidlabs builder with application/json body
func NewGetIndexVapidlabsRequest(server string, params *GetIndexVapidlabsParams, body GetIndexVapidlabsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVapidlabsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVapidlabsRequestWithBody generates requests for GetIndexVapidlabs with any type of body
func NewGetIndexVapidlabsRequestWithBody(server string, params *GetIndexVapidlabsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vapidlabs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVcCpeDictionaryRequest calls the generic GetIndexVcCpeDictionary builder with application/json body
func NewGetIndexVcCpeDictionaryRequest(server string, params *GetIndexVcCpeDictionaryParams, body GetIndexVcCpeDictionaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVcCpeDictionaryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVcCpeDictionaryRequestWithBody generates requests for GetIndexVcCpeDictionary with any type of body
func NewGetIndexVcCpeDictionaryRequestWithBody(server string, params *GetIndexVcCpeDictionaryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vc-cpe-dictionary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVdeRequest calls the generic GetIndexVde builder with application/json body
func NewGetIndexVdeRequest(server string, params *GetIndexVdeParams, body GetIndexVdeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVdeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVdeRequestWithBody generates requests for GetIndexVde with any type of body
func NewGetIndexVdeRequestWithBody(server string, params *GetIndexVdeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vde")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVeeamRequest calls the generic GetIndexVeeam builder with application/json body
func NewGetIndexVeeamRequest(server string, params *GetIndexVeeamParams, body GetIndexVeeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVeeamRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVeeamRequestWithBody generates requests for GetIndexVeeam with any type of body
func NewGetIndexVeeamRequestWithBody(server string, params *GetIndexVeeamParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/veeam")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVeritasRequest calls the generic GetIndexVeritas builder with application/json body
func NewGetIndexVeritasRequest(server string, params *GetIndexVeritasParams, body GetIndexVeritasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVeritasRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVeritasRequestWithBody generates requests for GetIndexVeritas with any type of body
func NewGetIndexVeritasRequestWithBody(server string, params *GetIndexVeritasParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/veritas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVmwareRequest calls the generic GetIndexVmware builder with application/json body
func NewGetIndexVmwareRequest(server string, params *GetIndexVmwareParams, body GetIndexVmwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVmwareRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVmwareRequestWithBody generates requests for GetIndexVmware with any type of body
func NewGetIndexVmwareRequestWithBody(server string, params *GetIndexVmwareParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vmware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVoidsecRequest calls the generic GetIndexVoidsec builder with application/json body
func NewGetIndexVoidsecRequest(server string, params *GetIndexVoidsecParams, body GetIndexVoidsecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVoidsecRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVoidsecRequestWithBody generates requests for GetIndexVoidsec with any type of body
func NewGetIndexVoidsecRequestWithBody(server string, params *GetIndexVoidsecParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/voidsec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckRequest calls the generic GetIndexVulncheck builder with application/json body
func NewGetIndexVulncheckRequest(server string, params *GetIndexVulncheckParams, body GetIndexVulncheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulncheckRequestWithBody generates requests for GetIndexVulncheck with any type of body
func NewGetIndexVulncheckRequestWithBody(server string, params *GetIndexVulncheckParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckConfigRequest calls the generic GetIndexVulncheckConfig builder with application/json body
func NewGetIndexVulncheckConfigRequest(server string, params *GetIndexVulncheckConfigParams, body GetIndexVulncheckConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulncheckConfigRequestWithBody generates requests for GetIndexVulncheckConfig with any type of body
func NewGetIndexVulncheckConfigRequestWithBody(server string, params *GetIndexVulncheckConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckCvelistV5Request calls the generic GetIndexVulncheckCvelistV5 builder with application/json body
func NewGetIndexVulncheckCvelistV5Request(server string, params *GetIndexVulncheckCvelistV5Params, body GetIndexVulncheckCvelistV5JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckCvelistV5RequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulncheckCvelistV5RequestWithBody generates requests for GetIndexVulncheckCvelistV5 with any type of body
func NewGetIndexVulncheckCvelistV5RequestWithBody(server string, params *GetIndexVulncheckCvelistV5Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-cvelist-v5")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckKevRequest calls the generic GetIndexVulncheckKev builder with application/json body
func NewGetIndexVulncheckKevRequest(server string, params *GetIndexVulncheckKevParams, body GetIndexVulncheckKevJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckKevRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulncheckKevRequestWithBody generates requests for GetIndexVulncheckKev with any type of body
func NewGetIndexVulncheckKevRequestWithBody(server string, params *GetIndexVulncheckKevParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-kev")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckNvdRequest calls the generic GetIndexVulncheckNvd builder with application/json body
func NewGetIndexVulncheckNvdRequest(server string, params *GetIndexVulncheckNvdParams, body GetIndexVulncheckNvdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckNvdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulncheckNvdRequestWithBody generates requests for GetIndexVulncheckNvd with any type of body
func NewGetIndexVulncheckNvdRequestWithBody(server string, params *GetIndexVulncheckNvdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-nvd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckNvd2Request calls the generic GetIndexVulncheckNvd2 builder with application/json body
func NewGetIndexVulncheckNvd2Request(server string, params *GetIndexVulncheckNvd2Params, body GetIndexVulncheckNvd2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckNvd2RequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulncheckNvd2RequestWithBody generates requests for GetIndexVulncheckNvd2 with any type of body
func NewGetIndexVulncheckNvd2RequestWithBody(server string, params *GetIndexVulncheckNvd2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-nvd2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulnerabilityAliasesRequest calls the generic GetIndexVulnerabilityAliases builder with application/json body
func NewGetIndexVulnerabilityAliasesRequest(server string, params *GetIndexVulnerabilityAliasesParams, body GetIndexVulnerabilityAliasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulnerabilityAliasesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulnerabilityAliasesRequestWithBody generates requests for GetIndexVulnerabilityAliases with any type of body
func NewGetIndexVulnerabilityAliasesRequestWithBody(server string, params *GetIndexVulnerabilityAliasesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulnerability-aliases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulnrichmentRequest calls the generic GetIndexVulnrichment builder with application/json body
func NewGetIndexVulnrichmentRequest(server string, params *GetIndexVulnrichmentParams, body GetIndexVulnrichmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulnrichmentRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVulnrichmentRequestWithBody generates requests for GetIndexVulnrichment with any type of body
func NewGetIndexVulnrichmentRequestWithBody(server string, params *GetIndexVulnrichmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulnrichment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVyaireRequest calls the generic GetIndexVyaire builder with application/json body
func NewGetIndexVyaireRequest(server string, params *GetIndexVyaireParams, body GetIndexVyaireJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVyaireRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexVyaireRequestWithBody generates requests for GetIndexVyaire with any type of body
func NewGetIndexVyaireRequestWithBody(server string, params *GetIndexVyaireParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vyaire")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWatchguardRequest calls the generic GetIndexWatchguard builder with application/json body
func NewGetIndexWatchguardRequest(server string, params *GetIndexWatchguardParams, body GetIndexWatchguardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWatchguardRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWatchguardRequestWithBody generates requests for GetIndexWatchguard with any type of body
func NewGetIndexWatchguardRequestWithBody(server string, params *GetIndexWatchguardParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/watchguard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWhatsappRequest calls the generic GetIndexWhatsapp builder with application/json body
func NewGetIndexWhatsappRequest(server string, params *GetIndexWhatsappParams, body GetIndexWhatsappJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWhatsappRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWhatsappRequestWithBody generates requests for GetIndexWhatsapp with any type of body
func NewGetIndexWhatsappRequestWithBody(server string, params *GetIndexWhatsappParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/whatsapp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWibuRequest calls the generic GetIndexWibu builder with application/json body
func NewGetIndexWibuRequest(server string, params *GetIndexWibuParams, body GetIndexWibuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWibuRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWibuRequestWithBody generates requests for GetIndexWibu with any type of body
func NewGetIndexWibuRequestWithBody(server string, params *GetIndexWibuParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wibu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWiresharkRequest calls the generic GetIndexWireshark builder with application/json body
func NewGetIndexWiresharkRequest(server string, params *GetIndexWiresharkParams, body GetIndexWiresharkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWiresharkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWiresharkRequestWithBody generates requests for GetIndexWireshark with any type of body
func NewGetIndexWiresharkRequestWithBody(server string, params *GetIndexWiresharkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wireshark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWithSecureRequest calls the generic GetIndexWithSecure builder with application/json body
func NewGetIndexWithSecureRequest(server string, params *GetIndexWithSecureParams, body GetIndexWithSecureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWithSecureRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWithSecureRequestWithBody generates requests for GetIndexWithSecure with any type of body
func NewGetIndexWithSecureRequestWithBody(server string, params *GetIndexWithSecureParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/with-secure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWolfiRequest calls the generic GetIndexWolfi builder with application/json body
func NewGetIndexWolfiRequest(server string, params *GetIndexWolfiParams, body GetIndexWolfiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWolfiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWolfiRequestWithBody generates requests for GetIndexWolfi with any type of body
func NewGetIndexWolfiRequestWithBody(server string, params *GetIndexWolfiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wolfi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWolfsslRequest calls the generic GetIndexWolfssl builder with application/json body
func NewGetIndexWolfsslRequest(server string, params *GetIndexWolfsslParams, body GetIndexWolfsslJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWolfsslRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWolfsslRequestWithBody generates requests for GetIndexWolfssl with any type of body
func NewGetIndexWolfsslRequestWithBody(server string, params *GetIndexWolfsslParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wolfssl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWordfenceRequest calls the generic GetIndexWordfence builder with application/json body
func NewGetIndexWordfenceRequest(server string, params *GetIndexWordfenceParams, body GetIndexWordfenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWordfenceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexWordfenceRequestWithBody generates requests for GetIndexWordfence with any type of body
func NewGetIndexWordfenceRequestWithBody(server string, params *GetIndexWordfenceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wordfence")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXenRequest calls the generic GetIndexXen builder with application/json body
func NewGetIndexXenRequest(server string, params *GetIndexXenParams, body GetIndexXenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexXenRequestWithBody generates requests for GetIndexXen with any type of body
func NewGetIndexXenRequestWithBody(server string, params *GetIndexXenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xen")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXeroxRequest calls the generic GetIndexXerox builder with application/json body
func NewGetIndexXeroxRequest(server string, params *GetIndexXeroxParams, body GetIndexXeroxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXeroxRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexXeroxRequestWithBody generates requests for GetIndexXerox with any type of body
func NewGetIndexXeroxRequestWithBody(server string, params *GetIndexXeroxParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xerox")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXiaomiRequest calls the generic GetIndexXiaomi builder with application/json body
func NewGetIndexXiaomiRequest(server string, params *GetIndexXiaomiParams, body GetIndexXiaomiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXiaomiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexXiaomiRequestWithBody generates requests for GetIndexXiaomi with any type of body
func NewGetIndexXiaomiRequestWithBody(server string, params *GetIndexXiaomiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xiaomi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXylemRequest calls the generic GetIndexXylem builder with application/json body
func NewGetIndexXylemRequest(server string, params *GetIndexXylemParams, body GetIndexXylemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXylemRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexXylemRequestWithBody generates requests for GetIndexXylem with any type of body
func NewGetIndexXylemRequestWithBody(server string, params *GetIndexXylemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xylem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexYokogawaRequest calls the generic GetIndexYokogawa builder with application/json body
func NewGetIndexYokogawaRequest(server string, params *GetIndexYokogawaParams, body GetIndexYokogawaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexYokogawaRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexYokogawaRequestWithBody generates requests for GetIndexYokogawa with any type of body
func NewGetIndexYokogawaRequestWithBody(server string, params *GetIndexYokogawaParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/yokogawa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexYubicoRequest calls the generic GetIndexYubico builder with application/json body
func NewGetIndexYubicoRequest(server string, params *GetIndexYubicoParams, body GetIndexYubicoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexYubicoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexYubicoRequestWithBody generates requests for GetIndexYubico with any type of body
func NewGetIndexYubicoRequestWithBody(server string, params *GetIndexYubicoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/yubico")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZdiRequest calls the generic GetIndexZdi builder with application/json body
func NewGetIndexZdiRequest(server string, params *GetIndexZdiParams, body GetIndexZdiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZdiRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZdiRequestWithBody generates requests for GetIndexZdi with any type of body
func NewGetIndexZdiRequestWithBody(server string, params *GetIndexZdiParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zdi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZebraRequest calls the generic GetIndexZebra builder with application/json body
func NewGetIndexZebraRequest(server string, params *GetIndexZebraParams, body GetIndexZebraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZebraRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZebraRequestWithBody generates requests for GetIndexZebra with any type of body
func NewGetIndexZebraRequestWithBody(server string, params *GetIndexZebraParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zebra")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZeroscienceRequest calls the generic GetIndexZeroscience builder with application/json body
func NewGetIndexZeroscienceRequest(server string, params *GetIndexZeroscienceParams, body GetIndexZeroscienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZeroscienceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZeroscienceRequestWithBody generates requests for GetIndexZeroscience with any type of body
func NewGetIndexZeroscienceRequestWithBody(server string, params *GetIndexZeroscienceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zeroscience")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZimbraRequest calls the generic GetIndexZimbra builder with application/json body
func NewGetIndexZimbraRequest(server string, params *GetIndexZimbraParams, body GetIndexZimbraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZimbraRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZimbraRequestWithBody generates requests for GetIndexZimbra with any type of body
func NewGetIndexZimbraRequestWithBody(server string, params *GetIndexZimbraParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zimbra")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZoomRequest calls the generic GetIndexZoom builder with application/json body
func NewGetIndexZoomRequest(server string, params *GetIndexZoomParams, body GetIndexZoomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZoomRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZoomRequestWithBody generates requests for GetIndexZoom with any type of body
func NewGetIndexZoomRequestWithBody(server string, params *GetIndexZoomParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zoom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZscalerRequest calls the generic GetIndexZscaler builder with application/json body
func NewGetIndexZscalerRequest(server string, params *GetIndexZscalerParams, body GetIndexZscalerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZscalerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZscalerRequestWithBody generates requests for GetIndexZscaler with any type of body
func NewGetIndexZscalerRequestWithBody(server string, params *GetIndexZscalerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zscaler")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZusoRequest calls the generic GetIndexZuso builder with application/json body
func NewGetIndexZusoRequest(server string, params *GetIndexZusoParams, body GetIndexZusoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZusoRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZusoRequestWithBody generates requests for GetIndexZuso with any type of body
func NewGetIndexZusoRequestWithBody(server string, params *GetIndexZusoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zuso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZyxelRequest calls the generic GetIndexZyxel builder with application/json body
func NewGetIndexZyxelRequest(server string, params *GetIndexZyxelParams, body GetIndexZyxelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZyxelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetIndexZyxelRequestWithBody generates requests for GetIndexZyxel with any type of body
func NewGetIndexZyxelRequestWithBody(server string, params *GetIndexZyxelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zyxel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartCursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_cursor", runtime.ParamLocationQuery, *params.StartCursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenapiRequest generates requests for GetOpenapi
func NewGetOpenapiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPdnsVulncheckC2Request generates requests for GetPdnsVulncheckC2
func NewGetPdnsVulncheckC2Request(server string, params *GetPdnsVulncheckC2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pdns/vulncheck-c2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPurlRequest generates requests for GetPurl
func NewGetPurlRequest(server string, params *GetPurlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/purl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purl", runtime.ParamLocationQuery, params.Purl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesInitialAccessTypeRequest generates requests for GetRulesInitialAccessType
func NewGetRulesInitialAccessTypeRequest(server string, pType GetRulesInitialAccessTypeParamsType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rules/initial-access/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsVulncheckC2Request generates requests for GetTagsVulncheckC2
func NewGetTagsVulncheckC2Request(server string, params *GetTagsVulncheckC2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/vulncheck-c2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBackupWithResponse request
	GetBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBackupResponse, error)

	// GetBackupIndexWithResponse request
	GetBackupIndexWithResponse(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*GetBackupIndexResponse, error)

	// GetCpeWithResponse request
	GetCpeWithResponse(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*GetCpeResponse, error)

	// GetEntitlementsWithResponse request
	GetEntitlementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEntitlementsResponse, error)

	// GetIndexWithResponse request
	GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error)

	// GetIndexA10WithBodyWithResponse request with any body
	GetIndexA10WithBodyWithResponse(ctx context.Context, params *GetIndexA10Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error)

	GetIndexA10WithResponse(ctx context.Context, params *GetIndexA10Params, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error)

	// GetIndexAbbWithBodyWithResponse request with any body
	GetIndexAbbWithBodyWithResponse(ctx context.Context, params *GetIndexAbbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error)

	GetIndexAbbWithResponse(ctx context.Context, params *GetIndexAbbParams, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error)

	// GetIndexAbbottWithBodyWithResponse request with any body
	GetIndexAbbottWithBodyWithResponse(ctx context.Context, params *GetIndexAbbottParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error)

	GetIndexAbbottWithResponse(ctx context.Context, params *GetIndexAbbottParams, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error)

	// GetIndexAbsoluteWithBodyWithResponse request with any body
	GetIndexAbsoluteWithBodyWithResponse(ctx context.Context, params *GetIndexAbsoluteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error)

	GetIndexAbsoluteWithResponse(ctx context.Context, params *GetIndexAbsoluteParams, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error)

	// GetIndexAcronisWithBodyWithResponse request with any body
	GetIndexAcronisWithBodyWithResponse(ctx context.Context, params *GetIndexAcronisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error)

	GetIndexAcronisWithResponse(ctx context.Context, params *GetIndexAcronisParams, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error)

	// GetIndexAdobeWithBodyWithResponse request with any body
	GetIndexAdobeWithBodyWithResponse(ctx context.Context, params *GetIndexAdobeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error)

	GetIndexAdobeWithResponse(ctx context.Context, params *GetIndexAdobeParams, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error)

	// GetIndexAdvisoriesWithBodyWithResponse request with any body
	GetIndexAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error)

	GetIndexAdvisoriesWithResponse(ctx context.Context, params *GetIndexAdvisoriesParams, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error)

	// GetIndexAlephResearchWithBodyWithResponse request with any body
	GetIndexAlephResearchWithBodyWithResponse(ctx context.Context, params *GetIndexAlephResearchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error)

	GetIndexAlephResearchWithResponse(ctx context.Context, params *GetIndexAlephResearchParams, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error)

	// GetIndexAlmaWithBodyWithResponse request with any body
	GetIndexAlmaWithBodyWithResponse(ctx context.Context, params *GetIndexAlmaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error)

	GetIndexAlmaWithResponse(ctx context.Context, params *GetIndexAlmaParams, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error)

	// GetIndexAlpineWithBodyWithResponse request with any body
	GetIndexAlpineWithBodyWithResponse(ctx context.Context, params *GetIndexAlpineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error)

	GetIndexAlpineWithResponse(ctx context.Context, params *GetIndexAlpineParams, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error)

	// GetIndexAmazonWithBodyWithResponse request with any body
	GetIndexAmazonWithBodyWithResponse(ctx context.Context, params *GetIndexAmazonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error)

	GetIndexAmazonWithResponse(ctx context.Context, params *GetIndexAmazonParams, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error)

	// GetIndexAmdWithBodyWithResponse request with any body
	GetIndexAmdWithBodyWithResponse(ctx context.Context, params *GetIndexAmdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error)

	GetIndexAmdWithResponse(ctx context.Context, params *GetIndexAmdParams, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error)

	// GetIndexAmiWithBodyWithResponse request with any body
	GetIndexAmiWithBodyWithResponse(ctx context.Context, params *GetIndexAmiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error)

	GetIndexAmiWithResponse(ctx context.Context, params *GetIndexAmiParams, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error)

	// GetIndexAnchoreNvdOverrideWithBodyWithResponse request with any body
	GetIndexAnchoreNvdOverrideWithBodyWithResponse(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error)

	GetIndexAnchoreNvdOverrideWithResponse(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error)

	// GetIndexAndroidWithBodyWithResponse request with any body
	GetIndexAndroidWithBodyWithResponse(ctx context.Context, params *GetIndexAndroidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error)

	GetIndexAndroidWithResponse(ctx context.Context, params *GetIndexAndroidParams, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error)

	// GetIndexApacheActivemqWithBodyWithResponse request with any body
	GetIndexApacheActivemqWithBodyWithResponse(ctx context.Context, params *GetIndexApacheActivemqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error)

	GetIndexApacheActivemqWithResponse(ctx context.Context, params *GetIndexApacheActivemqParams, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error)

	// GetIndexApacheArchivaWithBodyWithResponse request with any body
	GetIndexApacheArchivaWithBodyWithResponse(ctx context.Context, params *GetIndexApacheArchivaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error)

	GetIndexApacheArchivaWithResponse(ctx context.Context, params *GetIndexApacheArchivaParams, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error)

	// GetIndexApacheArrowWithBodyWithResponse request with any body
	GetIndexApacheArrowWithBodyWithResponse(ctx context.Context, params *GetIndexApacheArrowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error)

	GetIndexApacheArrowWithResponse(ctx context.Context, params *GetIndexApacheArrowParams, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error)

	// GetIndexApacheCamelWithBodyWithResponse request with any body
	GetIndexApacheCamelWithBodyWithResponse(ctx context.Context, params *GetIndexApacheCamelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error)

	GetIndexApacheCamelWithResponse(ctx context.Context, params *GetIndexApacheCamelParams, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error)

	// GetIndexApacheCommonsWithBodyWithResponse request with any body
	GetIndexApacheCommonsWithBodyWithResponse(ctx context.Context, params *GetIndexApacheCommonsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error)

	GetIndexApacheCommonsWithResponse(ctx context.Context, params *GetIndexApacheCommonsParams, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error)

	// GetIndexApacheCouchdbWithBodyWithResponse request with any body
	GetIndexApacheCouchdbWithBodyWithResponse(ctx context.Context, params *GetIndexApacheCouchdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error)

	GetIndexApacheCouchdbWithResponse(ctx context.Context, params *GetIndexApacheCouchdbParams, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error)

	// GetIndexApacheFlinkWithBodyWithResponse request with any body
	GetIndexApacheFlinkWithBodyWithResponse(ctx context.Context, params *GetIndexApacheFlinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error)

	GetIndexApacheFlinkWithResponse(ctx context.Context, params *GetIndexApacheFlinkParams, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error)

	// GetIndexApacheGuacamoleWithBodyWithResponse request with any body
	GetIndexApacheGuacamoleWithBodyWithResponse(ctx context.Context, params *GetIndexApacheGuacamoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error)

	GetIndexApacheGuacamoleWithResponse(ctx context.Context, params *GetIndexApacheGuacamoleParams, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error)

	// GetIndexApacheHadoopWithBodyWithResponse request with any body
	GetIndexApacheHadoopWithBodyWithResponse(ctx context.Context, params *GetIndexApacheHadoopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error)

	GetIndexApacheHadoopWithResponse(ctx context.Context, params *GetIndexApacheHadoopParams, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error)

	// GetIndexApacheHttpWithBodyWithResponse request with any body
	GetIndexApacheHttpWithBodyWithResponse(ctx context.Context, params *GetIndexApacheHttpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error)

	GetIndexApacheHttpWithResponse(ctx context.Context, params *GetIndexApacheHttpParams, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error)

	// GetIndexApacheJspwikiWithBodyWithResponse request with any body
	GetIndexApacheJspwikiWithBodyWithResponse(ctx context.Context, params *GetIndexApacheJspwikiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error)

	GetIndexApacheJspwikiWithResponse(ctx context.Context, params *GetIndexApacheJspwikiParams, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error)

	// GetIndexApacheKafkaWithBodyWithResponse request with any body
	GetIndexApacheKafkaWithBodyWithResponse(ctx context.Context, params *GetIndexApacheKafkaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error)

	GetIndexApacheKafkaWithResponse(ctx context.Context, params *GetIndexApacheKafkaParams, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error)

	// GetIndexApacheLoggingservicesWithBodyWithResponse request with any body
	GetIndexApacheLoggingservicesWithBodyWithResponse(ctx context.Context, params *GetIndexApacheLoggingservicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error)

	GetIndexApacheLoggingservicesWithResponse(ctx context.Context, params *GetIndexApacheLoggingservicesParams, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error)

	// GetIndexApacheNifiWithBodyWithResponse request with any body
	GetIndexApacheNifiWithBodyWithResponse(ctx context.Context, params *GetIndexApacheNifiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error)

	GetIndexApacheNifiWithResponse(ctx context.Context, params *GetIndexApacheNifiParams, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error)

	// GetIndexApacheOfbizWithBodyWithResponse request with any body
	GetIndexApacheOfbizWithBodyWithResponse(ctx context.Context, params *GetIndexApacheOfbizParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error)

	GetIndexApacheOfbizWithResponse(ctx context.Context, params *GetIndexApacheOfbizParams, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error)

	// GetIndexApacheOpenmeetingsWithBodyWithResponse request with any body
	GetIndexApacheOpenmeetingsWithBodyWithResponse(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error)

	GetIndexApacheOpenmeetingsWithResponse(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error)

	// GetIndexApacheOpenofficeWithBodyWithResponse request with any body
	GetIndexApacheOpenofficeWithBodyWithResponse(ctx context.Context, params *GetIndexApacheOpenofficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error)

	GetIndexApacheOpenofficeWithResponse(ctx context.Context, params *GetIndexApacheOpenofficeParams, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error)

	// GetIndexApachePulsarWithBodyWithResponse request with any body
	GetIndexApachePulsarWithBodyWithResponse(ctx context.Context, params *GetIndexApachePulsarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error)

	GetIndexApachePulsarWithResponse(ctx context.Context, params *GetIndexApachePulsarParams, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error)

	// GetIndexApacheShiroWithBodyWithResponse request with any body
	GetIndexApacheShiroWithBodyWithResponse(ctx context.Context, params *GetIndexApacheShiroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error)

	GetIndexApacheShiroWithResponse(ctx context.Context, params *GetIndexApacheShiroParams, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error)

	// GetIndexApacheSparkWithBodyWithResponse request with any body
	GetIndexApacheSparkWithBodyWithResponse(ctx context.Context, params *GetIndexApacheSparkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error)

	GetIndexApacheSparkWithResponse(ctx context.Context, params *GetIndexApacheSparkParams, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error)

	// GetIndexApacheStrutsWithBodyWithResponse request with any body
	GetIndexApacheStrutsWithBodyWithResponse(ctx context.Context, params *GetIndexApacheStrutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error)

	GetIndexApacheStrutsWithResponse(ctx context.Context, params *GetIndexApacheStrutsParams, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error)

	// GetIndexApacheSubversionWithBodyWithResponse request with any body
	GetIndexApacheSubversionWithBodyWithResponse(ctx context.Context, params *GetIndexApacheSubversionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error)

	GetIndexApacheSubversionWithResponse(ctx context.Context, params *GetIndexApacheSubversionParams, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error)

	// GetIndexApacheSupersetWithBodyWithResponse request with any body
	GetIndexApacheSupersetWithBodyWithResponse(ctx context.Context, params *GetIndexApacheSupersetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error)

	GetIndexApacheSupersetWithResponse(ctx context.Context, params *GetIndexApacheSupersetParams, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error)

	// GetIndexApacheTomcatWithBodyWithResponse request with any body
	GetIndexApacheTomcatWithBodyWithResponse(ctx context.Context, params *GetIndexApacheTomcatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error)

	GetIndexApacheTomcatWithResponse(ctx context.Context, params *GetIndexApacheTomcatParams, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error)

	// GetIndexApacheZookeeperWithBodyWithResponse request with any body
	GetIndexApacheZookeeperWithBodyWithResponse(ctx context.Context, params *GetIndexApacheZookeeperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error)

	GetIndexApacheZookeeperWithResponse(ctx context.Context, params *GetIndexApacheZookeeperParams, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error)

	// GetIndexAppcheckWithBodyWithResponse request with any body
	GetIndexAppcheckWithBodyWithResponse(ctx context.Context, params *GetIndexAppcheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error)

	GetIndexAppcheckWithResponse(ctx context.Context, params *GetIndexAppcheckParams, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error)

	// GetIndexAppgateWithBodyWithResponse request with any body
	GetIndexAppgateWithBodyWithResponse(ctx context.Context, params *GetIndexAppgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error)

	GetIndexAppgateWithResponse(ctx context.Context, params *GetIndexAppgateParams, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error)

	// GetIndexAppleWithBodyWithResponse request with any body
	GetIndexAppleWithBodyWithResponse(ctx context.Context, params *GetIndexAppleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error)

	GetIndexAppleWithResponse(ctx context.Context, params *GetIndexAppleParams, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error)

	// GetIndexArchWithBodyWithResponse request with any body
	GetIndexArchWithBodyWithResponse(ctx context.Context, params *GetIndexArchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error)

	GetIndexArchWithResponse(ctx context.Context, params *GetIndexArchParams, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error)

	// GetIndexAristaWithBodyWithResponse request with any body
	GetIndexAristaWithBodyWithResponse(ctx context.Context, params *GetIndexAristaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error)

	GetIndexAristaWithResponse(ctx context.Context, params *GetIndexAristaParams, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error)

	// GetIndexArubaWithBodyWithResponse request with any body
	GetIndexArubaWithBodyWithResponse(ctx context.Context, params *GetIndexArubaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error)

	GetIndexArubaWithResponse(ctx context.Context, params *GetIndexArubaParams, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error)

	// GetIndexAsrgWithBodyWithResponse request with any body
	GetIndexAsrgWithBodyWithResponse(ctx context.Context, params *GetIndexAsrgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error)

	GetIndexAsrgWithResponse(ctx context.Context, params *GetIndexAsrgParams, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error)

	// GetIndexAssetnoteWithBodyWithResponse request with any body
	GetIndexAssetnoteWithBodyWithResponse(ctx context.Context, params *GetIndexAssetnoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error)

	GetIndexAssetnoteWithResponse(ctx context.Context, params *GetIndexAssetnoteParams, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error)

	// GetIndexAsteriskWithBodyWithResponse request with any body
	GetIndexAsteriskWithBodyWithResponse(ctx context.Context, params *GetIndexAsteriskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error)

	GetIndexAsteriskWithResponse(ctx context.Context, params *GetIndexAsteriskParams, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error)

	// GetIndexAsusWithBodyWithResponse request with any body
	GetIndexAsusWithBodyWithResponse(ctx context.Context, params *GetIndexAsusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error)

	GetIndexAsusWithResponse(ctx context.Context, params *GetIndexAsusParams, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error)

	// GetIndexAtlassianWithBodyWithResponse request with any body
	GetIndexAtlassianWithBodyWithResponse(ctx context.Context, params *GetIndexAtlassianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error)

	GetIndexAtlassianWithResponse(ctx context.Context, params *GetIndexAtlassianParams, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error)

	// GetIndexAtlassianVulnsWithBodyWithResponse request with any body
	GetIndexAtlassianVulnsWithBodyWithResponse(ctx context.Context, params *GetIndexAtlassianVulnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error)

	GetIndexAtlassianVulnsWithResponse(ctx context.Context, params *GetIndexAtlassianVulnsParams, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error)

	// GetIndexAtredisWithBodyWithResponse request with any body
	GetIndexAtredisWithBodyWithResponse(ctx context.Context, params *GetIndexAtredisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error)

	GetIndexAtredisWithResponse(ctx context.Context, params *GetIndexAtredisParams, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error)

	// GetIndexAuscertWithBodyWithResponse request with any body
	GetIndexAuscertWithBodyWithResponse(ctx context.Context, params *GetIndexAuscertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error)

	GetIndexAuscertWithResponse(ctx context.Context, params *GetIndexAuscertParams, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error)

	// GetIndexAutodeskWithBodyWithResponse request with any body
	GetIndexAutodeskWithBodyWithResponse(ctx context.Context, params *GetIndexAutodeskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error)

	GetIndexAutodeskWithResponse(ctx context.Context, params *GetIndexAutodeskParams, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error)

	// GetIndexAvayaWithBodyWithResponse request with any body
	GetIndexAvayaWithBodyWithResponse(ctx context.Context, params *GetIndexAvayaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error)

	GetIndexAvayaWithResponse(ctx context.Context, params *GetIndexAvayaParams, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error)

	// GetIndexAvevaWithBodyWithResponse request with any body
	GetIndexAvevaWithBodyWithResponse(ctx context.Context, params *GetIndexAvevaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error)

	GetIndexAvevaWithResponse(ctx context.Context, params *GetIndexAvevaParams, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error)

	// GetIndexAvigilonWithBodyWithResponse request with any body
	GetIndexAvigilonWithBodyWithResponse(ctx context.Context, params *GetIndexAvigilonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error)

	GetIndexAvigilonWithResponse(ctx context.Context, params *GetIndexAvigilonParams, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error)

	// GetIndexAwsWithBodyWithResponse request with any body
	GetIndexAwsWithBodyWithResponse(ctx context.Context, params *GetIndexAwsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error)

	GetIndexAwsWithResponse(ctx context.Context, params *GetIndexAwsParams, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error)

	// GetIndexAxisWithBodyWithResponse request with any body
	GetIndexAxisWithBodyWithResponse(ctx context.Context, params *GetIndexAxisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error)

	GetIndexAxisWithResponse(ctx context.Context, params *GetIndexAxisParams, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error)

	// GetIndexAzulWithBodyWithResponse request with any body
	GetIndexAzulWithBodyWithResponse(ctx context.Context, params *GetIndexAzulParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAzulResponse, error)

	GetIndexAzulWithResponse(ctx context.Context, params *GetIndexAzulParams, body GetIndexAzulJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAzulResponse, error)

	// GetIndexBandrWithBodyWithResponse request with any body
	GetIndexBandrWithBodyWithResponse(ctx context.Context, params *GetIndexBandrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error)

	GetIndexBandrWithResponse(ctx context.Context, params *GetIndexBandrParams, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error)

	// GetIndexBaxterWithBodyWithResponse request with any body
	GetIndexBaxterWithBodyWithResponse(ctx context.Context, params *GetIndexBaxterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error)

	GetIndexBaxterWithResponse(ctx context.Context, params *GetIndexBaxterParams, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error)

	// GetIndexBbraunWithBodyWithResponse request with any body
	GetIndexBbraunWithBodyWithResponse(ctx context.Context, params *GetIndexBbraunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error)

	GetIndexBbraunWithResponse(ctx context.Context, params *GetIndexBbraunParams, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error)

	// GetIndexBdWithBodyWithResponse request with any body
	GetIndexBdWithBodyWithResponse(ctx context.Context, params *GetIndexBdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error)

	GetIndexBdWithResponse(ctx context.Context, params *GetIndexBdParams, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error)

	// GetIndexBduWithBodyWithResponse request with any body
	GetIndexBduWithBodyWithResponse(ctx context.Context, params *GetIndexBduParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error)

	GetIndexBduWithResponse(ctx context.Context, params *GetIndexBduParams, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error)

	// GetIndexBeckhoffWithBodyWithResponse request with any body
	GetIndexBeckhoffWithBodyWithResponse(ctx context.Context, params *GetIndexBeckhoffParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error)

	GetIndexBeckhoffWithResponse(ctx context.Context, params *GetIndexBeckhoffParams, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error)

	// GetIndexBeldenWithBodyWithResponse request with any body
	GetIndexBeldenWithBodyWithResponse(ctx context.Context, params *GetIndexBeldenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error)

	GetIndexBeldenWithResponse(ctx context.Context, params *GetIndexBeldenParams, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error)

	// GetIndexBeyondTrustWithBodyWithResponse request with any body
	GetIndexBeyondTrustWithBodyWithResponse(ctx context.Context, params *GetIndexBeyondTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error)

	GetIndexBeyondTrustWithResponse(ctx context.Context, params *GetIndexBeyondTrustParams, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error)

	// GetIndexBinarlyWithBodyWithResponse request with any body
	GetIndexBinarlyWithBodyWithResponse(ctx context.Context, params *GetIndexBinarlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error)

	GetIndexBinarlyWithResponse(ctx context.Context, params *GetIndexBinarlyParams, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error)

	// GetIndexBitdefenderWithBodyWithResponse request with any body
	GetIndexBitdefenderWithBodyWithResponse(ctx context.Context, params *GetIndexBitdefenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error)

	GetIndexBitdefenderWithResponse(ctx context.Context, params *GetIndexBitdefenderParams, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error)

	// GetIndexBlackberryWithBodyWithResponse request with any body
	GetIndexBlackberryWithBodyWithResponse(ctx context.Context, params *GetIndexBlackberryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error)

	GetIndexBlackberryWithResponse(ctx context.Context, params *GetIndexBlackberryParams, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error)

	// GetIndexBlsWithBodyWithResponse request with any body
	GetIndexBlsWithBodyWithResponse(ctx context.Context, params *GetIndexBlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error)

	GetIndexBlsWithResponse(ctx context.Context, params *GetIndexBlsParams, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error)

	// GetIndexBoschWithBodyWithResponse request with any body
	GetIndexBoschWithBodyWithResponse(ctx context.Context, params *GetIndexBoschParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error)

	GetIndexBoschWithResponse(ctx context.Context, params *GetIndexBoschParams, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error)

	// GetIndexBostonScientificWithBodyWithResponse request with any body
	GetIndexBostonScientificWithBodyWithResponse(ctx context.Context, params *GetIndexBostonScientificParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error)

	GetIndexBostonScientificWithResponse(ctx context.Context, params *GetIndexBostonScientificParams, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error)

	// GetIndexBotnetsWithBodyWithResponse request with any body
	GetIndexBotnetsWithBodyWithResponse(ctx context.Context, params *GetIndexBotnetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error)

	GetIndexBotnetsWithResponse(ctx context.Context, params *GetIndexBotnetsParams, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error)

	// GetIndexCaCyberCentreWithBodyWithResponse request with any body
	GetIndexCaCyberCentreWithBodyWithResponse(ctx context.Context, params *GetIndexCaCyberCentreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error)

	GetIndexCaCyberCentreWithResponse(ctx context.Context, params *GetIndexCaCyberCentreParams, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error)

	// GetIndexCanvasWithBodyWithResponse request with any body
	GetIndexCanvasWithBodyWithResponse(ctx context.Context, params *GetIndexCanvasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error)

	GetIndexCanvasWithResponse(ctx context.Context, params *GetIndexCanvasParams, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error)

	// GetIndexCarestreamWithBodyWithResponse request with any body
	GetIndexCarestreamWithBodyWithResponse(ctx context.Context, params *GetIndexCarestreamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error)

	GetIndexCarestreamWithResponse(ctx context.Context, params *GetIndexCarestreamParams, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error)

	// GetIndexCargoWithBodyWithResponse request with any body
	GetIndexCargoWithBodyWithResponse(ctx context.Context, params *GetIndexCargoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error)

	GetIndexCargoWithResponse(ctx context.Context, params *GetIndexCargoParams, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error)

	// GetIndexCarrierWithBodyWithResponse request with any body
	GetIndexCarrierWithBodyWithResponse(ctx context.Context, params *GetIndexCarrierParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error)

	GetIndexCarrierWithResponse(ctx context.Context, params *GetIndexCarrierParams, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error)

	// GetIndexCblMarinerWithBodyWithResponse request with any body
	GetIndexCblMarinerWithBodyWithResponse(ctx context.Context, params *GetIndexCblMarinerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error)

	GetIndexCblMarinerWithResponse(ctx context.Context, params *GetIndexCblMarinerParams, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error)

	// GetIndexCentosWithBodyWithResponse request with any body
	GetIndexCentosWithBodyWithResponse(ctx context.Context, params *GetIndexCentosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error)

	GetIndexCentosWithResponse(ctx context.Context, params *GetIndexCentosParams, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error)

	// GetIndexCertBeWithBodyWithResponse request with any body
	GetIndexCertBeWithBodyWithResponse(ctx context.Context, params *GetIndexCertBeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error)

	GetIndexCertBeWithResponse(ctx context.Context, params *GetIndexCertBeParams, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error)

	// GetIndexCertInWithBodyWithResponse request with any body
	GetIndexCertInWithBodyWithResponse(ctx context.Context, params *GetIndexCertInParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertInResponse, error)

	GetIndexCertInWithResponse(ctx context.Context, params *GetIndexCertInParams, body GetIndexCertInJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertInResponse, error)

	// GetIndexCertIrSecurityAlertsWithBodyWithResponse request with any body
	GetIndexCertIrSecurityAlertsWithBodyWithResponse(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertIrSecurityAlertsResponse, error)

	GetIndexCertIrSecurityAlertsWithResponse(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, body GetIndexCertIrSecurityAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertIrSecurityAlertsResponse, error)

	// GetIndexCertSeWithBodyWithResponse request with any body
	GetIndexCertSeWithBodyWithResponse(ctx context.Context, params *GetIndexCertSeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertSeResponse, error)

	GetIndexCertSeWithResponse(ctx context.Context, params *GetIndexCertSeParams, body GetIndexCertSeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertSeResponse, error)

	// GetIndexCertUaWithBodyWithResponse request with any body
	GetIndexCertUaWithBodyWithResponse(ctx context.Context, params *GetIndexCertUaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error)

	GetIndexCertUaWithResponse(ctx context.Context, params *GetIndexCertUaParams, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error)

	// GetIndexCerteuWithBodyWithResponse request with any body
	GetIndexCerteuWithBodyWithResponse(ctx context.Context, params *GetIndexCerteuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error)

	GetIndexCerteuWithResponse(ctx context.Context, params *GetIndexCerteuParams, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error)

	// GetIndexCertfrWithBodyWithResponse request with any body
	GetIndexCertfrWithBodyWithResponse(ctx context.Context, params *GetIndexCertfrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error)

	GetIndexCertfrWithResponse(ctx context.Context, params *GetIndexCertfrParams, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error)

	// GetIndexChainguardWithBodyWithResponse request with any body
	GetIndexChainguardWithBodyWithResponse(ctx context.Context, params *GetIndexChainguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error)

	GetIndexChainguardWithResponse(ctx context.Context, params *GetIndexChainguardParams, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error)

	// GetIndexCheckpointWithBodyWithResponse request with any body
	GetIndexCheckpointWithBodyWithResponse(ctx context.Context, params *GetIndexCheckpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error)

	GetIndexCheckpointWithResponse(ctx context.Context, params *GetIndexCheckpointParams, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error)

	// GetIndexChromeWithBodyWithResponse request with any body
	GetIndexChromeWithBodyWithResponse(ctx context.Context, params *GetIndexChromeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error)

	GetIndexChromeWithResponse(ctx context.Context, params *GetIndexChromeParams, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error)

	// GetIndexCisaAlertsWithBodyWithResponse request with any body
	GetIndexCisaAlertsWithBodyWithResponse(ctx context.Context, params *GetIndexCisaAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error)

	GetIndexCisaAlertsWithResponse(ctx context.Context, params *GetIndexCisaAlertsParams, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error)

	// GetIndexCisaKevWithBodyWithResponse request with any body
	GetIndexCisaKevWithBodyWithResponse(ctx context.Context, params *GetIndexCisaKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error)

	GetIndexCisaKevWithResponse(ctx context.Context, params *GetIndexCisaKevParams, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error)

	// GetIndexCiscoWithBodyWithResponse request with any body
	GetIndexCiscoWithBodyWithResponse(ctx context.Context, params *GetIndexCiscoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error)

	GetIndexCiscoWithResponse(ctx context.Context, params *GetIndexCiscoParams, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error)

	// GetIndexCiscoTalosWithBodyWithResponse request with any body
	GetIndexCiscoTalosWithBodyWithResponse(ctx context.Context, params *GetIndexCiscoTalosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error)

	GetIndexCiscoTalosWithResponse(ctx context.Context, params *GetIndexCiscoTalosParams, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error)

	// GetIndexCitrixWithBodyWithResponse request with any body
	GetIndexCitrixWithBodyWithResponse(ctx context.Context, params *GetIndexCitrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error)

	GetIndexCitrixWithResponse(ctx context.Context, params *GetIndexCitrixParams, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error)

	// GetIndexClarotyWithBodyWithResponse request with any body
	GetIndexClarotyWithBodyWithResponse(ctx context.Context, params *GetIndexClarotyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error)

	GetIndexClarotyWithResponse(ctx context.Context, params *GetIndexClarotyParams, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error)

	// GetIndexCloudbeesWithBodyWithResponse request with any body
	GetIndexCloudbeesWithBodyWithResponse(ctx context.Context, params *GetIndexCloudbeesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error)

	GetIndexCloudbeesWithResponse(ctx context.Context, params *GetIndexCloudbeesParams, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error)

	// GetIndexCloudvulndbWithBodyWithResponse request with any body
	GetIndexCloudvulndbWithBodyWithResponse(ctx context.Context, params *GetIndexCloudvulndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error)

	GetIndexCloudvulndbWithResponse(ctx context.Context, params *GetIndexCloudvulndbParams, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error)

	// GetIndexCnnvdWithBodyWithResponse request with any body
	GetIndexCnnvdWithBodyWithResponse(ctx context.Context, params *GetIndexCnnvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error)

	GetIndexCnnvdWithResponse(ctx context.Context, params *GetIndexCnnvdParams, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error)

	// GetIndexCnvdBulletinsWithBodyWithResponse request with any body
	GetIndexCnvdBulletinsWithBodyWithResponse(ctx context.Context, params *GetIndexCnvdBulletinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error)

	GetIndexCnvdBulletinsWithResponse(ctx context.Context, params *GetIndexCnvdBulletinsParams, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error)

	// GetIndexCnvdFlawsWithBodyWithResponse request with any body
	GetIndexCnvdFlawsWithBodyWithResponse(ctx context.Context, params *GetIndexCnvdFlawsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error)

	GetIndexCnvdFlawsWithResponse(ctx context.Context, params *GetIndexCnvdFlawsParams, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error)

	// GetIndexCocoapodsWithBodyWithResponse request with any body
	GetIndexCocoapodsWithBodyWithResponse(ctx context.Context, params *GetIndexCocoapodsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error)

	GetIndexCocoapodsWithResponse(ctx context.Context, params *GetIndexCocoapodsParams, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error)

	// GetIndexCodesysWithBodyWithResponse request with any body
	GetIndexCodesysWithBodyWithResponse(ctx context.Context, params *GetIndexCodesysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error)

	GetIndexCodesysWithResponse(ctx context.Context, params *GetIndexCodesysParams, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error)

	// GetIndexCompassSecurityWithBodyWithResponse request with any body
	GetIndexCompassSecurityWithBodyWithResponse(ctx context.Context, params *GetIndexCompassSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error)

	GetIndexCompassSecurityWithResponse(ctx context.Context, params *GetIndexCompassSecurityParams, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error)

	// GetIndexComposerWithBodyWithResponse request with any body
	GetIndexComposerWithBodyWithResponse(ctx context.Context, params *GetIndexComposerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error)

	GetIndexComposerWithResponse(ctx context.Context, params *GetIndexComposerParams, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error)

	// GetIndexConanWithBodyWithResponse request with any body
	GetIndexConanWithBodyWithResponse(ctx context.Context, params *GetIndexConanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error)

	GetIndexConanWithResponse(ctx context.Context, params *GetIndexConanParams, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error)

	// GetIndexCrestronWithBodyWithResponse request with any body
	GetIndexCrestronWithBodyWithResponse(ctx context.Context, params *GetIndexCrestronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error)

	GetIndexCrestronWithResponse(ctx context.Context, params *GetIndexCrestronParams, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error)

	// GetIndexCurlWithBodyWithResponse request with any body
	GetIndexCurlWithBodyWithResponse(ctx context.Context, params *GetIndexCurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error)

	GetIndexCurlWithResponse(ctx context.Context, params *GetIndexCurlParams, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error)

	// GetIndexCweWithBodyWithResponse request with any body
	GetIndexCweWithBodyWithResponse(ctx context.Context, params *GetIndexCweParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error)

	GetIndexCweWithResponse(ctx context.Context, params *GetIndexCweParams, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error)

	// GetIndexDahuaWithBodyWithResponse request with any body
	GetIndexDahuaWithBodyWithResponse(ctx context.Context, params *GetIndexDahuaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error)

	GetIndexDahuaWithResponse(ctx context.Context, params *GetIndexDahuaParams, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error)

	// GetIndexDassaultWithBodyWithResponse request with any body
	GetIndexDassaultWithBodyWithResponse(ctx context.Context, params *GetIndexDassaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error)

	GetIndexDassaultWithResponse(ctx context.Context, params *GetIndexDassaultParams, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error)

	// GetIndexDebianWithBodyWithResponse request with any body
	GetIndexDebianWithBodyWithResponse(ctx context.Context, params *GetIndexDebianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error)

	GetIndexDebianWithResponse(ctx context.Context, params *GetIndexDebianParams, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error)

	// GetIndexDebianDsaWithBodyWithResponse request with any body
	GetIndexDebianDsaWithBodyWithResponse(ctx context.Context, params *GetIndexDebianDsaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error)

	GetIndexDebianDsaWithResponse(ctx context.Context, params *GetIndexDebianDsaParams, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error)

	// GetIndexDellWithBodyWithResponse request with any body
	GetIndexDellWithBodyWithResponse(ctx context.Context, params *GetIndexDellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error)

	GetIndexDellWithResponse(ctx context.Context, params *GetIndexDellParams, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error)

	// GetIndexDeltaWithBodyWithResponse request with any body
	GetIndexDeltaWithBodyWithResponse(ctx context.Context, params *GetIndexDeltaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error)

	GetIndexDeltaWithResponse(ctx context.Context, params *GetIndexDeltaParams, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error)

	// GetIndexDjangoWithBodyWithResponse request with any body
	GetIndexDjangoWithBodyWithResponse(ctx context.Context, params *GetIndexDjangoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDjangoResponse, error)

	GetIndexDjangoWithResponse(ctx context.Context, params *GetIndexDjangoParams, body GetIndexDjangoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDjangoResponse, error)

	// GetIndexDnnWithBodyWithResponse request with any body
	GetIndexDnnWithBodyWithResponse(ctx context.Context, params *GetIndexDnnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDnnResponse, error)

	GetIndexDnnWithResponse(ctx context.Context, params *GetIndexDnnParams, body GetIndexDnnJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDnnResponse, error)

	// GetIndexDotcmsWithBodyWithResponse request with any body
	GetIndexDotcmsWithBodyWithResponse(ctx context.Context, params *GetIndexDotcmsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error)

	GetIndexDotcmsWithResponse(ctx context.Context, params *GetIndexDotcmsParams, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error)

	// GetIndexDragosWithBodyWithResponse request with any body
	GetIndexDragosWithBodyWithResponse(ctx context.Context, params *GetIndexDragosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error)

	GetIndexDragosWithResponse(ctx context.Context, params *GetIndexDragosParams, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error)

	// GetIndexDraytekWithBodyWithResponse request with any body
	GetIndexDraytekWithBodyWithResponse(ctx context.Context, params *GetIndexDraytekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error)

	GetIndexDraytekWithResponse(ctx context.Context, params *GetIndexDraytekParams, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error)

	// GetIndexEatonWithBodyWithResponse request with any body
	GetIndexEatonWithBodyWithResponse(ctx context.Context, params *GetIndexEatonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error)

	GetIndexEatonWithResponse(ctx context.Context, params *GetIndexEatonParams, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error)

	// GetIndexElasticWithBodyWithResponse request with any body
	GetIndexElasticWithBodyWithResponse(ctx context.Context, params *GetIndexElasticParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error)

	GetIndexElasticWithResponse(ctx context.Context, params *GetIndexElasticParams, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error)

	// GetIndexElspecWithBodyWithResponse request with any body
	GetIndexElspecWithBodyWithResponse(ctx context.Context, params *GetIndexElspecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error)

	GetIndexElspecWithResponse(ctx context.Context, params *GetIndexElspecParams, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error)

	// GetIndexEmergingThreatsSnortWithBodyWithResponse request with any body
	GetIndexEmergingThreatsSnortWithBodyWithResponse(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEmergingThreatsSnortResponse, error)

	GetIndexEmergingThreatsSnortWithResponse(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, body GetIndexEmergingThreatsSnortJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEmergingThreatsSnortResponse, error)

	// GetIndexEmersonWithBodyWithResponse request with any body
	GetIndexEmersonWithBodyWithResponse(ctx context.Context, params *GetIndexEmersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error)

	GetIndexEmersonWithResponse(ctx context.Context, params *GetIndexEmersonParams, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error)

	// GetIndexEolWithBodyWithResponse request with any body
	GetIndexEolWithBodyWithResponse(ctx context.Context, params *GetIndexEolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error)

	GetIndexEolWithResponse(ctx context.Context, params *GetIndexEolParams, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error)

	// GetIndexEpssWithBodyWithResponse request with any body
	GetIndexEpssWithBodyWithResponse(ctx context.Context, params *GetIndexEpssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error)

	GetIndexEpssWithResponse(ctx context.Context, params *GetIndexEpssParams, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error)

	// GetIndexExodusIntelWithBodyWithResponse request with any body
	GetIndexExodusIntelWithBodyWithResponse(ctx context.Context, params *GetIndexExodusIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error)

	GetIndexExodusIntelWithResponse(ctx context.Context, params *GetIndexExodusIntelParams, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error)

	// GetIndexExploitChainsWithBodyWithResponse request with any body
	GetIndexExploitChainsWithBodyWithResponse(ctx context.Context, params *GetIndexExploitChainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error)

	GetIndexExploitChainsWithResponse(ctx context.Context, params *GetIndexExploitChainsParams, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error)

	// GetIndexExploitdbWithBodyWithResponse request with any body
	GetIndexExploitdbWithBodyWithResponse(ctx context.Context, params *GetIndexExploitdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error)

	GetIndexExploitdbWithResponse(ctx context.Context, params *GetIndexExploitdbParams, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error)

	// GetIndexExploitsWithBodyWithResponse request with any body
	GetIndexExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error)

	GetIndexExploitsWithResponse(ctx context.Context, params *GetIndexExploitsParams, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error)

	// GetIndexExploitsChangelogWithBodyWithResponse request with any body
	GetIndexExploitsChangelogWithBodyWithResponse(ctx context.Context, params *GetIndexExploitsChangelogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitsChangelogResponse, error)

	GetIndexExploitsChangelogWithResponse(ctx context.Context, params *GetIndexExploitsChangelogParams, body GetIndexExploitsChangelogJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitsChangelogResponse, error)

	// GetIndexFSecureWithBodyWithResponse request with any body
	GetIndexFSecureWithBodyWithResponse(ctx context.Context, params *GetIndexFSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error)

	GetIndexFSecureWithResponse(ctx context.Context, params *GetIndexFSecureParams, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error)

	// GetIndexFanucWithBodyWithResponse request with any body
	GetIndexFanucWithBodyWithResponse(ctx context.Context, params *GetIndexFanucParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFanucResponse, error)

	GetIndexFanucWithResponse(ctx context.Context, params *GetIndexFanucParams, body GetIndexFanucJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFanucResponse, error)

	// GetIndexFastlyWithBodyWithResponse request with any body
	GetIndexFastlyWithBodyWithResponse(ctx context.Context, params *GetIndexFastlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error)

	GetIndexFastlyWithResponse(ctx context.Context, params *GetIndexFastlyParams, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error)

	// GetIndexFedoraWithBodyWithResponse request with any body
	GetIndexFedoraWithBodyWithResponse(ctx context.Context, params *GetIndexFedoraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error)

	GetIndexFedoraWithResponse(ctx context.Context, params *GetIndexFedoraParams, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error)

	// GetIndexFilecloudWithBodyWithResponse request with any body
	GetIndexFilecloudWithBodyWithResponse(ctx context.Context, params *GetIndexFilecloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error)

	GetIndexFilecloudWithResponse(ctx context.Context, params *GetIndexFilecloudParams, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error)

	// GetIndexFlattSecurityWithBodyWithResponse request with any body
	GetIndexFlattSecurityWithBodyWithResponse(ctx context.Context, params *GetIndexFlattSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFlattSecurityResponse, error)

	GetIndexFlattSecurityWithResponse(ctx context.Context, params *GetIndexFlattSecurityParams, body GetIndexFlattSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFlattSecurityResponse, error)

	// GetIndexForgerockWithBodyWithResponse request with any body
	GetIndexForgerockWithBodyWithResponse(ctx context.Context, params *GetIndexForgerockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error)

	GetIndexForgerockWithResponse(ctx context.Context, params *GetIndexForgerockParams, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error)

	// GetIndexFortinetWithBodyWithResponse request with any body
	GetIndexFortinetWithBodyWithResponse(ctx context.Context, params *GetIndexFortinetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error)

	GetIndexFortinetWithResponse(ctx context.Context, params *GetIndexFortinetParams, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error)

	// GetIndexFortinetIpsWithBodyWithResponse request with any body
	GetIndexFortinetIpsWithBodyWithResponse(ctx context.Context, params *GetIndexFortinetIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFortinetIpsResponse, error)

	GetIndexFortinetIpsWithResponse(ctx context.Context, params *GetIndexFortinetIpsParams, body GetIndexFortinetIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFortinetIpsResponse, error)

	// GetIndexFoxitWithBodyWithResponse request with any body
	GetIndexFoxitWithBodyWithResponse(ctx context.Context, params *GetIndexFoxitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFoxitResponse, error)

	GetIndexFoxitWithResponse(ctx context.Context, params *GetIndexFoxitParams, body GetIndexFoxitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFoxitResponse, error)

	// GetIndexFreebsdWithBodyWithResponse request with any body
	GetIndexFreebsdWithBodyWithResponse(ctx context.Context, params *GetIndexFreebsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error)

	GetIndexFreebsdWithResponse(ctx context.Context, params *GetIndexFreebsdParams, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error)

	// GetIndexGallagherWithBodyWithResponse request with any body
	GetIndexGallagherWithBodyWithResponse(ctx context.Context, params *GetIndexGallagherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error)

	GetIndexGallagherWithResponse(ctx context.Context, params *GetIndexGallagherParams, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error)

	// GetIndexGcpWithBodyWithResponse request with any body
	GetIndexGcpWithBodyWithResponse(ctx context.Context, params *GetIndexGcpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error)

	GetIndexGcpWithResponse(ctx context.Context, params *GetIndexGcpParams, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error)

	// GetIndexGeGasWithBodyWithResponse request with any body
	GetIndexGeGasWithBodyWithResponse(ctx context.Context, params *GetIndexGeGasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error)

	GetIndexGeGasWithResponse(ctx context.Context, params *GetIndexGeGasParams, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error)

	// GetIndexGeHealthcareWithBodyWithResponse request with any body
	GetIndexGeHealthcareWithBodyWithResponse(ctx context.Context, params *GetIndexGeHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error)

	GetIndexGeHealthcareWithResponse(ctx context.Context, params *GetIndexGeHealthcareParams, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error)

	// GetIndexGemWithBodyWithResponse request with any body
	GetIndexGemWithBodyWithResponse(ctx context.Context, params *GetIndexGemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error)

	GetIndexGemWithResponse(ctx context.Context, params *GetIndexGemParams, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error)

	// GetIndexGenetecWithBodyWithResponse request with any body
	GetIndexGenetecWithBodyWithResponse(ctx context.Context, params *GetIndexGenetecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error)

	GetIndexGenetecWithResponse(ctx context.Context, params *GetIndexGenetecParams, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error)

	// GetIndexGigabyteWithBodyWithResponse request with any body
	GetIndexGigabyteWithBodyWithResponse(ctx context.Context, params *GetIndexGigabyteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error)

	GetIndexGigabyteWithResponse(ctx context.Context, params *GetIndexGigabyteParams, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error)

	// GetIndexGiteeExploitsWithBodyWithResponse request with any body
	GetIndexGiteeExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexGiteeExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error)

	GetIndexGiteeExploitsWithResponse(ctx context.Context, params *GetIndexGiteeExploitsParams, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error)

	// GetIndexGithubExploitsWithBodyWithResponse request with any body
	GetIndexGithubExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexGithubExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error)

	GetIndexGithubExploitsWithResponse(ctx context.Context, params *GetIndexGithubExploitsParams, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error)

	// GetIndexGithubSecurityAdvisoriesWithBodyWithResponse request with any body
	GetIndexGithubSecurityAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error)

	GetIndexGithubSecurityAdvisoriesWithResponse(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error)

	// GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse request with any body
	GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error)

	GetIndexGitlabAdvisoriesCommunityWithResponse(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error)

	// GetIndexGitlabExploitsWithBodyWithResponse request with any body
	GetIndexGitlabExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexGitlabExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error)

	GetIndexGitlabExploitsWithResponse(ctx context.Context, params *GetIndexGitlabExploitsParams, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error)

	// GetIndexGnutlsWithBodyWithResponse request with any body
	GetIndexGnutlsWithBodyWithResponse(ctx context.Context, params *GetIndexGnutlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error)

	GetIndexGnutlsWithResponse(ctx context.Context, params *GetIndexGnutlsParams, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error)

	// GetIndexGolangWithBodyWithResponse request with any body
	GetIndexGolangWithBodyWithResponse(ctx context.Context, params *GetIndexGolangParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error)

	GetIndexGolangWithResponse(ctx context.Context, params *GetIndexGolangParams, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error)

	// GetIndexGoogle0dayItwWithBodyWithResponse request with any body
	GetIndexGoogle0dayItwWithBodyWithResponse(ctx context.Context, params *GetIndexGoogle0dayItwParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error)

	GetIndexGoogle0dayItwWithResponse(ctx context.Context, params *GetIndexGoogle0dayItwParams, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error)

	// GetIndexGoogleContainerOptimizedOsWithBodyWithResponse request with any body
	GetIndexGoogleContainerOptimizedOsWithBodyWithResponse(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error)

	GetIndexGoogleContainerOptimizedOsWithResponse(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error)

	// GetIndexGrafanaWithBodyWithResponse request with any body
	GetIndexGrafanaWithBodyWithResponse(ctx context.Context, params *GetIndexGrafanaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error)

	GetIndexGrafanaWithResponse(ctx context.Context, params *GetIndexGrafanaParams, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error)

	// GetIndexGreynoiseMetadataWithBodyWithResponse request with any body
	GetIndexGreynoiseMetadataWithBodyWithResponse(ctx context.Context, params *GetIndexGreynoiseMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error)

	GetIndexGreynoiseMetadataWithResponse(ctx context.Context, params *GetIndexGreynoiseMetadataParams, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error)

	// GetIndexHackageWithBodyWithResponse request with any body
	GetIndexHackageWithBodyWithResponse(ctx context.Context, params *GetIndexHackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error)

	GetIndexHackageWithResponse(ctx context.Context, params *GetIndexHackageParams, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error)

	// GetIndexHarmonyosWithBodyWithResponse request with any body
	GetIndexHarmonyosWithBodyWithResponse(ctx context.Context, params *GetIndexHarmonyosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error)

	GetIndexHarmonyosWithResponse(ctx context.Context, params *GetIndexHarmonyosParams, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error)

	// GetIndexHashicorpWithBodyWithResponse request with any body
	GetIndexHashicorpWithBodyWithResponse(ctx context.Context, params *GetIndexHashicorpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error)

	GetIndexHashicorpWithResponse(ctx context.Context, params *GetIndexHashicorpParams, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error)

	// GetIndexHaskellSadbWithBodyWithResponse request with any body
	GetIndexHaskellSadbWithBodyWithResponse(ctx context.Context, params *GetIndexHaskellSadbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error)

	GetIndexHaskellSadbWithResponse(ctx context.Context, params *GetIndexHaskellSadbParams, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error)

	// GetIndexHclWithBodyWithResponse request with any body
	GetIndexHclWithBodyWithResponse(ctx context.Context, params *GetIndexHclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error)

	GetIndexHclWithResponse(ctx context.Context, params *GetIndexHclParams, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error)

	// GetIndexHexWithBodyWithResponse request with any body
	GetIndexHexWithBodyWithResponse(ctx context.Context, params *GetIndexHexParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error)

	GetIndexHexWithResponse(ctx context.Context, params *GetIndexHexParams, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error)

	// GetIndexHikvisionWithBodyWithResponse request with any body
	GetIndexHikvisionWithBodyWithResponse(ctx context.Context, params *GetIndexHikvisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error)

	GetIndexHikvisionWithResponse(ctx context.Context, params *GetIndexHikvisionParams, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error)

	// GetIndexHillromWithBodyWithResponse request with any body
	GetIndexHillromWithBodyWithResponse(ctx context.Context, params *GetIndexHillromParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error)

	GetIndexHillromWithResponse(ctx context.Context, params *GetIndexHillromParams, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error)

	// GetIndexHitachiWithBodyWithResponse request with any body
	GetIndexHitachiWithBodyWithResponse(ctx context.Context, params *GetIndexHitachiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error)

	GetIndexHitachiWithResponse(ctx context.Context, params *GetIndexHitachiParams, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error)

	// GetIndexHitachiEnergyWithBodyWithResponse request with any body
	GetIndexHitachiEnergyWithBodyWithResponse(ctx context.Context, params *GetIndexHitachiEnergyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error)

	GetIndexHitachiEnergyWithResponse(ctx context.Context, params *GetIndexHitachiEnergyParams, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error)

	// GetIndexHkcertWithBodyWithResponse request with any body
	GetIndexHkcertWithBodyWithResponse(ctx context.Context, params *GetIndexHkcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error)

	GetIndexHkcertWithResponse(ctx context.Context, params *GetIndexHkcertParams, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error)

	// GetIndexHoneywellWithBodyWithResponse request with any body
	GetIndexHoneywellWithBodyWithResponse(ctx context.Context, params *GetIndexHoneywellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error)

	GetIndexHoneywellWithResponse(ctx context.Context, params *GetIndexHoneywellParams, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error)

	// GetIndexHpWithBodyWithResponse request with any body
	GetIndexHpWithBodyWithResponse(ctx context.Context, params *GetIndexHpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error)

	GetIndexHpWithResponse(ctx context.Context, params *GetIndexHpParams, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error)

	// GetIndexHuaweiEulerosWithBodyWithResponse request with any body
	GetIndexHuaweiEulerosWithBodyWithResponse(ctx context.Context, params *GetIndexHuaweiEulerosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error)

	GetIndexHuaweiEulerosWithResponse(ctx context.Context, params *GetIndexHuaweiEulerosParams, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error)

	// GetIndexHuaweiIpsWithBodyWithResponse request with any body
	GetIndexHuaweiIpsWithBodyWithResponse(ctx context.Context, params *GetIndexHuaweiIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error)

	GetIndexHuaweiIpsWithResponse(ctx context.Context, params *GetIndexHuaweiIpsParams, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error)

	// GetIndexHuaweiPsirtWithBodyWithResponse request with any body
	GetIndexHuaweiPsirtWithBodyWithResponse(ctx context.Context, params *GetIndexHuaweiPsirtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error)

	GetIndexHuaweiPsirtWithResponse(ctx context.Context, params *GetIndexHuaweiPsirtParams, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error)

	// GetIndexIavaWithBodyWithResponse request with any body
	GetIndexIavaWithBodyWithResponse(ctx context.Context, params *GetIndexIavaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error)

	GetIndexIavaWithResponse(ctx context.Context, params *GetIndexIavaParams, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error)

	// GetIndexIbmWithBodyWithResponse request with any body
	GetIndexIbmWithBodyWithResponse(ctx context.Context, params *GetIndexIbmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error)

	GetIndexIbmWithResponse(ctx context.Context, params *GetIndexIbmParams, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error)

	// GetIndexIdemiaWithBodyWithResponse request with any body
	GetIndexIdemiaWithBodyWithResponse(ctx context.Context, params *GetIndexIdemiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error)

	GetIndexIdemiaWithResponse(ctx context.Context, params *GetIndexIdemiaParams, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error)

	// GetIndexIlAlertsWithBodyWithResponse request with any body
	GetIndexIlAlertsWithBodyWithResponse(ctx context.Context, params *GetIndexIlAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error)

	GetIndexIlAlertsWithResponse(ctx context.Context, params *GetIndexIlAlertsParams, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error)

	// GetIndexIlVulnerabilitiesWithBodyWithResponse request with any body
	GetIndexIlVulnerabilitiesWithBodyWithResponse(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error)

	GetIndexIlVulnerabilitiesWithResponse(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error)

	// GetIndexIncibeWithBodyWithResponse request with any body
	GetIndexIncibeWithBodyWithResponse(ctx context.Context, params *GetIndexIncibeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error)

	GetIndexIncibeWithResponse(ctx context.Context, params *GetIndexIncibeParams, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error)

	// GetIndexInitialAccessWithBodyWithResponse request with any body
	GetIndexInitialAccessWithBodyWithResponse(ctx context.Context, params *GetIndexInitialAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error)

	GetIndexInitialAccessWithResponse(ctx context.Context, params *GetIndexInitialAccessParams, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error)

	// GetIndexInitialAccessGitWithBodyWithResponse request with any body
	GetIndexInitialAccessGitWithBodyWithResponse(ctx context.Context, params *GetIndexInitialAccessGitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error)

	GetIndexInitialAccessGitWithResponse(ctx context.Context, params *GetIndexInitialAccessGitParams, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error)

	// GetIndexIntelWithBodyWithResponse request with any body
	GetIndexIntelWithBodyWithResponse(ctx context.Context, params *GetIndexIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error)

	GetIndexIntelWithResponse(ctx context.Context, params *GetIndexIntelParams, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error)

	// GetIndexIpintel10dWithBodyWithResponse request with any body
	GetIndexIpintel10dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel10dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error)

	GetIndexIpintel10dWithResponse(ctx context.Context, params *GetIndexIpintel10dParams, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error)

	// GetIndexIpintel30dWithBodyWithResponse request with any body
	GetIndexIpintel30dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel30dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error)

	GetIndexIpintel30dWithResponse(ctx context.Context, params *GetIndexIpintel30dParams, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error)

	// GetIndexIpintel3dWithBodyWithResponse request with any body
	GetIndexIpintel3dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel3dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error)

	GetIndexIpintel3dWithResponse(ctx context.Context, params *GetIndexIpintel3dParams, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error)

	// GetIndexIpintel90dWithBodyWithResponse request with any body
	GetIndexIpintel90dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel90dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error)

	GetIndexIpintel90dWithResponse(ctx context.Context, params *GetIndexIpintel90dParams, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error)

	// GetIndexIstioWithBodyWithResponse request with any body
	GetIndexIstioWithBodyWithResponse(ctx context.Context, params *GetIndexIstioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error)

	GetIndexIstioWithResponse(ctx context.Context, params *GetIndexIstioParams, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error)

	// GetIndexIvantiWithBodyWithResponse request with any body
	GetIndexIvantiWithBodyWithResponse(ctx context.Context, params *GetIndexIvantiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error)

	GetIndexIvantiWithResponse(ctx context.Context, params *GetIndexIvantiParams, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error)

	// GetIndexIvantiRssWithBodyWithResponse request with any body
	GetIndexIvantiRssWithBodyWithResponse(ctx context.Context, params *GetIndexIvantiRssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error)

	GetIndexIvantiRssWithResponse(ctx context.Context, params *GetIndexIvantiRssParams, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error)

	// GetIndexJenkinsWithBodyWithResponse request with any body
	GetIndexJenkinsWithBodyWithResponse(ctx context.Context, params *GetIndexJenkinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error)

	GetIndexJenkinsWithResponse(ctx context.Context, params *GetIndexJenkinsParams, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error)

	// GetIndexJetbrainsWithBodyWithResponse request with any body
	GetIndexJetbrainsWithBodyWithResponse(ctx context.Context, params *GetIndexJetbrainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error)

	GetIndexJetbrainsWithResponse(ctx context.Context, params *GetIndexJetbrainsParams, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error)

	// GetIndexJfrogWithBodyWithResponse request with any body
	GetIndexJfrogWithBodyWithResponse(ctx context.Context, params *GetIndexJfrogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error)

	GetIndexJfrogWithResponse(ctx context.Context, params *GetIndexJfrogParams, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error)

	// GetIndexJnjWithBodyWithResponse request with any body
	GetIndexJnjWithBodyWithResponse(ctx context.Context, params *GetIndexJnjParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error)

	GetIndexJnjWithResponse(ctx context.Context, params *GetIndexJnjParams, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error)

	// GetIndexJvnWithBodyWithResponse request with any body
	GetIndexJvnWithBodyWithResponse(ctx context.Context, params *GetIndexJvnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJvnResponse, error)

	GetIndexJvnWithResponse(ctx context.Context, params *GetIndexJvnParams, body GetIndexJvnJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJvnResponse, error)

	// GetIndexJvndbWithBodyWithResponse request with any body
	GetIndexJvndbWithBodyWithResponse(ctx context.Context, params *GetIndexJvndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error)

	GetIndexJvndbWithResponse(ctx context.Context, params *GetIndexJvndbParams, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error)

	// GetIndexKasperskyIcsCertWithBodyWithResponse request with any body
	GetIndexKasperskyIcsCertWithBodyWithResponse(ctx context.Context, params *GetIndexKasperskyIcsCertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error)

	GetIndexKasperskyIcsCertWithResponse(ctx context.Context, params *GetIndexKasperskyIcsCertParams, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error)

	// GetIndexKorelogicWithBodyWithResponse request with any body
	GetIndexKorelogicWithBodyWithResponse(ctx context.Context, params *GetIndexKorelogicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKorelogicResponse, error)

	GetIndexKorelogicWithResponse(ctx context.Context, params *GetIndexKorelogicParams, body GetIndexKorelogicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKorelogicResponse, error)

	// GetIndexKrcertSecurityNoticesWithBodyWithResponse request with any body
	GetIndexKrcertSecurityNoticesWithBodyWithResponse(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error)

	GetIndexKrcertSecurityNoticesWithResponse(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error)

	// GetIndexKrcertVulnerabilitiesWithBodyWithResponse request with any body
	GetIndexKrcertVulnerabilitiesWithBodyWithResponse(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error)

	GetIndexKrcertVulnerabilitiesWithResponse(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error)

	// GetIndexKubernetesWithBodyWithResponse request with any body
	GetIndexKubernetesWithBodyWithResponse(ctx context.Context, params *GetIndexKubernetesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error)

	GetIndexKubernetesWithResponse(ctx context.Context, params *GetIndexKubernetesParams, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error)

	// GetIndexLenovoWithBodyWithResponse request with any body
	GetIndexLenovoWithBodyWithResponse(ctx context.Context, params *GetIndexLenovoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error)

	GetIndexLenovoWithResponse(ctx context.Context, params *GetIndexLenovoParams, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error)

	// GetIndexLexmarkWithBodyWithResponse request with any body
	GetIndexLexmarkWithBodyWithResponse(ctx context.Context, params *GetIndexLexmarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error)

	GetIndexLexmarkWithResponse(ctx context.Context, params *GetIndexLexmarkParams, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error)

	// GetIndexLgWithBodyWithResponse request with any body
	GetIndexLgWithBodyWithResponse(ctx context.Context, params *GetIndexLgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error)

	GetIndexLgWithResponse(ctx context.Context, params *GetIndexLgParams, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error)

	// GetIndexLibreOfficeWithBodyWithResponse request with any body
	GetIndexLibreOfficeWithBodyWithResponse(ctx context.Context, params *GetIndexLibreOfficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error)

	GetIndexLibreOfficeWithResponse(ctx context.Context, params *GetIndexLibreOfficeParams, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error)

	// GetIndexLinuxWithBodyWithResponse request with any body
	GetIndexLinuxWithBodyWithResponse(ctx context.Context, params *GetIndexLinuxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error)

	GetIndexLinuxWithResponse(ctx context.Context, params *GetIndexLinuxParams, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error)

	// GetIndexMFilesWithBodyWithResponse request with any body
	GetIndexMFilesWithBodyWithResponse(ctx context.Context, params *GetIndexMFilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error)

	GetIndexMFilesWithResponse(ctx context.Context, params *GetIndexMFilesParams, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error)

	// GetIndexMacertWithBodyWithResponse request with any body
	GetIndexMacertWithBodyWithResponse(ctx context.Context, params *GetIndexMacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error)

	GetIndexMacertWithResponse(ctx context.Context, params *GetIndexMacertParams, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error)

	// GetIndexManageengineWithBodyWithResponse request with any body
	GetIndexManageengineWithBodyWithResponse(ctx context.Context, params *GetIndexManageengineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error)

	GetIndexManageengineWithResponse(ctx context.Context, params *GetIndexManageengineParams, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error)

	// GetIndexMavenWithBodyWithResponse request with any body
	GetIndexMavenWithBodyWithResponse(ctx context.Context, params *GetIndexMavenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error)

	GetIndexMavenWithResponse(ctx context.Context, params *GetIndexMavenParams, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error)

	// GetIndexMbedTlsWithBodyWithResponse request with any body
	GetIndexMbedTlsWithBodyWithResponse(ctx context.Context, params *GetIndexMbedTlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error)

	GetIndexMbedTlsWithResponse(ctx context.Context, params *GetIndexMbedTlsParams, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error)

	// GetIndexMediatekWithBodyWithResponse request with any body
	GetIndexMediatekWithBodyWithResponse(ctx context.Context, params *GetIndexMediatekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error)

	GetIndexMediatekWithResponse(ctx context.Context, params *GetIndexMediatekParams, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error)

	// GetIndexMedtronicWithBodyWithResponse request with any body
	GetIndexMedtronicWithBodyWithResponse(ctx context.Context, params *GetIndexMedtronicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error)

	GetIndexMedtronicWithResponse(ctx context.Context, params *GetIndexMedtronicParams, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error)

	// GetIndexMendixWithBodyWithResponse request with any body
	GetIndexMendixWithBodyWithResponse(ctx context.Context, params *GetIndexMendixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error)

	GetIndexMendixWithResponse(ctx context.Context, params *GetIndexMendixParams, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error)

	// GetIndexMetasploitWithBodyWithResponse request with any body
	GetIndexMetasploitWithBodyWithResponse(ctx context.Context, params *GetIndexMetasploitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error)

	GetIndexMetasploitWithResponse(ctx context.Context, params *GetIndexMetasploitParams, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error)

	// GetIndexMicrosoftCvrfWithBodyWithResponse request with any body
	GetIndexMicrosoftCvrfWithBodyWithResponse(ctx context.Context, params *GetIndexMicrosoftCvrfParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error)

	GetIndexMicrosoftCvrfWithResponse(ctx context.Context, params *GetIndexMicrosoftCvrfParams, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error)

	// GetIndexMicrosoftKbWithBodyWithResponse request with any body
	GetIndexMicrosoftKbWithBodyWithResponse(ctx context.Context, params *GetIndexMicrosoftKbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error)

	GetIndexMicrosoftKbWithResponse(ctx context.Context, params *GetIndexMicrosoftKbParams, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error)

	// GetIndexMikrotikWithBodyWithResponse request with any body
	GetIndexMikrotikWithBodyWithResponse(ctx context.Context, params *GetIndexMikrotikParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error)

	GetIndexMikrotikWithResponse(ctx context.Context, params *GetIndexMikrotikParams, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error)

	// GetIndexMindrayWithBodyWithResponse request with any body
	GetIndexMindrayWithBodyWithResponse(ctx context.Context, params *GetIndexMindrayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error)

	GetIndexMindrayWithResponse(ctx context.Context, params *GetIndexMindrayParams, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error)

	// GetIndexMispThreatActorsWithBodyWithResponse request with any body
	GetIndexMispThreatActorsWithBodyWithResponse(ctx context.Context, params *GetIndexMispThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error)

	GetIndexMispThreatActorsWithResponse(ctx context.Context, params *GetIndexMispThreatActorsParams, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error)

	// GetIndexMitelWithBodyWithResponse request with any body
	GetIndexMitelWithBodyWithResponse(ctx context.Context, params *GetIndexMitelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error)

	GetIndexMitelWithResponse(ctx context.Context, params *GetIndexMitelParams, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error)

	// GetIndexMitreAttackCveWithBodyWithResponse request with any body
	GetIndexMitreAttackCveWithBodyWithResponse(ctx context.Context, params *GetIndexMitreAttackCveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error)

	GetIndexMitreAttackCveWithResponse(ctx context.Context, params *GetIndexMitreAttackCveParams, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error)

	// GetIndexMitreCvelistV5WithBodyWithResponse request with any body
	GetIndexMitreCvelistV5WithBodyWithResponse(ctx context.Context, params *GetIndexMitreCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreCvelistV5Response, error)

	GetIndexMitreCvelistV5WithResponse(ctx context.Context, params *GetIndexMitreCvelistV5Params, body GetIndexMitreCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreCvelistV5Response, error)

	// GetIndexMitsubishiElectricWithBodyWithResponse request with any body
	GetIndexMitsubishiElectricWithBodyWithResponse(ctx context.Context, params *GetIndexMitsubishiElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error)

	GetIndexMitsubishiElectricWithResponse(ctx context.Context, params *GetIndexMitsubishiElectricParams, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error)

	// GetIndexMongodbWithBodyWithResponse request with any body
	GetIndexMongodbWithBodyWithResponse(ctx context.Context, params *GetIndexMongodbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error)

	GetIndexMongodbWithResponse(ctx context.Context, params *GetIndexMongodbParams, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error)

	// GetIndexMoxaWithBodyWithResponse request with any body
	GetIndexMoxaWithBodyWithResponse(ctx context.Context, params *GetIndexMoxaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error)

	GetIndexMoxaWithResponse(ctx context.Context, params *GetIndexMoxaParams, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error)

	// GetIndexMozillaWithBodyWithResponse request with any body
	GetIndexMozillaWithBodyWithResponse(ctx context.Context, params *GetIndexMozillaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error)

	GetIndexMozillaWithResponse(ctx context.Context, params *GetIndexMozillaParams, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error)

	// GetIndexNaverWithBodyWithResponse request with any body
	GetIndexNaverWithBodyWithResponse(ctx context.Context, params *GetIndexNaverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error)

	GetIndexNaverWithResponse(ctx context.Context, params *GetIndexNaverParams, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error)

	// GetIndexNcscWithBodyWithResponse request with any body
	GetIndexNcscWithBodyWithResponse(ctx context.Context, params *GetIndexNcscParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNcscResponse, error)

	GetIndexNcscWithResponse(ctx context.Context, params *GetIndexNcscParams, body GetIndexNcscJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNcscResponse, error)

	// GetIndexNcscCvesWithBodyWithResponse request with any body
	GetIndexNcscCvesWithBodyWithResponse(ctx context.Context, params *GetIndexNcscCvesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNcscCvesResponse, error)

	GetIndexNcscCvesWithResponse(ctx context.Context, params *GetIndexNcscCvesParams, body GetIndexNcscCvesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNcscCvesResponse, error)

	// GetIndexNecWithBodyWithResponse request with any body
	GetIndexNecWithBodyWithResponse(ctx context.Context, params *GetIndexNecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error)

	GetIndexNecWithResponse(ctx context.Context, params *GetIndexNecParams, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error)

	// GetIndexNetappWithBodyWithResponse request with any body
	GetIndexNetappWithBodyWithResponse(ctx context.Context, params *GetIndexNetappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error)

	GetIndexNetappWithResponse(ctx context.Context, params *GetIndexNetappParams, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error)

	// GetIndexNetgateWithBodyWithResponse request with any body
	GetIndexNetgateWithBodyWithResponse(ctx context.Context, params *GetIndexNetgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error)

	GetIndexNetgateWithResponse(ctx context.Context, params *GetIndexNetgateParams, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error)

	// GetIndexNetgearWithBodyWithResponse request with any body
	GetIndexNetgearWithBodyWithResponse(ctx context.Context, params *GetIndexNetgearParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error)

	GetIndexNetgearWithResponse(ctx context.Context, params *GetIndexNetgearParams, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error)

	// GetIndexNetskopeWithBodyWithResponse request with any body
	GetIndexNetskopeWithBodyWithResponse(ctx context.Context, params *GetIndexNetskopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error)

	GetIndexNetskopeWithResponse(ctx context.Context, params *GetIndexNetskopeParams, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error)

	// GetIndexNginxWithBodyWithResponse request with any body
	GetIndexNginxWithBodyWithResponse(ctx context.Context, params *GetIndexNginxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error)

	GetIndexNginxWithResponse(ctx context.Context, params *GetIndexNginxParams, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error)

	// GetIndexNhsWithBodyWithResponse request with any body
	GetIndexNhsWithBodyWithResponse(ctx context.Context, params *GetIndexNhsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error)

	GetIndexNhsWithResponse(ctx context.Context, params *GetIndexNhsParams, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error)

	// GetIndexNiWithBodyWithResponse request with any body
	GetIndexNiWithBodyWithResponse(ctx context.Context, params *GetIndexNiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error)

	GetIndexNiWithResponse(ctx context.Context, params *GetIndexNiParams, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error)

	// GetIndexNistNvdWithBodyWithResponse request with any body
	GetIndexNistNvdWithBodyWithResponse(ctx context.Context, params *GetIndexNistNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error)

	GetIndexNistNvdWithResponse(ctx context.Context, params *GetIndexNistNvdParams, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error)

	// GetIndexNistNvd2WithBodyWithResponse request with any body
	GetIndexNistNvd2WithBodyWithResponse(ctx context.Context, params *GetIndexNistNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error)

	GetIndexNistNvd2WithResponse(ctx context.Context, params *GetIndexNistNvd2Params, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error)

	// GetIndexNistNvd2CpematchWithBodyWithResponse request with any body
	GetIndexNistNvd2CpematchWithBodyWithResponse(ctx context.Context, params *GetIndexNistNvd2CpematchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error)

	GetIndexNistNvd2CpematchWithResponse(ctx context.Context, params *GetIndexNistNvd2CpematchParams, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error)

	// GetIndexNodeSecurityWithBodyWithResponse request with any body
	GetIndexNodeSecurityWithBodyWithResponse(ctx context.Context, params *GetIndexNodeSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error)

	GetIndexNodeSecurityWithResponse(ctx context.Context, params *GetIndexNodeSecurityParams, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error)

	// GetIndexNodejsWithBodyWithResponse request with any body
	GetIndexNodejsWithBodyWithResponse(ctx context.Context, params *GetIndexNodejsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error)

	GetIndexNodejsWithResponse(ctx context.Context, params *GetIndexNodejsParams, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error)

	// GetIndexNokiaWithBodyWithResponse request with any body
	GetIndexNokiaWithBodyWithResponse(ctx context.Context, params *GetIndexNokiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error)

	GetIndexNokiaWithResponse(ctx context.Context, params *GetIndexNokiaParams, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error)

	// GetIndexNozomiWithBodyWithResponse request with any body
	GetIndexNozomiWithBodyWithResponse(ctx context.Context, params *GetIndexNozomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error)

	GetIndexNozomiWithResponse(ctx context.Context, params *GetIndexNozomiParams, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error)

	// GetIndexNpmWithBodyWithResponse request with any body
	GetIndexNpmWithBodyWithResponse(ctx context.Context, params *GetIndexNpmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error)

	GetIndexNpmWithResponse(ctx context.Context, params *GetIndexNpmParams, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error)

	// GetIndexNtpWithBodyWithResponse request with any body
	GetIndexNtpWithBodyWithResponse(ctx context.Context, params *GetIndexNtpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNtpResponse, error)

	GetIndexNtpWithResponse(ctx context.Context, params *GetIndexNtpParams, body GetIndexNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNtpResponse, error)

	// GetIndexNugetWithBodyWithResponse request with any body
	GetIndexNugetWithBodyWithResponse(ctx context.Context, params *GetIndexNugetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error)

	GetIndexNugetWithResponse(ctx context.Context, params *GetIndexNugetParams, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error)

	// GetIndexNvidiaWithBodyWithResponse request with any body
	GetIndexNvidiaWithBodyWithResponse(ctx context.Context, params *GetIndexNvidiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error)

	GetIndexNvidiaWithResponse(ctx context.Context, params *GetIndexNvidiaParams, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error)

	// GetIndexNzAdvisoriesWithBodyWithResponse request with any body
	GetIndexNzAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexNzAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error)

	GetIndexNzAdvisoriesWithResponse(ctx context.Context, params *GetIndexNzAdvisoriesParams, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error)

	// GetIndexOctopusDeployWithBodyWithResponse request with any body
	GetIndexOctopusDeployWithBodyWithResponse(ctx context.Context, params *GetIndexOctopusDeployParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error)

	GetIndexOctopusDeployWithResponse(ctx context.Context, params *GetIndexOctopusDeployParams, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error)

	// GetIndexOktaWithBodyWithResponse request with any body
	GetIndexOktaWithBodyWithResponse(ctx context.Context, params *GetIndexOktaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error)

	GetIndexOktaWithResponse(ctx context.Context, params *GetIndexOktaParams, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error)

	// GetIndexOmronWithBodyWithResponse request with any body
	GetIndexOmronWithBodyWithResponse(ctx context.Context, params *GetIndexOmronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error)

	GetIndexOmronWithResponse(ctx context.Context, params *GetIndexOmronParams, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error)

	// GetIndexOneEWithBodyWithResponse request with any body
	GetIndexOneEWithBodyWithResponse(ctx context.Context, params *GetIndexOneEParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error)

	GetIndexOneEWithResponse(ctx context.Context, params *GetIndexOneEParams, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error)

	// GetIndexOpamWithBodyWithResponse request with any body
	GetIndexOpamWithBodyWithResponse(ctx context.Context, params *GetIndexOpamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error)

	GetIndexOpamWithResponse(ctx context.Context, params *GetIndexOpamParams, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error)

	// GetIndexOpenCvdbWithBodyWithResponse request with any body
	GetIndexOpenCvdbWithBodyWithResponse(ctx context.Context, params *GetIndexOpenCvdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error)

	GetIndexOpenCvdbWithResponse(ctx context.Context, params *GetIndexOpenCvdbParams, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error)

	// GetIndexOpenbsdWithBodyWithResponse request with any body
	GetIndexOpenbsdWithBodyWithResponse(ctx context.Context, params *GetIndexOpenbsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error)

	GetIndexOpenbsdWithResponse(ctx context.Context, params *GetIndexOpenbsdParams, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error)

	// GetIndexOpensshWithBodyWithResponse request with any body
	GetIndexOpensshWithBodyWithResponse(ctx context.Context, params *GetIndexOpensshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error)

	GetIndexOpensshWithResponse(ctx context.Context, params *GetIndexOpensshParams, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error)

	// GetIndexOpensslSecadvWithBodyWithResponse request with any body
	GetIndexOpensslSecadvWithBodyWithResponse(ctx context.Context, params *GetIndexOpensslSecadvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error)

	GetIndexOpensslSecadvWithResponse(ctx context.Context, params *GetIndexOpensslSecadvParams, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error)

	// GetIndexOpenstackWithBodyWithResponse request with any body
	GetIndexOpenstackWithBodyWithResponse(ctx context.Context, params *GetIndexOpenstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error)

	GetIndexOpenstackWithResponse(ctx context.Context, params *GetIndexOpenstackParams, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error)

	// GetIndexOpenwrtWithBodyWithResponse request with any body
	GetIndexOpenwrtWithBodyWithResponse(ctx context.Context, params *GetIndexOpenwrtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error)

	GetIndexOpenwrtWithResponse(ctx context.Context, params *GetIndexOpenwrtParams, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error)

	// GetIndexOracleWithBodyWithResponse request with any body
	GetIndexOracleWithBodyWithResponse(ctx context.Context, params *GetIndexOracleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error)

	GetIndexOracleWithResponse(ctx context.Context, params *GetIndexOracleParams, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error)

	// GetIndexOracleCpuWithBodyWithResponse request with any body
	GetIndexOracleCpuWithBodyWithResponse(ctx context.Context, params *GetIndexOracleCpuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error)

	GetIndexOracleCpuWithResponse(ctx context.Context, params *GetIndexOracleCpuParams, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error)

	// GetIndexOracleCpuCsafWithBodyWithResponse request with any body
	GetIndexOracleCpuCsafWithBodyWithResponse(ctx context.Context, params *GetIndexOracleCpuCsafParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error)

	GetIndexOracleCpuCsafWithResponse(ctx context.Context, params *GetIndexOracleCpuCsafParams, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error)

	// GetIndexOsvWithBodyWithResponse request with any body
	GetIndexOsvWithBodyWithResponse(ctx context.Context, params *GetIndexOsvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error)

	GetIndexOsvWithResponse(ctx context.Context, params *GetIndexOsvParams, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error)

	// GetIndexOtrsWithBodyWithResponse request with any body
	GetIndexOtrsWithBodyWithResponse(ctx context.Context, params *GetIndexOtrsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error)

	GetIndexOtrsWithResponse(ctx context.Context, params *GetIndexOtrsParams, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error)

	// GetIndexOwncloudWithBodyWithResponse request with any body
	GetIndexOwncloudWithBodyWithResponse(ctx context.Context, params *GetIndexOwncloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error)

	GetIndexOwncloudWithResponse(ctx context.Context, params *GetIndexOwncloudParams, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error)

	// GetIndexPalantirWithBodyWithResponse request with any body
	GetIndexPalantirWithBodyWithResponse(ctx context.Context, params *GetIndexPalantirParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error)

	GetIndexPalantirWithResponse(ctx context.Context, params *GetIndexPalantirParams, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error)

	// GetIndexPaloAltoWithBodyWithResponse request with any body
	GetIndexPaloAltoWithBodyWithResponse(ctx context.Context, params *GetIndexPaloAltoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error)

	GetIndexPaloAltoWithResponse(ctx context.Context, params *GetIndexPaloAltoParams, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error)

	// GetIndexPanasonicWithBodyWithResponse request with any body
	GetIndexPanasonicWithBodyWithResponse(ctx context.Context, params *GetIndexPanasonicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error)

	GetIndexPanasonicWithResponse(ctx context.Context, params *GetIndexPanasonicParams, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error)

	// GetIndexPapercutWithBodyWithResponse request with any body
	GetIndexPapercutWithBodyWithResponse(ctx context.Context, params *GetIndexPapercutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error)

	GetIndexPapercutWithResponse(ctx context.Context, params *GetIndexPapercutParams, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error)

	// GetIndexPegaWithBodyWithResponse request with any body
	GetIndexPegaWithBodyWithResponse(ctx context.Context, params *GetIndexPegaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error)

	GetIndexPegaWithResponse(ctx context.Context, params *GetIndexPegaParams, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error)

	// GetIndexPhilipsWithBodyWithResponse request with any body
	GetIndexPhilipsWithBodyWithResponse(ctx context.Context, params *GetIndexPhilipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error)

	GetIndexPhilipsWithResponse(ctx context.Context, params *GetIndexPhilipsParams, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error)

	// GetIndexPhoenixContactWithBodyWithResponse request with any body
	GetIndexPhoenixContactWithBodyWithResponse(ctx context.Context, params *GetIndexPhoenixContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error)

	GetIndexPhoenixContactWithResponse(ctx context.Context, params *GetIndexPhoenixContactParams, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error)

	// GetIndexPhpMyAdminWithBodyWithResponse request with any body
	GetIndexPhpMyAdminWithBodyWithResponse(ctx context.Context, params *GetIndexPhpMyAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhpMyAdminResponse, error)

	GetIndexPhpMyAdminWithResponse(ctx context.Context, params *GetIndexPhpMyAdminParams, body GetIndexPhpMyAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhpMyAdminResponse, error)

	// GetIndexPostgressqlWithBodyWithResponse request with any body
	GetIndexPostgressqlWithBodyWithResponse(ctx context.Context, params *GetIndexPostgressqlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error)

	GetIndexPostgressqlWithResponse(ctx context.Context, params *GetIndexPostgressqlParams, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error)

	// GetIndexPowerdnsWithBodyWithResponse request with any body
	GetIndexPowerdnsWithBodyWithResponse(ctx context.Context, params *GetIndexPowerdnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPowerdnsResponse, error)

	GetIndexPowerdnsWithResponse(ctx context.Context, params *GetIndexPowerdnsParams, body GetIndexPowerdnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPowerdnsResponse, error)

	// GetIndexProgressWithBodyWithResponse request with any body
	GetIndexProgressWithBodyWithResponse(ctx context.Context, params *GetIndexProgressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error)

	GetIndexProgressWithResponse(ctx context.Context, params *GetIndexProgressParams, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error)

	// GetIndexProofpointWithBodyWithResponse request with any body
	GetIndexProofpointWithBodyWithResponse(ctx context.Context, params *GetIndexProofpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error)

	GetIndexProofpointWithResponse(ctx context.Context, params *GetIndexProofpointParams, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error)

	// GetIndexPtcWithBodyWithResponse request with any body
	GetIndexPtcWithBodyWithResponse(ctx context.Context, params *GetIndexPtcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPtcResponse, error)

	GetIndexPtcWithResponse(ctx context.Context, params *GetIndexPtcParams, body GetIndexPtcJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPtcResponse, error)

	// GetIndexPubWithBodyWithResponse request with any body
	GetIndexPubWithBodyWithResponse(ctx context.Context, params *GetIndexPubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error)

	GetIndexPubWithResponse(ctx context.Context, params *GetIndexPubParams, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error)

	// GetIndexPureStorageWithBodyWithResponse request with any body
	GetIndexPureStorageWithBodyWithResponse(ctx context.Context, params *GetIndexPureStorageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error)

	GetIndexPureStorageWithResponse(ctx context.Context, params *GetIndexPureStorageParams, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error)

	// GetIndexPypaAdvisoriesWithBodyWithResponse request with any body
	GetIndexPypaAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexPypaAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error)

	GetIndexPypaAdvisoriesWithResponse(ctx context.Context, params *GetIndexPypaAdvisoriesParams, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error)

	// GetIndexPypiWithBodyWithResponse request with any body
	GetIndexPypiWithBodyWithResponse(ctx context.Context, params *GetIndexPypiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error)

	GetIndexPypiWithResponse(ctx context.Context, params *GetIndexPypiParams, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error)

	// GetIndexQnapWithBodyWithResponse request with any body
	GetIndexQnapWithBodyWithResponse(ctx context.Context, params *GetIndexQnapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error)

	GetIndexQnapWithResponse(ctx context.Context, params *GetIndexQnapParams, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error)

	// GetIndexQualcommWithBodyWithResponse request with any body
	GetIndexQualcommWithBodyWithResponse(ctx context.Context, params *GetIndexQualcommParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error)

	GetIndexQualcommWithResponse(ctx context.Context, params *GetIndexQualcommParams, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error)

	// GetIndexQualysWithBodyWithResponse request with any body
	GetIndexQualysWithBodyWithResponse(ctx context.Context, params *GetIndexQualysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error)

	GetIndexQualysWithResponse(ctx context.Context, params *GetIndexQualysParams, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error)

	// GetIndexQubesQsbWithBodyWithResponse request with any body
	GetIndexQubesQsbWithBodyWithResponse(ctx context.Context, params *GetIndexQubesQsbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQubesQsbResponse, error)

	GetIndexQubesQsbWithResponse(ctx context.Context, params *GetIndexQubesQsbParams, body GetIndexQubesQsbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQubesQsbResponse, error)

	// GetIndexRansomwareWithBodyWithResponse request with any body
	GetIndexRansomwareWithBodyWithResponse(ctx context.Context, params *GetIndexRansomwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error)

	GetIndexRansomwareWithResponse(ctx context.Context, params *GetIndexRansomwareParams, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error)

	// GetIndexRedhatWithBodyWithResponse request with any body
	GetIndexRedhatWithBodyWithResponse(ctx context.Context, params *GetIndexRedhatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error)

	GetIndexRedhatWithResponse(ctx context.Context, params *GetIndexRedhatParams, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error)

	// GetIndexRenesasWithBodyWithResponse request with any body
	GetIndexRenesasWithBodyWithResponse(ctx context.Context, params *GetIndexRenesasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error)

	GetIndexRenesasWithResponse(ctx context.Context, params *GetIndexRenesasParams, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error)

	// GetIndexReviveWithBodyWithResponse request with any body
	GetIndexReviveWithBodyWithResponse(ctx context.Context, params *GetIndexReviveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error)

	GetIndexReviveWithResponse(ctx context.Context, params *GetIndexReviveParams, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error)

	// GetIndexRockwellWithBodyWithResponse request with any body
	GetIndexRockwellWithBodyWithResponse(ctx context.Context, params *GetIndexRockwellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error)

	GetIndexRockwellWithResponse(ctx context.Context, params *GetIndexRockwellParams, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error)

	// GetIndexRockyWithBodyWithResponse request with any body
	GetIndexRockyWithBodyWithResponse(ctx context.Context, params *GetIndexRockyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error)

	GetIndexRockyWithResponse(ctx context.Context, params *GetIndexRockyParams, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error)

	// GetIndexRockyErrataWithBodyWithResponse request with any body
	GetIndexRockyErrataWithBodyWithResponse(ctx context.Context, params *GetIndexRockyErrataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockyErrataResponse, error)

	GetIndexRockyErrataWithResponse(ctx context.Context, params *GetIndexRockyErrataParams, body GetIndexRockyErrataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockyErrataResponse, error)

	// GetIndexRuckusWithBodyWithResponse request with any body
	GetIndexRuckusWithBodyWithResponse(ctx context.Context, params *GetIndexRuckusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error)

	GetIndexRuckusWithResponse(ctx context.Context, params *GetIndexRuckusParams, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error)

	// GetIndexRustsecAdvisoriesWithBodyWithResponse request with any body
	GetIndexRustsecAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error)

	GetIndexRustsecAdvisoriesWithResponse(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error)

	// GetIndexSacertWithBodyWithResponse request with any body
	GetIndexSacertWithBodyWithResponse(ctx context.Context, params *GetIndexSacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error)

	GetIndexSacertWithResponse(ctx context.Context, params *GetIndexSacertParams, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error)

	// GetIndexSaintWithBodyWithResponse request with any body
	GetIndexSaintWithBodyWithResponse(ctx context.Context, params *GetIndexSaintParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error)

	GetIndexSaintWithResponse(ctx context.Context, params *GetIndexSaintParams, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error)

	// GetIndexSalesforceWithBodyWithResponse request with any body
	GetIndexSalesforceWithBodyWithResponse(ctx context.Context, params *GetIndexSalesforceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error)

	GetIndexSalesforceWithResponse(ctx context.Context, params *GetIndexSalesforceParams, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error)

	// GetIndexSambaWithBodyWithResponse request with any body
	GetIndexSambaWithBodyWithResponse(ctx context.Context, params *GetIndexSambaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error)

	GetIndexSambaWithResponse(ctx context.Context, params *GetIndexSambaParams, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error)

	// GetIndexSapWithBodyWithResponse request with any body
	GetIndexSapWithBodyWithResponse(ctx context.Context, params *GetIndexSapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error)

	GetIndexSapWithResponse(ctx context.Context, params *GetIndexSapParams, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error)

	// GetIndexSchneiderElectricWithBodyWithResponse request with any body
	GetIndexSchneiderElectricWithBodyWithResponse(ctx context.Context, params *GetIndexSchneiderElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error)

	GetIndexSchneiderElectricWithResponse(ctx context.Context, params *GetIndexSchneiderElectricParams, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error)

	// GetIndexSecConsultWithBodyWithResponse request with any body
	GetIndexSecConsultWithBodyWithResponse(ctx context.Context, params *GetIndexSecConsultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error)

	GetIndexSecConsultWithResponse(ctx context.Context, params *GetIndexSecConsultParams, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error)

	// GetIndexSecuritylabWithBodyWithResponse request with any body
	GetIndexSecuritylabWithBodyWithResponse(ctx context.Context, params *GetIndexSecuritylabParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSecuritylabResponse, error)

	GetIndexSecuritylabWithResponse(ctx context.Context, params *GetIndexSecuritylabParams, body GetIndexSecuritylabJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSecuritylabResponse, error)

	// GetIndexSeebugWithBodyWithResponse request with any body
	GetIndexSeebugWithBodyWithResponse(ctx context.Context, params *GetIndexSeebugParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSeebugResponse, error)

	GetIndexSeebugWithResponse(ctx context.Context, params *GetIndexSeebugParams, body GetIndexSeebugJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSeebugResponse, error)

	// GetIndexSelWithBodyWithResponse request with any body
	GetIndexSelWithBodyWithResponse(ctx context.Context, params *GetIndexSelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error)

	GetIndexSelWithResponse(ctx context.Context, params *GetIndexSelParams, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error)

	// GetIndexSentineloneWithBodyWithResponse request with any body
	GetIndexSentineloneWithBodyWithResponse(ctx context.Context, params *GetIndexSentineloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error)

	GetIndexSentineloneWithResponse(ctx context.Context, params *GetIndexSentineloneParams, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error)

	// GetIndexServicenowWithBodyWithResponse request with any body
	GetIndexServicenowWithBodyWithResponse(ctx context.Context, params *GetIndexServicenowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error)

	GetIndexServicenowWithResponse(ctx context.Context, params *GetIndexServicenowParams, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error)

	// GetIndexShadowserverExploitedWithBodyWithResponse request with any body
	GetIndexShadowserverExploitedWithBodyWithResponse(ctx context.Context, params *GetIndexShadowserverExploitedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error)

	GetIndexShadowserverExploitedWithResponse(ctx context.Context, params *GetIndexShadowserverExploitedParams, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error)

	// GetIndexShielderWithBodyWithResponse request with any body
	GetIndexShielderWithBodyWithResponse(ctx context.Context, params *GetIndexShielderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexShielderResponse, error)

	GetIndexShielderWithResponse(ctx context.Context, params *GetIndexShielderParams, body GetIndexShielderJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexShielderResponse, error)

	// GetIndexSickWithBodyWithResponse request with any body
	GetIndexSickWithBodyWithResponse(ctx context.Context, params *GetIndexSickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error)

	GetIndexSickWithResponse(ctx context.Context, params *GetIndexSickParams, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error)

	// GetIndexSiemensWithBodyWithResponse request with any body
	GetIndexSiemensWithBodyWithResponse(ctx context.Context, params *GetIndexSiemensParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error)

	GetIndexSiemensWithResponse(ctx context.Context, params *GetIndexSiemensParams, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error)

	// GetIndexSierraWirelessWithBodyWithResponse request with any body
	GetIndexSierraWirelessWithBodyWithResponse(ctx context.Context, params *GetIndexSierraWirelessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error)

	GetIndexSierraWirelessWithResponse(ctx context.Context, params *GetIndexSierraWirelessParams, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error)

	// GetIndexSigmaRulesWithBodyWithResponse request with any body
	GetIndexSigmaRulesWithBodyWithResponse(ctx context.Context, params *GetIndexSigmaRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSigmaRulesResponse, error)

	GetIndexSigmaRulesWithResponse(ctx context.Context, params *GetIndexSigmaRulesParams, body GetIndexSigmaRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSigmaRulesResponse, error)

	// GetIndexSingcertWithBodyWithResponse request with any body
	GetIndexSingcertWithBodyWithResponse(ctx context.Context, params *GetIndexSingcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error)

	GetIndexSingcertWithResponse(ctx context.Context, params *GetIndexSingcertParams, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error)

	// GetIndexSlackwareWithBodyWithResponse request with any body
	GetIndexSlackwareWithBodyWithResponse(ctx context.Context, params *GetIndexSlackwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error)

	GetIndexSlackwareWithResponse(ctx context.Context, params *GetIndexSlackwareParams, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error)

	// GetIndexSolarwindsWithBodyWithResponse request with any body
	GetIndexSolarwindsWithBodyWithResponse(ctx context.Context, params *GetIndexSolarwindsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error)

	GetIndexSolarwindsWithResponse(ctx context.Context, params *GetIndexSolarwindsParams, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error)

	// GetIndexSolrWithBodyWithResponse request with any body
	GetIndexSolrWithBodyWithResponse(ctx context.Context, params *GetIndexSolrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error)

	GetIndexSolrWithResponse(ctx context.Context, params *GetIndexSolrParams, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error)

	// GetIndexSonicwallWithBodyWithResponse request with any body
	GetIndexSonicwallWithBodyWithResponse(ctx context.Context, params *GetIndexSonicwallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error)

	GetIndexSonicwallWithResponse(ctx context.Context, params *GetIndexSonicwallParams, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error)

	// GetIndexSpacelabsHealthcareWithBodyWithResponse request with any body
	GetIndexSpacelabsHealthcareWithBodyWithResponse(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error)

	GetIndexSpacelabsHealthcareWithResponse(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error)

	// GetIndexSplunkWithBodyWithResponse request with any body
	GetIndexSplunkWithBodyWithResponse(ctx context.Context, params *GetIndexSplunkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSplunkResponse, error)

	GetIndexSplunkWithResponse(ctx context.Context, params *GetIndexSplunkParams, body GetIndexSplunkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSplunkResponse, error)

	// GetIndexSpringWithBodyWithResponse request with any body
	GetIndexSpringWithBodyWithResponse(ctx context.Context, params *GetIndexSpringParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error)

	GetIndexSpringWithResponse(ctx context.Context, params *GetIndexSpringParams, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error)

	// GetIndexSsdWithBodyWithResponse request with any body
	GetIndexSsdWithBodyWithResponse(ctx context.Context, params *GetIndexSsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error)

	GetIndexSsdWithResponse(ctx context.Context, params *GetIndexSsdParams, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error)

	// GetIndexStormshieldWithBodyWithResponse request with any body
	GetIndexStormshieldWithBodyWithResponse(ctx context.Context, params *GetIndexStormshieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error)

	GetIndexStormshieldWithResponse(ctx context.Context, params *GetIndexStormshieldParams, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error)

	// GetIndexStrykerWithBodyWithResponse request with any body
	GetIndexStrykerWithBodyWithResponse(ctx context.Context, params *GetIndexStrykerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error)

	GetIndexStrykerWithResponse(ctx context.Context, params *GetIndexStrykerParams, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error)

	// GetIndexSudoWithBodyWithResponse request with any body
	GetIndexSudoWithBodyWithResponse(ctx context.Context, params *GetIndexSudoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error)

	GetIndexSudoWithResponse(ctx context.Context, params *GetIndexSudoParams, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error)

	// GetIndexSuseWithBodyWithResponse request with any body
	GetIndexSuseWithBodyWithResponse(ctx context.Context, params *GetIndexSuseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error)

	GetIndexSuseWithResponse(ctx context.Context, params *GetIndexSuseParams, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error)

	// GetIndexSwiftWithBodyWithResponse request with any body
	GetIndexSwiftWithBodyWithResponse(ctx context.Context, params *GetIndexSwiftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error)

	GetIndexSwiftWithResponse(ctx context.Context, params *GetIndexSwiftParams, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error)

	// GetIndexSwisslogHealthcareWithBodyWithResponse request with any body
	GetIndexSwisslogHealthcareWithBodyWithResponse(ctx context.Context, params *GetIndexSwisslogHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error)

	GetIndexSwisslogHealthcareWithResponse(ctx context.Context, params *GetIndexSwisslogHealthcareParams, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error)

	// GetIndexSymfonyWithBodyWithResponse request with any body
	GetIndexSymfonyWithBodyWithResponse(ctx context.Context, params *GetIndexSymfonyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error)

	GetIndexSymfonyWithResponse(ctx context.Context, params *GetIndexSymfonyParams, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error)

	// GetIndexSynacktivWithBodyWithResponse request with any body
	GetIndexSynacktivWithBodyWithResponse(ctx context.Context, params *GetIndexSynacktivParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSynacktivResponse, error)

	GetIndexSynacktivWithResponse(ctx context.Context, params *GetIndexSynacktivParams, body GetIndexSynacktivJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSynacktivResponse, error)

	// GetIndexSyncrosoftWithBodyWithResponse request with any body
	GetIndexSyncrosoftWithBodyWithResponse(ctx context.Context, params *GetIndexSyncrosoftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error)

	GetIndexSyncrosoftWithResponse(ctx context.Context, params *GetIndexSyncrosoftParams, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error)

	// GetIndexSynologyWithBodyWithResponse request with any body
	GetIndexSynologyWithBodyWithResponse(ctx context.Context, params *GetIndexSynologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error)

	GetIndexSynologyWithResponse(ctx context.Context, params *GetIndexSynologyParams, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error)

	// GetIndexTeamviewerWithBodyWithResponse request with any body
	GetIndexTeamviewerWithBodyWithResponse(ctx context.Context, params *GetIndexTeamviewerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error)

	GetIndexTeamviewerWithResponse(ctx context.Context, params *GetIndexTeamviewerParams, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error)

	// GetIndexTenableResearchAdvisoriesWithBodyWithResponse request with any body
	GetIndexTenableResearchAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTenableResearchAdvisoriesResponse, error)

	GetIndexTenableResearchAdvisoriesWithResponse(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, body GetIndexTenableResearchAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTenableResearchAdvisoriesResponse, error)

	// GetIndexTencentWithBodyWithResponse request with any body
	GetIndexTencentWithBodyWithResponse(ctx context.Context, params *GetIndexTencentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error)

	GetIndexTencentWithResponse(ctx context.Context, params *GetIndexTencentParams, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error)

	// GetIndexThalesWithBodyWithResponse request with any body
	GetIndexThalesWithBodyWithResponse(ctx context.Context, params *GetIndexThalesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error)

	GetIndexThalesWithResponse(ctx context.Context, params *GetIndexThalesParams, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error)

	// GetIndexThemissinglinkWithBodyWithResponse request with any body
	GetIndexThemissinglinkWithBodyWithResponse(ctx context.Context, params *GetIndexThemissinglinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error)

	GetIndexThemissinglinkWithResponse(ctx context.Context, params *GetIndexThemissinglinkParams, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error)

	// GetIndexThreatActorsWithBodyWithResponse request with any body
	GetIndexThreatActorsWithBodyWithResponse(ctx context.Context, params *GetIndexThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error)

	GetIndexThreatActorsWithResponse(ctx context.Context, params *GetIndexThreatActorsParams, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error)

	// GetIndexTiWithBodyWithResponse request with any body
	GetIndexTiWithBodyWithResponse(ctx context.Context, params *GetIndexTiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error)

	GetIndexTiWithResponse(ctx context.Context, params *GetIndexTiParams, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error)

	// GetIndexTibcoWithBodyWithResponse request with any body
	GetIndexTibcoWithBodyWithResponse(ctx context.Context, params *GetIndexTibcoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error)

	GetIndexTibcoWithResponse(ctx context.Context, params *GetIndexTibcoParams, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error)

	// GetIndexTpLinkWithBodyWithResponse request with any body
	GetIndexTpLinkWithBodyWithResponse(ctx context.Context, params *GetIndexTpLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error)

	GetIndexTpLinkWithResponse(ctx context.Context, params *GetIndexTpLinkParams, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error)

	// GetIndexTraneTechnologyWithBodyWithResponse request with any body
	GetIndexTraneTechnologyWithBodyWithResponse(ctx context.Context, params *GetIndexTraneTechnologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error)

	GetIndexTraneTechnologyWithResponse(ctx context.Context, params *GetIndexTraneTechnologyParams, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error)

	// GetIndexTrendmicroWithBodyWithResponse request with any body
	GetIndexTrendmicroWithBodyWithResponse(ctx context.Context, params *GetIndexTrendmicroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error)

	GetIndexTrendmicroWithResponse(ctx context.Context, params *GetIndexTrendmicroParams, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error)

	// GetIndexTrustwaveWithBodyWithResponse request with any body
	GetIndexTrustwaveWithBodyWithResponse(ctx context.Context, params *GetIndexTrustwaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error)

	GetIndexTrustwaveWithResponse(ctx context.Context, params *GetIndexTrustwaveParams, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error)

	// GetIndexTwcertWithBodyWithResponse request with any body
	GetIndexTwcertWithBodyWithResponse(ctx context.Context, params *GetIndexTwcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error)

	GetIndexTwcertWithResponse(ctx context.Context, params *GetIndexTwcertParams, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error)

	// GetIndexUbiquitiWithBodyWithResponse request with any body
	GetIndexUbiquitiWithBodyWithResponse(ctx context.Context, params *GetIndexUbiquitiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error)

	GetIndexUbiquitiWithResponse(ctx context.Context, params *GetIndexUbiquitiParams, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error)

	// GetIndexUbuntuWithBodyWithResponse request with any body
	GetIndexUbuntuWithBodyWithResponse(ctx context.Context, params *GetIndexUbuntuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error)

	GetIndexUbuntuWithResponse(ctx context.Context, params *GetIndexUbuntuParams, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error)

	// GetIndexUnifyWithBodyWithResponse request with any body
	GetIndexUnifyWithBodyWithResponse(ctx context.Context, params *GetIndexUnifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error)

	GetIndexUnifyWithResponse(ctx context.Context, params *GetIndexUnifyParams, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error)

	// GetIndexUnisocWithBodyWithResponse request with any body
	GetIndexUnisocWithBodyWithResponse(ctx context.Context, params *GetIndexUnisocParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error)

	GetIndexUnisocWithResponse(ctx context.Context, params *GetIndexUnisocParams, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error)

	// GetIndexUsdWithBodyWithResponse request with any body
	GetIndexUsdWithBodyWithResponse(ctx context.Context, params *GetIndexUsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error)

	GetIndexUsdWithResponse(ctx context.Context, params *GetIndexUsdParams, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error)

	// GetIndexUsomWithBodyWithResponse request with any body
	GetIndexUsomWithBodyWithResponse(ctx context.Context, params *GetIndexUsomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error)

	GetIndexUsomWithResponse(ctx context.Context, params *GetIndexUsomParams, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error)

	// GetIndexVandykeWithBodyWithResponse request with any body
	GetIndexVandykeWithBodyWithResponse(ctx context.Context, params *GetIndexVandykeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error)

	GetIndexVandykeWithResponse(ctx context.Context, params *GetIndexVandykeParams, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error)

	// GetIndexVapidlabsWithBodyWithResponse request with any body
	GetIndexVapidlabsWithBodyWithResponse(ctx context.Context, params *GetIndexVapidlabsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error)

	GetIndexVapidlabsWithResponse(ctx context.Context, params *GetIndexVapidlabsParams, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error)

	// GetIndexVcCpeDictionaryWithBodyWithResponse request with any body
	GetIndexVcCpeDictionaryWithBodyWithResponse(ctx context.Context, params *GetIndexVcCpeDictionaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVcCpeDictionaryResponse, error)

	GetIndexVcCpeDictionaryWithResponse(ctx context.Context, params *GetIndexVcCpeDictionaryParams, body GetIndexVcCpeDictionaryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVcCpeDictionaryResponse, error)

	// GetIndexVdeWithBodyWithResponse request with any body
	GetIndexVdeWithBodyWithResponse(ctx context.Context, params *GetIndexVdeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error)

	GetIndexVdeWithResponse(ctx context.Context, params *GetIndexVdeParams, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error)

	// GetIndexVeeamWithBodyWithResponse request with any body
	GetIndexVeeamWithBodyWithResponse(ctx context.Context, params *GetIndexVeeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error)

	GetIndexVeeamWithResponse(ctx context.Context, params *GetIndexVeeamParams, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error)

	// GetIndexVeritasWithBodyWithResponse request with any body
	GetIndexVeritasWithBodyWithResponse(ctx context.Context, params *GetIndexVeritasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVeritasResponse, error)

	GetIndexVeritasWithResponse(ctx context.Context, params *GetIndexVeritasParams, body GetIndexVeritasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVeritasResponse, error)

	// GetIndexVmwareWithBodyWithResponse request with any body
	GetIndexVmwareWithBodyWithResponse(ctx context.Context, params *GetIndexVmwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVmwareResponse, error)

	GetIndexVmwareWithResponse(ctx context.Context, params *GetIndexVmwareParams, body GetIndexVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVmwareResponse, error)

	// GetIndexVoidsecWithBodyWithResponse request with any body
	GetIndexVoidsecWithBodyWithResponse(ctx context.Context, params *GetIndexVoidsecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error)

	GetIndexVoidsecWithResponse(ctx context.Context, params *GetIndexVoidsecParams, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error)

	// GetIndexVulncheckWithBodyWithResponse request with any body
	GetIndexVulncheckWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckResponse, error)

	GetIndexVulncheckWithResponse(ctx context.Context, params *GetIndexVulncheckParams, body GetIndexVulncheckJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckResponse, error)

	// GetIndexVulncheckConfigWithBodyWithResponse request with any body
	GetIndexVulncheckConfigWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error)

	GetIndexVulncheckConfigWithResponse(ctx context.Context, params *GetIndexVulncheckConfigParams, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error)

	// GetIndexVulncheckCvelistV5WithBodyWithResponse request with any body
	GetIndexVulncheckCvelistV5WithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckCvelistV5Response, error)

	GetIndexVulncheckCvelistV5WithResponse(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, body GetIndexVulncheckCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckCvelistV5Response, error)

	// GetIndexVulncheckKevWithBodyWithResponse request with any body
	GetIndexVulncheckKevWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error)

	GetIndexVulncheckKevWithResponse(ctx context.Context, params *GetIndexVulncheckKevParams, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error)

	// GetIndexVulncheckNvdWithBodyWithResponse request with any body
	GetIndexVulncheckNvdWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error)

	GetIndexVulncheckNvdWithResponse(ctx context.Context, params *GetIndexVulncheckNvdParams, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error)

	// GetIndexVulncheckNvd2WithBodyWithResponse request with any body
	GetIndexVulncheckNvd2WithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error)

	GetIndexVulncheckNvd2WithResponse(ctx context.Context, params *GetIndexVulncheckNvd2Params, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error)

	// GetIndexVulnerabilityAliasesWithBodyWithResponse request with any body
	GetIndexVulnerabilityAliasesWithBodyWithResponse(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error)

	GetIndexVulnerabilityAliasesWithResponse(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error)

	// GetIndexVulnrichmentWithBodyWithResponse request with any body
	GetIndexVulnrichmentWithBodyWithResponse(ctx context.Context, params *GetIndexVulnrichmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulnrichmentResponse, error)

	GetIndexVulnrichmentWithResponse(ctx context.Context, params *GetIndexVulnrichmentParams, body GetIndexVulnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulnrichmentResponse, error)

	// GetIndexVyaireWithBodyWithResponse request with any body
	GetIndexVyaireWithBodyWithResponse(ctx context.Context, params *GetIndexVyaireParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error)

	GetIndexVyaireWithResponse(ctx context.Context, params *GetIndexVyaireParams, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error)

	// GetIndexWatchguardWithBodyWithResponse request with any body
	GetIndexWatchguardWithBodyWithResponse(ctx context.Context, params *GetIndexWatchguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error)

	GetIndexWatchguardWithResponse(ctx context.Context, params *GetIndexWatchguardParams, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error)

	// GetIndexWhatsappWithBodyWithResponse request with any body
	GetIndexWhatsappWithBodyWithResponse(ctx context.Context, params *GetIndexWhatsappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error)

	GetIndexWhatsappWithResponse(ctx context.Context, params *GetIndexWhatsappParams, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error)

	// GetIndexWibuWithBodyWithResponse request with any body
	GetIndexWibuWithBodyWithResponse(ctx context.Context, params *GetIndexWibuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error)

	GetIndexWibuWithResponse(ctx context.Context, params *GetIndexWibuParams, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error)

	// GetIndexWiresharkWithBodyWithResponse request with any body
	GetIndexWiresharkWithBodyWithResponse(ctx context.Context, params *GetIndexWiresharkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error)

	GetIndexWiresharkWithResponse(ctx context.Context, params *GetIndexWiresharkParams, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error)

	// GetIndexWithSecureWithBodyWithResponse request with any body
	GetIndexWithSecureWithBodyWithResponse(ctx context.Context, params *GetIndexWithSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error)

	GetIndexWithSecureWithResponse(ctx context.Context, params *GetIndexWithSecureParams, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error)

	// GetIndexWolfiWithBodyWithResponse request with any body
	GetIndexWolfiWithBodyWithResponse(ctx context.Context, params *GetIndexWolfiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error)

	GetIndexWolfiWithResponse(ctx context.Context, params *GetIndexWolfiParams, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error)

	// GetIndexWolfsslWithBodyWithResponse request with any body
	GetIndexWolfsslWithBodyWithResponse(ctx context.Context, params *GetIndexWolfsslParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error)

	GetIndexWolfsslWithResponse(ctx context.Context, params *GetIndexWolfsslParams, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error)

	// GetIndexWordfenceWithBodyWithResponse request with any body
	GetIndexWordfenceWithBodyWithResponse(ctx context.Context, params *GetIndexWordfenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error)

	GetIndexWordfenceWithResponse(ctx context.Context, params *GetIndexWordfenceParams, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error)

	// GetIndexXenWithBodyWithResponse request with any body
	GetIndexXenWithBodyWithResponse(ctx context.Context, params *GetIndexXenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error)

	GetIndexXenWithResponse(ctx context.Context, params *GetIndexXenParams, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error)

	// GetIndexXeroxWithBodyWithResponse request with any body
	GetIndexXeroxWithBodyWithResponse(ctx context.Context, params *GetIndexXeroxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error)

	GetIndexXeroxWithResponse(ctx context.Context, params *GetIndexXeroxParams, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error)

	// GetIndexXiaomiWithBodyWithResponse request with any body
	GetIndexXiaomiWithBodyWithResponse(ctx context.Context, params *GetIndexXiaomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error)

	GetIndexXiaomiWithResponse(ctx context.Context, params *GetIndexXiaomiParams, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error)

	// GetIndexXylemWithBodyWithResponse request with any body
	GetIndexXylemWithBodyWithResponse(ctx context.Context, params *GetIndexXylemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error)

	GetIndexXylemWithResponse(ctx context.Context, params *GetIndexXylemParams, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error)

	// GetIndexYokogawaWithBodyWithResponse request with any body
	GetIndexYokogawaWithBodyWithResponse(ctx context.Context, params *GetIndexYokogawaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error)

	GetIndexYokogawaWithResponse(ctx context.Context, params *GetIndexYokogawaParams, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error)

	// GetIndexYubicoWithBodyWithResponse request with any body
	GetIndexYubicoWithBodyWithResponse(ctx context.Context, params *GetIndexYubicoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error)

	GetIndexYubicoWithResponse(ctx context.Context, params *GetIndexYubicoParams, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error)

	// GetIndexZdiWithBodyWithResponse request with any body
	GetIndexZdiWithBodyWithResponse(ctx context.Context, params *GetIndexZdiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error)

	GetIndexZdiWithResponse(ctx context.Context, params *GetIndexZdiParams, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error)

	// GetIndexZebraWithBodyWithResponse request with any body
	GetIndexZebraWithBodyWithResponse(ctx context.Context, params *GetIndexZebraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZebraResponse, error)

	GetIndexZebraWithResponse(ctx context.Context, params *GetIndexZebraParams, body GetIndexZebraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZebraResponse, error)

	// GetIndexZeroscienceWithBodyWithResponse request with any body
	GetIndexZeroscienceWithBodyWithResponse(ctx context.Context, params *GetIndexZeroscienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error)

	GetIndexZeroscienceWithResponse(ctx context.Context, params *GetIndexZeroscienceParams, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error)

	// GetIndexZimbraWithBodyWithResponse request with any body
	GetIndexZimbraWithBodyWithResponse(ctx context.Context, params *GetIndexZimbraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error)

	GetIndexZimbraWithResponse(ctx context.Context, params *GetIndexZimbraParams, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error)

	// GetIndexZoomWithBodyWithResponse request with any body
	GetIndexZoomWithBodyWithResponse(ctx context.Context, params *GetIndexZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error)

	GetIndexZoomWithResponse(ctx context.Context, params *GetIndexZoomParams, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error)

	// GetIndexZscalerWithBodyWithResponse request with any body
	GetIndexZscalerWithBodyWithResponse(ctx context.Context, params *GetIndexZscalerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error)

	GetIndexZscalerWithResponse(ctx context.Context, params *GetIndexZscalerParams, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error)

	// GetIndexZusoWithBodyWithResponse request with any body
	GetIndexZusoWithBodyWithResponse(ctx context.Context, params *GetIndexZusoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error)

	GetIndexZusoWithResponse(ctx context.Context, params *GetIndexZusoParams, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error)

	// GetIndexZyxelWithBodyWithResponse request with any body
	GetIndexZyxelWithBodyWithResponse(ctx context.Context, params *GetIndexZyxelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error)

	GetIndexZyxelWithResponse(ctx context.Context, params *GetIndexZyxelParams, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error)

	// GetOpenapiWithResponse request
	GetOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiResponse, error)

	// GetPdnsVulncheckC2WithResponse request
	GetPdnsVulncheckC2WithResponse(ctx context.Context, params *GetPdnsVulncheckC2Params, reqEditors ...RequestEditorFn) (*GetPdnsVulncheckC2Response, error)

	// GetPurlWithResponse request
	GetPurlWithResponse(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*GetPurlResponse, error)

	// GetRulesInitialAccessTypeWithResponse request
	GetRulesInitialAccessTypeWithResponse(ctx context.Context, pType GetRulesInitialAccessTypeParamsType, reqEditors ...RequestEditorFn) (*GetRulesInitialAccessTypeResponse, error)

	// GetTagsVulncheckC2WithResponse request
	GetTagsVulncheckC2WithResponse(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*GetTagsVulncheckC2Response, error)
}

type GetBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseArrayParamsIndexBackupList
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataV3controllersBackupResponseDataV3controllersBackupResponseMetadata
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetBackupIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCpeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayStringV3controllersResponseMetadata
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetCpeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCpeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntitlementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelsEntitlements
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetEntitlementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntitlementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseArrayParamsIndexList
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexA10Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryA10PaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexA10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexA10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAbbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryABBAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAbbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAbbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAbbottResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAbbottPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAbbottResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAbbottResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAbsoluteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAbsolutePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAbsoluteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAbsoluteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAcronisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAcronisPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAcronisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAcronisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAdobeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAdobeAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAdobeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAdobeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAdvisoryRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAlephResearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAlephResearchPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAlephResearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAlephResearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAlmaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAlmaLinuxUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAlmaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAlmaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAlpineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAlpineLinuxSecDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAlpineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAlpineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAmazonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAmazonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAmazonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAmdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAMDPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAmdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAmdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAmiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAMIPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAmiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAmiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAnchoreNvdOverrideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAnchoreNVDOverridePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAnchoreNvdOverrideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAnchoreNvdOverrideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAndroidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAndroidAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAndroidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAndroidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheActivemqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheActiveMQPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheActivemqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheActivemqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheArchivaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheArchivaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheArchivaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheArchivaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheArrowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheArrowPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheArrowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheArrowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheCamelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheCamelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheCamelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheCamelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheCommonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheCommonsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheCommonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheCommonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheCouchdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheCouchDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheCouchdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheCouchdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheFlinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheFlinkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheFlinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheFlinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheGuacamoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheGuacamolePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheGuacamoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheGuacamoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheHadoopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheHadoopPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheHadoopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheHadoopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheHttpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheHTTPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheHttpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheHttpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheJspwikiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheJSPWikiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheJspwikiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheJspwikiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheKafkaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheKafkaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheKafkaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheKafkaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheLoggingservicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheLoggingServicesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheLoggingservicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheLoggingservicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheNifiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheNiFiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheNifiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheNifiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheOfbizResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheOFBizPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheOfbizResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheOfbizResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheOpenmeetingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheOpenMeetingsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheOpenmeetingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheOpenmeetingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheOpenofficeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheOpenOfficePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheOpenofficeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheOpenofficeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApachePulsarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApachePulsarPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApachePulsarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApachePulsarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheShiroResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheShiroPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheShiroResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheShiroResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheSparkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheSparkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheSparkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheSparkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheStrutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheStrutsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheStrutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheStrutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheSubversionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheSubversionPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheSubversionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheSubversionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheSupersetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheSupersetPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheSupersetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheSupersetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheTomcatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheTomcatPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheTomcatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheTomcatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheZookeeperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryApacheZooKeeperPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheZookeeperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheZookeeperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAppcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAppCheckPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAppcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAppcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAppgateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAppgatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAppgateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAppgateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAppleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAppleAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAppleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAppleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexArchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryArchIssuePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexArchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexArchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAristaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAristaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAristaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAristaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexArubaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryArubaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexArubaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexArubaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAsrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryASRGPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAsrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAsrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAssetnoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAssetNotePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAssetnoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAssetnoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAsteriskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAsteriskPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAsteriskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAsteriskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAsusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAsusPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAsusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAsusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAtlassianResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAtlassianAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAtlassianResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAtlassianResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAtlassianVulnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAtlassianVulnPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAtlassianVulnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAtlassianVulnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAtredisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAtredisPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAtredisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAtredisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAuscertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAusCertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAuscertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAuscertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAutodeskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAutodeskPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAutodeskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAutodeskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAvayaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAvayaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAvayaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAvayaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAvevaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAVEVAAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAvevaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAvevaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAvigilonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAvigilonPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAvigilonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAvigilonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAwsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAWSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAwsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAwsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAxisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAxisPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAxisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAxisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAzulResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAzulPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAzulResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAzulResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBandrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBandrPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBandrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBandrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBaxterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBaxterAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBaxterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBaxterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBbraunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBBraunAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBbraunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBbraunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBectonDickinsonAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBduResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBDUAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBduResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBduResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBeckhoffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBeckhoffAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBeckhoffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBeckhoffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBeldenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBeldenAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBeldenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBeldenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBeyondTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBeyondTrustPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBeyondTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBeyondTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBinarlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBinarlyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBinarlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBinarlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBitdefenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBitDefenderPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBitdefenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBitdefenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBlackberryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBlackBerryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBlackberryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBlackberryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBLSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBoschResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBoschAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBoschResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBoschResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBostonScientificResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBostonScientificAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBostonScientificResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBostonScientificResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBotnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryBotnetPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBotnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBotnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCaCyberCentreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCACyberCentreAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCaCyberCentreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCaCyberCentreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCanvasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCanvasExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCanvasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCanvasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCarestreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCarestreamAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCarestreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCarestreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCarrierPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCblMarinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCBLMarinerPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCblMarinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCblMarinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCentosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCESAPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCentosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCentosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertBeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCertBEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertBeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertBeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCertINPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertIrSecurityAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCertIRSecurityAlertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertIrSecurityAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertIrSecurityAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertSeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCertSEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertSeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertSeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertUaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCertUAPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertUaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertUaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCerteuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCERTEUAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCerteuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCerteuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertfrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCertFRAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertfrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertfrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexChainguardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryChainGuardPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexChainguardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexChainguardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCheckpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCheckPointPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCheckpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCheckpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexChromeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryChromePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexChromeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexChromeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCisaAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCISAAlertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCisaAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCisaAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCisaKevResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryKEVCatalogVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCisaKevResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCisaKevResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCiscoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCiscoAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCiscoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCiscoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCiscoTalosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTalosAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCiscoTalosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCiscoTalosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCitrixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCitrixAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCitrixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCitrixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexClarotyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryClarotyVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexClarotyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexClarotyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCloudbeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCloudBeesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCloudbeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCloudbeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCloudvulndbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCloudVulnDBAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCloudvulndbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCloudvulndbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnnvdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCNNVDEntryJSONPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnnvdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnnvdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnvdBulletinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCNVDBulletinPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnvdBulletinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnvdBulletinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnvdFlawsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCNVDFlawPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnvdFlawsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnvdFlawsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCocoapodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCocoapodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCocoapodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCodesysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCodesysAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCodesysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCodesysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCompassSecurityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCompassSecurityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCompassSecurityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCompassSecurityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexComposerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexComposerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexComposerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexConanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexConanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexConanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCrestronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCrestronPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCrestronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCrestronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCurlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCurlPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCurlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCurlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCweResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiCWEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCweResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCweResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDahuaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDahuaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDahuaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDahuaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDassaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDassaultPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDassaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDassaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDebianResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVulnerableDebianPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDebianResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDebianResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDebianDsaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDebianSecurityAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDebianDsaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDebianDsaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDellPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDeltaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDjangoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDjangoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDjangoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDjangoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDnnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDNNPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDnnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDnnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDotcmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDotCMSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDotcmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDotcmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDragosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDragosAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDragosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDragosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDraytekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryDraytekPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDraytekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDraytekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEatonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryEatonAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEatonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEatonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexElasticResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryElasticPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexElasticResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexElasticResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexElspecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryElspecPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexElspecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexElspecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEmergingThreatsSnortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryEmergingThreatsSnortPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEmergingThreatsSnortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEmergingThreatsSnortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEmersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryEmersonAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEmersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEmersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryEOLReleaseDataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEpssResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiEPSSDataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEpssResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEpssResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExodusIntelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryExodusIntelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExodusIntelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExodusIntelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitChainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiExploitChainPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitChainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitChainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryExploitDBExploitv2PaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiExploitV3ResultPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitsChangelogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiExploitsChangelogPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitsChangelogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitsChangelogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFSecureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFSecurePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFSecureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFSecureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFanucResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFanucPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFanucResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFanucResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFastlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFastlyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFastlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFastlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFedoraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFedoraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFedoraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFilecloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFileCloudPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFilecloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFilecloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFlattSecurityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFlattSecurityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFlattSecurityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFlattSecurityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexForgerockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryForgeRockPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexForgerockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexForgerockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFortinetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFortinetAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFortinetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFortinetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFortinetIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFortinetIPSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFortinetIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFortinetIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFoxitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryFoxitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFoxitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFoxitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFreebsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFreebsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFreebsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGallagherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGallagherPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGallagherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGallagherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGcpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGCPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGcpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGcpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGeGasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGEGasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGeGasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGeGasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGeHealthcareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGEHealthcareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGeHealthcareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGeHealthcareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGenetecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGenetecPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGenetecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGenetecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGigabyteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGigabytePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGigabyteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGigabyteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGiteeExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGiteeExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGiteeExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGiteeExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGithubExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGitHubExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGithubExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGithubExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGithubSecurityAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGHAdvisoryJSONLeanPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGithubSecurityAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGithubSecurityAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGitlabAdvisoriesCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGitlabAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGitlabAdvisoriesCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGitlabAdvisoriesCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGitlabExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGitLabExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGitlabExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGitlabExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGnutlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGnuTLSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGnutlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGnutlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGolangResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGolangResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGolangResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGoogle0dayItwResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryITWExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGoogle0dayItwResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGoogle0dayItwResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGoogleContainerOptimizedOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryContainerOSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGoogleContainerOptimizedOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGoogleContainerOptimizedOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGrafanaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGrafanaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGrafanaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGrafanaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGreynoiseMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryGreyNoiseDetectionPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGreynoiseMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGreynoiseMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHarmonyosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHarmonyOSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHarmonyosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHarmonyosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHashicorpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHashiCorpPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHashicorpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHashicorpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHaskellSadbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHaskellSADBAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHaskellSadbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHaskellSadbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHCLPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHikvisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHIKVisionPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHikvisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHikvisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHillromResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHillromAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHillromResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHillromResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHitachiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHitachiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHitachiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHitachiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHitachiEnergyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHitachiEnergyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHitachiEnergyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHitachiEnergyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHkcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHKCertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHkcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHkcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHoneywellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHoneywellPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHoneywellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHoneywellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHuaweiEulerosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHuaweiEulerOSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHuaweiEulerosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHuaweiEulerosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHuaweiIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHuaweiIPSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHuaweiIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHuaweiIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHuaweiPsirtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryHuaweiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHuaweiPsirtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHuaweiPsirtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIavaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIAVAPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIavaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIavaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIbmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIBMPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIbmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIbmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIdemiaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIdemiaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIdemiaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIdemiaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIlAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIsraeliAlertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIlAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIlAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIlVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIsraeliVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIlVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIlVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIncibeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIncibeAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIncibeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIncibeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiInitialAccessPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexInitialAccessGitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiInitialAccessPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexInitialAccessGitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexInitialAccessGitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIntelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIntelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIntelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIntelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel10dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel10dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel10dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel30dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel30dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel30dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel3dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel3dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel3dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel90dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel90dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel90dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIstioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIstioPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIstioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIstioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIvantiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIvantiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIvantiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIvantiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIvantiRssResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryIvantiRSSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIvantiRssResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIvantiRssResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJenkinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryJenkinsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJenkinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJenkinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJetbrainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryJetBrainsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJetbrainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJetbrainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJfrogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryJFrogPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJfrogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJfrogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJnjResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryJNJAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJnjResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJnjResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJvnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryJVNPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJvnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJvnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJvndbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryJVNAdvisoryItemPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJvndbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJvndbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKasperskyIcsCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryKasperskyICSCERTAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKasperskyIcsCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKasperskyIcsCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKorelogicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryKoreLogicPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKorelogicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKorelogicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKrcertSecurityNoticesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryKRCertAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKrcertSecurityNoticesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKrcertSecurityNoticesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKrcertVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryKRCertAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKrcertVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKrcertVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKubernetesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryK8SPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKubernetesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKubernetesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLenovoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryLenovoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLenovoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLenovoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLexmarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryLexmarkAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLexmarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLexmarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryLGPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLibreOfficeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryLibreOfficePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLibreOfficeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLibreOfficeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLinuxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryLinuxPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLinuxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLinuxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMFilesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMacertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMACertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMacertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMacertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexManageengineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryManageEngineAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexManageengineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexManageengineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMavenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMavenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMavenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMbedTlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMbedTLSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMbedTlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMbedTlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMediatekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMediatekPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMediatekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMediatekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMedtronicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMedtronicAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMedtronicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMedtronicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMendixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMendixPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMendixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMendixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMetasploitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMetasploitExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMetasploitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMetasploitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMicrosoftCvrfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMicrosoftCVRFPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMicrosoftCvrfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMicrosoftCvrfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMicrosoftKbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMicrosoftKbPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMicrosoftKbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMicrosoftKbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMikrotikResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMikrotikPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMikrotikResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMikrotikResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMindrayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMindrayPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMindrayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMindrayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMispThreatActorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMispValuePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMispThreatActorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMispThreatActorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMitelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitreAttackCveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiMitreAttackToCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitreAttackCveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitreAttackCveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitreCvelistV5Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMitreCVEListV5PaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitreCvelistV5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitreCvelistV5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitsubishiElectricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMitsubishiElectricAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitsubishiElectricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitsubishiElectricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMongodbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMongoDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMongodbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMongodbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMoxaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMoxaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMoxaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMoxaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMozillaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMozillaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMozillaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMozillaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNaverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNaverPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNaverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNaverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNcscResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNCSCPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNcscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNcscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNcscCvesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNCSCCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNcscCvesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNcscCvesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNECPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetappResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNetAppPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetappResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetappResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetgateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNetgatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetgateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetgateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetgearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNetgearPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetgearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetgearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetskopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNetskopePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetskopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetskopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNginxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNginxAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNginxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNginxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNhsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNHSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNhsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNhsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNIPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNistNvdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiCveItemsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNistNvdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNistNvdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNistNvd2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiNVD20CVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNistNvd2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNistNvd2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNistNvd2CpematchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiNVD20CPEMatchPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNistNvd2CpematchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNistNvd2CpematchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNodeSecurityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNodeSecurityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNodeSecurityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNodeSecurityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNodejsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNodeJSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNodejsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNodejsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNokiaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNokiaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNokiaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNokiaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNozomiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNozomiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNozomiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNozomiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNpmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNpmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNpmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNTPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNugetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNugetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNugetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNvidiaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySecurityBulletinPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNvidiaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNvidiaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNzAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryNZAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNzAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNzAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOctopusDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOctopusDeployPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOctopusDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOctopusDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOktaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOktaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOktaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOktaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOmronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOmronPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOmronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOmronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOneEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOneEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOneEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOneEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenCvdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOpenCVDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenCvdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenCvdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenbsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOpenBSDPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenbsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenbsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpensshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOpenSSHPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpensshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpensshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpensslSecadvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOpenSSLSecAdvPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpensslSecadvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpensslSecadvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenstackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOpenStackPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenstackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenstackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenwrtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWRTPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenwrtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenwrtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOracleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryMetaDataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOracleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOracleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOracleCpuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOracleCPUPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOracleCpuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOracleCpuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOracleCpuCsafResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOracleCPUCSAFPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOracleCpuCsafResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOracleCpuCsafResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOSVPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOtrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOTRSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOtrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOtrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOwncloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryOwnCloudPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOwncloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOwncloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPalantirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPalantirPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPalantirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPalantirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPaloAltoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPaloAltoAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPaloAltoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPaloAltoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPanasonicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPanasonicPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPanasonicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPanasonicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPapercutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPaperCutPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPapercutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPapercutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPegaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPegaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPegaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPegaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPhilipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPhilipsAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPhilipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPhilipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPhoenixContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPhoenixContactAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPhoenixContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPhoenixContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPhpMyAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPHPMyAdminPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPhpMyAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPhpMyAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPostgressqlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPostgresSQLPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPostgressqlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPostgressqlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPowerdnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPowerDNSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPowerdnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPowerdnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryProgressPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexProofpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryProofpointPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexProofpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexProofpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPtcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPTCPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPtcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPtcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPureStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPureStoragePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPureStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPureStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPypaAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryPyPAAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPypaAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPypaAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPypiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPypiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPypiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQnapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryQNAPAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQnapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQnapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQualcommResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryQualcommPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQualcommResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQualcommResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQualysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryQualysPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQualysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQualysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQubesQsbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryQSBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQubesQsbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQubesQsbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRansomwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRansomwareExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRansomwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRansomwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRedhatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRedhatCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRedhatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRedhatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRenesasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRenesasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRenesasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRenesasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexReviveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRevivePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexReviveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexReviveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRockwellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRockwellPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRockwellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRockwellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRockyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRockyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRockyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRockyErrataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRockyErrataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRockyErrataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRockyErrataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRuckusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRuckusPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRuckusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRuckusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRustsecAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryRustsecAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRustsecAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRustsecAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSacertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySAAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSacertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSacertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSaintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySaintExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSaintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSaintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSalesforceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySalesForcePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSalesforceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSalesforceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSambaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySambaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSambaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSambaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySAPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSchneiderElectricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySchneiderElectricAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSchneiderElectricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSchneiderElectricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSecConsultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySECConsultPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSecConsultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSecConsultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSecuritylabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySecurityLabPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSecuritylabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSecuritylabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSeebugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySeebugExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSeebugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSeebugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSentineloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySentinelOnePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSentineloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSentineloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexServicenowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryServiceNowPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexServicenowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexServicenowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexShadowserverExploitedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryShadowServerExploitedVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexShadowserverExploitedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexShadowserverExploitedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexShielderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryShielderPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexShielderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexShielderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySickPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSiemensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySiemensAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSiemensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSiemensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSierraWirelessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySierraWirelessPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSierraWirelessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSierraWirelessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSigmaRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySigmaRulePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSigmaRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSigmaRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSingcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySingCertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSingcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSingcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSlackwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySlackwarePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSlackwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSlackwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSolarwindsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySolarWindsAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSolarwindsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSolarwindsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSolrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySolrPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSolrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSolrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSonicwallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySonicWallAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSonicwallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSonicwallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSpacelabsHealthcareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySpacelabsHealthcareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSpacelabsHealthcareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSpacelabsHealthcareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSplunkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySplunkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSplunkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSplunkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSpringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySpringPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSpringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSpringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySSDAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexStormshieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryStormshieldPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexStormshieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexStormshieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexStrykerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryStrykerAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexStrykerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexStrykerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSudoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySudoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSudoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSudoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSuseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryCvrfPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSuseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSuseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSwiftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSwiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSwiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSwisslogHealthcareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySwisslogHealthcareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSwisslogHealthcareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSwisslogHealthcareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSymfonyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySymfonyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSymfonyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSymfonyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSynacktivResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySynacktivPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSynacktivResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSynacktivResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSyncrosoftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySyncroSoftPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSyncrosoftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSyncrosoftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSynologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisorySynologyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSynologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSynologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTeamviewerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTeamViewerPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTeamviewerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTeamviewerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTenableResearchAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTenableResearchAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTenableResearchAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTenableResearchAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTencentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTencentPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTencentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTencentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexThalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryThalesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexThalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexThalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexThemissinglinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTheMissingLinkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexThemissinglinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexThemissinglinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexThreatActorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryThreatActorWithExternalObjectsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexThreatActorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexThreatActorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTIPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTibcoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTibcoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTibcoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTibcoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTpLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTPLinkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTpLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTpLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTraneTechnologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTraneTechnologyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTraneTechnologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTraneTechnologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTrendmicroResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTrendMicroPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTrendmicroResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTrendmicroResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTrustwaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTrustwavePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTrustwaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTrustwaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTwcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryTWCertAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTwcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTwcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUbiquitiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUbiquitiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUbiquitiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUbiquitiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUbuntuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUbuntuCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUbuntuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUbuntuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUnifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUnifyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUnifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUnifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUnisocResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUnisocPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUnisocResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUnisocResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUSDPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUsomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryUSOMAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUsomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUsomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVandykeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVanDykePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVandykeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVandykeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVapidlabsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVapidLabsAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVapidlabsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVapidlabsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVcCpeDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVCCPEDictionaryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVcCpeDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVcCpeDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVdeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVDEAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVdeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVdeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVeeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVeeamPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVeeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVeeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVeritasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVeritasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVeritasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVeritasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVMWareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVoidsecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVoidSecPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVoidsecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVoidsecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVulnCheckPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVulnCheckConfigPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckCvelistV5Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVulnCheckCVEListV5PaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckCvelistV5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckCvelistV5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckKevResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVulnCheckKEVPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckKevResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckKevResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckNvdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiCveItemsExtendedPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckNvdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckNvdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckNvd2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiNVD20CVEExtendedPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckNvd2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckNvd2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulnerabilityAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayApiVulnerabilityAliasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulnerabilityAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulnerabilityAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulnrichmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVulnrichmentPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulnrichmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulnrichmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVyaireResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryVYAIREAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVyaireResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVyaireResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWatchguardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWatchGuardPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWatchguardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWatchguardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWhatsappResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWhatsAppPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWhatsappResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWhatsappResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWibuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWibuPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWibuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWibuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWiresharkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWiresharkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWiresharkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWiresharkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWithSecureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWithSecurePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWithSecureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWithSecureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWolfiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWolfiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWolfiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWolfiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWolfsslResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWolfSSLPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWolfsslResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWolfsslResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWordfenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryWordfencePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWordfenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWordfenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryXenPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXeroxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryXeroxPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXeroxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXeroxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXiaomiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryXiaomiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXiaomiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXiaomiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXylemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryXylemPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXylemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXylemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexYokogawaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryYokogawaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexYokogawaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexYokogawaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexYubicoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryYubicoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexYubicoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexYubicoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZdiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZeroDayAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZdiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZdiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZebraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZebraPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZebraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZebraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZeroscienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZeroScienceAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZeroscienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZeroscienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZimbraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZimbraPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZimbraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZimbraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZoomPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZscalerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZscalerPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZscalerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZscalerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZusoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZusoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZusoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZusoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZyxelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataArrayAdvisoryZyxelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZyxelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZyxelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenapiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetOpenapiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPdnsVulncheckC2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetPdnsVulncheckC2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPdnsVulncheckC2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPurlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RenderResponseWithMetadataV3controllersPurlResponseDataV3controllersPurlResponseMetadata
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetPurlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPurlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesInitialAccessTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetRulesInitialAccessTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesInitialAccessTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsVulncheckC2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetTagsVulncheckC2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsVulncheckC2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBackupWithResponse request returning *GetBackupResponse
func (c *ClientWithResponses) GetBackupWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBackupResponse, error) {
	rsp, err := c.GetBackup(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupResponse(rsp)
}

// GetBackupIndexWithResponse request returning *GetBackupIndexResponse
func (c *ClientWithResponses) GetBackupIndexWithResponse(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*GetBackupIndexResponse, error) {
	rsp, err := c.GetBackupIndex(ctx, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupIndexResponse(rsp)
}

// GetCpeWithResponse request returning *GetCpeResponse
func (c *ClientWithResponses) GetCpeWithResponse(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*GetCpeResponse, error) {
	rsp, err := c.GetCpe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCpeResponse(rsp)
}

// GetEntitlementsWithResponse request returning *GetEntitlementsResponse
func (c *ClientWithResponses) GetEntitlementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEntitlementsResponse, error) {
	rsp, err := c.GetEntitlements(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntitlementsResponse(rsp)
}

// GetIndexWithResponse request returning *GetIndexResponse
func (c *ClientWithResponses) GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error) {
	rsp, err := c.GetIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexResponse(rsp)
}

// GetIndexA10WithBodyWithResponse request with arbitrary body returning *GetIndexA10Response
func (c *ClientWithResponses) GetIndexA10WithBodyWithResponse(ctx context.Context, params *GetIndexA10Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error) {
	rsp, err := c.GetIndexA10WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexA10Response(rsp)
}

func (c *ClientWithResponses) GetIndexA10WithResponse(ctx context.Context, params *GetIndexA10Params, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error) {
	rsp, err := c.GetIndexA10(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexA10Response(rsp)
}

// GetIndexAbbWithBodyWithResponse request with arbitrary body returning *GetIndexAbbResponse
func (c *ClientWithResponses) GetIndexAbbWithBodyWithResponse(ctx context.Context, params *GetIndexAbbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error) {
	rsp, err := c.GetIndexAbbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAbbWithResponse(ctx context.Context, params *GetIndexAbbParams, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error) {
	rsp, err := c.GetIndexAbb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbResponse(rsp)
}

// GetIndexAbbottWithBodyWithResponse request with arbitrary body returning *GetIndexAbbottResponse
func (c *ClientWithResponses) GetIndexAbbottWithBodyWithResponse(ctx context.Context, params *GetIndexAbbottParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error) {
	rsp, err := c.GetIndexAbbottWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbottResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAbbottWithResponse(ctx context.Context, params *GetIndexAbbottParams, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error) {
	rsp, err := c.GetIndexAbbott(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbottResponse(rsp)
}

// GetIndexAbsoluteWithBodyWithResponse request with arbitrary body returning *GetIndexAbsoluteResponse
func (c *ClientWithResponses) GetIndexAbsoluteWithBodyWithResponse(ctx context.Context, params *GetIndexAbsoluteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error) {
	rsp, err := c.GetIndexAbsoluteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbsoluteResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAbsoluteWithResponse(ctx context.Context, params *GetIndexAbsoluteParams, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error) {
	rsp, err := c.GetIndexAbsolute(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbsoluteResponse(rsp)
}

// GetIndexAcronisWithBodyWithResponse request with arbitrary body returning *GetIndexAcronisResponse
func (c *ClientWithResponses) GetIndexAcronisWithBodyWithResponse(ctx context.Context, params *GetIndexAcronisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error) {
	rsp, err := c.GetIndexAcronisWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAcronisResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAcronisWithResponse(ctx context.Context, params *GetIndexAcronisParams, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error) {
	rsp, err := c.GetIndexAcronis(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAcronisResponse(rsp)
}

// GetIndexAdobeWithBodyWithResponse request with arbitrary body returning *GetIndexAdobeResponse
func (c *ClientWithResponses) GetIndexAdobeWithBodyWithResponse(ctx context.Context, params *GetIndexAdobeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error) {
	rsp, err := c.GetIndexAdobeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdobeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAdobeWithResponse(ctx context.Context, params *GetIndexAdobeParams, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error) {
	rsp, err := c.GetIndexAdobe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdobeResponse(rsp)
}

// GetIndexAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexAdvisoriesResponse
func (c *ClientWithResponses) GetIndexAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error) {
	rsp, err := c.GetIndexAdvisoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAdvisoriesWithResponse(ctx context.Context, params *GetIndexAdvisoriesParams, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error) {
	rsp, err := c.GetIndexAdvisories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdvisoriesResponse(rsp)
}

// GetIndexAlephResearchWithBodyWithResponse request with arbitrary body returning *GetIndexAlephResearchResponse
func (c *ClientWithResponses) GetIndexAlephResearchWithBodyWithResponse(ctx context.Context, params *GetIndexAlephResearchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error) {
	rsp, err := c.GetIndexAlephResearchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlephResearchResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAlephResearchWithResponse(ctx context.Context, params *GetIndexAlephResearchParams, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error) {
	rsp, err := c.GetIndexAlephResearch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlephResearchResponse(rsp)
}

// GetIndexAlmaWithBodyWithResponse request with arbitrary body returning *GetIndexAlmaResponse
func (c *ClientWithResponses) GetIndexAlmaWithBodyWithResponse(ctx context.Context, params *GetIndexAlmaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error) {
	rsp, err := c.GetIndexAlmaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlmaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAlmaWithResponse(ctx context.Context, params *GetIndexAlmaParams, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error) {
	rsp, err := c.GetIndexAlma(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlmaResponse(rsp)
}

// GetIndexAlpineWithBodyWithResponse request with arbitrary body returning *GetIndexAlpineResponse
func (c *ClientWithResponses) GetIndexAlpineWithBodyWithResponse(ctx context.Context, params *GetIndexAlpineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error) {
	rsp, err := c.GetIndexAlpineWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlpineResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAlpineWithResponse(ctx context.Context, params *GetIndexAlpineParams, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error) {
	rsp, err := c.GetIndexAlpine(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlpineResponse(rsp)
}

// GetIndexAmazonWithBodyWithResponse request with arbitrary body returning *GetIndexAmazonResponse
func (c *ClientWithResponses) GetIndexAmazonWithBodyWithResponse(ctx context.Context, params *GetIndexAmazonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error) {
	rsp, err := c.GetIndexAmazonWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmazonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAmazonWithResponse(ctx context.Context, params *GetIndexAmazonParams, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error) {
	rsp, err := c.GetIndexAmazon(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmazonResponse(rsp)
}

// GetIndexAmdWithBodyWithResponse request with arbitrary body returning *GetIndexAmdResponse
func (c *ClientWithResponses) GetIndexAmdWithBodyWithResponse(ctx context.Context, params *GetIndexAmdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error) {
	rsp, err := c.GetIndexAmdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAmdWithResponse(ctx context.Context, params *GetIndexAmdParams, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error) {
	rsp, err := c.GetIndexAmd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmdResponse(rsp)
}

// GetIndexAmiWithBodyWithResponse request with arbitrary body returning *GetIndexAmiResponse
func (c *ClientWithResponses) GetIndexAmiWithBodyWithResponse(ctx context.Context, params *GetIndexAmiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error) {
	rsp, err := c.GetIndexAmiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAmiWithResponse(ctx context.Context, params *GetIndexAmiParams, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error) {
	rsp, err := c.GetIndexAmi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmiResponse(rsp)
}

// GetIndexAnchoreNvdOverrideWithBodyWithResponse request with arbitrary body returning *GetIndexAnchoreNvdOverrideResponse
func (c *ClientWithResponses) GetIndexAnchoreNvdOverrideWithBodyWithResponse(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error) {
	rsp, err := c.GetIndexAnchoreNvdOverrideWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAnchoreNvdOverrideResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAnchoreNvdOverrideWithResponse(ctx context.Context, params *GetIndexAnchoreNvdOverrideParams, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error) {
	rsp, err := c.GetIndexAnchoreNvdOverride(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAnchoreNvdOverrideResponse(rsp)
}

// GetIndexAndroidWithBodyWithResponse request with arbitrary body returning *GetIndexAndroidResponse
func (c *ClientWithResponses) GetIndexAndroidWithBodyWithResponse(ctx context.Context, params *GetIndexAndroidParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error) {
	rsp, err := c.GetIndexAndroidWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAndroidResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAndroidWithResponse(ctx context.Context, params *GetIndexAndroidParams, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error) {
	rsp, err := c.GetIndexAndroid(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAndroidResponse(rsp)
}

// GetIndexApacheActivemqWithBodyWithResponse request with arbitrary body returning *GetIndexApacheActivemqResponse
func (c *ClientWithResponses) GetIndexApacheActivemqWithBodyWithResponse(ctx context.Context, params *GetIndexApacheActivemqParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error) {
	rsp, err := c.GetIndexApacheActivemqWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheActivemqResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheActivemqWithResponse(ctx context.Context, params *GetIndexApacheActivemqParams, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error) {
	rsp, err := c.GetIndexApacheActivemq(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheActivemqResponse(rsp)
}

// GetIndexApacheArchivaWithBodyWithResponse request with arbitrary body returning *GetIndexApacheArchivaResponse
func (c *ClientWithResponses) GetIndexApacheArchivaWithBodyWithResponse(ctx context.Context, params *GetIndexApacheArchivaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error) {
	rsp, err := c.GetIndexApacheArchivaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArchivaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheArchivaWithResponse(ctx context.Context, params *GetIndexApacheArchivaParams, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error) {
	rsp, err := c.GetIndexApacheArchiva(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArchivaResponse(rsp)
}

// GetIndexApacheArrowWithBodyWithResponse request with arbitrary body returning *GetIndexApacheArrowResponse
func (c *ClientWithResponses) GetIndexApacheArrowWithBodyWithResponse(ctx context.Context, params *GetIndexApacheArrowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error) {
	rsp, err := c.GetIndexApacheArrowWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArrowResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheArrowWithResponse(ctx context.Context, params *GetIndexApacheArrowParams, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error) {
	rsp, err := c.GetIndexApacheArrow(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArrowResponse(rsp)
}

// GetIndexApacheCamelWithBodyWithResponse request with arbitrary body returning *GetIndexApacheCamelResponse
func (c *ClientWithResponses) GetIndexApacheCamelWithBodyWithResponse(ctx context.Context, params *GetIndexApacheCamelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error) {
	rsp, err := c.GetIndexApacheCamelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCamelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheCamelWithResponse(ctx context.Context, params *GetIndexApacheCamelParams, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error) {
	rsp, err := c.GetIndexApacheCamel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCamelResponse(rsp)
}

// GetIndexApacheCommonsWithBodyWithResponse request with arbitrary body returning *GetIndexApacheCommonsResponse
func (c *ClientWithResponses) GetIndexApacheCommonsWithBodyWithResponse(ctx context.Context, params *GetIndexApacheCommonsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error) {
	rsp, err := c.GetIndexApacheCommonsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCommonsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheCommonsWithResponse(ctx context.Context, params *GetIndexApacheCommonsParams, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error) {
	rsp, err := c.GetIndexApacheCommons(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCommonsResponse(rsp)
}

// GetIndexApacheCouchdbWithBodyWithResponse request with arbitrary body returning *GetIndexApacheCouchdbResponse
func (c *ClientWithResponses) GetIndexApacheCouchdbWithBodyWithResponse(ctx context.Context, params *GetIndexApacheCouchdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error) {
	rsp, err := c.GetIndexApacheCouchdbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCouchdbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheCouchdbWithResponse(ctx context.Context, params *GetIndexApacheCouchdbParams, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error) {
	rsp, err := c.GetIndexApacheCouchdb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCouchdbResponse(rsp)
}

// GetIndexApacheFlinkWithBodyWithResponse request with arbitrary body returning *GetIndexApacheFlinkResponse
func (c *ClientWithResponses) GetIndexApacheFlinkWithBodyWithResponse(ctx context.Context, params *GetIndexApacheFlinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error) {
	rsp, err := c.GetIndexApacheFlinkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheFlinkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheFlinkWithResponse(ctx context.Context, params *GetIndexApacheFlinkParams, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error) {
	rsp, err := c.GetIndexApacheFlink(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheFlinkResponse(rsp)
}

// GetIndexApacheGuacamoleWithBodyWithResponse request with arbitrary body returning *GetIndexApacheGuacamoleResponse
func (c *ClientWithResponses) GetIndexApacheGuacamoleWithBodyWithResponse(ctx context.Context, params *GetIndexApacheGuacamoleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error) {
	rsp, err := c.GetIndexApacheGuacamoleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheGuacamoleResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheGuacamoleWithResponse(ctx context.Context, params *GetIndexApacheGuacamoleParams, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error) {
	rsp, err := c.GetIndexApacheGuacamole(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheGuacamoleResponse(rsp)
}

// GetIndexApacheHadoopWithBodyWithResponse request with arbitrary body returning *GetIndexApacheHadoopResponse
func (c *ClientWithResponses) GetIndexApacheHadoopWithBodyWithResponse(ctx context.Context, params *GetIndexApacheHadoopParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error) {
	rsp, err := c.GetIndexApacheHadoopWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHadoopResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheHadoopWithResponse(ctx context.Context, params *GetIndexApacheHadoopParams, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error) {
	rsp, err := c.GetIndexApacheHadoop(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHadoopResponse(rsp)
}

// GetIndexApacheHttpWithBodyWithResponse request with arbitrary body returning *GetIndexApacheHttpResponse
func (c *ClientWithResponses) GetIndexApacheHttpWithBodyWithResponse(ctx context.Context, params *GetIndexApacheHttpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error) {
	rsp, err := c.GetIndexApacheHttpWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHttpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheHttpWithResponse(ctx context.Context, params *GetIndexApacheHttpParams, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error) {
	rsp, err := c.GetIndexApacheHttp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHttpResponse(rsp)
}

// GetIndexApacheJspwikiWithBodyWithResponse request with arbitrary body returning *GetIndexApacheJspwikiResponse
func (c *ClientWithResponses) GetIndexApacheJspwikiWithBodyWithResponse(ctx context.Context, params *GetIndexApacheJspwikiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error) {
	rsp, err := c.GetIndexApacheJspwikiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheJspwikiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheJspwikiWithResponse(ctx context.Context, params *GetIndexApacheJspwikiParams, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error) {
	rsp, err := c.GetIndexApacheJspwiki(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheJspwikiResponse(rsp)
}

// GetIndexApacheKafkaWithBodyWithResponse request with arbitrary body returning *GetIndexApacheKafkaResponse
func (c *ClientWithResponses) GetIndexApacheKafkaWithBodyWithResponse(ctx context.Context, params *GetIndexApacheKafkaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error) {
	rsp, err := c.GetIndexApacheKafkaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheKafkaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheKafkaWithResponse(ctx context.Context, params *GetIndexApacheKafkaParams, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error) {
	rsp, err := c.GetIndexApacheKafka(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheKafkaResponse(rsp)
}

// GetIndexApacheLoggingservicesWithBodyWithResponse request with arbitrary body returning *GetIndexApacheLoggingservicesResponse
func (c *ClientWithResponses) GetIndexApacheLoggingservicesWithBodyWithResponse(ctx context.Context, params *GetIndexApacheLoggingservicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error) {
	rsp, err := c.GetIndexApacheLoggingservicesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheLoggingservicesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheLoggingservicesWithResponse(ctx context.Context, params *GetIndexApacheLoggingservicesParams, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error) {
	rsp, err := c.GetIndexApacheLoggingservices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheLoggingservicesResponse(rsp)
}

// GetIndexApacheNifiWithBodyWithResponse request with arbitrary body returning *GetIndexApacheNifiResponse
func (c *ClientWithResponses) GetIndexApacheNifiWithBodyWithResponse(ctx context.Context, params *GetIndexApacheNifiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error) {
	rsp, err := c.GetIndexApacheNifiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheNifiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheNifiWithResponse(ctx context.Context, params *GetIndexApacheNifiParams, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error) {
	rsp, err := c.GetIndexApacheNifi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheNifiResponse(rsp)
}

// GetIndexApacheOfbizWithBodyWithResponse request with arbitrary body returning *GetIndexApacheOfbizResponse
func (c *ClientWithResponses) GetIndexApacheOfbizWithBodyWithResponse(ctx context.Context, params *GetIndexApacheOfbizParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error) {
	rsp, err := c.GetIndexApacheOfbizWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOfbizResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheOfbizWithResponse(ctx context.Context, params *GetIndexApacheOfbizParams, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error) {
	rsp, err := c.GetIndexApacheOfbiz(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOfbizResponse(rsp)
}

// GetIndexApacheOpenmeetingsWithBodyWithResponse request with arbitrary body returning *GetIndexApacheOpenmeetingsResponse
func (c *ClientWithResponses) GetIndexApacheOpenmeetingsWithBodyWithResponse(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error) {
	rsp, err := c.GetIndexApacheOpenmeetingsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenmeetingsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheOpenmeetingsWithResponse(ctx context.Context, params *GetIndexApacheOpenmeetingsParams, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error) {
	rsp, err := c.GetIndexApacheOpenmeetings(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenmeetingsResponse(rsp)
}

// GetIndexApacheOpenofficeWithBodyWithResponse request with arbitrary body returning *GetIndexApacheOpenofficeResponse
func (c *ClientWithResponses) GetIndexApacheOpenofficeWithBodyWithResponse(ctx context.Context, params *GetIndexApacheOpenofficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error) {
	rsp, err := c.GetIndexApacheOpenofficeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenofficeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheOpenofficeWithResponse(ctx context.Context, params *GetIndexApacheOpenofficeParams, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error) {
	rsp, err := c.GetIndexApacheOpenoffice(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenofficeResponse(rsp)
}

// GetIndexApachePulsarWithBodyWithResponse request with arbitrary body returning *GetIndexApachePulsarResponse
func (c *ClientWithResponses) GetIndexApachePulsarWithBodyWithResponse(ctx context.Context, params *GetIndexApachePulsarParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error) {
	rsp, err := c.GetIndexApachePulsarWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApachePulsarResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApachePulsarWithResponse(ctx context.Context, params *GetIndexApachePulsarParams, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error) {
	rsp, err := c.GetIndexApachePulsar(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApachePulsarResponse(rsp)
}

// GetIndexApacheShiroWithBodyWithResponse request with arbitrary body returning *GetIndexApacheShiroResponse
func (c *ClientWithResponses) GetIndexApacheShiroWithBodyWithResponse(ctx context.Context, params *GetIndexApacheShiroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error) {
	rsp, err := c.GetIndexApacheShiroWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheShiroResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheShiroWithResponse(ctx context.Context, params *GetIndexApacheShiroParams, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error) {
	rsp, err := c.GetIndexApacheShiro(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheShiroResponse(rsp)
}

// GetIndexApacheSparkWithBodyWithResponse request with arbitrary body returning *GetIndexApacheSparkResponse
func (c *ClientWithResponses) GetIndexApacheSparkWithBodyWithResponse(ctx context.Context, params *GetIndexApacheSparkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error) {
	rsp, err := c.GetIndexApacheSparkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSparkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheSparkWithResponse(ctx context.Context, params *GetIndexApacheSparkParams, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error) {
	rsp, err := c.GetIndexApacheSpark(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSparkResponse(rsp)
}

// GetIndexApacheStrutsWithBodyWithResponse request with arbitrary body returning *GetIndexApacheStrutsResponse
func (c *ClientWithResponses) GetIndexApacheStrutsWithBodyWithResponse(ctx context.Context, params *GetIndexApacheStrutsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error) {
	rsp, err := c.GetIndexApacheStrutsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheStrutsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheStrutsWithResponse(ctx context.Context, params *GetIndexApacheStrutsParams, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error) {
	rsp, err := c.GetIndexApacheStruts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheStrutsResponse(rsp)
}

// GetIndexApacheSubversionWithBodyWithResponse request with arbitrary body returning *GetIndexApacheSubversionResponse
func (c *ClientWithResponses) GetIndexApacheSubversionWithBodyWithResponse(ctx context.Context, params *GetIndexApacheSubversionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error) {
	rsp, err := c.GetIndexApacheSubversionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSubversionResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheSubversionWithResponse(ctx context.Context, params *GetIndexApacheSubversionParams, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error) {
	rsp, err := c.GetIndexApacheSubversion(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSubversionResponse(rsp)
}

// GetIndexApacheSupersetWithBodyWithResponse request with arbitrary body returning *GetIndexApacheSupersetResponse
func (c *ClientWithResponses) GetIndexApacheSupersetWithBodyWithResponse(ctx context.Context, params *GetIndexApacheSupersetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error) {
	rsp, err := c.GetIndexApacheSupersetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSupersetResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheSupersetWithResponse(ctx context.Context, params *GetIndexApacheSupersetParams, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error) {
	rsp, err := c.GetIndexApacheSuperset(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSupersetResponse(rsp)
}

// GetIndexApacheTomcatWithBodyWithResponse request with arbitrary body returning *GetIndexApacheTomcatResponse
func (c *ClientWithResponses) GetIndexApacheTomcatWithBodyWithResponse(ctx context.Context, params *GetIndexApacheTomcatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error) {
	rsp, err := c.GetIndexApacheTomcatWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheTomcatResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheTomcatWithResponse(ctx context.Context, params *GetIndexApacheTomcatParams, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error) {
	rsp, err := c.GetIndexApacheTomcat(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheTomcatResponse(rsp)
}

// GetIndexApacheZookeeperWithBodyWithResponse request with arbitrary body returning *GetIndexApacheZookeeperResponse
func (c *ClientWithResponses) GetIndexApacheZookeeperWithBodyWithResponse(ctx context.Context, params *GetIndexApacheZookeeperParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error) {
	rsp, err := c.GetIndexApacheZookeeperWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheZookeeperResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheZookeeperWithResponse(ctx context.Context, params *GetIndexApacheZookeeperParams, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error) {
	rsp, err := c.GetIndexApacheZookeeper(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheZookeeperResponse(rsp)
}

// GetIndexAppcheckWithBodyWithResponse request with arbitrary body returning *GetIndexAppcheckResponse
func (c *ClientWithResponses) GetIndexAppcheckWithBodyWithResponse(ctx context.Context, params *GetIndexAppcheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error) {
	rsp, err := c.GetIndexAppcheckWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppcheckResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAppcheckWithResponse(ctx context.Context, params *GetIndexAppcheckParams, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error) {
	rsp, err := c.GetIndexAppcheck(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppcheckResponse(rsp)
}

// GetIndexAppgateWithBodyWithResponse request with arbitrary body returning *GetIndexAppgateResponse
func (c *ClientWithResponses) GetIndexAppgateWithBodyWithResponse(ctx context.Context, params *GetIndexAppgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error) {
	rsp, err := c.GetIndexAppgateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppgateResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAppgateWithResponse(ctx context.Context, params *GetIndexAppgateParams, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error) {
	rsp, err := c.GetIndexAppgate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppgateResponse(rsp)
}

// GetIndexAppleWithBodyWithResponse request with arbitrary body returning *GetIndexAppleResponse
func (c *ClientWithResponses) GetIndexAppleWithBodyWithResponse(ctx context.Context, params *GetIndexAppleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error) {
	rsp, err := c.GetIndexAppleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppleResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAppleWithResponse(ctx context.Context, params *GetIndexAppleParams, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error) {
	rsp, err := c.GetIndexApple(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppleResponse(rsp)
}

// GetIndexArchWithBodyWithResponse request with arbitrary body returning *GetIndexArchResponse
func (c *ClientWithResponses) GetIndexArchWithBodyWithResponse(ctx context.Context, params *GetIndexArchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error) {
	rsp, err := c.GetIndexArchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArchResponse(rsp)
}

func (c *ClientWithResponses) GetIndexArchWithResponse(ctx context.Context, params *GetIndexArchParams, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error) {
	rsp, err := c.GetIndexArch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArchResponse(rsp)
}

// GetIndexAristaWithBodyWithResponse request with arbitrary body returning *GetIndexAristaResponse
func (c *ClientWithResponses) GetIndexAristaWithBodyWithResponse(ctx context.Context, params *GetIndexAristaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error) {
	rsp, err := c.GetIndexAristaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAristaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAristaWithResponse(ctx context.Context, params *GetIndexAristaParams, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error) {
	rsp, err := c.GetIndexArista(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAristaResponse(rsp)
}

// GetIndexArubaWithBodyWithResponse request with arbitrary body returning *GetIndexArubaResponse
func (c *ClientWithResponses) GetIndexArubaWithBodyWithResponse(ctx context.Context, params *GetIndexArubaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error) {
	rsp, err := c.GetIndexArubaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArubaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexArubaWithResponse(ctx context.Context, params *GetIndexArubaParams, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error) {
	rsp, err := c.GetIndexAruba(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArubaResponse(rsp)
}

// GetIndexAsrgWithBodyWithResponse request with arbitrary body returning *GetIndexAsrgResponse
func (c *ClientWithResponses) GetIndexAsrgWithBodyWithResponse(ctx context.Context, params *GetIndexAsrgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error) {
	rsp, err := c.GetIndexAsrgWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsrgResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAsrgWithResponse(ctx context.Context, params *GetIndexAsrgParams, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error) {
	rsp, err := c.GetIndexAsrg(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsrgResponse(rsp)
}

// GetIndexAssetnoteWithBodyWithResponse request with arbitrary body returning *GetIndexAssetnoteResponse
func (c *ClientWithResponses) GetIndexAssetnoteWithBodyWithResponse(ctx context.Context, params *GetIndexAssetnoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error) {
	rsp, err := c.GetIndexAssetnoteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAssetnoteResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAssetnoteWithResponse(ctx context.Context, params *GetIndexAssetnoteParams, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error) {
	rsp, err := c.GetIndexAssetnote(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAssetnoteResponse(rsp)
}

// GetIndexAsteriskWithBodyWithResponse request with arbitrary body returning *GetIndexAsteriskResponse
func (c *ClientWithResponses) GetIndexAsteriskWithBodyWithResponse(ctx context.Context, params *GetIndexAsteriskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error) {
	rsp, err := c.GetIndexAsteriskWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsteriskResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAsteriskWithResponse(ctx context.Context, params *GetIndexAsteriskParams, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error) {
	rsp, err := c.GetIndexAsterisk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsteriskResponse(rsp)
}

// GetIndexAsusWithBodyWithResponse request with arbitrary body returning *GetIndexAsusResponse
func (c *ClientWithResponses) GetIndexAsusWithBodyWithResponse(ctx context.Context, params *GetIndexAsusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error) {
	rsp, err := c.GetIndexAsusWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsusResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAsusWithResponse(ctx context.Context, params *GetIndexAsusParams, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error) {
	rsp, err := c.GetIndexAsus(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsusResponse(rsp)
}

// GetIndexAtlassianWithBodyWithResponse request with arbitrary body returning *GetIndexAtlassianResponse
func (c *ClientWithResponses) GetIndexAtlassianWithBodyWithResponse(ctx context.Context, params *GetIndexAtlassianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error) {
	rsp, err := c.GetIndexAtlassianWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAtlassianWithResponse(ctx context.Context, params *GetIndexAtlassianParams, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error) {
	rsp, err := c.GetIndexAtlassian(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianResponse(rsp)
}

// GetIndexAtlassianVulnsWithBodyWithResponse request with arbitrary body returning *GetIndexAtlassianVulnsResponse
func (c *ClientWithResponses) GetIndexAtlassianVulnsWithBodyWithResponse(ctx context.Context, params *GetIndexAtlassianVulnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error) {
	rsp, err := c.GetIndexAtlassianVulnsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianVulnsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAtlassianVulnsWithResponse(ctx context.Context, params *GetIndexAtlassianVulnsParams, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error) {
	rsp, err := c.GetIndexAtlassianVulns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianVulnsResponse(rsp)
}

// GetIndexAtredisWithBodyWithResponse request with arbitrary body returning *GetIndexAtredisResponse
func (c *ClientWithResponses) GetIndexAtredisWithBodyWithResponse(ctx context.Context, params *GetIndexAtredisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error) {
	rsp, err := c.GetIndexAtredisWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtredisResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAtredisWithResponse(ctx context.Context, params *GetIndexAtredisParams, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error) {
	rsp, err := c.GetIndexAtredis(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtredisResponse(rsp)
}

// GetIndexAuscertWithBodyWithResponse request with arbitrary body returning *GetIndexAuscertResponse
func (c *ClientWithResponses) GetIndexAuscertWithBodyWithResponse(ctx context.Context, params *GetIndexAuscertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error) {
	rsp, err := c.GetIndexAuscertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAuscertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAuscertWithResponse(ctx context.Context, params *GetIndexAuscertParams, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error) {
	rsp, err := c.GetIndexAuscert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAuscertResponse(rsp)
}

// GetIndexAutodeskWithBodyWithResponse request with arbitrary body returning *GetIndexAutodeskResponse
func (c *ClientWithResponses) GetIndexAutodeskWithBodyWithResponse(ctx context.Context, params *GetIndexAutodeskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error) {
	rsp, err := c.GetIndexAutodeskWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAutodeskResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAutodeskWithResponse(ctx context.Context, params *GetIndexAutodeskParams, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error) {
	rsp, err := c.GetIndexAutodesk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAutodeskResponse(rsp)
}

// GetIndexAvayaWithBodyWithResponse request with arbitrary body returning *GetIndexAvayaResponse
func (c *ClientWithResponses) GetIndexAvayaWithBodyWithResponse(ctx context.Context, params *GetIndexAvayaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error) {
	rsp, err := c.GetIndexAvayaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvayaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAvayaWithResponse(ctx context.Context, params *GetIndexAvayaParams, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error) {
	rsp, err := c.GetIndexAvaya(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvayaResponse(rsp)
}

// GetIndexAvevaWithBodyWithResponse request with arbitrary body returning *GetIndexAvevaResponse
func (c *ClientWithResponses) GetIndexAvevaWithBodyWithResponse(ctx context.Context, params *GetIndexAvevaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error) {
	rsp, err := c.GetIndexAvevaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvevaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAvevaWithResponse(ctx context.Context, params *GetIndexAvevaParams, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error) {
	rsp, err := c.GetIndexAveva(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvevaResponse(rsp)
}

// GetIndexAvigilonWithBodyWithResponse request with arbitrary body returning *GetIndexAvigilonResponse
func (c *ClientWithResponses) GetIndexAvigilonWithBodyWithResponse(ctx context.Context, params *GetIndexAvigilonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error) {
	rsp, err := c.GetIndexAvigilonWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvigilonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAvigilonWithResponse(ctx context.Context, params *GetIndexAvigilonParams, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error) {
	rsp, err := c.GetIndexAvigilon(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvigilonResponse(rsp)
}

// GetIndexAwsWithBodyWithResponse request with arbitrary body returning *GetIndexAwsResponse
func (c *ClientWithResponses) GetIndexAwsWithBodyWithResponse(ctx context.Context, params *GetIndexAwsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error) {
	rsp, err := c.GetIndexAwsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAwsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAwsWithResponse(ctx context.Context, params *GetIndexAwsParams, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error) {
	rsp, err := c.GetIndexAws(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAwsResponse(rsp)
}

// GetIndexAxisWithBodyWithResponse request with arbitrary body returning *GetIndexAxisResponse
func (c *ClientWithResponses) GetIndexAxisWithBodyWithResponse(ctx context.Context, params *GetIndexAxisParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error) {
	rsp, err := c.GetIndexAxisWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAxisResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAxisWithResponse(ctx context.Context, params *GetIndexAxisParams, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error) {
	rsp, err := c.GetIndexAxis(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAxisResponse(rsp)
}

// GetIndexAzulWithBodyWithResponse request with arbitrary body returning *GetIndexAzulResponse
func (c *ClientWithResponses) GetIndexAzulWithBodyWithResponse(ctx context.Context, params *GetIndexAzulParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAzulResponse, error) {
	rsp, err := c.GetIndexAzulWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAzulResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAzulWithResponse(ctx context.Context, params *GetIndexAzulParams, body GetIndexAzulJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAzulResponse, error) {
	rsp, err := c.GetIndexAzul(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAzulResponse(rsp)
}

// GetIndexBandrWithBodyWithResponse request with arbitrary body returning *GetIndexBandrResponse
func (c *ClientWithResponses) GetIndexBandrWithBodyWithResponse(ctx context.Context, params *GetIndexBandrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error) {
	rsp, err := c.GetIndexBandrWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBandrResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBandrWithResponse(ctx context.Context, params *GetIndexBandrParams, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error) {
	rsp, err := c.GetIndexBandr(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBandrResponse(rsp)
}

// GetIndexBaxterWithBodyWithResponse request with arbitrary body returning *GetIndexBaxterResponse
func (c *ClientWithResponses) GetIndexBaxterWithBodyWithResponse(ctx context.Context, params *GetIndexBaxterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error) {
	rsp, err := c.GetIndexBaxterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBaxterResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBaxterWithResponse(ctx context.Context, params *GetIndexBaxterParams, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error) {
	rsp, err := c.GetIndexBaxter(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBaxterResponse(rsp)
}

// GetIndexBbraunWithBodyWithResponse request with arbitrary body returning *GetIndexBbraunResponse
func (c *ClientWithResponses) GetIndexBbraunWithBodyWithResponse(ctx context.Context, params *GetIndexBbraunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error) {
	rsp, err := c.GetIndexBbraunWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBbraunResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBbraunWithResponse(ctx context.Context, params *GetIndexBbraunParams, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error) {
	rsp, err := c.GetIndexBbraun(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBbraunResponse(rsp)
}

// GetIndexBdWithBodyWithResponse request with arbitrary body returning *GetIndexBdResponse
func (c *ClientWithResponses) GetIndexBdWithBodyWithResponse(ctx context.Context, params *GetIndexBdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error) {
	rsp, err := c.GetIndexBdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBdWithResponse(ctx context.Context, params *GetIndexBdParams, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error) {
	rsp, err := c.GetIndexBd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBdResponse(rsp)
}

// GetIndexBduWithBodyWithResponse request with arbitrary body returning *GetIndexBduResponse
func (c *ClientWithResponses) GetIndexBduWithBodyWithResponse(ctx context.Context, params *GetIndexBduParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error) {
	rsp, err := c.GetIndexBduWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBduResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBduWithResponse(ctx context.Context, params *GetIndexBduParams, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error) {
	rsp, err := c.GetIndexBdu(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBduResponse(rsp)
}

// GetIndexBeckhoffWithBodyWithResponse request with arbitrary body returning *GetIndexBeckhoffResponse
func (c *ClientWithResponses) GetIndexBeckhoffWithBodyWithResponse(ctx context.Context, params *GetIndexBeckhoffParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error) {
	rsp, err := c.GetIndexBeckhoffWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeckhoffResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBeckhoffWithResponse(ctx context.Context, params *GetIndexBeckhoffParams, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error) {
	rsp, err := c.GetIndexBeckhoff(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeckhoffResponse(rsp)
}

// GetIndexBeldenWithBodyWithResponse request with arbitrary body returning *GetIndexBeldenResponse
func (c *ClientWithResponses) GetIndexBeldenWithBodyWithResponse(ctx context.Context, params *GetIndexBeldenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error) {
	rsp, err := c.GetIndexBeldenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeldenResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBeldenWithResponse(ctx context.Context, params *GetIndexBeldenParams, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error) {
	rsp, err := c.GetIndexBelden(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeldenResponse(rsp)
}

// GetIndexBeyondTrustWithBodyWithResponse request with arbitrary body returning *GetIndexBeyondTrustResponse
func (c *ClientWithResponses) GetIndexBeyondTrustWithBodyWithResponse(ctx context.Context, params *GetIndexBeyondTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error) {
	rsp, err := c.GetIndexBeyondTrustWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeyondTrustResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBeyondTrustWithResponse(ctx context.Context, params *GetIndexBeyondTrustParams, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error) {
	rsp, err := c.GetIndexBeyondTrust(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeyondTrustResponse(rsp)
}

// GetIndexBinarlyWithBodyWithResponse request with arbitrary body returning *GetIndexBinarlyResponse
func (c *ClientWithResponses) GetIndexBinarlyWithBodyWithResponse(ctx context.Context, params *GetIndexBinarlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error) {
	rsp, err := c.GetIndexBinarlyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBinarlyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBinarlyWithResponse(ctx context.Context, params *GetIndexBinarlyParams, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error) {
	rsp, err := c.GetIndexBinarly(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBinarlyResponse(rsp)
}

// GetIndexBitdefenderWithBodyWithResponse request with arbitrary body returning *GetIndexBitdefenderResponse
func (c *ClientWithResponses) GetIndexBitdefenderWithBodyWithResponse(ctx context.Context, params *GetIndexBitdefenderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error) {
	rsp, err := c.GetIndexBitdefenderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBitdefenderResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBitdefenderWithResponse(ctx context.Context, params *GetIndexBitdefenderParams, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error) {
	rsp, err := c.GetIndexBitdefender(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBitdefenderResponse(rsp)
}

// GetIndexBlackberryWithBodyWithResponse request with arbitrary body returning *GetIndexBlackberryResponse
func (c *ClientWithResponses) GetIndexBlackberryWithBodyWithResponse(ctx context.Context, params *GetIndexBlackberryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error) {
	rsp, err := c.GetIndexBlackberryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlackberryResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBlackberryWithResponse(ctx context.Context, params *GetIndexBlackberryParams, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error) {
	rsp, err := c.GetIndexBlackberry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlackberryResponse(rsp)
}

// GetIndexBlsWithBodyWithResponse request with arbitrary body returning *GetIndexBlsResponse
func (c *ClientWithResponses) GetIndexBlsWithBodyWithResponse(ctx context.Context, params *GetIndexBlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error) {
	rsp, err := c.GetIndexBlsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBlsWithResponse(ctx context.Context, params *GetIndexBlsParams, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error) {
	rsp, err := c.GetIndexBls(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlsResponse(rsp)
}

// GetIndexBoschWithBodyWithResponse request with arbitrary body returning *GetIndexBoschResponse
func (c *ClientWithResponses) GetIndexBoschWithBodyWithResponse(ctx context.Context, params *GetIndexBoschParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error) {
	rsp, err := c.GetIndexBoschWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBoschResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBoschWithResponse(ctx context.Context, params *GetIndexBoschParams, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error) {
	rsp, err := c.GetIndexBosch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBoschResponse(rsp)
}

// GetIndexBostonScientificWithBodyWithResponse request with arbitrary body returning *GetIndexBostonScientificResponse
func (c *ClientWithResponses) GetIndexBostonScientificWithBodyWithResponse(ctx context.Context, params *GetIndexBostonScientificParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error) {
	rsp, err := c.GetIndexBostonScientificWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBostonScientificResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBostonScientificWithResponse(ctx context.Context, params *GetIndexBostonScientificParams, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error) {
	rsp, err := c.GetIndexBostonScientific(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBostonScientificResponse(rsp)
}

// GetIndexBotnetsWithBodyWithResponse request with arbitrary body returning *GetIndexBotnetsResponse
func (c *ClientWithResponses) GetIndexBotnetsWithBodyWithResponse(ctx context.Context, params *GetIndexBotnetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error) {
	rsp, err := c.GetIndexBotnetsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBotnetsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBotnetsWithResponse(ctx context.Context, params *GetIndexBotnetsParams, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error) {
	rsp, err := c.GetIndexBotnets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBotnetsResponse(rsp)
}

// GetIndexCaCyberCentreWithBodyWithResponse request with arbitrary body returning *GetIndexCaCyberCentreResponse
func (c *ClientWithResponses) GetIndexCaCyberCentreWithBodyWithResponse(ctx context.Context, params *GetIndexCaCyberCentreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error) {
	rsp, err := c.GetIndexCaCyberCentreWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCaCyberCentreResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCaCyberCentreWithResponse(ctx context.Context, params *GetIndexCaCyberCentreParams, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error) {
	rsp, err := c.GetIndexCaCyberCentre(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCaCyberCentreResponse(rsp)
}

// GetIndexCanvasWithBodyWithResponse request with arbitrary body returning *GetIndexCanvasResponse
func (c *ClientWithResponses) GetIndexCanvasWithBodyWithResponse(ctx context.Context, params *GetIndexCanvasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error) {
	rsp, err := c.GetIndexCanvasWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCanvasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCanvasWithResponse(ctx context.Context, params *GetIndexCanvasParams, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error) {
	rsp, err := c.GetIndexCanvas(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCanvasResponse(rsp)
}

// GetIndexCarestreamWithBodyWithResponse request with arbitrary body returning *GetIndexCarestreamResponse
func (c *ClientWithResponses) GetIndexCarestreamWithBodyWithResponse(ctx context.Context, params *GetIndexCarestreamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error) {
	rsp, err := c.GetIndexCarestreamWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarestreamResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCarestreamWithResponse(ctx context.Context, params *GetIndexCarestreamParams, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error) {
	rsp, err := c.GetIndexCarestream(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarestreamResponse(rsp)
}

// GetIndexCargoWithBodyWithResponse request with arbitrary body returning *GetIndexCargoResponse
func (c *ClientWithResponses) GetIndexCargoWithBodyWithResponse(ctx context.Context, params *GetIndexCargoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error) {
	rsp, err := c.GetIndexCargoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCargoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCargoWithResponse(ctx context.Context, params *GetIndexCargoParams, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error) {
	rsp, err := c.GetIndexCargo(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCargoResponse(rsp)
}

// GetIndexCarrierWithBodyWithResponse request with arbitrary body returning *GetIndexCarrierResponse
func (c *ClientWithResponses) GetIndexCarrierWithBodyWithResponse(ctx context.Context, params *GetIndexCarrierParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error) {
	rsp, err := c.GetIndexCarrierWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarrierResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCarrierWithResponse(ctx context.Context, params *GetIndexCarrierParams, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error) {
	rsp, err := c.GetIndexCarrier(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarrierResponse(rsp)
}

// GetIndexCblMarinerWithBodyWithResponse request with arbitrary body returning *GetIndexCblMarinerResponse
func (c *ClientWithResponses) GetIndexCblMarinerWithBodyWithResponse(ctx context.Context, params *GetIndexCblMarinerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error) {
	rsp, err := c.GetIndexCblMarinerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCblMarinerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCblMarinerWithResponse(ctx context.Context, params *GetIndexCblMarinerParams, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error) {
	rsp, err := c.GetIndexCblMariner(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCblMarinerResponse(rsp)
}

// GetIndexCentosWithBodyWithResponse request with arbitrary body returning *GetIndexCentosResponse
func (c *ClientWithResponses) GetIndexCentosWithBodyWithResponse(ctx context.Context, params *GetIndexCentosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error) {
	rsp, err := c.GetIndexCentosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCentosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCentosWithResponse(ctx context.Context, params *GetIndexCentosParams, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error) {
	rsp, err := c.GetIndexCentos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCentosResponse(rsp)
}

// GetIndexCertBeWithBodyWithResponse request with arbitrary body returning *GetIndexCertBeResponse
func (c *ClientWithResponses) GetIndexCertBeWithBodyWithResponse(ctx context.Context, params *GetIndexCertBeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error) {
	rsp, err := c.GetIndexCertBeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertBeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertBeWithResponse(ctx context.Context, params *GetIndexCertBeParams, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error) {
	rsp, err := c.GetIndexCertBe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertBeResponse(rsp)
}

// GetIndexCertInWithBodyWithResponse request with arbitrary body returning *GetIndexCertInResponse
func (c *ClientWithResponses) GetIndexCertInWithBodyWithResponse(ctx context.Context, params *GetIndexCertInParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertInResponse, error) {
	rsp, err := c.GetIndexCertInWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertInResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertInWithResponse(ctx context.Context, params *GetIndexCertInParams, body GetIndexCertInJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertInResponse, error) {
	rsp, err := c.GetIndexCertIn(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertInResponse(rsp)
}

// GetIndexCertIrSecurityAlertsWithBodyWithResponse request with arbitrary body returning *GetIndexCertIrSecurityAlertsResponse
func (c *ClientWithResponses) GetIndexCertIrSecurityAlertsWithBodyWithResponse(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertIrSecurityAlertsResponse, error) {
	rsp, err := c.GetIndexCertIrSecurityAlertsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertIrSecurityAlertsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertIrSecurityAlertsWithResponse(ctx context.Context, params *GetIndexCertIrSecurityAlertsParams, body GetIndexCertIrSecurityAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertIrSecurityAlertsResponse, error) {
	rsp, err := c.GetIndexCertIrSecurityAlerts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertIrSecurityAlertsResponse(rsp)
}

// GetIndexCertSeWithBodyWithResponse request with arbitrary body returning *GetIndexCertSeResponse
func (c *ClientWithResponses) GetIndexCertSeWithBodyWithResponse(ctx context.Context, params *GetIndexCertSeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertSeResponse, error) {
	rsp, err := c.GetIndexCertSeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertSeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertSeWithResponse(ctx context.Context, params *GetIndexCertSeParams, body GetIndexCertSeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertSeResponse, error) {
	rsp, err := c.GetIndexCertSe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertSeResponse(rsp)
}

// GetIndexCertUaWithBodyWithResponse request with arbitrary body returning *GetIndexCertUaResponse
func (c *ClientWithResponses) GetIndexCertUaWithBodyWithResponse(ctx context.Context, params *GetIndexCertUaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error) {
	rsp, err := c.GetIndexCertUaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertUaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertUaWithResponse(ctx context.Context, params *GetIndexCertUaParams, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error) {
	rsp, err := c.GetIndexCertUa(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertUaResponse(rsp)
}

// GetIndexCerteuWithBodyWithResponse request with arbitrary body returning *GetIndexCerteuResponse
func (c *ClientWithResponses) GetIndexCerteuWithBodyWithResponse(ctx context.Context, params *GetIndexCerteuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error) {
	rsp, err := c.GetIndexCerteuWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCerteuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCerteuWithResponse(ctx context.Context, params *GetIndexCerteuParams, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error) {
	rsp, err := c.GetIndexCerteu(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCerteuResponse(rsp)
}

// GetIndexCertfrWithBodyWithResponse request with arbitrary body returning *GetIndexCertfrResponse
func (c *ClientWithResponses) GetIndexCertfrWithBodyWithResponse(ctx context.Context, params *GetIndexCertfrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error) {
	rsp, err := c.GetIndexCertfrWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertfrResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertfrWithResponse(ctx context.Context, params *GetIndexCertfrParams, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error) {
	rsp, err := c.GetIndexCertfr(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertfrResponse(rsp)
}

// GetIndexChainguardWithBodyWithResponse request with arbitrary body returning *GetIndexChainguardResponse
func (c *ClientWithResponses) GetIndexChainguardWithBodyWithResponse(ctx context.Context, params *GetIndexChainguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error) {
	rsp, err := c.GetIndexChainguardWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChainguardResponse(rsp)
}

func (c *ClientWithResponses) GetIndexChainguardWithResponse(ctx context.Context, params *GetIndexChainguardParams, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error) {
	rsp, err := c.GetIndexChainguard(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChainguardResponse(rsp)
}

// GetIndexCheckpointWithBodyWithResponse request with arbitrary body returning *GetIndexCheckpointResponse
func (c *ClientWithResponses) GetIndexCheckpointWithBodyWithResponse(ctx context.Context, params *GetIndexCheckpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error) {
	rsp, err := c.GetIndexCheckpointWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCheckpointResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCheckpointWithResponse(ctx context.Context, params *GetIndexCheckpointParams, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error) {
	rsp, err := c.GetIndexCheckpoint(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCheckpointResponse(rsp)
}

// GetIndexChromeWithBodyWithResponse request with arbitrary body returning *GetIndexChromeResponse
func (c *ClientWithResponses) GetIndexChromeWithBodyWithResponse(ctx context.Context, params *GetIndexChromeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error) {
	rsp, err := c.GetIndexChromeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChromeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexChromeWithResponse(ctx context.Context, params *GetIndexChromeParams, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error) {
	rsp, err := c.GetIndexChrome(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChromeResponse(rsp)
}

// GetIndexCisaAlertsWithBodyWithResponse request with arbitrary body returning *GetIndexCisaAlertsResponse
func (c *ClientWithResponses) GetIndexCisaAlertsWithBodyWithResponse(ctx context.Context, params *GetIndexCisaAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error) {
	rsp, err := c.GetIndexCisaAlertsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaAlertsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCisaAlertsWithResponse(ctx context.Context, params *GetIndexCisaAlertsParams, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error) {
	rsp, err := c.GetIndexCisaAlerts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaAlertsResponse(rsp)
}

// GetIndexCisaKevWithBodyWithResponse request with arbitrary body returning *GetIndexCisaKevResponse
func (c *ClientWithResponses) GetIndexCisaKevWithBodyWithResponse(ctx context.Context, params *GetIndexCisaKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error) {
	rsp, err := c.GetIndexCisaKevWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaKevResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCisaKevWithResponse(ctx context.Context, params *GetIndexCisaKevParams, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error) {
	rsp, err := c.GetIndexCisaKev(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaKevResponse(rsp)
}

// GetIndexCiscoWithBodyWithResponse request with arbitrary body returning *GetIndexCiscoResponse
func (c *ClientWithResponses) GetIndexCiscoWithBodyWithResponse(ctx context.Context, params *GetIndexCiscoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error) {
	rsp, err := c.GetIndexCiscoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCiscoWithResponse(ctx context.Context, params *GetIndexCiscoParams, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error) {
	rsp, err := c.GetIndexCisco(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoResponse(rsp)
}

// GetIndexCiscoTalosWithBodyWithResponse request with arbitrary body returning *GetIndexCiscoTalosResponse
func (c *ClientWithResponses) GetIndexCiscoTalosWithBodyWithResponse(ctx context.Context, params *GetIndexCiscoTalosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error) {
	rsp, err := c.GetIndexCiscoTalosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoTalosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCiscoTalosWithResponse(ctx context.Context, params *GetIndexCiscoTalosParams, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error) {
	rsp, err := c.GetIndexCiscoTalos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoTalosResponse(rsp)
}

// GetIndexCitrixWithBodyWithResponse request with arbitrary body returning *GetIndexCitrixResponse
func (c *ClientWithResponses) GetIndexCitrixWithBodyWithResponse(ctx context.Context, params *GetIndexCitrixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error) {
	rsp, err := c.GetIndexCitrixWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCitrixResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCitrixWithResponse(ctx context.Context, params *GetIndexCitrixParams, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error) {
	rsp, err := c.GetIndexCitrix(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCitrixResponse(rsp)
}

// GetIndexClarotyWithBodyWithResponse request with arbitrary body returning *GetIndexClarotyResponse
func (c *ClientWithResponses) GetIndexClarotyWithBodyWithResponse(ctx context.Context, params *GetIndexClarotyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error) {
	rsp, err := c.GetIndexClarotyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexClarotyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexClarotyWithResponse(ctx context.Context, params *GetIndexClarotyParams, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error) {
	rsp, err := c.GetIndexClaroty(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexClarotyResponse(rsp)
}

// GetIndexCloudbeesWithBodyWithResponse request with arbitrary body returning *GetIndexCloudbeesResponse
func (c *ClientWithResponses) GetIndexCloudbeesWithBodyWithResponse(ctx context.Context, params *GetIndexCloudbeesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error) {
	rsp, err := c.GetIndexCloudbeesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudbeesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCloudbeesWithResponse(ctx context.Context, params *GetIndexCloudbeesParams, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error) {
	rsp, err := c.GetIndexCloudbees(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudbeesResponse(rsp)
}

// GetIndexCloudvulndbWithBodyWithResponse request with arbitrary body returning *GetIndexCloudvulndbResponse
func (c *ClientWithResponses) GetIndexCloudvulndbWithBodyWithResponse(ctx context.Context, params *GetIndexCloudvulndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error) {
	rsp, err := c.GetIndexCloudvulndbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudvulndbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCloudvulndbWithResponse(ctx context.Context, params *GetIndexCloudvulndbParams, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error) {
	rsp, err := c.GetIndexCloudvulndb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudvulndbResponse(rsp)
}

// GetIndexCnnvdWithBodyWithResponse request with arbitrary body returning *GetIndexCnnvdResponse
func (c *ClientWithResponses) GetIndexCnnvdWithBodyWithResponse(ctx context.Context, params *GetIndexCnnvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error) {
	rsp, err := c.GetIndexCnnvdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnnvdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnnvdWithResponse(ctx context.Context, params *GetIndexCnnvdParams, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error) {
	rsp, err := c.GetIndexCnnvd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnnvdResponse(rsp)
}

// GetIndexCnvdBulletinsWithBodyWithResponse request with arbitrary body returning *GetIndexCnvdBulletinsResponse
func (c *ClientWithResponses) GetIndexCnvdBulletinsWithBodyWithResponse(ctx context.Context, params *GetIndexCnvdBulletinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error) {
	rsp, err := c.GetIndexCnvdBulletinsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdBulletinsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnvdBulletinsWithResponse(ctx context.Context, params *GetIndexCnvdBulletinsParams, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error) {
	rsp, err := c.GetIndexCnvdBulletins(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdBulletinsResponse(rsp)
}

// GetIndexCnvdFlawsWithBodyWithResponse request with arbitrary body returning *GetIndexCnvdFlawsResponse
func (c *ClientWithResponses) GetIndexCnvdFlawsWithBodyWithResponse(ctx context.Context, params *GetIndexCnvdFlawsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error) {
	rsp, err := c.GetIndexCnvdFlawsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdFlawsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnvdFlawsWithResponse(ctx context.Context, params *GetIndexCnvdFlawsParams, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error) {
	rsp, err := c.GetIndexCnvdFlaws(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdFlawsResponse(rsp)
}

// GetIndexCocoapodsWithBodyWithResponse request with arbitrary body returning *GetIndexCocoapodsResponse
func (c *ClientWithResponses) GetIndexCocoapodsWithBodyWithResponse(ctx context.Context, params *GetIndexCocoapodsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error) {
	rsp, err := c.GetIndexCocoapodsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCocoapodsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCocoapodsWithResponse(ctx context.Context, params *GetIndexCocoapodsParams, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error) {
	rsp, err := c.GetIndexCocoapods(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCocoapodsResponse(rsp)
}

// GetIndexCodesysWithBodyWithResponse request with arbitrary body returning *GetIndexCodesysResponse
func (c *ClientWithResponses) GetIndexCodesysWithBodyWithResponse(ctx context.Context, params *GetIndexCodesysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error) {
	rsp, err := c.GetIndexCodesysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCodesysResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCodesysWithResponse(ctx context.Context, params *GetIndexCodesysParams, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error) {
	rsp, err := c.GetIndexCodesys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCodesysResponse(rsp)
}

// GetIndexCompassSecurityWithBodyWithResponse request with arbitrary body returning *GetIndexCompassSecurityResponse
func (c *ClientWithResponses) GetIndexCompassSecurityWithBodyWithResponse(ctx context.Context, params *GetIndexCompassSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error) {
	rsp, err := c.GetIndexCompassSecurityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCompassSecurityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCompassSecurityWithResponse(ctx context.Context, params *GetIndexCompassSecurityParams, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error) {
	rsp, err := c.GetIndexCompassSecurity(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCompassSecurityResponse(rsp)
}

// GetIndexComposerWithBodyWithResponse request with arbitrary body returning *GetIndexComposerResponse
func (c *ClientWithResponses) GetIndexComposerWithBodyWithResponse(ctx context.Context, params *GetIndexComposerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error) {
	rsp, err := c.GetIndexComposerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexComposerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexComposerWithResponse(ctx context.Context, params *GetIndexComposerParams, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error) {
	rsp, err := c.GetIndexComposer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexComposerResponse(rsp)
}

// GetIndexConanWithBodyWithResponse request with arbitrary body returning *GetIndexConanResponse
func (c *ClientWithResponses) GetIndexConanWithBodyWithResponse(ctx context.Context, params *GetIndexConanParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error) {
	rsp, err := c.GetIndexConanWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexConanResponse(rsp)
}

func (c *ClientWithResponses) GetIndexConanWithResponse(ctx context.Context, params *GetIndexConanParams, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error) {
	rsp, err := c.GetIndexConan(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexConanResponse(rsp)
}

// GetIndexCrestronWithBodyWithResponse request with arbitrary body returning *GetIndexCrestronResponse
func (c *ClientWithResponses) GetIndexCrestronWithBodyWithResponse(ctx context.Context, params *GetIndexCrestronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error) {
	rsp, err := c.GetIndexCrestronWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCrestronResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCrestronWithResponse(ctx context.Context, params *GetIndexCrestronParams, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error) {
	rsp, err := c.GetIndexCrestron(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCrestronResponse(rsp)
}

// GetIndexCurlWithBodyWithResponse request with arbitrary body returning *GetIndexCurlResponse
func (c *ClientWithResponses) GetIndexCurlWithBodyWithResponse(ctx context.Context, params *GetIndexCurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error) {
	rsp, err := c.GetIndexCurlWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCurlResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCurlWithResponse(ctx context.Context, params *GetIndexCurlParams, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error) {
	rsp, err := c.GetIndexCurl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCurlResponse(rsp)
}

// GetIndexCweWithBodyWithResponse request with arbitrary body returning *GetIndexCweResponse
func (c *ClientWithResponses) GetIndexCweWithBodyWithResponse(ctx context.Context, params *GetIndexCweParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error) {
	rsp, err := c.GetIndexCweWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCweResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCweWithResponse(ctx context.Context, params *GetIndexCweParams, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error) {
	rsp, err := c.GetIndexCwe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCweResponse(rsp)
}

// GetIndexDahuaWithBodyWithResponse request with arbitrary body returning *GetIndexDahuaResponse
func (c *ClientWithResponses) GetIndexDahuaWithBodyWithResponse(ctx context.Context, params *GetIndexDahuaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error) {
	rsp, err := c.GetIndexDahuaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDahuaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDahuaWithResponse(ctx context.Context, params *GetIndexDahuaParams, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error) {
	rsp, err := c.GetIndexDahua(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDahuaResponse(rsp)
}

// GetIndexDassaultWithBodyWithResponse request with arbitrary body returning *GetIndexDassaultResponse
func (c *ClientWithResponses) GetIndexDassaultWithBodyWithResponse(ctx context.Context, params *GetIndexDassaultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error) {
	rsp, err := c.GetIndexDassaultWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDassaultResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDassaultWithResponse(ctx context.Context, params *GetIndexDassaultParams, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error) {
	rsp, err := c.GetIndexDassault(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDassaultResponse(rsp)
}

// GetIndexDebianWithBodyWithResponse request with arbitrary body returning *GetIndexDebianResponse
func (c *ClientWithResponses) GetIndexDebianWithBodyWithResponse(ctx context.Context, params *GetIndexDebianParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error) {
	rsp, err := c.GetIndexDebianWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDebianWithResponse(ctx context.Context, params *GetIndexDebianParams, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error) {
	rsp, err := c.GetIndexDebian(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianResponse(rsp)
}

// GetIndexDebianDsaWithBodyWithResponse request with arbitrary body returning *GetIndexDebianDsaResponse
func (c *ClientWithResponses) GetIndexDebianDsaWithBodyWithResponse(ctx context.Context, params *GetIndexDebianDsaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error) {
	rsp, err := c.GetIndexDebianDsaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianDsaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDebianDsaWithResponse(ctx context.Context, params *GetIndexDebianDsaParams, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error) {
	rsp, err := c.GetIndexDebianDsa(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianDsaResponse(rsp)
}

// GetIndexDellWithBodyWithResponse request with arbitrary body returning *GetIndexDellResponse
func (c *ClientWithResponses) GetIndexDellWithBodyWithResponse(ctx context.Context, params *GetIndexDellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error) {
	rsp, err := c.GetIndexDellWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDellResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDellWithResponse(ctx context.Context, params *GetIndexDellParams, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error) {
	rsp, err := c.GetIndexDell(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDellResponse(rsp)
}

// GetIndexDeltaWithBodyWithResponse request with arbitrary body returning *GetIndexDeltaResponse
func (c *ClientWithResponses) GetIndexDeltaWithBodyWithResponse(ctx context.Context, params *GetIndexDeltaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error) {
	rsp, err := c.GetIndexDeltaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDeltaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDeltaWithResponse(ctx context.Context, params *GetIndexDeltaParams, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error) {
	rsp, err := c.GetIndexDelta(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDeltaResponse(rsp)
}

// GetIndexDjangoWithBodyWithResponse request with arbitrary body returning *GetIndexDjangoResponse
func (c *ClientWithResponses) GetIndexDjangoWithBodyWithResponse(ctx context.Context, params *GetIndexDjangoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDjangoResponse, error) {
	rsp, err := c.GetIndexDjangoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDjangoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDjangoWithResponse(ctx context.Context, params *GetIndexDjangoParams, body GetIndexDjangoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDjangoResponse, error) {
	rsp, err := c.GetIndexDjango(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDjangoResponse(rsp)
}

// GetIndexDnnWithBodyWithResponse request with arbitrary body returning *GetIndexDnnResponse
func (c *ClientWithResponses) GetIndexDnnWithBodyWithResponse(ctx context.Context, params *GetIndexDnnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDnnResponse, error) {
	rsp, err := c.GetIndexDnnWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDnnResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDnnWithResponse(ctx context.Context, params *GetIndexDnnParams, body GetIndexDnnJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDnnResponse, error) {
	rsp, err := c.GetIndexDnn(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDnnResponse(rsp)
}

// GetIndexDotcmsWithBodyWithResponse request with arbitrary body returning *GetIndexDotcmsResponse
func (c *ClientWithResponses) GetIndexDotcmsWithBodyWithResponse(ctx context.Context, params *GetIndexDotcmsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error) {
	rsp, err := c.GetIndexDotcmsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDotcmsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDotcmsWithResponse(ctx context.Context, params *GetIndexDotcmsParams, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error) {
	rsp, err := c.GetIndexDotcms(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDotcmsResponse(rsp)
}

// GetIndexDragosWithBodyWithResponse request with arbitrary body returning *GetIndexDragosResponse
func (c *ClientWithResponses) GetIndexDragosWithBodyWithResponse(ctx context.Context, params *GetIndexDragosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error) {
	rsp, err := c.GetIndexDragosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDragosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDragosWithResponse(ctx context.Context, params *GetIndexDragosParams, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error) {
	rsp, err := c.GetIndexDragos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDragosResponse(rsp)
}

// GetIndexDraytekWithBodyWithResponse request with arbitrary body returning *GetIndexDraytekResponse
func (c *ClientWithResponses) GetIndexDraytekWithBodyWithResponse(ctx context.Context, params *GetIndexDraytekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error) {
	rsp, err := c.GetIndexDraytekWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDraytekResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDraytekWithResponse(ctx context.Context, params *GetIndexDraytekParams, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error) {
	rsp, err := c.GetIndexDraytek(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDraytekResponse(rsp)
}

// GetIndexEatonWithBodyWithResponse request with arbitrary body returning *GetIndexEatonResponse
func (c *ClientWithResponses) GetIndexEatonWithBodyWithResponse(ctx context.Context, params *GetIndexEatonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error) {
	rsp, err := c.GetIndexEatonWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEatonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEatonWithResponse(ctx context.Context, params *GetIndexEatonParams, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error) {
	rsp, err := c.GetIndexEaton(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEatonResponse(rsp)
}

// GetIndexElasticWithBodyWithResponse request with arbitrary body returning *GetIndexElasticResponse
func (c *ClientWithResponses) GetIndexElasticWithBodyWithResponse(ctx context.Context, params *GetIndexElasticParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error) {
	rsp, err := c.GetIndexElasticWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElasticResponse(rsp)
}

func (c *ClientWithResponses) GetIndexElasticWithResponse(ctx context.Context, params *GetIndexElasticParams, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error) {
	rsp, err := c.GetIndexElastic(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElasticResponse(rsp)
}

// GetIndexElspecWithBodyWithResponse request with arbitrary body returning *GetIndexElspecResponse
func (c *ClientWithResponses) GetIndexElspecWithBodyWithResponse(ctx context.Context, params *GetIndexElspecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error) {
	rsp, err := c.GetIndexElspecWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElspecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexElspecWithResponse(ctx context.Context, params *GetIndexElspecParams, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error) {
	rsp, err := c.GetIndexElspec(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElspecResponse(rsp)
}

// GetIndexEmergingThreatsSnortWithBodyWithResponse request with arbitrary body returning *GetIndexEmergingThreatsSnortResponse
func (c *ClientWithResponses) GetIndexEmergingThreatsSnortWithBodyWithResponse(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEmergingThreatsSnortResponse, error) {
	rsp, err := c.GetIndexEmergingThreatsSnortWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEmergingThreatsSnortResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEmergingThreatsSnortWithResponse(ctx context.Context, params *GetIndexEmergingThreatsSnortParams, body GetIndexEmergingThreatsSnortJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEmergingThreatsSnortResponse, error) {
	rsp, err := c.GetIndexEmergingThreatsSnort(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEmergingThreatsSnortResponse(rsp)
}

// GetIndexEmersonWithBodyWithResponse request with arbitrary body returning *GetIndexEmersonResponse
func (c *ClientWithResponses) GetIndexEmersonWithBodyWithResponse(ctx context.Context, params *GetIndexEmersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error) {
	rsp, err := c.GetIndexEmersonWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEmersonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEmersonWithResponse(ctx context.Context, params *GetIndexEmersonParams, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error) {
	rsp, err := c.GetIndexEmerson(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEmersonResponse(rsp)
}

// GetIndexEolWithBodyWithResponse request with arbitrary body returning *GetIndexEolResponse
func (c *ClientWithResponses) GetIndexEolWithBodyWithResponse(ctx context.Context, params *GetIndexEolParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error) {
	rsp, err := c.GetIndexEolWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEolResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEolWithResponse(ctx context.Context, params *GetIndexEolParams, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error) {
	rsp, err := c.GetIndexEol(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEolResponse(rsp)
}

// GetIndexEpssWithBodyWithResponse request with arbitrary body returning *GetIndexEpssResponse
func (c *ClientWithResponses) GetIndexEpssWithBodyWithResponse(ctx context.Context, params *GetIndexEpssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error) {
	rsp, err := c.GetIndexEpssWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEpssResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEpssWithResponse(ctx context.Context, params *GetIndexEpssParams, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error) {
	rsp, err := c.GetIndexEpss(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEpssResponse(rsp)
}

// GetIndexExodusIntelWithBodyWithResponse request with arbitrary body returning *GetIndexExodusIntelResponse
func (c *ClientWithResponses) GetIndexExodusIntelWithBodyWithResponse(ctx context.Context, params *GetIndexExodusIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error) {
	rsp, err := c.GetIndexExodusIntelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExodusIntelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExodusIntelWithResponse(ctx context.Context, params *GetIndexExodusIntelParams, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error) {
	rsp, err := c.GetIndexExodusIntel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExodusIntelResponse(rsp)
}

// GetIndexExploitChainsWithBodyWithResponse request with arbitrary body returning *GetIndexExploitChainsResponse
func (c *ClientWithResponses) GetIndexExploitChainsWithBodyWithResponse(ctx context.Context, params *GetIndexExploitChainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error) {
	rsp, err := c.GetIndexExploitChainsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitChainsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitChainsWithResponse(ctx context.Context, params *GetIndexExploitChainsParams, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error) {
	rsp, err := c.GetIndexExploitChains(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitChainsResponse(rsp)
}

// GetIndexExploitdbWithBodyWithResponse request with arbitrary body returning *GetIndexExploitdbResponse
func (c *ClientWithResponses) GetIndexExploitdbWithBodyWithResponse(ctx context.Context, params *GetIndexExploitdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error) {
	rsp, err := c.GetIndexExploitdbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitdbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitdbWithResponse(ctx context.Context, params *GetIndexExploitdbParams, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error) {
	rsp, err := c.GetIndexExploitdb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitdbResponse(rsp)
}

// GetIndexExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexExploitsResponse
func (c *ClientWithResponses) GetIndexExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error) {
	rsp, err := c.GetIndexExploitsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitsWithResponse(ctx context.Context, params *GetIndexExploitsParams, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error) {
	rsp, err := c.GetIndexExploits(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitsResponse(rsp)
}

// GetIndexExploitsChangelogWithBodyWithResponse request with arbitrary body returning *GetIndexExploitsChangelogResponse
func (c *ClientWithResponses) GetIndexExploitsChangelogWithBodyWithResponse(ctx context.Context, params *GetIndexExploitsChangelogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitsChangelogResponse, error) {
	rsp, err := c.GetIndexExploitsChangelogWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitsChangelogResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitsChangelogWithResponse(ctx context.Context, params *GetIndexExploitsChangelogParams, body GetIndexExploitsChangelogJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitsChangelogResponse, error) {
	rsp, err := c.GetIndexExploitsChangelog(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitsChangelogResponse(rsp)
}

// GetIndexFSecureWithBodyWithResponse request with arbitrary body returning *GetIndexFSecureResponse
func (c *ClientWithResponses) GetIndexFSecureWithBodyWithResponse(ctx context.Context, params *GetIndexFSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error) {
	rsp, err := c.GetIndexFSecureWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFSecureResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFSecureWithResponse(ctx context.Context, params *GetIndexFSecureParams, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error) {
	rsp, err := c.GetIndexFSecure(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFSecureResponse(rsp)
}

// GetIndexFanucWithBodyWithResponse request with arbitrary body returning *GetIndexFanucResponse
func (c *ClientWithResponses) GetIndexFanucWithBodyWithResponse(ctx context.Context, params *GetIndexFanucParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFanucResponse, error) {
	rsp, err := c.GetIndexFanucWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFanucResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFanucWithResponse(ctx context.Context, params *GetIndexFanucParams, body GetIndexFanucJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFanucResponse, error) {
	rsp, err := c.GetIndexFanuc(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFanucResponse(rsp)
}

// GetIndexFastlyWithBodyWithResponse request with arbitrary body returning *GetIndexFastlyResponse
func (c *ClientWithResponses) GetIndexFastlyWithBodyWithResponse(ctx context.Context, params *GetIndexFastlyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error) {
	rsp, err := c.GetIndexFastlyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFastlyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFastlyWithResponse(ctx context.Context, params *GetIndexFastlyParams, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error) {
	rsp, err := c.GetIndexFastly(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFastlyResponse(rsp)
}

// GetIndexFedoraWithBodyWithResponse request with arbitrary body returning *GetIndexFedoraResponse
func (c *ClientWithResponses) GetIndexFedoraWithBodyWithResponse(ctx context.Context, params *GetIndexFedoraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error) {
	rsp, err := c.GetIndexFedoraWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFedoraResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFedoraWithResponse(ctx context.Context, params *GetIndexFedoraParams, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error) {
	rsp, err := c.GetIndexFedora(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFedoraResponse(rsp)
}

// GetIndexFilecloudWithBodyWithResponse request with arbitrary body returning *GetIndexFilecloudResponse
func (c *ClientWithResponses) GetIndexFilecloudWithBodyWithResponse(ctx context.Context, params *GetIndexFilecloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error) {
	rsp, err := c.GetIndexFilecloudWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFilecloudResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFilecloudWithResponse(ctx context.Context, params *GetIndexFilecloudParams, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error) {
	rsp, err := c.GetIndexFilecloud(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFilecloudResponse(rsp)
}

// GetIndexFlattSecurityWithBodyWithResponse request with arbitrary body returning *GetIndexFlattSecurityResponse
func (c *ClientWithResponses) GetIndexFlattSecurityWithBodyWithResponse(ctx context.Context, params *GetIndexFlattSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFlattSecurityResponse, error) {
	rsp, err := c.GetIndexFlattSecurityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFlattSecurityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFlattSecurityWithResponse(ctx context.Context, params *GetIndexFlattSecurityParams, body GetIndexFlattSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFlattSecurityResponse, error) {
	rsp, err := c.GetIndexFlattSecurity(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFlattSecurityResponse(rsp)
}

// GetIndexForgerockWithBodyWithResponse request with arbitrary body returning *GetIndexForgerockResponse
func (c *ClientWithResponses) GetIndexForgerockWithBodyWithResponse(ctx context.Context, params *GetIndexForgerockParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error) {
	rsp, err := c.GetIndexForgerockWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexForgerockResponse(rsp)
}

func (c *ClientWithResponses) GetIndexForgerockWithResponse(ctx context.Context, params *GetIndexForgerockParams, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error) {
	rsp, err := c.GetIndexForgerock(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexForgerockResponse(rsp)
}

// GetIndexFortinetWithBodyWithResponse request with arbitrary body returning *GetIndexFortinetResponse
func (c *ClientWithResponses) GetIndexFortinetWithBodyWithResponse(ctx context.Context, params *GetIndexFortinetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error) {
	rsp, err := c.GetIndexFortinetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFortinetResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFortinetWithResponse(ctx context.Context, params *GetIndexFortinetParams, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error) {
	rsp, err := c.GetIndexFortinet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFortinetResponse(rsp)
}

// GetIndexFortinetIpsWithBodyWithResponse request with arbitrary body returning *GetIndexFortinetIpsResponse
func (c *ClientWithResponses) GetIndexFortinetIpsWithBodyWithResponse(ctx context.Context, params *GetIndexFortinetIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFortinetIpsResponse, error) {
	rsp, err := c.GetIndexFortinetIpsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFortinetIpsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFortinetIpsWithResponse(ctx context.Context, params *GetIndexFortinetIpsParams, body GetIndexFortinetIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFortinetIpsResponse, error) {
	rsp, err := c.GetIndexFortinetIps(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFortinetIpsResponse(rsp)
}

// GetIndexFoxitWithBodyWithResponse request with arbitrary body returning *GetIndexFoxitResponse
func (c *ClientWithResponses) GetIndexFoxitWithBodyWithResponse(ctx context.Context, params *GetIndexFoxitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFoxitResponse, error) {
	rsp, err := c.GetIndexFoxitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFoxitResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFoxitWithResponse(ctx context.Context, params *GetIndexFoxitParams, body GetIndexFoxitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFoxitResponse, error) {
	rsp, err := c.GetIndexFoxit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFoxitResponse(rsp)
}

// GetIndexFreebsdWithBodyWithResponse request with arbitrary body returning *GetIndexFreebsdResponse
func (c *ClientWithResponses) GetIndexFreebsdWithBodyWithResponse(ctx context.Context, params *GetIndexFreebsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error) {
	rsp, err := c.GetIndexFreebsdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFreebsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFreebsdWithResponse(ctx context.Context, params *GetIndexFreebsdParams, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error) {
	rsp, err := c.GetIndexFreebsd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFreebsdResponse(rsp)
}

// GetIndexGallagherWithBodyWithResponse request with arbitrary body returning *GetIndexGallagherResponse
func (c *ClientWithResponses) GetIndexGallagherWithBodyWithResponse(ctx context.Context, params *GetIndexGallagherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error) {
	rsp, err := c.GetIndexGallagherWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGallagherResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGallagherWithResponse(ctx context.Context, params *GetIndexGallagherParams, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error) {
	rsp, err := c.GetIndexGallagher(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGallagherResponse(rsp)
}

// GetIndexGcpWithBodyWithResponse request with arbitrary body returning *GetIndexGcpResponse
func (c *ClientWithResponses) GetIndexGcpWithBodyWithResponse(ctx context.Context, params *GetIndexGcpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error) {
	rsp, err := c.GetIndexGcpWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGcpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGcpWithResponse(ctx context.Context, params *GetIndexGcpParams, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error) {
	rsp, err := c.GetIndexGcp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGcpResponse(rsp)
}

// GetIndexGeGasWithBodyWithResponse request with arbitrary body returning *GetIndexGeGasResponse
func (c *ClientWithResponses) GetIndexGeGasWithBodyWithResponse(ctx context.Context, params *GetIndexGeGasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error) {
	rsp, err := c.GetIndexGeGasWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeGasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGeGasWithResponse(ctx context.Context, params *GetIndexGeGasParams, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error) {
	rsp, err := c.GetIndexGeGas(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeGasResponse(rsp)
}

// GetIndexGeHealthcareWithBodyWithResponse request with arbitrary body returning *GetIndexGeHealthcareResponse
func (c *ClientWithResponses) GetIndexGeHealthcareWithBodyWithResponse(ctx context.Context, params *GetIndexGeHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error) {
	rsp, err := c.GetIndexGeHealthcareWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeHealthcareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGeHealthcareWithResponse(ctx context.Context, params *GetIndexGeHealthcareParams, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error) {
	rsp, err := c.GetIndexGeHealthcare(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeHealthcareResponse(rsp)
}

// GetIndexGemWithBodyWithResponse request with arbitrary body returning *GetIndexGemResponse
func (c *ClientWithResponses) GetIndexGemWithBodyWithResponse(ctx context.Context, params *GetIndexGemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error) {
	rsp, err := c.GetIndexGemWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGemResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGemWithResponse(ctx context.Context, params *GetIndexGemParams, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error) {
	rsp, err := c.GetIndexGem(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGemResponse(rsp)
}

// GetIndexGenetecWithBodyWithResponse request with arbitrary body returning *GetIndexGenetecResponse
func (c *ClientWithResponses) GetIndexGenetecWithBodyWithResponse(ctx context.Context, params *GetIndexGenetecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error) {
	rsp, err := c.GetIndexGenetecWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGenetecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGenetecWithResponse(ctx context.Context, params *GetIndexGenetecParams, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error) {
	rsp, err := c.GetIndexGenetec(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGenetecResponse(rsp)
}

// GetIndexGigabyteWithBodyWithResponse request with arbitrary body returning *GetIndexGigabyteResponse
func (c *ClientWithResponses) GetIndexGigabyteWithBodyWithResponse(ctx context.Context, params *GetIndexGigabyteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error) {
	rsp, err := c.GetIndexGigabyteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGigabyteResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGigabyteWithResponse(ctx context.Context, params *GetIndexGigabyteParams, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error) {
	rsp, err := c.GetIndexGigabyte(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGigabyteResponse(rsp)
}

// GetIndexGiteeExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexGiteeExploitsResponse
func (c *ClientWithResponses) GetIndexGiteeExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexGiteeExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error) {
	rsp, err := c.GetIndexGiteeExploitsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGiteeExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGiteeExploitsWithResponse(ctx context.Context, params *GetIndexGiteeExploitsParams, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error) {
	rsp, err := c.GetIndexGiteeExploits(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGiteeExploitsResponse(rsp)
}

// GetIndexGithubExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexGithubExploitsResponse
func (c *ClientWithResponses) GetIndexGithubExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexGithubExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error) {
	rsp, err := c.GetIndexGithubExploitsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGithubExploitsWithResponse(ctx context.Context, params *GetIndexGithubExploitsParams, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error) {
	rsp, err := c.GetIndexGithubExploits(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubExploitsResponse(rsp)
}

// GetIndexGithubSecurityAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexGithubSecurityAdvisoriesResponse
func (c *ClientWithResponses) GetIndexGithubSecurityAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error) {
	rsp, err := c.GetIndexGithubSecurityAdvisoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubSecurityAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGithubSecurityAdvisoriesWithResponse(ctx context.Context, params *GetIndexGithubSecurityAdvisoriesParams, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error) {
	rsp, err := c.GetIndexGithubSecurityAdvisories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubSecurityAdvisoriesResponse(rsp)
}

// GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse request with arbitrary body returning *GetIndexGitlabAdvisoriesCommunityResponse
func (c *ClientWithResponses) GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error) {
	rsp, err := c.GetIndexGitlabAdvisoriesCommunityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabAdvisoriesCommunityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGitlabAdvisoriesCommunityWithResponse(ctx context.Context, params *GetIndexGitlabAdvisoriesCommunityParams, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error) {
	rsp, err := c.GetIndexGitlabAdvisoriesCommunity(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabAdvisoriesCommunityResponse(rsp)
}

// GetIndexGitlabExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexGitlabExploitsResponse
func (c *ClientWithResponses) GetIndexGitlabExploitsWithBodyWithResponse(ctx context.Context, params *GetIndexGitlabExploitsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error) {
	rsp, err := c.GetIndexGitlabExploitsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGitlabExploitsWithResponse(ctx context.Context, params *GetIndexGitlabExploitsParams, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error) {
	rsp, err := c.GetIndexGitlabExploits(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabExploitsResponse(rsp)
}

// GetIndexGnutlsWithBodyWithResponse request with arbitrary body returning *GetIndexGnutlsResponse
func (c *ClientWithResponses) GetIndexGnutlsWithBodyWithResponse(ctx context.Context, params *GetIndexGnutlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error) {
	rsp, err := c.GetIndexGnutlsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGnutlsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGnutlsWithResponse(ctx context.Context, params *GetIndexGnutlsParams, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error) {
	rsp, err := c.GetIndexGnutls(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGnutlsResponse(rsp)
}

// GetIndexGolangWithBodyWithResponse request with arbitrary body returning *GetIndexGolangResponse
func (c *ClientWithResponses) GetIndexGolangWithBodyWithResponse(ctx context.Context, params *GetIndexGolangParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error) {
	rsp, err := c.GetIndexGolangWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGolangResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGolangWithResponse(ctx context.Context, params *GetIndexGolangParams, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error) {
	rsp, err := c.GetIndexGolang(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGolangResponse(rsp)
}

// GetIndexGoogle0dayItwWithBodyWithResponse request with arbitrary body returning *GetIndexGoogle0dayItwResponse
func (c *ClientWithResponses) GetIndexGoogle0dayItwWithBodyWithResponse(ctx context.Context, params *GetIndexGoogle0dayItwParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error) {
	rsp, err := c.GetIndexGoogle0dayItwWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogle0dayItwResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGoogle0dayItwWithResponse(ctx context.Context, params *GetIndexGoogle0dayItwParams, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error) {
	rsp, err := c.GetIndexGoogle0dayItw(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogle0dayItwResponse(rsp)
}

// GetIndexGoogleContainerOptimizedOsWithBodyWithResponse request with arbitrary body returning *GetIndexGoogleContainerOptimizedOsResponse
func (c *ClientWithResponses) GetIndexGoogleContainerOptimizedOsWithBodyWithResponse(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error) {
	rsp, err := c.GetIndexGoogleContainerOptimizedOsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogleContainerOptimizedOsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGoogleContainerOptimizedOsWithResponse(ctx context.Context, params *GetIndexGoogleContainerOptimizedOsParams, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error) {
	rsp, err := c.GetIndexGoogleContainerOptimizedOs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogleContainerOptimizedOsResponse(rsp)
}

// GetIndexGrafanaWithBodyWithResponse request with arbitrary body returning *GetIndexGrafanaResponse
func (c *ClientWithResponses) GetIndexGrafanaWithBodyWithResponse(ctx context.Context, params *GetIndexGrafanaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error) {
	rsp, err := c.GetIndexGrafanaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGrafanaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGrafanaWithResponse(ctx context.Context, params *GetIndexGrafanaParams, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error) {
	rsp, err := c.GetIndexGrafana(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGrafanaResponse(rsp)
}

// GetIndexGreynoiseMetadataWithBodyWithResponse request with arbitrary body returning *GetIndexGreynoiseMetadataResponse
func (c *ClientWithResponses) GetIndexGreynoiseMetadataWithBodyWithResponse(ctx context.Context, params *GetIndexGreynoiseMetadataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error) {
	rsp, err := c.GetIndexGreynoiseMetadataWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGreynoiseMetadataResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGreynoiseMetadataWithResponse(ctx context.Context, params *GetIndexGreynoiseMetadataParams, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error) {
	rsp, err := c.GetIndexGreynoiseMetadata(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGreynoiseMetadataResponse(rsp)
}

// GetIndexHackageWithBodyWithResponse request with arbitrary body returning *GetIndexHackageResponse
func (c *ClientWithResponses) GetIndexHackageWithBodyWithResponse(ctx context.Context, params *GetIndexHackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error) {
	rsp, err := c.GetIndexHackageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHackageResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHackageWithResponse(ctx context.Context, params *GetIndexHackageParams, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error) {
	rsp, err := c.GetIndexHackage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHackageResponse(rsp)
}

// GetIndexHarmonyosWithBodyWithResponse request with arbitrary body returning *GetIndexHarmonyosResponse
func (c *ClientWithResponses) GetIndexHarmonyosWithBodyWithResponse(ctx context.Context, params *GetIndexHarmonyosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error) {
	rsp, err := c.GetIndexHarmonyosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHarmonyosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHarmonyosWithResponse(ctx context.Context, params *GetIndexHarmonyosParams, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error) {
	rsp, err := c.GetIndexHarmonyos(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHarmonyosResponse(rsp)
}

// GetIndexHashicorpWithBodyWithResponse request with arbitrary body returning *GetIndexHashicorpResponse
func (c *ClientWithResponses) GetIndexHashicorpWithBodyWithResponse(ctx context.Context, params *GetIndexHashicorpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error) {
	rsp, err := c.GetIndexHashicorpWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHashicorpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHashicorpWithResponse(ctx context.Context, params *GetIndexHashicorpParams, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error) {
	rsp, err := c.GetIndexHashicorp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHashicorpResponse(rsp)
}

// GetIndexHaskellSadbWithBodyWithResponse request with arbitrary body returning *GetIndexHaskellSadbResponse
func (c *ClientWithResponses) GetIndexHaskellSadbWithBodyWithResponse(ctx context.Context, params *GetIndexHaskellSadbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error) {
	rsp, err := c.GetIndexHaskellSadbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHaskellSadbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHaskellSadbWithResponse(ctx context.Context, params *GetIndexHaskellSadbParams, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error) {
	rsp, err := c.GetIndexHaskellSadb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHaskellSadbResponse(rsp)
}

// GetIndexHclWithBodyWithResponse request with arbitrary body returning *GetIndexHclResponse
func (c *ClientWithResponses) GetIndexHclWithBodyWithResponse(ctx context.Context, params *GetIndexHclParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error) {
	rsp, err := c.GetIndexHclWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHclResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHclWithResponse(ctx context.Context, params *GetIndexHclParams, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error) {
	rsp, err := c.GetIndexHcl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHclResponse(rsp)
}

// GetIndexHexWithBodyWithResponse request with arbitrary body returning *GetIndexHexResponse
func (c *ClientWithResponses) GetIndexHexWithBodyWithResponse(ctx context.Context, params *GetIndexHexParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error) {
	rsp, err := c.GetIndexHexWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHexResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHexWithResponse(ctx context.Context, params *GetIndexHexParams, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error) {
	rsp, err := c.GetIndexHex(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHexResponse(rsp)
}

// GetIndexHikvisionWithBodyWithResponse request with arbitrary body returning *GetIndexHikvisionResponse
func (c *ClientWithResponses) GetIndexHikvisionWithBodyWithResponse(ctx context.Context, params *GetIndexHikvisionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error) {
	rsp, err := c.GetIndexHikvisionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHikvisionResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHikvisionWithResponse(ctx context.Context, params *GetIndexHikvisionParams, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error) {
	rsp, err := c.GetIndexHikvision(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHikvisionResponse(rsp)
}

// GetIndexHillromWithBodyWithResponse request with arbitrary body returning *GetIndexHillromResponse
func (c *ClientWithResponses) GetIndexHillromWithBodyWithResponse(ctx context.Context, params *GetIndexHillromParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error) {
	rsp, err := c.GetIndexHillromWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHillromResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHillromWithResponse(ctx context.Context, params *GetIndexHillromParams, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error) {
	rsp, err := c.GetIndexHillrom(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHillromResponse(rsp)
}

// GetIndexHitachiWithBodyWithResponse request with arbitrary body returning *GetIndexHitachiResponse
func (c *ClientWithResponses) GetIndexHitachiWithBodyWithResponse(ctx context.Context, params *GetIndexHitachiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error) {
	rsp, err := c.GetIndexHitachiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHitachiWithResponse(ctx context.Context, params *GetIndexHitachiParams, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error) {
	rsp, err := c.GetIndexHitachi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiResponse(rsp)
}

// GetIndexHitachiEnergyWithBodyWithResponse request with arbitrary body returning *GetIndexHitachiEnergyResponse
func (c *ClientWithResponses) GetIndexHitachiEnergyWithBodyWithResponse(ctx context.Context, params *GetIndexHitachiEnergyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error) {
	rsp, err := c.GetIndexHitachiEnergyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiEnergyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHitachiEnergyWithResponse(ctx context.Context, params *GetIndexHitachiEnergyParams, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error) {
	rsp, err := c.GetIndexHitachiEnergy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiEnergyResponse(rsp)
}

// GetIndexHkcertWithBodyWithResponse request with arbitrary body returning *GetIndexHkcertResponse
func (c *ClientWithResponses) GetIndexHkcertWithBodyWithResponse(ctx context.Context, params *GetIndexHkcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error) {
	rsp, err := c.GetIndexHkcertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHkcertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHkcertWithResponse(ctx context.Context, params *GetIndexHkcertParams, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error) {
	rsp, err := c.GetIndexHkcert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHkcertResponse(rsp)
}

// GetIndexHoneywellWithBodyWithResponse request with arbitrary body returning *GetIndexHoneywellResponse
func (c *ClientWithResponses) GetIndexHoneywellWithBodyWithResponse(ctx context.Context, params *GetIndexHoneywellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error) {
	rsp, err := c.GetIndexHoneywellWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHoneywellResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHoneywellWithResponse(ctx context.Context, params *GetIndexHoneywellParams, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error) {
	rsp, err := c.GetIndexHoneywell(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHoneywellResponse(rsp)
}

// GetIndexHpWithBodyWithResponse request with arbitrary body returning *GetIndexHpResponse
func (c *ClientWithResponses) GetIndexHpWithBodyWithResponse(ctx context.Context, params *GetIndexHpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error) {
	rsp, err := c.GetIndexHpWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHpWithResponse(ctx context.Context, params *GetIndexHpParams, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error) {
	rsp, err := c.GetIndexHp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHpResponse(rsp)
}

// GetIndexHuaweiEulerosWithBodyWithResponse request with arbitrary body returning *GetIndexHuaweiEulerosResponse
func (c *ClientWithResponses) GetIndexHuaweiEulerosWithBodyWithResponse(ctx context.Context, params *GetIndexHuaweiEulerosParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error) {
	rsp, err := c.GetIndexHuaweiEulerosWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiEulerosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHuaweiEulerosWithResponse(ctx context.Context, params *GetIndexHuaweiEulerosParams, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error) {
	rsp, err := c.GetIndexHuaweiEuleros(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiEulerosResponse(rsp)
}

// GetIndexHuaweiIpsWithBodyWithResponse request with arbitrary body returning *GetIndexHuaweiIpsResponse
func (c *ClientWithResponses) GetIndexHuaweiIpsWithBodyWithResponse(ctx context.Context, params *GetIndexHuaweiIpsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error) {
	rsp, err := c.GetIndexHuaweiIpsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiIpsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHuaweiIpsWithResponse(ctx context.Context, params *GetIndexHuaweiIpsParams, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error) {
	rsp, err := c.GetIndexHuaweiIps(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiIpsResponse(rsp)
}

// GetIndexHuaweiPsirtWithBodyWithResponse request with arbitrary body returning *GetIndexHuaweiPsirtResponse
func (c *ClientWithResponses) GetIndexHuaweiPsirtWithBodyWithResponse(ctx context.Context, params *GetIndexHuaweiPsirtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error) {
	rsp, err := c.GetIndexHuaweiPsirtWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiPsirtResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHuaweiPsirtWithResponse(ctx context.Context, params *GetIndexHuaweiPsirtParams, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error) {
	rsp, err := c.GetIndexHuaweiPsirt(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiPsirtResponse(rsp)
}

// GetIndexIavaWithBodyWithResponse request with arbitrary body returning *GetIndexIavaResponse
func (c *ClientWithResponses) GetIndexIavaWithBodyWithResponse(ctx context.Context, params *GetIndexIavaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error) {
	rsp, err := c.GetIndexIavaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIavaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIavaWithResponse(ctx context.Context, params *GetIndexIavaParams, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error) {
	rsp, err := c.GetIndexIava(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIavaResponse(rsp)
}

// GetIndexIbmWithBodyWithResponse request with arbitrary body returning *GetIndexIbmResponse
func (c *ClientWithResponses) GetIndexIbmWithBodyWithResponse(ctx context.Context, params *GetIndexIbmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error) {
	rsp, err := c.GetIndexIbmWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIbmResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIbmWithResponse(ctx context.Context, params *GetIndexIbmParams, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error) {
	rsp, err := c.GetIndexIbm(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIbmResponse(rsp)
}

// GetIndexIdemiaWithBodyWithResponse request with arbitrary body returning *GetIndexIdemiaResponse
func (c *ClientWithResponses) GetIndexIdemiaWithBodyWithResponse(ctx context.Context, params *GetIndexIdemiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error) {
	rsp, err := c.GetIndexIdemiaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIdemiaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIdemiaWithResponse(ctx context.Context, params *GetIndexIdemiaParams, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error) {
	rsp, err := c.GetIndexIdemia(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIdemiaResponse(rsp)
}

// GetIndexIlAlertsWithBodyWithResponse request with arbitrary body returning *GetIndexIlAlertsResponse
func (c *ClientWithResponses) GetIndexIlAlertsWithBodyWithResponse(ctx context.Context, params *GetIndexIlAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error) {
	rsp, err := c.GetIndexIlAlertsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlAlertsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIlAlertsWithResponse(ctx context.Context, params *GetIndexIlAlertsParams, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error) {
	rsp, err := c.GetIndexIlAlerts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlAlertsResponse(rsp)
}

// GetIndexIlVulnerabilitiesWithBodyWithResponse request with arbitrary body returning *GetIndexIlVulnerabilitiesResponse
func (c *ClientWithResponses) GetIndexIlVulnerabilitiesWithBodyWithResponse(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexIlVulnerabilitiesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlVulnerabilitiesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIlVulnerabilitiesWithResponse(ctx context.Context, params *GetIndexIlVulnerabilitiesParams, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexIlVulnerabilities(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlVulnerabilitiesResponse(rsp)
}

// GetIndexIncibeWithBodyWithResponse request with arbitrary body returning *GetIndexIncibeResponse
func (c *ClientWithResponses) GetIndexIncibeWithBodyWithResponse(ctx context.Context, params *GetIndexIncibeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error) {
	rsp, err := c.GetIndexIncibeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIncibeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIncibeWithResponse(ctx context.Context, params *GetIndexIncibeParams, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error) {
	rsp, err := c.GetIndexIncibe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIncibeResponse(rsp)
}

// GetIndexInitialAccessWithBodyWithResponse request with arbitrary body returning *GetIndexInitialAccessResponse
func (c *ClientWithResponses) GetIndexInitialAccessWithBodyWithResponse(ctx context.Context, params *GetIndexInitialAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error) {
	rsp, err := c.GetIndexInitialAccessWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessResponse(rsp)
}

func (c *ClientWithResponses) GetIndexInitialAccessWithResponse(ctx context.Context, params *GetIndexInitialAccessParams, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error) {
	rsp, err := c.GetIndexInitialAccess(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessResponse(rsp)
}

// GetIndexInitialAccessGitWithBodyWithResponse request with arbitrary body returning *GetIndexInitialAccessGitResponse
func (c *ClientWithResponses) GetIndexInitialAccessGitWithBodyWithResponse(ctx context.Context, params *GetIndexInitialAccessGitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error) {
	rsp, err := c.GetIndexInitialAccessGitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessGitResponse(rsp)
}

func (c *ClientWithResponses) GetIndexInitialAccessGitWithResponse(ctx context.Context, params *GetIndexInitialAccessGitParams, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error) {
	rsp, err := c.GetIndexInitialAccessGit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessGitResponse(rsp)
}

// GetIndexIntelWithBodyWithResponse request with arbitrary body returning *GetIndexIntelResponse
func (c *ClientWithResponses) GetIndexIntelWithBodyWithResponse(ctx context.Context, params *GetIndexIntelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error) {
	rsp, err := c.GetIndexIntelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIntelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIntelWithResponse(ctx context.Context, params *GetIndexIntelParams, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error) {
	rsp, err := c.GetIndexIntel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIntelResponse(rsp)
}

// GetIndexIpintel10dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel10dResponse
func (c *ClientWithResponses) GetIndexIpintel10dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel10dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error) {
	rsp, err := c.GetIndexIpintel10dWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel10dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel10dWithResponse(ctx context.Context, params *GetIndexIpintel10dParams, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error) {
	rsp, err := c.GetIndexIpintel10d(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel10dResponse(rsp)
}

// GetIndexIpintel30dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel30dResponse
func (c *ClientWithResponses) GetIndexIpintel30dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel30dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error) {
	rsp, err := c.GetIndexIpintel30dWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel30dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel30dWithResponse(ctx context.Context, params *GetIndexIpintel30dParams, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error) {
	rsp, err := c.GetIndexIpintel30d(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel30dResponse(rsp)
}

// GetIndexIpintel3dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel3dResponse
func (c *ClientWithResponses) GetIndexIpintel3dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel3dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error) {
	rsp, err := c.GetIndexIpintel3dWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel3dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel3dWithResponse(ctx context.Context, params *GetIndexIpintel3dParams, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error) {
	rsp, err := c.GetIndexIpintel3d(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel3dResponse(rsp)
}

// GetIndexIpintel90dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel90dResponse
func (c *ClientWithResponses) GetIndexIpintel90dWithBodyWithResponse(ctx context.Context, params *GetIndexIpintel90dParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error) {
	rsp, err := c.GetIndexIpintel90dWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel90dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel90dWithResponse(ctx context.Context, params *GetIndexIpintel90dParams, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error) {
	rsp, err := c.GetIndexIpintel90d(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel90dResponse(rsp)
}

// GetIndexIstioWithBodyWithResponse request with arbitrary body returning *GetIndexIstioResponse
func (c *ClientWithResponses) GetIndexIstioWithBodyWithResponse(ctx context.Context, params *GetIndexIstioParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error) {
	rsp, err := c.GetIndexIstioWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIstioResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIstioWithResponse(ctx context.Context, params *GetIndexIstioParams, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error) {
	rsp, err := c.GetIndexIstio(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIstioResponse(rsp)
}

// GetIndexIvantiWithBodyWithResponse request with arbitrary body returning *GetIndexIvantiResponse
func (c *ClientWithResponses) GetIndexIvantiWithBodyWithResponse(ctx context.Context, params *GetIndexIvantiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error) {
	rsp, err := c.GetIndexIvantiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIvantiWithResponse(ctx context.Context, params *GetIndexIvantiParams, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error) {
	rsp, err := c.GetIndexIvanti(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiResponse(rsp)
}

// GetIndexIvantiRssWithBodyWithResponse request with arbitrary body returning *GetIndexIvantiRssResponse
func (c *ClientWithResponses) GetIndexIvantiRssWithBodyWithResponse(ctx context.Context, params *GetIndexIvantiRssParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error) {
	rsp, err := c.GetIndexIvantiRssWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiRssResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIvantiRssWithResponse(ctx context.Context, params *GetIndexIvantiRssParams, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error) {
	rsp, err := c.GetIndexIvantiRss(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiRssResponse(rsp)
}

// GetIndexJenkinsWithBodyWithResponse request with arbitrary body returning *GetIndexJenkinsResponse
func (c *ClientWithResponses) GetIndexJenkinsWithBodyWithResponse(ctx context.Context, params *GetIndexJenkinsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error) {
	rsp, err := c.GetIndexJenkinsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJenkinsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJenkinsWithResponse(ctx context.Context, params *GetIndexJenkinsParams, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error) {
	rsp, err := c.GetIndexJenkins(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJenkinsResponse(rsp)
}

// GetIndexJetbrainsWithBodyWithResponse request with arbitrary body returning *GetIndexJetbrainsResponse
func (c *ClientWithResponses) GetIndexJetbrainsWithBodyWithResponse(ctx context.Context, params *GetIndexJetbrainsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error) {
	rsp, err := c.GetIndexJetbrainsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJetbrainsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJetbrainsWithResponse(ctx context.Context, params *GetIndexJetbrainsParams, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error) {
	rsp, err := c.GetIndexJetbrains(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJetbrainsResponse(rsp)
}

// GetIndexJfrogWithBodyWithResponse request with arbitrary body returning *GetIndexJfrogResponse
func (c *ClientWithResponses) GetIndexJfrogWithBodyWithResponse(ctx context.Context, params *GetIndexJfrogParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error) {
	rsp, err := c.GetIndexJfrogWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJfrogResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJfrogWithResponse(ctx context.Context, params *GetIndexJfrogParams, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error) {
	rsp, err := c.GetIndexJfrog(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJfrogResponse(rsp)
}

// GetIndexJnjWithBodyWithResponse request with arbitrary body returning *GetIndexJnjResponse
func (c *ClientWithResponses) GetIndexJnjWithBodyWithResponse(ctx context.Context, params *GetIndexJnjParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error) {
	rsp, err := c.GetIndexJnjWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJnjResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJnjWithResponse(ctx context.Context, params *GetIndexJnjParams, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error) {
	rsp, err := c.GetIndexJnj(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJnjResponse(rsp)
}

// GetIndexJvnWithBodyWithResponse request with arbitrary body returning *GetIndexJvnResponse
func (c *ClientWithResponses) GetIndexJvnWithBodyWithResponse(ctx context.Context, params *GetIndexJvnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJvnResponse, error) {
	rsp, err := c.GetIndexJvnWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJvnResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJvnWithResponse(ctx context.Context, params *GetIndexJvnParams, body GetIndexJvnJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJvnResponse, error) {
	rsp, err := c.GetIndexJvn(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJvnResponse(rsp)
}

// GetIndexJvndbWithBodyWithResponse request with arbitrary body returning *GetIndexJvndbResponse
func (c *ClientWithResponses) GetIndexJvndbWithBodyWithResponse(ctx context.Context, params *GetIndexJvndbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error) {
	rsp, err := c.GetIndexJvndbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJvndbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJvndbWithResponse(ctx context.Context, params *GetIndexJvndbParams, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error) {
	rsp, err := c.GetIndexJvndb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJvndbResponse(rsp)
}

// GetIndexKasperskyIcsCertWithBodyWithResponse request with arbitrary body returning *GetIndexKasperskyIcsCertResponse
func (c *ClientWithResponses) GetIndexKasperskyIcsCertWithBodyWithResponse(ctx context.Context, params *GetIndexKasperskyIcsCertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error) {
	rsp, err := c.GetIndexKasperskyIcsCertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKasperskyIcsCertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKasperskyIcsCertWithResponse(ctx context.Context, params *GetIndexKasperskyIcsCertParams, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error) {
	rsp, err := c.GetIndexKasperskyIcsCert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKasperskyIcsCertResponse(rsp)
}

// GetIndexKorelogicWithBodyWithResponse request with arbitrary body returning *GetIndexKorelogicResponse
func (c *ClientWithResponses) GetIndexKorelogicWithBodyWithResponse(ctx context.Context, params *GetIndexKorelogicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKorelogicResponse, error) {
	rsp, err := c.GetIndexKorelogicWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKorelogicResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKorelogicWithResponse(ctx context.Context, params *GetIndexKorelogicParams, body GetIndexKorelogicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKorelogicResponse, error) {
	rsp, err := c.GetIndexKorelogic(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKorelogicResponse(rsp)
}

// GetIndexKrcertSecurityNoticesWithBodyWithResponse request with arbitrary body returning *GetIndexKrcertSecurityNoticesResponse
func (c *ClientWithResponses) GetIndexKrcertSecurityNoticesWithBodyWithResponse(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error) {
	rsp, err := c.GetIndexKrcertSecurityNoticesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertSecurityNoticesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKrcertSecurityNoticesWithResponse(ctx context.Context, params *GetIndexKrcertSecurityNoticesParams, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error) {
	rsp, err := c.GetIndexKrcertSecurityNotices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertSecurityNoticesResponse(rsp)
}

// GetIndexKrcertVulnerabilitiesWithBodyWithResponse request with arbitrary body returning *GetIndexKrcertVulnerabilitiesResponse
func (c *ClientWithResponses) GetIndexKrcertVulnerabilitiesWithBodyWithResponse(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexKrcertVulnerabilitiesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertVulnerabilitiesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKrcertVulnerabilitiesWithResponse(ctx context.Context, params *GetIndexKrcertVulnerabilitiesParams, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexKrcertVulnerabilities(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertVulnerabilitiesResponse(rsp)
}

// GetIndexKubernetesWithBodyWithResponse request with arbitrary body returning *GetIndexKubernetesResponse
func (c *ClientWithResponses) GetIndexKubernetesWithBodyWithResponse(ctx context.Context, params *GetIndexKubernetesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error) {
	rsp, err := c.GetIndexKubernetesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKubernetesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKubernetesWithResponse(ctx context.Context, params *GetIndexKubernetesParams, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error) {
	rsp, err := c.GetIndexKubernetes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKubernetesResponse(rsp)
}

// GetIndexLenovoWithBodyWithResponse request with arbitrary body returning *GetIndexLenovoResponse
func (c *ClientWithResponses) GetIndexLenovoWithBodyWithResponse(ctx context.Context, params *GetIndexLenovoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error) {
	rsp, err := c.GetIndexLenovoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLenovoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLenovoWithResponse(ctx context.Context, params *GetIndexLenovoParams, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error) {
	rsp, err := c.GetIndexLenovo(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLenovoResponse(rsp)
}

// GetIndexLexmarkWithBodyWithResponse request with arbitrary body returning *GetIndexLexmarkResponse
func (c *ClientWithResponses) GetIndexLexmarkWithBodyWithResponse(ctx context.Context, params *GetIndexLexmarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error) {
	rsp, err := c.GetIndexLexmarkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLexmarkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLexmarkWithResponse(ctx context.Context, params *GetIndexLexmarkParams, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error) {
	rsp, err := c.GetIndexLexmark(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLexmarkResponse(rsp)
}

// GetIndexLgWithBodyWithResponse request with arbitrary body returning *GetIndexLgResponse
func (c *ClientWithResponses) GetIndexLgWithBodyWithResponse(ctx context.Context, params *GetIndexLgParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error) {
	rsp, err := c.GetIndexLgWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLgResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLgWithResponse(ctx context.Context, params *GetIndexLgParams, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error) {
	rsp, err := c.GetIndexLg(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLgResponse(rsp)
}

// GetIndexLibreOfficeWithBodyWithResponse request with arbitrary body returning *GetIndexLibreOfficeResponse
func (c *ClientWithResponses) GetIndexLibreOfficeWithBodyWithResponse(ctx context.Context, params *GetIndexLibreOfficeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error) {
	rsp, err := c.GetIndexLibreOfficeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLibreOfficeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLibreOfficeWithResponse(ctx context.Context, params *GetIndexLibreOfficeParams, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error) {
	rsp, err := c.GetIndexLibreOffice(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLibreOfficeResponse(rsp)
}

// GetIndexLinuxWithBodyWithResponse request with arbitrary body returning *GetIndexLinuxResponse
func (c *ClientWithResponses) GetIndexLinuxWithBodyWithResponse(ctx context.Context, params *GetIndexLinuxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error) {
	rsp, err := c.GetIndexLinuxWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLinuxResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLinuxWithResponse(ctx context.Context, params *GetIndexLinuxParams, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error) {
	rsp, err := c.GetIndexLinux(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLinuxResponse(rsp)
}

// GetIndexMFilesWithBodyWithResponse request with arbitrary body returning *GetIndexMFilesResponse
func (c *ClientWithResponses) GetIndexMFilesWithBodyWithResponse(ctx context.Context, params *GetIndexMFilesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error) {
	rsp, err := c.GetIndexMFilesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMFilesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMFilesWithResponse(ctx context.Context, params *GetIndexMFilesParams, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error) {
	rsp, err := c.GetIndexMFiles(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMFilesResponse(rsp)
}

// GetIndexMacertWithBodyWithResponse request with arbitrary body returning *GetIndexMacertResponse
func (c *ClientWithResponses) GetIndexMacertWithBodyWithResponse(ctx context.Context, params *GetIndexMacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error) {
	rsp, err := c.GetIndexMacertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMacertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMacertWithResponse(ctx context.Context, params *GetIndexMacertParams, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error) {
	rsp, err := c.GetIndexMacert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMacertResponse(rsp)
}

// GetIndexManageengineWithBodyWithResponse request with arbitrary body returning *GetIndexManageengineResponse
func (c *ClientWithResponses) GetIndexManageengineWithBodyWithResponse(ctx context.Context, params *GetIndexManageengineParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error) {
	rsp, err := c.GetIndexManageengineWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexManageengineResponse(rsp)
}

func (c *ClientWithResponses) GetIndexManageengineWithResponse(ctx context.Context, params *GetIndexManageengineParams, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error) {
	rsp, err := c.GetIndexManageengine(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexManageengineResponse(rsp)
}

// GetIndexMavenWithBodyWithResponse request with arbitrary body returning *GetIndexMavenResponse
func (c *ClientWithResponses) GetIndexMavenWithBodyWithResponse(ctx context.Context, params *GetIndexMavenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error) {
	rsp, err := c.GetIndexMavenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMavenResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMavenWithResponse(ctx context.Context, params *GetIndexMavenParams, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error) {
	rsp, err := c.GetIndexMaven(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMavenResponse(rsp)
}

// GetIndexMbedTlsWithBodyWithResponse request with arbitrary body returning *GetIndexMbedTlsResponse
func (c *ClientWithResponses) GetIndexMbedTlsWithBodyWithResponse(ctx context.Context, params *GetIndexMbedTlsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error) {
	rsp, err := c.GetIndexMbedTlsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMbedTlsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMbedTlsWithResponse(ctx context.Context, params *GetIndexMbedTlsParams, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error) {
	rsp, err := c.GetIndexMbedTls(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMbedTlsResponse(rsp)
}

// GetIndexMediatekWithBodyWithResponse request with arbitrary body returning *GetIndexMediatekResponse
func (c *ClientWithResponses) GetIndexMediatekWithBodyWithResponse(ctx context.Context, params *GetIndexMediatekParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error) {
	rsp, err := c.GetIndexMediatekWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMediatekResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMediatekWithResponse(ctx context.Context, params *GetIndexMediatekParams, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error) {
	rsp, err := c.GetIndexMediatek(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMediatekResponse(rsp)
}

// GetIndexMedtronicWithBodyWithResponse request with arbitrary body returning *GetIndexMedtronicResponse
func (c *ClientWithResponses) GetIndexMedtronicWithBodyWithResponse(ctx context.Context, params *GetIndexMedtronicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error) {
	rsp, err := c.GetIndexMedtronicWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMedtronicResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMedtronicWithResponse(ctx context.Context, params *GetIndexMedtronicParams, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error) {
	rsp, err := c.GetIndexMedtronic(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMedtronicResponse(rsp)
}

// GetIndexMendixWithBodyWithResponse request with arbitrary body returning *GetIndexMendixResponse
func (c *ClientWithResponses) GetIndexMendixWithBodyWithResponse(ctx context.Context, params *GetIndexMendixParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error) {
	rsp, err := c.GetIndexMendixWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMendixResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMendixWithResponse(ctx context.Context, params *GetIndexMendixParams, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error) {
	rsp, err := c.GetIndexMendix(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMendixResponse(rsp)
}

// GetIndexMetasploitWithBodyWithResponse request with arbitrary body returning *GetIndexMetasploitResponse
func (c *ClientWithResponses) GetIndexMetasploitWithBodyWithResponse(ctx context.Context, params *GetIndexMetasploitParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error) {
	rsp, err := c.GetIndexMetasploitWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMetasploitResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMetasploitWithResponse(ctx context.Context, params *GetIndexMetasploitParams, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error) {
	rsp, err := c.GetIndexMetasploit(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMetasploitResponse(rsp)
}

// GetIndexMicrosoftCvrfWithBodyWithResponse request with arbitrary body returning *GetIndexMicrosoftCvrfResponse
func (c *ClientWithResponses) GetIndexMicrosoftCvrfWithBodyWithResponse(ctx context.Context, params *GetIndexMicrosoftCvrfParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error) {
	rsp, err := c.GetIndexMicrosoftCvrfWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftCvrfResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMicrosoftCvrfWithResponse(ctx context.Context, params *GetIndexMicrosoftCvrfParams, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error) {
	rsp, err := c.GetIndexMicrosoftCvrf(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftCvrfResponse(rsp)
}

// GetIndexMicrosoftKbWithBodyWithResponse request with arbitrary body returning *GetIndexMicrosoftKbResponse
func (c *ClientWithResponses) GetIndexMicrosoftKbWithBodyWithResponse(ctx context.Context, params *GetIndexMicrosoftKbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error) {
	rsp, err := c.GetIndexMicrosoftKbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftKbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMicrosoftKbWithResponse(ctx context.Context, params *GetIndexMicrosoftKbParams, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error) {
	rsp, err := c.GetIndexMicrosoftKb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftKbResponse(rsp)
}

// GetIndexMikrotikWithBodyWithResponse request with arbitrary body returning *GetIndexMikrotikResponse
func (c *ClientWithResponses) GetIndexMikrotikWithBodyWithResponse(ctx context.Context, params *GetIndexMikrotikParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error) {
	rsp, err := c.GetIndexMikrotikWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMikrotikResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMikrotikWithResponse(ctx context.Context, params *GetIndexMikrotikParams, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error) {
	rsp, err := c.GetIndexMikrotik(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMikrotikResponse(rsp)
}

// GetIndexMindrayWithBodyWithResponse request with arbitrary body returning *GetIndexMindrayResponse
func (c *ClientWithResponses) GetIndexMindrayWithBodyWithResponse(ctx context.Context, params *GetIndexMindrayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error) {
	rsp, err := c.GetIndexMindrayWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMindrayResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMindrayWithResponse(ctx context.Context, params *GetIndexMindrayParams, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error) {
	rsp, err := c.GetIndexMindray(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMindrayResponse(rsp)
}

// GetIndexMispThreatActorsWithBodyWithResponse request with arbitrary body returning *GetIndexMispThreatActorsResponse
func (c *ClientWithResponses) GetIndexMispThreatActorsWithBodyWithResponse(ctx context.Context, params *GetIndexMispThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error) {
	rsp, err := c.GetIndexMispThreatActorsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMispThreatActorsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMispThreatActorsWithResponse(ctx context.Context, params *GetIndexMispThreatActorsParams, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error) {
	rsp, err := c.GetIndexMispThreatActors(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMispThreatActorsResponse(rsp)
}

// GetIndexMitelWithBodyWithResponse request with arbitrary body returning *GetIndexMitelResponse
func (c *ClientWithResponses) GetIndexMitelWithBodyWithResponse(ctx context.Context, params *GetIndexMitelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error) {
	rsp, err := c.GetIndexMitelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitelWithResponse(ctx context.Context, params *GetIndexMitelParams, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error) {
	rsp, err := c.GetIndexMitel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitelResponse(rsp)
}

// GetIndexMitreAttackCveWithBodyWithResponse request with arbitrary body returning *GetIndexMitreAttackCveResponse
func (c *ClientWithResponses) GetIndexMitreAttackCveWithBodyWithResponse(ctx context.Context, params *GetIndexMitreAttackCveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error) {
	rsp, err := c.GetIndexMitreAttackCveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreAttackCveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitreAttackCveWithResponse(ctx context.Context, params *GetIndexMitreAttackCveParams, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error) {
	rsp, err := c.GetIndexMitreAttackCve(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreAttackCveResponse(rsp)
}

// GetIndexMitreCvelistV5WithBodyWithResponse request with arbitrary body returning *GetIndexMitreCvelistV5Response
func (c *ClientWithResponses) GetIndexMitreCvelistV5WithBodyWithResponse(ctx context.Context, params *GetIndexMitreCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreCvelistV5Response, error) {
	rsp, err := c.GetIndexMitreCvelistV5WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreCvelistV5Response(rsp)
}

func (c *ClientWithResponses) GetIndexMitreCvelistV5WithResponse(ctx context.Context, params *GetIndexMitreCvelistV5Params, body GetIndexMitreCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreCvelistV5Response, error) {
	rsp, err := c.GetIndexMitreCvelistV5(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreCvelistV5Response(rsp)
}

// GetIndexMitsubishiElectricWithBodyWithResponse request with arbitrary body returning *GetIndexMitsubishiElectricResponse
func (c *ClientWithResponses) GetIndexMitsubishiElectricWithBodyWithResponse(ctx context.Context, params *GetIndexMitsubishiElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error) {
	rsp, err := c.GetIndexMitsubishiElectricWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitsubishiElectricResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitsubishiElectricWithResponse(ctx context.Context, params *GetIndexMitsubishiElectricParams, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error) {
	rsp, err := c.GetIndexMitsubishiElectric(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitsubishiElectricResponse(rsp)
}

// GetIndexMongodbWithBodyWithResponse request with arbitrary body returning *GetIndexMongodbResponse
func (c *ClientWithResponses) GetIndexMongodbWithBodyWithResponse(ctx context.Context, params *GetIndexMongodbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error) {
	rsp, err := c.GetIndexMongodbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMongodbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMongodbWithResponse(ctx context.Context, params *GetIndexMongodbParams, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error) {
	rsp, err := c.GetIndexMongodb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMongodbResponse(rsp)
}

// GetIndexMoxaWithBodyWithResponse request with arbitrary body returning *GetIndexMoxaResponse
func (c *ClientWithResponses) GetIndexMoxaWithBodyWithResponse(ctx context.Context, params *GetIndexMoxaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error) {
	rsp, err := c.GetIndexMoxaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMoxaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMoxaWithResponse(ctx context.Context, params *GetIndexMoxaParams, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error) {
	rsp, err := c.GetIndexMoxa(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMoxaResponse(rsp)
}

// GetIndexMozillaWithBodyWithResponse request with arbitrary body returning *GetIndexMozillaResponse
func (c *ClientWithResponses) GetIndexMozillaWithBodyWithResponse(ctx context.Context, params *GetIndexMozillaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error) {
	rsp, err := c.GetIndexMozillaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMozillaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMozillaWithResponse(ctx context.Context, params *GetIndexMozillaParams, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error) {
	rsp, err := c.GetIndexMozilla(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMozillaResponse(rsp)
}

// GetIndexNaverWithBodyWithResponse request with arbitrary body returning *GetIndexNaverResponse
func (c *ClientWithResponses) GetIndexNaverWithBodyWithResponse(ctx context.Context, params *GetIndexNaverParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error) {
	rsp, err := c.GetIndexNaverWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNaverResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNaverWithResponse(ctx context.Context, params *GetIndexNaverParams, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error) {
	rsp, err := c.GetIndexNaver(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNaverResponse(rsp)
}

// GetIndexNcscWithBodyWithResponse request with arbitrary body returning *GetIndexNcscResponse
func (c *ClientWithResponses) GetIndexNcscWithBodyWithResponse(ctx context.Context, params *GetIndexNcscParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNcscResponse, error) {
	rsp, err := c.GetIndexNcscWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNcscResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNcscWithResponse(ctx context.Context, params *GetIndexNcscParams, body GetIndexNcscJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNcscResponse, error) {
	rsp, err := c.GetIndexNcsc(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNcscResponse(rsp)
}

// GetIndexNcscCvesWithBodyWithResponse request with arbitrary body returning *GetIndexNcscCvesResponse
func (c *ClientWithResponses) GetIndexNcscCvesWithBodyWithResponse(ctx context.Context, params *GetIndexNcscCvesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNcscCvesResponse, error) {
	rsp, err := c.GetIndexNcscCvesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNcscCvesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNcscCvesWithResponse(ctx context.Context, params *GetIndexNcscCvesParams, body GetIndexNcscCvesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNcscCvesResponse, error) {
	rsp, err := c.GetIndexNcscCves(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNcscCvesResponse(rsp)
}

// GetIndexNecWithBodyWithResponse request with arbitrary body returning *GetIndexNecResponse
func (c *ClientWithResponses) GetIndexNecWithBodyWithResponse(ctx context.Context, params *GetIndexNecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error) {
	rsp, err := c.GetIndexNecWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNecWithResponse(ctx context.Context, params *GetIndexNecParams, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error) {
	rsp, err := c.GetIndexNec(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNecResponse(rsp)
}

// GetIndexNetappWithBodyWithResponse request with arbitrary body returning *GetIndexNetappResponse
func (c *ClientWithResponses) GetIndexNetappWithBodyWithResponse(ctx context.Context, params *GetIndexNetappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error) {
	rsp, err := c.GetIndexNetappWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetappResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetappWithResponse(ctx context.Context, params *GetIndexNetappParams, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error) {
	rsp, err := c.GetIndexNetapp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetappResponse(rsp)
}

// GetIndexNetgateWithBodyWithResponse request with arbitrary body returning *GetIndexNetgateResponse
func (c *ClientWithResponses) GetIndexNetgateWithBodyWithResponse(ctx context.Context, params *GetIndexNetgateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error) {
	rsp, err := c.GetIndexNetgateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgateResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetgateWithResponse(ctx context.Context, params *GetIndexNetgateParams, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error) {
	rsp, err := c.GetIndexNetgate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgateResponse(rsp)
}

// GetIndexNetgearWithBodyWithResponse request with arbitrary body returning *GetIndexNetgearResponse
func (c *ClientWithResponses) GetIndexNetgearWithBodyWithResponse(ctx context.Context, params *GetIndexNetgearParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error) {
	rsp, err := c.GetIndexNetgearWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgearResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetgearWithResponse(ctx context.Context, params *GetIndexNetgearParams, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error) {
	rsp, err := c.GetIndexNetgear(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgearResponse(rsp)
}

// GetIndexNetskopeWithBodyWithResponse request with arbitrary body returning *GetIndexNetskopeResponse
func (c *ClientWithResponses) GetIndexNetskopeWithBodyWithResponse(ctx context.Context, params *GetIndexNetskopeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error) {
	rsp, err := c.GetIndexNetskopeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetskopeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetskopeWithResponse(ctx context.Context, params *GetIndexNetskopeParams, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error) {
	rsp, err := c.GetIndexNetskope(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetskopeResponse(rsp)
}

// GetIndexNginxWithBodyWithResponse request with arbitrary body returning *GetIndexNginxResponse
func (c *ClientWithResponses) GetIndexNginxWithBodyWithResponse(ctx context.Context, params *GetIndexNginxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error) {
	rsp, err := c.GetIndexNginxWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNginxResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNginxWithResponse(ctx context.Context, params *GetIndexNginxParams, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error) {
	rsp, err := c.GetIndexNginx(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNginxResponse(rsp)
}

// GetIndexNhsWithBodyWithResponse request with arbitrary body returning *GetIndexNhsResponse
func (c *ClientWithResponses) GetIndexNhsWithBodyWithResponse(ctx context.Context, params *GetIndexNhsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error) {
	rsp, err := c.GetIndexNhsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNhsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNhsWithResponse(ctx context.Context, params *GetIndexNhsParams, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error) {
	rsp, err := c.GetIndexNhs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNhsResponse(rsp)
}

// GetIndexNiWithBodyWithResponse request with arbitrary body returning *GetIndexNiResponse
func (c *ClientWithResponses) GetIndexNiWithBodyWithResponse(ctx context.Context, params *GetIndexNiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error) {
	rsp, err := c.GetIndexNiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNiWithResponse(ctx context.Context, params *GetIndexNiParams, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error) {
	rsp, err := c.GetIndexNi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNiResponse(rsp)
}

// GetIndexNistNvdWithBodyWithResponse request with arbitrary body returning *GetIndexNistNvdResponse
func (c *ClientWithResponses) GetIndexNistNvdWithBodyWithResponse(ctx context.Context, params *GetIndexNistNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error) {
	rsp, err := c.GetIndexNistNvdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNistNvdWithResponse(ctx context.Context, params *GetIndexNistNvdParams, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error) {
	rsp, err := c.GetIndexNistNvd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvdResponse(rsp)
}

// GetIndexNistNvd2WithBodyWithResponse request with arbitrary body returning *GetIndexNistNvd2Response
func (c *ClientWithResponses) GetIndexNistNvd2WithBodyWithResponse(ctx context.Context, params *GetIndexNistNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error) {
	rsp, err := c.GetIndexNistNvd2WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2Response(rsp)
}

func (c *ClientWithResponses) GetIndexNistNvd2WithResponse(ctx context.Context, params *GetIndexNistNvd2Params, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error) {
	rsp, err := c.GetIndexNistNvd2(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2Response(rsp)
}

// GetIndexNistNvd2CpematchWithBodyWithResponse request with arbitrary body returning *GetIndexNistNvd2CpematchResponse
func (c *ClientWithResponses) GetIndexNistNvd2CpematchWithBodyWithResponse(ctx context.Context, params *GetIndexNistNvd2CpematchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error) {
	rsp, err := c.GetIndexNistNvd2CpematchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2CpematchResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNistNvd2CpematchWithResponse(ctx context.Context, params *GetIndexNistNvd2CpematchParams, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error) {
	rsp, err := c.GetIndexNistNvd2Cpematch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2CpematchResponse(rsp)
}

// GetIndexNodeSecurityWithBodyWithResponse request with arbitrary body returning *GetIndexNodeSecurityResponse
func (c *ClientWithResponses) GetIndexNodeSecurityWithBodyWithResponse(ctx context.Context, params *GetIndexNodeSecurityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error) {
	rsp, err := c.GetIndexNodeSecurityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodeSecurityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNodeSecurityWithResponse(ctx context.Context, params *GetIndexNodeSecurityParams, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error) {
	rsp, err := c.GetIndexNodeSecurity(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodeSecurityResponse(rsp)
}

// GetIndexNodejsWithBodyWithResponse request with arbitrary body returning *GetIndexNodejsResponse
func (c *ClientWithResponses) GetIndexNodejsWithBodyWithResponse(ctx context.Context, params *GetIndexNodejsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error) {
	rsp, err := c.GetIndexNodejsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodejsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNodejsWithResponse(ctx context.Context, params *GetIndexNodejsParams, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error) {
	rsp, err := c.GetIndexNodejs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodejsResponse(rsp)
}

// GetIndexNokiaWithBodyWithResponse request with arbitrary body returning *GetIndexNokiaResponse
func (c *ClientWithResponses) GetIndexNokiaWithBodyWithResponse(ctx context.Context, params *GetIndexNokiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error) {
	rsp, err := c.GetIndexNokiaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNokiaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNokiaWithResponse(ctx context.Context, params *GetIndexNokiaParams, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error) {
	rsp, err := c.GetIndexNokia(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNokiaResponse(rsp)
}

// GetIndexNozomiWithBodyWithResponse request with arbitrary body returning *GetIndexNozomiResponse
func (c *ClientWithResponses) GetIndexNozomiWithBodyWithResponse(ctx context.Context, params *GetIndexNozomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error) {
	rsp, err := c.GetIndexNozomiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNozomiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNozomiWithResponse(ctx context.Context, params *GetIndexNozomiParams, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error) {
	rsp, err := c.GetIndexNozomi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNozomiResponse(rsp)
}

// GetIndexNpmWithBodyWithResponse request with arbitrary body returning *GetIndexNpmResponse
func (c *ClientWithResponses) GetIndexNpmWithBodyWithResponse(ctx context.Context, params *GetIndexNpmParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error) {
	rsp, err := c.GetIndexNpmWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNpmResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNpmWithResponse(ctx context.Context, params *GetIndexNpmParams, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error) {
	rsp, err := c.GetIndexNpm(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNpmResponse(rsp)
}

// GetIndexNtpWithBodyWithResponse request with arbitrary body returning *GetIndexNtpResponse
func (c *ClientWithResponses) GetIndexNtpWithBodyWithResponse(ctx context.Context, params *GetIndexNtpParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNtpResponse, error) {
	rsp, err := c.GetIndexNtpWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNtpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNtpWithResponse(ctx context.Context, params *GetIndexNtpParams, body GetIndexNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNtpResponse, error) {
	rsp, err := c.GetIndexNtp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNtpResponse(rsp)
}

// GetIndexNugetWithBodyWithResponse request with arbitrary body returning *GetIndexNugetResponse
func (c *ClientWithResponses) GetIndexNugetWithBodyWithResponse(ctx context.Context, params *GetIndexNugetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error) {
	rsp, err := c.GetIndexNugetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNugetResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNugetWithResponse(ctx context.Context, params *GetIndexNugetParams, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error) {
	rsp, err := c.GetIndexNuget(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNugetResponse(rsp)
}

// GetIndexNvidiaWithBodyWithResponse request with arbitrary body returning *GetIndexNvidiaResponse
func (c *ClientWithResponses) GetIndexNvidiaWithBodyWithResponse(ctx context.Context, params *GetIndexNvidiaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error) {
	rsp, err := c.GetIndexNvidiaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNvidiaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNvidiaWithResponse(ctx context.Context, params *GetIndexNvidiaParams, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error) {
	rsp, err := c.GetIndexNvidia(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNvidiaResponse(rsp)
}

// GetIndexNzAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexNzAdvisoriesResponse
func (c *ClientWithResponses) GetIndexNzAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexNzAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error) {
	rsp, err := c.GetIndexNzAdvisoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNzAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNzAdvisoriesWithResponse(ctx context.Context, params *GetIndexNzAdvisoriesParams, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error) {
	rsp, err := c.GetIndexNzAdvisories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNzAdvisoriesResponse(rsp)
}

// GetIndexOctopusDeployWithBodyWithResponse request with arbitrary body returning *GetIndexOctopusDeployResponse
func (c *ClientWithResponses) GetIndexOctopusDeployWithBodyWithResponse(ctx context.Context, params *GetIndexOctopusDeployParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error) {
	rsp, err := c.GetIndexOctopusDeployWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOctopusDeployResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOctopusDeployWithResponse(ctx context.Context, params *GetIndexOctopusDeployParams, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error) {
	rsp, err := c.GetIndexOctopusDeploy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOctopusDeployResponse(rsp)
}

// GetIndexOktaWithBodyWithResponse request with arbitrary body returning *GetIndexOktaResponse
func (c *ClientWithResponses) GetIndexOktaWithBodyWithResponse(ctx context.Context, params *GetIndexOktaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error) {
	rsp, err := c.GetIndexOktaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOktaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOktaWithResponse(ctx context.Context, params *GetIndexOktaParams, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error) {
	rsp, err := c.GetIndexOkta(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOktaResponse(rsp)
}

// GetIndexOmronWithBodyWithResponse request with arbitrary body returning *GetIndexOmronResponse
func (c *ClientWithResponses) GetIndexOmronWithBodyWithResponse(ctx context.Context, params *GetIndexOmronParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error) {
	rsp, err := c.GetIndexOmronWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOmronResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOmronWithResponse(ctx context.Context, params *GetIndexOmronParams, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error) {
	rsp, err := c.GetIndexOmron(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOmronResponse(rsp)
}

// GetIndexOneEWithBodyWithResponse request with arbitrary body returning *GetIndexOneEResponse
func (c *ClientWithResponses) GetIndexOneEWithBodyWithResponse(ctx context.Context, params *GetIndexOneEParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error) {
	rsp, err := c.GetIndexOneEWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOneEResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOneEWithResponse(ctx context.Context, params *GetIndexOneEParams, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error) {
	rsp, err := c.GetIndexOneE(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOneEResponse(rsp)
}

// GetIndexOpamWithBodyWithResponse request with arbitrary body returning *GetIndexOpamResponse
func (c *ClientWithResponses) GetIndexOpamWithBodyWithResponse(ctx context.Context, params *GetIndexOpamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error) {
	rsp, err := c.GetIndexOpamWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpamResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpamWithResponse(ctx context.Context, params *GetIndexOpamParams, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error) {
	rsp, err := c.GetIndexOpam(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpamResponse(rsp)
}

// GetIndexOpenCvdbWithBodyWithResponse request with arbitrary body returning *GetIndexOpenCvdbResponse
func (c *ClientWithResponses) GetIndexOpenCvdbWithBodyWithResponse(ctx context.Context, params *GetIndexOpenCvdbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error) {
	rsp, err := c.GetIndexOpenCvdbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenCvdbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenCvdbWithResponse(ctx context.Context, params *GetIndexOpenCvdbParams, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error) {
	rsp, err := c.GetIndexOpenCvdb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenCvdbResponse(rsp)
}

// GetIndexOpenbsdWithBodyWithResponse request with arbitrary body returning *GetIndexOpenbsdResponse
func (c *ClientWithResponses) GetIndexOpenbsdWithBodyWithResponse(ctx context.Context, params *GetIndexOpenbsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error) {
	rsp, err := c.GetIndexOpenbsdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenbsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenbsdWithResponse(ctx context.Context, params *GetIndexOpenbsdParams, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error) {
	rsp, err := c.GetIndexOpenbsd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenbsdResponse(rsp)
}

// GetIndexOpensshWithBodyWithResponse request with arbitrary body returning *GetIndexOpensshResponse
func (c *ClientWithResponses) GetIndexOpensshWithBodyWithResponse(ctx context.Context, params *GetIndexOpensshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error) {
	rsp, err := c.GetIndexOpensshWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensshResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpensshWithResponse(ctx context.Context, params *GetIndexOpensshParams, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error) {
	rsp, err := c.GetIndexOpenssh(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensshResponse(rsp)
}

// GetIndexOpensslSecadvWithBodyWithResponse request with arbitrary body returning *GetIndexOpensslSecadvResponse
func (c *ClientWithResponses) GetIndexOpensslSecadvWithBodyWithResponse(ctx context.Context, params *GetIndexOpensslSecadvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error) {
	rsp, err := c.GetIndexOpensslSecadvWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensslSecadvResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpensslSecadvWithResponse(ctx context.Context, params *GetIndexOpensslSecadvParams, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error) {
	rsp, err := c.GetIndexOpensslSecadv(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensslSecadvResponse(rsp)
}

// GetIndexOpenstackWithBodyWithResponse request with arbitrary body returning *GetIndexOpenstackResponse
func (c *ClientWithResponses) GetIndexOpenstackWithBodyWithResponse(ctx context.Context, params *GetIndexOpenstackParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error) {
	rsp, err := c.GetIndexOpenstackWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenstackResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenstackWithResponse(ctx context.Context, params *GetIndexOpenstackParams, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error) {
	rsp, err := c.GetIndexOpenstack(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenstackResponse(rsp)
}

// GetIndexOpenwrtWithBodyWithResponse request with arbitrary body returning *GetIndexOpenwrtResponse
func (c *ClientWithResponses) GetIndexOpenwrtWithBodyWithResponse(ctx context.Context, params *GetIndexOpenwrtParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error) {
	rsp, err := c.GetIndexOpenwrtWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenwrtResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenwrtWithResponse(ctx context.Context, params *GetIndexOpenwrtParams, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error) {
	rsp, err := c.GetIndexOpenwrt(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenwrtResponse(rsp)
}

// GetIndexOracleWithBodyWithResponse request with arbitrary body returning *GetIndexOracleResponse
func (c *ClientWithResponses) GetIndexOracleWithBodyWithResponse(ctx context.Context, params *GetIndexOracleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error) {
	rsp, err := c.GetIndexOracleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOracleWithResponse(ctx context.Context, params *GetIndexOracleParams, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error) {
	rsp, err := c.GetIndexOracle(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleResponse(rsp)
}

// GetIndexOracleCpuWithBodyWithResponse request with arbitrary body returning *GetIndexOracleCpuResponse
func (c *ClientWithResponses) GetIndexOracleCpuWithBodyWithResponse(ctx context.Context, params *GetIndexOracleCpuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error) {
	rsp, err := c.GetIndexOracleCpuWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOracleCpuWithResponse(ctx context.Context, params *GetIndexOracleCpuParams, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error) {
	rsp, err := c.GetIndexOracleCpu(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuResponse(rsp)
}

// GetIndexOracleCpuCsafWithBodyWithResponse request with arbitrary body returning *GetIndexOracleCpuCsafResponse
func (c *ClientWithResponses) GetIndexOracleCpuCsafWithBodyWithResponse(ctx context.Context, params *GetIndexOracleCpuCsafParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error) {
	rsp, err := c.GetIndexOracleCpuCsafWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuCsafResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOracleCpuCsafWithResponse(ctx context.Context, params *GetIndexOracleCpuCsafParams, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error) {
	rsp, err := c.GetIndexOracleCpuCsaf(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuCsafResponse(rsp)
}

// GetIndexOsvWithBodyWithResponse request with arbitrary body returning *GetIndexOsvResponse
func (c *ClientWithResponses) GetIndexOsvWithBodyWithResponse(ctx context.Context, params *GetIndexOsvParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error) {
	rsp, err := c.GetIndexOsvWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOsvResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOsvWithResponse(ctx context.Context, params *GetIndexOsvParams, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error) {
	rsp, err := c.GetIndexOsv(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOsvResponse(rsp)
}

// GetIndexOtrsWithBodyWithResponse request with arbitrary body returning *GetIndexOtrsResponse
func (c *ClientWithResponses) GetIndexOtrsWithBodyWithResponse(ctx context.Context, params *GetIndexOtrsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error) {
	rsp, err := c.GetIndexOtrsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOtrsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOtrsWithResponse(ctx context.Context, params *GetIndexOtrsParams, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error) {
	rsp, err := c.GetIndexOtrs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOtrsResponse(rsp)
}

// GetIndexOwncloudWithBodyWithResponse request with arbitrary body returning *GetIndexOwncloudResponse
func (c *ClientWithResponses) GetIndexOwncloudWithBodyWithResponse(ctx context.Context, params *GetIndexOwncloudParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error) {
	rsp, err := c.GetIndexOwncloudWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOwncloudResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOwncloudWithResponse(ctx context.Context, params *GetIndexOwncloudParams, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error) {
	rsp, err := c.GetIndexOwncloud(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOwncloudResponse(rsp)
}

// GetIndexPalantirWithBodyWithResponse request with arbitrary body returning *GetIndexPalantirResponse
func (c *ClientWithResponses) GetIndexPalantirWithBodyWithResponse(ctx context.Context, params *GetIndexPalantirParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error) {
	rsp, err := c.GetIndexPalantirWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPalantirResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPalantirWithResponse(ctx context.Context, params *GetIndexPalantirParams, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error) {
	rsp, err := c.GetIndexPalantir(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPalantirResponse(rsp)
}

// GetIndexPaloAltoWithBodyWithResponse request with arbitrary body returning *GetIndexPaloAltoResponse
func (c *ClientWithResponses) GetIndexPaloAltoWithBodyWithResponse(ctx context.Context, params *GetIndexPaloAltoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error) {
	rsp, err := c.GetIndexPaloAltoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPaloAltoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPaloAltoWithResponse(ctx context.Context, params *GetIndexPaloAltoParams, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error) {
	rsp, err := c.GetIndexPaloAlto(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPaloAltoResponse(rsp)
}

// GetIndexPanasonicWithBodyWithResponse request with arbitrary body returning *GetIndexPanasonicResponse
func (c *ClientWithResponses) GetIndexPanasonicWithBodyWithResponse(ctx context.Context, params *GetIndexPanasonicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error) {
	rsp, err := c.GetIndexPanasonicWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPanasonicResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPanasonicWithResponse(ctx context.Context, params *GetIndexPanasonicParams, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error) {
	rsp, err := c.GetIndexPanasonic(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPanasonicResponse(rsp)
}

// GetIndexPapercutWithBodyWithResponse request with arbitrary body returning *GetIndexPapercutResponse
func (c *ClientWithResponses) GetIndexPapercutWithBodyWithResponse(ctx context.Context, params *GetIndexPapercutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error) {
	rsp, err := c.GetIndexPapercutWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPapercutResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPapercutWithResponse(ctx context.Context, params *GetIndexPapercutParams, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error) {
	rsp, err := c.GetIndexPapercut(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPapercutResponse(rsp)
}

// GetIndexPegaWithBodyWithResponse request with arbitrary body returning *GetIndexPegaResponse
func (c *ClientWithResponses) GetIndexPegaWithBodyWithResponse(ctx context.Context, params *GetIndexPegaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error) {
	rsp, err := c.GetIndexPegaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPegaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPegaWithResponse(ctx context.Context, params *GetIndexPegaParams, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error) {
	rsp, err := c.GetIndexPega(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPegaResponse(rsp)
}

// GetIndexPhilipsWithBodyWithResponse request with arbitrary body returning *GetIndexPhilipsResponse
func (c *ClientWithResponses) GetIndexPhilipsWithBodyWithResponse(ctx context.Context, params *GetIndexPhilipsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error) {
	rsp, err := c.GetIndexPhilipsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhilipsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPhilipsWithResponse(ctx context.Context, params *GetIndexPhilipsParams, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error) {
	rsp, err := c.GetIndexPhilips(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhilipsResponse(rsp)
}

// GetIndexPhoenixContactWithBodyWithResponse request with arbitrary body returning *GetIndexPhoenixContactResponse
func (c *ClientWithResponses) GetIndexPhoenixContactWithBodyWithResponse(ctx context.Context, params *GetIndexPhoenixContactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error) {
	rsp, err := c.GetIndexPhoenixContactWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhoenixContactResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPhoenixContactWithResponse(ctx context.Context, params *GetIndexPhoenixContactParams, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error) {
	rsp, err := c.GetIndexPhoenixContact(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhoenixContactResponse(rsp)
}

// GetIndexPhpMyAdminWithBodyWithResponse request with arbitrary body returning *GetIndexPhpMyAdminResponse
func (c *ClientWithResponses) GetIndexPhpMyAdminWithBodyWithResponse(ctx context.Context, params *GetIndexPhpMyAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhpMyAdminResponse, error) {
	rsp, err := c.GetIndexPhpMyAdminWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhpMyAdminResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPhpMyAdminWithResponse(ctx context.Context, params *GetIndexPhpMyAdminParams, body GetIndexPhpMyAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhpMyAdminResponse, error) {
	rsp, err := c.GetIndexPhpMyAdmin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhpMyAdminResponse(rsp)
}

// GetIndexPostgressqlWithBodyWithResponse request with arbitrary body returning *GetIndexPostgressqlResponse
func (c *ClientWithResponses) GetIndexPostgressqlWithBodyWithResponse(ctx context.Context, params *GetIndexPostgressqlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error) {
	rsp, err := c.GetIndexPostgressqlWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPostgressqlResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPostgressqlWithResponse(ctx context.Context, params *GetIndexPostgressqlParams, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error) {
	rsp, err := c.GetIndexPostgressql(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPostgressqlResponse(rsp)
}

// GetIndexPowerdnsWithBodyWithResponse request with arbitrary body returning *GetIndexPowerdnsResponse
func (c *ClientWithResponses) GetIndexPowerdnsWithBodyWithResponse(ctx context.Context, params *GetIndexPowerdnsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPowerdnsResponse, error) {
	rsp, err := c.GetIndexPowerdnsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPowerdnsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPowerdnsWithResponse(ctx context.Context, params *GetIndexPowerdnsParams, body GetIndexPowerdnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPowerdnsResponse, error) {
	rsp, err := c.GetIndexPowerdns(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPowerdnsResponse(rsp)
}

// GetIndexProgressWithBodyWithResponse request with arbitrary body returning *GetIndexProgressResponse
func (c *ClientWithResponses) GetIndexProgressWithBodyWithResponse(ctx context.Context, params *GetIndexProgressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error) {
	rsp, err := c.GetIndexProgressWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProgressResponse(rsp)
}

func (c *ClientWithResponses) GetIndexProgressWithResponse(ctx context.Context, params *GetIndexProgressParams, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error) {
	rsp, err := c.GetIndexProgress(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProgressResponse(rsp)
}

// GetIndexProofpointWithBodyWithResponse request with arbitrary body returning *GetIndexProofpointResponse
func (c *ClientWithResponses) GetIndexProofpointWithBodyWithResponse(ctx context.Context, params *GetIndexProofpointParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error) {
	rsp, err := c.GetIndexProofpointWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProofpointResponse(rsp)
}

func (c *ClientWithResponses) GetIndexProofpointWithResponse(ctx context.Context, params *GetIndexProofpointParams, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error) {
	rsp, err := c.GetIndexProofpoint(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProofpointResponse(rsp)
}

// GetIndexPtcWithBodyWithResponse request with arbitrary body returning *GetIndexPtcResponse
func (c *ClientWithResponses) GetIndexPtcWithBodyWithResponse(ctx context.Context, params *GetIndexPtcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPtcResponse, error) {
	rsp, err := c.GetIndexPtcWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPtcResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPtcWithResponse(ctx context.Context, params *GetIndexPtcParams, body GetIndexPtcJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPtcResponse, error) {
	rsp, err := c.GetIndexPtc(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPtcResponse(rsp)
}

// GetIndexPubWithBodyWithResponse request with arbitrary body returning *GetIndexPubResponse
func (c *ClientWithResponses) GetIndexPubWithBodyWithResponse(ctx context.Context, params *GetIndexPubParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error) {
	rsp, err := c.GetIndexPubWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPubResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPubWithResponse(ctx context.Context, params *GetIndexPubParams, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error) {
	rsp, err := c.GetIndexPub(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPubResponse(rsp)
}

// GetIndexPureStorageWithBodyWithResponse request with arbitrary body returning *GetIndexPureStorageResponse
func (c *ClientWithResponses) GetIndexPureStorageWithBodyWithResponse(ctx context.Context, params *GetIndexPureStorageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error) {
	rsp, err := c.GetIndexPureStorageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPureStorageResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPureStorageWithResponse(ctx context.Context, params *GetIndexPureStorageParams, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error) {
	rsp, err := c.GetIndexPureStorage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPureStorageResponse(rsp)
}

// GetIndexPypaAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexPypaAdvisoriesResponse
func (c *ClientWithResponses) GetIndexPypaAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexPypaAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error) {
	rsp, err := c.GetIndexPypaAdvisoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypaAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPypaAdvisoriesWithResponse(ctx context.Context, params *GetIndexPypaAdvisoriesParams, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error) {
	rsp, err := c.GetIndexPypaAdvisories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypaAdvisoriesResponse(rsp)
}

// GetIndexPypiWithBodyWithResponse request with arbitrary body returning *GetIndexPypiResponse
func (c *ClientWithResponses) GetIndexPypiWithBodyWithResponse(ctx context.Context, params *GetIndexPypiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error) {
	rsp, err := c.GetIndexPypiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPypiWithResponse(ctx context.Context, params *GetIndexPypiParams, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error) {
	rsp, err := c.GetIndexPypi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypiResponse(rsp)
}

// GetIndexQnapWithBodyWithResponse request with arbitrary body returning *GetIndexQnapResponse
func (c *ClientWithResponses) GetIndexQnapWithBodyWithResponse(ctx context.Context, params *GetIndexQnapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error) {
	rsp, err := c.GetIndexQnapWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQnapResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQnapWithResponse(ctx context.Context, params *GetIndexQnapParams, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error) {
	rsp, err := c.GetIndexQnap(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQnapResponse(rsp)
}

// GetIndexQualcommWithBodyWithResponse request with arbitrary body returning *GetIndexQualcommResponse
func (c *ClientWithResponses) GetIndexQualcommWithBodyWithResponse(ctx context.Context, params *GetIndexQualcommParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error) {
	rsp, err := c.GetIndexQualcommWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualcommResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQualcommWithResponse(ctx context.Context, params *GetIndexQualcommParams, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error) {
	rsp, err := c.GetIndexQualcomm(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualcommResponse(rsp)
}

// GetIndexQualysWithBodyWithResponse request with arbitrary body returning *GetIndexQualysResponse
func (c *ClientWithResponses) GetIndexQualysWithBodyWithResponse(ctx context.Context, params *GetIndexQualysParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error) {
	rsp, err := c.GetIndexQualysWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualysResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQualysWithResponse(ctx context.Context, params *GetIndexQualysParams, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error) {
	rsp, err := c.GetIndexQualys(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualysResponse(rsp)
}

// GetIndexQubesQsbWithBodyWithResponse request with arbitrary body returning *GetIndexQubesQsbResponse
func (c *ClientWithResponses) GetIndexQubesQsbWithBodyWithResponse(ctx context.Context, params *GetIndexQubesQsbParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQubesQsbResponse, error) {
	rsp, err := c.GetIndexQubesQsbWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQubesQsbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQubesQsbWithResponse(ctx context.Context, params *GetIndexQubesQsbParams, body GetIndexQubesQsbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQubesQsbResponse, error) {
	rsp, err := c.GetIndexQubesQsb(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQubesQsbResponse(rsp)
}

// GetIndexRansomwareWithBodyWithResponse request with arbitrary body returning *GetIndexRansomwareResponse
func (c *ClientWithResponses) GetIndexRansomwareWithBodyWithResponse(ctx context.Context, params *GetIndexRansomwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error) {
	rsp, err := c.GetIndexRansomwareWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRansomwareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRansomwareWithResponse(ctx context.Context, params *GetIndexRansomwareParams, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error) {
	rsp, err := c.GetIndexRansomware(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRansomwareResponse(rsp)
}

// GetIndexRedhatWithBodyWithResponse request with arbitrary body returning *GetIndexRedhatResponse
func (c *ClientWithResponses) GetIndexRedhatWithBodyWithResponse(ctx context.Context, params *GetIndexRedhatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error) {
	rsp, err := c.GetIndexRedhatWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRedhatResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRedhatWithResponse(ctx context.Context, params *GetIndexRedhatParams, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error) {
	rsp, err := c.GetIndexRedhat(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRedhatResponse(rsp)
}

// GetIndexRenesasWithBodyWithResponse request with arbitrary body returning *GetIndexRenesasResponse
func (c *ClientWithResponses) GetIndexRenesasWithBodyWithResponse(ctx context.Context, params *GetIndexRenesasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error) {
	rsp, err := c.GetIndexRenesasWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRenesasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRenesasWithResponse(ctx context.Context, params *GetIndexRenesasParams, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error) {
	rsp, err := c.GetIndexRenesas(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRenesasResponse(rsp)
}

// GetIndexReviveWithBodyWithResponse request with arbitrary body returning *GetIndexReviveResponse
func (c *ClientWithResponses) GetIndexReviveWithBodyWithResponse(ctx context.Context, params *GetIndexReviveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error) {
	rsp, err := c.GetIndexReviveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexReviveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexReviveWithResponse(ctx context.Context, params *GetIndexReviveParams, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error) {
	rsp, err := c.GetIndexRevive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexReviveResponse(rsp)
}

// GetIndexRockwellWithBodyWithResponse request with arbitrary body returning *GetIndexRockwellResponse
func (c *ClientWithResponses) GetIndexRockwellWithBodyWithResponse(ctx context.Context, params *GetIndexRockwellParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error) {
	rsp, err := c.GetIndexRockwellWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockwellResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRockwellWithResponse(ctx context.Context, params *GetIndexRockwellParams, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error) {
	rsp, err := c.GetIndexRockwell(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockwellResponse(rsp)
}

// GetIndexRockyWithBodyWithResponse request with arbitrary body returning *GetIndexRockyResponse
func (c *ClientWithResponses) GetIndexRockyWithBodyWithResponse(ctx context.Context, params *GetIndexRockyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error) {
	rsp, err := c.GetIndexRockyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRockyWithResponse(ctx context.Context, params *GetIndexRockyParams, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error) {
	rsp, err := c.GetIndexRocky(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockyResponse(rsp)
}

// GetIndexRockyErrataWithBodyWithResponse request with arbitrary body returning *GetIndexRockyErrataResponse
func (c *ClientWithResponses) GetIndexRockyErrataWithBodyWithResponse(ctx context.Context, params *GetIndexRockyErrataParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockyErrataResponse, error) {
	rsp, err := c.GetIndexRockyErrataWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockyErrataResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRockyErrataWithResponse(ctx context.Context, params *GetIndexRockyErrataParams, body GetIndexRockyErrataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockyErrataResponse, error) {
	rsp, err := c.GetIndexRockyErrata(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockyErrataResponse(rsp)
}

// GetIndexRuckusWithBodyWithResponse request with arbitrary body returning *GetIndexRuckusResponse
func (c *ClientWithResponses) GetIndexRuckusWithBodyWithResponse(ctx context.Context, params *GetIndexRuckusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error) {
	rsp, err := c.GetIndexRuckusWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRuckusResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRuckusWithResponse(ctx context.Context, params *GetIndexRuckusParams, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error) {
	rsp, err := c.GetIndexRuckus(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRuckusResponse(rsp)
}

// GetIndexRustsecAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexRustsecAdvisoriesResponse
func (c *ClientWithResponses) GetIndexRustsecAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error) {
	rsp, err := c.GetIndexRustsecAdvisoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRustsecAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRustsecAdvisoriesWithResponse(ctx context.Context, params *GetIndexRustsecAdvisoriesParams, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error) {
	rsp, err := c.GetIndexRustsecAdvisories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRustsecAdvisoriesResponse(rsp)
}

// GetIndexSacertWithBodyWithResponse request with arbitrary body returning *GetIndexSacertResponse
func (c *ClientWithResponses) GetIndexSacertWithBodyWithResponse(ctx context.Context, params *GetIndexSacertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error) {
	rsp, err := c.GetIndexSacertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSacertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSacertWithResponse(ctx context.Context, params *GetIndexSacertParams, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error) {
	rsp, err := c.GetIndexSacert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSacertResponse(rsp)
}

// GetIndexSaintWithBodyWithResponse request with arbitrary body returning *GetIndexSaintResponse
func (c *ClientWithResponses) GetIndexSaintWithBodyWithResponse(ctx context.Context, params *GetIndexSaintParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error) {
	rsp, err := c.GetIndexSaintWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSaintResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSaintWithResponse(ctx context.Context, params *GetIndexSaintParams, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error) {
	rsp, err := c.GetIndexSaint(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSaintResponse(rsp)
}

// GetIndexSalesforceWithBodyWithResponse request with arbitrary body returning *GetIndexSalesforceResponse
func (c *ClientWithResponses) GetIndexSalesforceWithBodyWithResponse(ctx context.Context, params *GetIndexSalesforceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error) {
	rsp, err := c.GetIndexSalesforceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSalesforceResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSalesforceWithResponse(ctx context.Context, params *GetIndexSalesforceParams, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error) {
	rsp, err := c.GetIndexSalesforce(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSalesforceResponse(rsp)
}

// GetIndexSambaWithBodyWithResponse request with arbitrary body returning *GetIndexSambaResponse
func (c *ClientWithResponses) GetIndexSambaWithBodyWithResponse(ctx context.Context, params *GetIndexSambaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error) {
	rsp, err := c.GetIndexSambaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSambaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSambaWithResponse(ctx context.Context, params *GetIndexSambaParams, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error) {
	rsp, err := c.GetIndexSamba(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSambaResponse(rsp)
}

// GetIndexSapWithBodyWithResponse request with arbitrary body returning *GetIndexSapResponse
func (c *ClientWithResponses) GetIndexSapWithBodyWithResponse(ctx context.Context, params *GetIndexSapParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error) {
	rsp, err := c.GetIndexSapWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSapResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSapWithResponse(ctx context.Context, params *GetIndexSapParams, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error) {
	rsp, err := c.GetIndexSap(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSapResponse(rsp)
}

// GetIndexSchneiderElectricWithBodyWithResponse request with arbitrary body returning *GetIndexSchneiderElectricResponse
func (c *ClientWithResponses) GetIndexSchneiderElectricWithBodyWithResponse(ctx context.Context, params *GetIndexSchneiderElectricParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error) {
	rsp, err := c.GetIndexSchneiderElectricWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSchneiderElectricResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSchneiderElectricWithResponse(ctx context.Context, params *GetIndexSchneiderElectricParams, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error) {
	rsp, err := c.GetIndexSchneiderElectric(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSchneiderElectricResponse(rsp)
}

// GetIndexSecConsultWithBodyWithResponse request with arbitrary body returning *GetIndexSecConsultResponse
func (c *ClientWithResponses) GetIndexSecConsultWithBodyWithResponse(ctx context.Context, params *GetIndexSecConsultParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error) {
	rsp, err := c.GetIndexSecConsultWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSecConsultResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSecConsultWithResponse(ctx context.Context, params *GetIndexSecConsultParams, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error) {
	rsp, err := c.GetIndexSecConsult(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSecConsultResponse(rsp)
}

// GetIndexSecuritylabWithBodyWithResponse request with arbitrary body returning *GetIndexSecuritylabResponse
func (c *ClientWithResponses) GetIndexSecuritylabWithBodyWithResponse(ctx context.Context, params *GetIndexSecuritylabParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSecuritylabResponse, error) {
	rsp, err := c.GetIndexSecuritylabWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSecuritylabResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSecuritylabWithResponse(ctx context.Context, params *GetIndexSecuritylabParams, body GetIndexSecuritylabJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSecuritylabResponse, error) {
	rsp, err := c.GetIndexSecuritylab(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSecuritylabResponse(rsp)
}

// GetIndexSeebugWithBodyWithResponse request with arbitrary body returning *GetIndexSeebugResponse
func (c *ClientWithResponses) GetIndexSeebugWithBodyWithResponse(ctx context.Context, params *GetIndexSeebugParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSeebugResponse, error) {
	rsp, err := c.GetIndexSeebugWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSeebugResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSeebugWithResponse(ctx context.Context, params *GetIndexSeebugParams, body GetIndexSeebugJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSeebugResponse, error) {
	rsp, err := c.GetIndexSeebug(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSeebugResponse(rsp)
}

// GetIndexSelWithBodyWithResponse request with arbitrary body returning *GetIndexSelResponse
func (c *ClientWithResponses) GetIndexSelWithBodyWithResponse(ctx context.Context, params *GetIndexSelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error) {
	rsp, err := c.GetIndexSelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSelWithResponse(ctx context.Context, params *GetIndexSelParams, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error) {
	rsp, err := c.GetIndexSel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSelResponse(rsp)
}

// GetIndexSentineloneWithBodyWithResponse request with arbitrary body returning *GetIndexSentineloneResponse
func (c *ClientWithResponses) GetIndexSentineloneWithBodyWithResponse(ctx context.Context, params *GetIndexSentineloneParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error) {
	rsp, err := c.GetIndexSentineloneWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSentineloneResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSentineloneWithResponse(ctx context.Context, params *GetIndexSentineloneParams, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error) {
	rsp, err := c.GetIndexSentinelone(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSentineloneResponse(rsp)
}

// GetIndexServicenowWithBodyWithResponse request with arbitrary body returning *GetIndexServicenowResponse
func (c *ClientWithResponses) GetIndexServicenowWithBodyWithResponse(ctx context.Context, params *GetIndexServicenowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error) {
	rsp, err := c.GetIndexServicenowWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexServicenowResponse(rsp)
}

func (c *ClientWithResponses) GetIndexServicenowWithResponse(ctx context.Context, params *GetIndexServicenowParams, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error) {
	rsp, err := c.GetIndexServicenow(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexServicenowResponse(rsp)
}

// GetIndexShadowserverExploitedWithBodyWithResponse request with arbitrary body returning *GetIndexShadowserverExploitedResponse
func (c *ClientWithResponses) GetIndexShadowserverExploitedWithBodyWithResponse(ctx context.Context, params *GetIndexShadowserverExploitedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error) {
	rsp, err := c.GetIndexShadowserverExploitedWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexShadowserverExploitedResponse(rsp)
}

func (c *ClientWithResponses) GetIndexShadowserverExploitedWithResponse(ctx context.Context, params *GetIndexShadowserverExploitedParams, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error) {
	rsp, err := c.GetIndexShadowserverExploited(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexShadowserverExploitedResponse(rsp)
}

// GetIndexShielderWithBodyWithResponse request with arbitrary body returning *GetIndexShielderResponse
func (c *ClientWithResponses) GetIndexShielderWithBodyWithResponse(ctx context.Context, params *GetIndexShielderParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexShielderResponse, error) {
	rsp, err := c.GetIndexShielderWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexShielderResponse(rsp)
}

func (c *ClientWithResponses) GetIndexShielderWithResponse(ctx context.Context, params *GetIndexShielderParams, body GetIndexShielderJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexShielderResponse, error) {
	rsp, err := c.GetIndexShielder(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexShielderResponse(rsp)
}

// GetIndexSickWithBodyWithResponse request with arbitrary body returning *GetIndexSickResponse
func (c *ClientWithResponses) GetIndexSickWithBodyWithResponse(ctx context.Context, params *GetIndexSickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error) {
	rsp, err := c.GetIndexSickWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSickResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSickWithResponse(ctx context.Context, params *GetIndexSickParams, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error) {
	rsp, err := c.GetIndexSick(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSickResponse(rsp)
}

// GetIndexSiemensWithBodyWithResponse request with arbitrary body returning *GetIndexSiemensResponse
func (c *ClientWithResponses) GetIndexSiemensWithBodyWithResponse(ctx context.Context, params *GetIndexSiemensParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error) {
	rsp, err := c.GetIndexSiemensWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSiemensResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSiemensWithResponse(ctx context.Context, params *GetIndexSiemensParams, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error) {
	rsp, err := c.GetIndexSiemens(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSiemensResponse(rsp)
}

// GetIndexSierraWirelessWithBodyWithResponse request with arbitrary body returning *GetIndexSierraWirelessResponse
func (c *ClientWithResponses) GetIndexSierraWirelessWithBodyWithResponse(ctx context.Context, params *GetIndexSierraWirelessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error) {
	rsp, err := c.GetIndexSierraWirelessWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSierraWirelessResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSierraWirelessWithResponse(ctx context.Context, params *GetIndexSierraWirelessParams, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error) {
	rsp, err := c.GetIndexSierraWireless(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSierraWirelessResponse(rsp)
}

// GetIndexSigmaRulesWithBodyWithResponse request with arbitrary body returning *GetIndexSigmaRulesResponse
func (c *ClientWithResponses) GetIndexSigmaRulesWithBodyWithResponse(ctx context.Context, params *GetIndexSigmaRulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSigmaRulesResponse, error) {
	rsp, err := c.GetIndexSigmaRulesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSigmaRulesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSigmaRulesWithResponse(ctx context.Context, params *GetIndexSigmaRulesParams, body GetIndexSigmaRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSigmaRulesResponse, error) {
	rsp, err := c.GetIndexSigmaRules(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSigmaRulesResponse(rsp)
}

// GetIndexSingcertWithBodyWithResponse request with arbitrary body returning *GetIndexSingcertResponse
func (c *ClientWithResponses) GetIndexSingcertWithBodyWithResponse(ctx context.Context, params *GetIndexSingcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error) {
	rsp, err := c.GetIndexSingcertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSingcertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSingcertWithResponse(ctx context.Context, params *GetIndexSingcertParams, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error) {
	rsp, err := c.GetIndexSingcert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSingcertResponse(rsp)
}

// GetIndexSlackwareWithBodyWithResponse request with arbitrary body returning *GetIndexSlackwareResponse
func (c *ClientWithResponses) GetIndexSlackwareWithBodyWithResponse(ctx context.Context, params *GetIndexSlackwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error) {
	rsp, err := c.GetIndexSlackwareWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSlackwareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSlackwareWithResponse(ctx context.Context, params *GetIndexSlackwareParams, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error) {
	rsp, err := c.GetIndexSlackware(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSlackwareResponse(rsp)
}

// GetIndexSolarwindsWithBodyWithResponse request with arbitrary body returning *GetIndexSolarwindsResponse
func (c *ClientWithResponses) GetIndexSolarwindsWithBodyWithResponse(ctx context.Context, params *GetIndexSolarwindsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error) {
	rsp, err := c.GetIndexSolarwindsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolarwindsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSolarwindsWithResponse(ctx context.Context, params *GetIndexSolarwindsParams, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error) {
	rsp, err := c.GetIndexSolarwinds(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolarwindsResponse(rsp)
}

// GetIndexSolrWithBodyWithResponse request with arbitrary body returning *GetIndexSolrResponse
func (c *ClientWithResponses) GetIndexSolrWithBodyWithResponse(ctx context.Context, params *GetIndexSolrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error) {
	rsp, err := c.GetIndexSolrWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolrResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSolrWithResponse(ctx context.Context, params *GetIndexSolrParams, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error) {
	rsp, err := c.GetIndexSolr(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolrResponse(rsp)
}

// GetIndexSonicwallWithBodyWithResponse request with arbitrary body returning *GetIndexSonicwallResponse
func (c *ClientWithResponses) GetIndexSonicwallWithBodyWithResponse(ctx context.Context, params *GetIndexSonicwallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error) {
	rsp, err := c.GetIndexSonicwallWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSonicwallResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSonicwallWithResponse(ctx context.Context, params *GetIndexSonicwallParams, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error) {
	rsp, err := c.GetIndexSonicwall(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSonicwallResponse(rsp)
}

// GetIndexSpacelabsHealthcareWithBodyWithResponse request with arbitrary body returning *GetIndexSpacelabsHealthcareResponse
func (c *ClientWithResponses) GetIndexSpacelabsHealthcareWithBodyWithResponse(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error) {
	rsp, err := c.GetIndexSpacelabsHealthcareWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpacelabsHealthcareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSpacelabsHealthcareWithResponse(ctx context.Context, params *GetIndexSpacelabsHealthcareParams, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error) {
	rsp, err := c.GetIndexSpacelabsHealthcare(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpacelabsHealthcareResponse(rsp)
}

// GetIndexSplunkWithBodyWithResponse request with arbitrary body returning *GetIndexSplunkResponse
func (c *ClientWithResponses) GetIndexSplunkWithBodyWithResponse(ctx context.Context, params *GetIndexSplunkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSplunkResponse, error) {
	rsp, err := c.GetIndexSplunkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSplunkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSplunkWithResponse(ctx context.Context, params *GetIndexSplunkParams, body GetIndexSplunkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSplunkResponse, error) {
	rsp, err := c.GetIndexSplunk(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSplunkResponse(rsp)
}

// GetIndexSpringWithBodyWithResponse request with arbitrary body returning *GetIndexSpringResponse
func (c *ClientWithResponses) GetIndexSpringWithBodyWithResponse(ctx context.Context, params *GetIndexSpringParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error) {
	rsp, err := c.GetIndexSpringWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpringResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSpringWithResponse(ctx context.Context, params *GetIndexSpringParams, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error) {
	rsp, err := c.GetIndexSpring(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpringResponse(rsp)
}

// GetIndexSsdWithBodyWithResponse request with arbitrary body returning *GetIndexSsdResponse
func (c *ClientWithResponses) GetIndexSsdWithBodyWithResponse(ctx context.Context, params *GetIndexSsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error) {
	rsp, err := c.GetIndexSsdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSsdWithResponse(ctx context.Context, params *GetIndexSsdParams, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error) {
	rsp, err := c.GetIndexSsd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSsdResponse(rsp)
}

// GetIndexStormshieldWithBodyWithResponse request with arbitrary body returning *GetIndexStormshieldResponse
func (c *ClientWithResponses) GetIndexStormshieldWithBodyWithResponse(ctx context.Context, params *GetIndexStormshieldParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error) {
	rsp, err := c.GetIndexStormshieldWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStormshieldResponse(rsp)
}

func (c *ClientWithResponses) GetIndexStormshieldWithResponse(ctx context.Context, params *GetIndexStormshieldParams, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error) {
	rsp, err := c.GetIndexStormshield(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStormshieldResponse(rsp)
}

// GetIndexStrykerWithBodyWithResponse request with arbitrary body returning *GetIndexStrykerResponse
func (c *ClientWithResponses) GetIndexStrykerWithBodyWithResponse(ctx context.Context, params *GetIndexStrykerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error) {
	rsp, err := c.GetIndexStrykerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStrykerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexStrykerWithResponse(ctx context.Context, params *GetIndexStrykerParams, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error) {
	rsp, err := c.GetIndexStryker(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStrykerResponse(rsp)
}

// GetIndexSudoWithBodyWithResponse request with arbitrary body returning *GetIndexSudoResponse
func (c *ClientWithResponses) GetIndexSudoWithBodyWithResponse(ctx context.Context, params *GetIndexSudoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error) {
	rsp, err := c.GetIndexSudoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSudoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSudoWithResponse(ctx context.Context, params *GetIndexSudoParams, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error) {
	rsp, err := c.GetIndexSudo(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSudoResponse(rsp)
}

// GetIndexSuseWithBodyWithResponse request with arbitrary body returning *GetIndexSuseResponse
func (c *ClientWithResponses) GetIndexSuseWithBodyWithResponse(ctx context.Context, params *GetIndexSuseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error) {
	rsp, err := c.GetIndexSuseWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSuseResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSuseWithResponse(ctx context.Context, params *GetIndexSuseParams, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error) {
	rsp, err := c.GetIndexSuse(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSuseResponse(rsp)
}

// GetIndexSwiftWithBodyWithResponse request with arbitrary body returning *GetIndexSwiftResponse
func (c *ClientWithResponses) GetIndexSwiftWithBodyWithResponse(ctx context.Context, params *GetIndexSwiftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error) {
	rsp, err := c.GetIndexSwiftWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwiftResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSwiftWithResponse(ctx context.Context, params *GetIndexSwiftParams, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error) {
	rsp, err := c.GetIndexSwift(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwiftResponse(rsp)
}

// GetIndexSwisslogHealthcareWithBodyWithResponse request with arbitrary body returning *GetIndexSwisslogHealthcareResponse
func (c *ClientWithResponses) GetIndexSwisslogHealthcareWithBodyWithResponse(ctx context.Context, params *GetIndexSwisslogHealthcareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error) {
	rsp, err := c.GetIndexSwisslogHealthcareWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwisslogHealthcareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSwisslogHealthcareWithResponse(ctx context.Context, params *GetIndexSwisslogHealthcareParams, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error) {
	rsp, err := c.GetIndexSwisslogHealthcare(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwisslogHealthcareResponse(rsp)
}

// GetIndexSymfonyWithBodyWithResponse request with arbitrary body returning *GetIndexSymfonyResponse
func (c *ClientWithResponses) GetIndexSymfonyWithBodyWithResponse(ctx context.Context, params *GetIndexSymfonyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error) {
	rsp, err := c.GetIndexSymfonyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSymfonyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSymfonyWithResponse(ctx context.Context, params *GetIndexSymfonyParams, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error) {
	rsp, err := c.GetIndexSymfony(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSymfonyResponse(rsp)
}

// GetIndexSynacktivWithBodyWithResponse request with arbitrary body returning *GetIndexSynacktivResponse
func (c *ClientWithResponses) GetIndexSynacktivWithBodyWithResponse(ctx context.Context, params *GetIndexSynacktivParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSynacktivResponse, error) {
	rsp, err := c.GetIndexSynacktivWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSynacktivResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSynacktivWithResponse(ctx context.Context, params *GetIndexSynacktivParams, body GetIndexSynacktivJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSynacktivResponse, error) {
	rsp, err := c.GetIndexSynacktiv(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSynacktivResponse(rsp)
}

// GetIndexSyncrosoftWithBodyWithResponse request with arbitrary body returning *GetIndexSyncrosoftResponse
func (c *ClientWithResponses) GetIndexSyncrosoftWithBodyWithResponse(ctx context.Context, params *GetIndexSyncrosoftParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error) {
	rsp, err := c.GetIndexSyncrosoftWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSyncrosoftResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSyncrosoftWithResponse(ctx context.Context, params *GetIndexSyncrosoftParams, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error) {
	rsp, err := c.GetIndexSyncrosoft(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSyncrosoftResponse(rsp)
}

// GetIndexSynologyWithBodyWithResponse request with arbitrary body returning *GetIndexSynologyResponse
func (c *ClientWithResponses) GetIndexSynologyWithBodyWithResponse(ctx context.Context, params *GetIndexSynologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error) {
	rsp, err := c.GetIndexSynologyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSynologyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSynologyWithResponse(ctx context.Context, params *GetIndexSynologyParams, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error) {
	rsp, err := c.GetIndexSynology(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSynologyResponse(rsp)
}

// GetIndexTeamviewerWithBodyWithResponse request with arbitrary body returning *GetIndexTeamviewerResponse
func (c *ClientWithResponses) GetIndexTeamviewerWithBodyWithResponse(ctx context.Context, params *GetIndexTeamviewerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error) {
	rsp, err := c.GetIndexTeamviewerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTeamviewerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTeamviewerWithResponse(ctx context.Context, params *GetIndexTeamviewerParams, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error) {
	rsp, err := c.GetIndexTeamviewer(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTeamviewerResponse(rsp)
}

// GetIndexTenableResearchAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexTenableResearchAdvisoriesResponse
func (c *ClientWithResponses) GetIndexTenableResearchAdvisoriesWithBodyWithResponse(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTenableResearchAdvisoriesResponse, error) {
	rsp, err := c.GetIndexTenableResearchAdvisoriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTenableResearchAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTenableResearchAdvisoriesWithResponse(ctx context.Context, params *GetIndexTenableResearchAdvisoriesParams, body GetIndexTenableResearchAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTenableResearchAdvisoriesResponse, error) {
	rsp, err := c.GetIndexTenableResearchAdvisories(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTenableResearchAdvisoriesResponse(rsp)
}

// GetIndexTencentWithBodyWithResponse request with arbitrary body returning *GetIndexTencentResponse
func (c *ClientWithResponses) GetIndexTencentWithBodyWithResponse(ctx context.Context, params *GetIndexTencentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error) {
	rsp, err := c.GetIndexTencentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTencentResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTencentWithResponse(ctx context.Context, params *GetIndexTencentParams, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error) {
	rsp, err := c.GetIndexTencent(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTencentResponse(rsp)
}

// GetIndexThalesWithBodyWithResponse request with arbitrary body returning *GetIndexThalesResponse
func (c *ClientWithResponses) GetIndexThalesWithBodyWithResponse(ctx context.Context, params *GetIndexThalesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error) {
	rsp, err := c.GetIndexThalesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThalesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexThalesWithResponse(ctx context.Context, params *GetIndexThalesParams, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error) {
	rsp, err := c.GetIndexThales(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThalesResponse(rsp)
}

// GetIndexThemissinglinkWithBodyWithResponse request with arbitrary body returning *GetIndexThemissinglinkResponse
func (c *ClientWithResponses) GetIndexThemissinglinkWithBodyWithResponse(ctx context.Context, params *GetIndexThemissinglinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error) {
	rsp, err := c.GetIndexThemissinglinkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThemissinglinkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexThemissinglinkWithResponse(ctx context.Context, params *GetIndexThemissinglinkParams, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error) {
	rsp, err := c.GetIndexThemissinglink(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThemissinglinkResponse(rsp)
}

// GetIndexThreatActorsWithBodyWithResponse request with arbitrary body returning *GetIndexThreatActorsResponse
func (c *ClientWithResponses) GetIndexThreatActorsWithBodyWithResponse(ctx context.Context, params *GetIndexThreatActorsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error) {
	rsp, err := c.GetIndexThreatActorsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThreatActorsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexThreatActorsWithResponse(ctx context.Context, params *GetIndexThreatActorsParams, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error) {
	rsp, err := c.GetIndexThreatActors(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThreatActorsResponse(rsp)
}

// GetIndexTiWithBodyWithResponse request with arbitrary body returning *GetIndexTiResponse
func (c *ClientWithResponses) GetIndexTiWithBodyWithResponse(ctx context.Context, params *GetIndexTiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error) {
	rsp, err := c.GetIndexTiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTiWithResponse(ctx context.Context, params *GetIndexTiParams, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error) {
	rsp, err := c.GetIndexTi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTiResponse(rsp)
}

// GetIndexTibcoWithBodyWithResponse request with arbitrary body returning *GetIndexTibcoResponse
func (c *ClientWithResponses) GetIndexTibcoWithBodyWithResponse(ctx context.Context, params *GetIndexTibcoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error) {
	rsp, err := c.GetIndexTibcoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTibcoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTibcoWithResponse(ctx context.Context, params *GetIndexTibcoParams, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error) {
	rsp, err := c.GetIndexTibco(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTibcoResponse(rsp)
}

// GetIndexTpLinkWithBodyWithResponse request with arbitrary body returning *GetIndexTpLinkResponse
func (c *ClientWithResponses) GetIndexTpLinkWithBodyWithResponse(ctx context.Context, params *GetIndexTpLinkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error) {
	rsp, err := c.GetIndexTpLinkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTpLinkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTpLinkWithResponse(ctx context.Context, params *GetIndexTpLinkParams, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error) {
	rsp, err := c.GetIndexTpLink(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTpLinkResponse(rsp)
}

// GetIndexTraneTechnologyWithBodyWithResponse request with arbitrary body returning *GetIndexTraneTechnologyResponse
func (c *ClientWithResponses) GetIndexTraneTechnologyWithBodyWithResponse(ctx context.Context, params *GetIndexTraneTechnologyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error) {
	rsp, err := c.GetIndexTraneTechnologyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTraneTechnologyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTraneTechnologyWithResponse(ctx context.Context, params *GetIndexTraneTechnologyParams, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error) {
	rsp, err := c.GetIndexTraneTechnology(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTraneTechnologyResponse(rsp)
}

// GetIndexTrendmicroWithBodyWithResponse request with arbitrary body returning *GetIndexTrendmicroResponse
func (c *ClientWithResponses) GetIndexTrendmicroWithBodyWithResponse(ctx context.Context, params *GetIndexTrendmicroParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error) {
	rsp, err := c.GetIndexTrendmicroWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrendmicroResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTrendmicroWithResponse(ctx context.Context, params *GetIndexTrendmicroParams, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error) {
	rsp, err := c.GetIndexTrendmicro(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrendmicroResponse(rsp)
}

// GetIndexTrustwaveWithBodyWithResponse request with arbitrary body returning *GetIndexTrustwaveResponse
func (c *ClientWithResponses) GetIndexTrustwaveWithBodyWithResponse(ctx context.Context, params *GetIndexTrustwaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error) {
	rsp, err := c.GetIndexTrustwaveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrustwaveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTrustwaveWithResponse(ctx context.Context, params *GetIndexTrustwaveParams, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error) {
	rsp, err := c.GetIndexTrustwave(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrustwaveResponse(rsp)
}

// GetIndexTwcertWithBodyWithResponse request with arbitrary body returning *GetIndexTwcertResponse
func (c *ClientWithResponses) GetIndexTwcertWithBodyWithResponse(ctx context.Context, params *GetIndexTwcertParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error) {
	rsp, err := c.GetIndexTwcertWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTwcertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTwcertWithResponse(ctx context.Context, params *GetIndexTwcertParams, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error) {
	rsp, err := c.GetIndexTwcert(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTwcertResponse(rsp)
}

// GetIndexUbiquitiWithBodyWithResponse request with arbitrary body returning *GetIndexUbiquitiResponse
func (c *ClientWithResponses) GetIndexUbiquitiWithBodyWithResponse(ctx context.Context, params *GetIndexUbiquitiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error) {
	rsp, err := c.GetIndexUbiquitiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbiquitiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUbiquitiWithResponse(ctx context.Context, params *GetIndexUbiquitiParams, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error) {
	rsp, err := c.GetIndexUbiquiti(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbiquitiResponse(rsp)
}

// GetIndexUbuntuWithBodyWithResponse request with arbitrary body returning *GetIndexUbuntuResponse
func (c *ClientWithResponses) GetIndexUbuntuWithBodyWithResponse(ctx context.Context, params *GetIndexUbuntuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error) {
	rsp, err := c.GetIndexUbuntuWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbuntuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUbuntuWithResponse(ctx context.Context, params *GetIndexUbuntuParams, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error) {
	rsp, err := c.GetIndexUbuntu(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbuntuResponse(rsp)
}

// GetIndexUnifyWithBodyWithResponse request with arbitrary body returning *GetIndexUnifyResponse
func (c *ClientWithResponses) GetIndexUnifyWithBodyWithResponse(ctx context.Context, params *GetIndexUnifyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error) {
	rsp, err := c.GetIndexUnifyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnifyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUnifyWithResponse(ctx context.Context, params *GetIndexUnifyParams, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error) {
	rsp, err := c.GetIndexUnify(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnifyResponse(rsp)
}

// GetIndexUnisocWithBodyWithResponse request with arbitrary body returning *GetIndexUnisocResponse
func (c *ClientWithResponses) GetIndexUnisocWithBodyWithResponse(ctx context.Context, params *GetIndexUnisocParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error) {
	rsp, err := c.GetIndexUnisocWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnisocResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUnisocWithResponse(ctx context.Context, params *GetIndexUnisocParams, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error) {
	rsp, err := c.GetIndexUnisoc(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnisocResponse(rsp)
}

// GetIndexUsdWithBodyWithResponse request with arbitrary body returning *GetIndexUsdResponse
func (c *ClientWithResponses) GetIndexUsdWithBodyWithResponse(ctx context.Context, params *GetIndexUsdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error) {
	rsp, err := c.GetIndexUsdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUsdWithResponse(ctx context.Context, params *GetIndexUsdParams, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error) {
	rsp, err := c.GetIndexUsd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsdResponse(rsp)
}

// GetIndexUsomWithBodyWithResponse request with arbitrary body returning *GetIndexUsomResponse
func (c *ClientWithResponses) GetIndexUsomWithBodyWithResponse(ctx context.Context, params *GetIndexUsomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error) {
	rsp, err := c.GetIndexUsomWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsomResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUsomWithResponse(ctx context.Context, params *GetIndexUsomParams, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error) {
	rsp, err := c.GetIndexUsom(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsomResponse(rsp)
}

// GetIndexVandykeWithBodyWithResponse request with arbitrary body returning *GetIndexVandykeResponse
func (c *ClientWithResponses) GetIndexVandykeWithBodyWithResponse(ctx context.Context, params *GetIndexVandykeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error) {
	rsp, err := c.GetIndexVandykeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVandykeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVandykeWithResponse(ctx context.Context, params *GetIndexVandykeParams, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error) {
	rsp, err := c.GetIndexVandyke(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVandykeResponse(rsp)
}

// GetIndexVapidlabsWithBodyWithResponse request with arbitrary body returning *GetIndexVapidlabsResponse
func (c *ClientWithResponses) GetIndexVapidlabsWithBodyWithResponse(ctx context.Context, params *GetIndexVapidlabsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error) {
	rsp, err := c.GetIndexVapidlabsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVapidlabsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVapidlabsWithResponse(ctx context.Context, params *GetIndexVapidlabsParams, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error) {
	rsp, err := c.GetIndexVapidlabs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVapidlabsResponse(rsp)
}

// GetIndexVcCpeDictionaryWithBodyWithResponse request with arbitrary body returning *GetIndexVcCpeDictionaryResponse
func (c *ClientWithResponses) GetIndexVcCpeDictionaryWithBodyWithResponse(ctx context.Context, params *GetIndexVcCpeDictionaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVcCpeDictionaryResponse, error) {
	rsp, err := c.GetIndexVcCpeDictionaryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVcCpeDictionaryResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVcCpeDictionaryWithResponse(ctx context.Context, params *GetIndexVcCpeDictionaryParams, body GetIndexVcCpeDictionaryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVcCpeDictionaryResponse, error) {
	rsp, err := c.GetIndexVcCpeDictionary(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVcCpeDictionaryResponse(rsp)
}

// GetIndexVdeWithBodyWithResponse request with arbitrary body returning *GetIndexVdeResponse
func (c *ClientWithResponses) GetIndexVdeWithBodyWithResponse(ctx context.Context, params *GetIndexVdeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error) {
	rsp, err := c.GetIndexVdeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVdeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVdeWithResponse(ctx context.Context, params *GetIndexVdeParams, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error) {
	rsp, err := c.GetIndexVde(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVdeResponse(rsp)
}

// GetIndexVeeamWithBodyWithResponse request with arbitrary body returning *GetIndexVeeamResponse
func (c *ClientWithResponses) GetIndexVeeamWithBodyWithResponse(ctx context.Context, params *GetIndexVeeamParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error) {
	rsp, err := c.GetIndexVeeamWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVeeamResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVeeamWithResponse(ctx context.Context, params *GetIndexVeeamParams, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error) {
	rsp, err := c.GetIndexVeeam(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVeeamResponse(rsp)
}

// GetIndexVeritasWithBodyWithResponse request with arbitrary body returning *GetIndexVeritasResponse
func (c *ClientWithResponses) GetIndexVeritasWithBodyWithResponse(ctx context.Context, params *GetIndexVeritasParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVeritasResponse, error) {
	rsp, err := c.GetIndexVeritasWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVeritasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVeritasWithResponse(ctx context.Context, params *GetIndexVeritasParams, body GetIndexVeritasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVeritasResponse, error) {
	rsp, err := c.GetIndexVeritas(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVeritasResponse(rsp)
}

// GetIndexVmwareWithBodyWithResponse request with arbitrary body returning *GetIndexVmwareResponse
func (c *ClientWithResponses) GetIndexVmwareWithBodyWithResponse(ctx context.Context, params *GetIndexVmwareParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVmwareResponse, error) {
	rsp, err := c.GetIndexVmwareWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVmwareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVmwareWithResponse(ctx context.Context, params *GetIndexVmwareParams, body GetIndexVmwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVmwareResponse, error) {
	rsp, err := c.GetIndexVmware(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVmwareResponse(rsp)
}

// GetIndexVoidsecWithBodyWithResponse request with arbitrary body returning *GetIndexVoidsecResponse
func (c *ClientWithResponses) GetIndexVoidsecWithBodyWithResponse(ctx context.Context, params *GetIndexVoidsecParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error) {
	rsp, err := c.GetIndexVoidsecWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVoidsecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVoidsecWithResponse(ctx context.Context, params *GetIndexVoidsecParams, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error) {
	rsp, err := c.GetIndexVoidsec(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVoidsecResponse(rsp)
}

// GetIndexVulncheckWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckResponse
func (c *ClientWithResponses) GetIndexVulncheckWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckResponse, error) {
	rsp, err := c.GetIndexVulncheckWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckWithResponse(ctx context.Context, params *GetIndexVulncheckParams, body GetIndexVulncheckJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckResponse, error) {
	rsp, err := c.GetIndexVulncheck(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckResponse(rsp)
}

// GetIndexVulncheckConfigWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckConfigResponse
func (c *ClientWithResponses) GetIndexVulncheckConfigWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error) {
	rsp, err := c.GetIndexVulncheckConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckConfigResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckConfigWithResponse(ctx context.Context, params *GetIndexVulncheckConfigParams, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error) {
	rsp, err := c.GetIndexVulncheckConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckConfigResponse(rsp)
}

// GetIndexVulncheckCvelistV5WithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckCvelistV5Response
func (c *ClientWithResponses) GetIndexVulncheckCvelistV5WithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckCvelistV5Response, error) {
	rsp, err := c.GetIndexVulncheckCvelistV5WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckCvelistV5Response(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckCvelistV5WithResponse(ctx context.Context, params *GetIndexVulncheckCvelistV5Params, body GetIndexVulncheckCvelistV5JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckCvelistV5Response, error) {
	rsp, err := c.GetIndexVulncheckCvelistV5(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckCvelistV5Response(rsp)
}

// GetIndexVulncheckKevWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckKevResponse
func (c *ClientWithResponses) GetIndexVulncheckKevWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckKevParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error) {
	rsp, err := c.GetIndexVulncheckKevWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckKevResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckKevWithResponse(ctx context.Context, params *GetIndexVulncheckKevParams, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error) {
	rsp, err := c.GetIndexVulncheckKev(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckKevResponse(rsp)
}

// GetIndexVulncheckNvdWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckNvdResponse
func (c *ClientWithResponses) GetIndexVulncheckNvdWithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckNvdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error) {
	rsp, err := c.GetIndexVulncheckNvdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckNvdWithResponse(ctx context.Context, params *GetIndexVulncheckNvdParams, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error) {
	rsp, err := c.GetIndexVulncheckNvd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvdResponse(rsp)
}

// GetIndexVulncheckNvd2WithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckNvd2Response
func (c *ClientWithResponses) GetIndexVulncheckNvd2WithBodyWithResponse(ctx context.Context, params *GetIndexVulncheckNvd2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error) {
	rsp, err := c.GetIndexVulncheckNvd2WithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvd2Response(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckNvd2WithResponse(ctx context.Context, params *GetIndexVulncheckNvd2Params, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error) {
	rsp, err := c.GetIndexVulncheckNvd2(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvd2Response(rsp)
}

// GetIndexVulnerabilityAliasesWithBodyWithResponse request with arbitrary body returning *GetIndexVulnerabilityAliasesResponse
func (c *ClientWithResponses) GetIndexVulnerabilityAliasesWithBodyWithResponse(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error) {
	rsp, err := c.GetIndexVulnerabilityAliasesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulnerabilityAliasesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulnerabilityAliasesWithResponse(ctx context.Context, params *GetIndexVulnerabilityAliasesParams, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error) {
	rsp, err := c.GetIndexVulnerabilityAliases(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulnerabilityAliasesResponse(rsp)
}

// GetIndexVulnrichmentWithBodyWithResponse request with arbitrary body returning *GetIndexVulnrichmentResponse
func (c *ClientWithResponses) GetIndexVulnrichmentWithBodyWithResponse(ctx context.Context, params *GetIndexVulnrichmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulnrichmentResponse, error) {
	rsp, err := c.GetIndexVulnrichmentWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulnrichmentResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulnrichmentWithResponse(ctx context.Context, params *GetIndexVulnrichmentParams, body GetIndexVulnrichmentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulnrichmentResponse, error) {
	rsp, err := c.GetIndexVulnrichment(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulnrichmentResponse(rsp)
}

// GetIndexVyaireWithBodyWithResponse request with arbitrary body returning *GetIndexVyaireResponse
func (c *ClientWithResponses) GetIndexVyaireWithBodyWithResponse(ctx context.Context, params *GetIndexVyaireParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error) {
	rsp, err := c.GetIndexVyaireWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVyaireResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVyaireWithResponse(ctx context.Context, params *GetIndexVyaireParams, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error) {
	rsp, err := c.GetIndexVyaire(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVyaireResponse(rsp)
}

// GetIndexWatchguardWithBodyWithResponse request with arbitrary body returning *GetIndexWatchguardResponse
func (c *ClientWithResponses) GetIndexWatchguardWithBodyWithResponse(ctx context.Context, params *GetIndexWatchguardParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error) {
	rsp, err := c.GetIndexWatchguardWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWatchguardResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWatchguardWithResponse(ctx context.Context, params *GetIndexWatchguardParams, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error) {
	rsp, err := c.GetIndexWatchguard(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWatchguardResponse(rsp)
}

// GetIndexWhatsappWithBodyWithResponse request with arbitrary body returning *GetIndexWhatsappResponse
func (c *ClientWithResponses) GetIndexWhatsappWithBodyWithResponse(ctx context.Context, params *GetIndexWhatsappParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error) {
	rsp, err := c.GetIndexWhatsappWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWhatsappResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWhatsappWithResponse(ctx context.Context, params *GetIndexWhatsappParams, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error) {
	rsp, err := c.GetIndexWhatsapp(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWhatsappResponse(rsp)
}

// GetIndexWibuWithBodyWithResponse request with arbitrary body returning *GetIndexWibuResponse
func (c *ClientWithResponses) GetIndexWibuWithBodyWithResponse(ctx context.Context, params *GetIndexWibuParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error) {
	rsp, err := c.GetIndexWibuWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWibuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWibuWithResponse(ctx context.Context, params *GetIndexWibuParams, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error) {
	rsp, err := c.GetIndexWibu(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWibuResponse(rsp)
}

// GetIndexWiresharkWithBodyWithResponse request with arbitrary body returning *GetIndexWiresharkResponse
func (c *ClientWithResponses) GetIndexWiresharkWithBodyWithResponse(ctx context.Context, params *GetIndexWiresharkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error) {
	rsp, err := c.GetIndexWiresharkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWiresharkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWiresharkWithResponse(ctx context.Context, params *GetIndexWiresharkParams, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error) {
	rsp, err := c.GetIndexWireshark(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWiresharkResponse(rsp)
}

// GetIndexWithSecureWithBodyWithResponse request with arbitrary body returning *GetIndexWithSecureResponse
func (c *ClientWithResponses) GetIndexWithSecureWithBodyWithResponse(ctx context.Context, params *GetIndexWithSecureParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error) {
	rsp, err := c.GetIndexWithSecureWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWithSecureResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWithSecureWithResponse(ctx context.Context, params *GetIndexWithSecureParams, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error) {
	rsp, err := c.GetIndexWithSecure(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWithSecureResponse(rsp)
}

// GetIndexWolfiWithBodyWithResponse request with arbitrary body returning *GetIndexWolfiResponse
func (c *ClientWithResponses) GetIndexWolfiWithBodyWithResponse(ctx context.Context, params *GetIndexWolfiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error) {
	rsp, err := c.GetIndexWolfiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWolfiWithResponse(ctx context.Context, params *GetIndexWolfiParams, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error) {
	rsp, err := c.GetIndexWolfi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfiResponse(rsp)
}

// GetIndexWolfsslWithBodyWithResponse request with arbitrary body returning *GetIndexWolfsslResponse
func (c *ClientWithResponses) GetIndexWolfsslWithBodyWithResponse(ctx context.Context, params *GetIndexWolfsslParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error) {
	rsp, err := c.GetIndexWolfsslWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfsslResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWolfsslWithResponse(ctx context.Context, params *GetIndexWolfsslParams, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error) {
	rsp, err := c.GetIndexWolfssl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfsslResponse(rsp)
}

// GetIndexWordfenceWithBodyWithResponse request with arbitrary body returning *GetIndexWordfenceResponse
func (c *ClientWithResponses) GetIndexWordfenceWithBodyWithResponse(ctx context.Context, params *GetIndexWordfenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error) {
	rsp, err := c.GetIndexWordfenceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWordfenceResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWordfenceWithResponse(ctx context.Context, params *GetIndexWordfenceParams, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error) {
	rsp, err := c.GetIndexWordfence(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWordfenceResponse(rsp)
}

// GetIndexXenWithBodyWithResponse request with arbitrary body returning *GetIndexXenResponse
func (c *ClientWithResponses) GetIndexXenWithBodyWithResponse(ctx context.Context, params *GetIndexXenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error) {
	rsp, err := c.GetIndexXenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXenResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXenWithResponse(ctx context.Context, params *GetIndexXenParams, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error) {
	rsp, err := c.GetIndexXen(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXenResponse(rsp)
}

// GetIndexXeroxWithBodyWithResponse request with arbitrary body returning *GetIndexXeroxResponse
func (c *ClientWithResponses) GetIndexXeroxWithBodyWithResponse(ctx context.Context, params *GetIndexXeroxParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error) {
	rsp, err := c.GetIndexXeroxWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXeroxResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXeroxWithResponse(ctx context.Context, params *GetIndexXeroxParams, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error) {
	rsp, err := c.GetIndexXerox(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXeroxResponse(rsp)
}

// GetIndexXiaomiWithBodyWithResponse request with arbitrary body returning *GetIndexXiaomiResponse
func (c *ClientWithResponses) GetIndexXiaomiWithBodyWithResponse(ctx context.Context, params *GetIndexXiaomiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error) {
	rsp, err := c.GetIndexXiaomiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXiaomiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXiaomiWithResponse(ctx context.Context, params *GetIndexXiaomiParams, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error) {
	rsp, err := c.GetIndexXiaomi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXiaomiResponse(rsp)
}

// GetIndexXylemWithBodyWithResponse request with arbitrary body returning *GetIndexXylemResponse
func (c *ClientWithResponses) GetIndexXylemWithBodyWithResponse(ctx context.Context, params *GetIndexXylemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error) {
	rsp, err := c.GetIndexXylemWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXylemResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXylemWithResponse(ctx context.Context, params *GetIndexXylemParams, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error) {
	rsp, err := c.GetIndexXylem(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXylemResponse(rsp)
}

// GetIndexYokogawaWithBodyWithResponse request with arbitrary body returning *GetIndexYokogawaResponse
func (c *ClientWithResponses) GetIndexYokogawaWithBodyWithResponse(ctx context.Context, params *GetIndexYokogawaParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error) {
	rsp, err := c.GetIndexYokogawaWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYokogawaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexYokogawaWithResponse(ctx context.Context, params *GetIndexYokogawaParams, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error) {
	rsp, err := c.GetIndexYokogawa(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYokogawaResponse(rsp)
}

// GetIndexYubicoWithBodyWithResponse request with arbitrary body returning *GetIndexYubicoResponse
func (c *ClientWithResponses) GetIndexYubicoWithBodyWithResponse(ctx context.Context, params *GetIndexYubicoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error) {
	rsp, err := c.GetIndexYubicoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYubicoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexYubicoWithResponse(ctx context.Context, params *GetIndexYubicoParams, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error) {
	rsp, err := c.GetIndexYubico(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYubicoResponse(rsp)
}

// GetIndexZdiWithBodyWithResponse request with arbitrary body returning *GetIndexZdiResponse
func (c *ClientWithResponses) GetIndexZdiWithBodyWithResponse(ctx context.Context, params *GetIndexZdiParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error) {
	rsp, err := c.GetIndexZdiWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZdiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZdiWithResponse(ctx context.Context, params *GetIndexZdiParams, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error) {
	rsp, err := c.GetIndexZdi(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZdiResponse(rsp)
}

// GetIndexZebraWithBodyWithResponse request with arbitrary body returning *GetIndexZebraResponse
func (c *ClientWithResponses) GetIndexZebraWithBodyWithResponse(ctx context.Context, params *GetIndexZebraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZebraResponse, error) {
	rsp, err := c.GetIndexZebraWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZebraResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZebraWithResponse(ctx context.Context, params *GetIndexZebraParams, body GetIndexZebraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZebraResponse, error) {
	rsp, err := c.GetIndexZebra(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZebraResponse(rsp)
}

// GetIndexZeroscienceWithBodyWithResponse request with arbitrary body returning *GetIndexZeroscienceResponse
func (c *ClientWithResponses) GetIndexZeroscienceWithBodyWithResponse(ctx context.Context, params *GetIndexZeroscienceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error) {
	rsp, err := c.GetIndexZeroscienceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZeroscienceResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZeroscienceWithResponse(ctx context.Context, params *GetIndexZeroscienceParams, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error) {
	rsp, err := c.GetIndexZeroscience(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZeroscienceResponse(rsp)
}

// GetIndexZimbraWithBodyWithResponse request with arbitrary body returning *GetIndexZimbraResponse
func (c *ClientWithResponses) GetIndexZimbraWithBodyWithResponse(ctx context.Context, params *GetIndexZimbraParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error) {
	rsp, err := c.GetIndexZimbraWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZimbraResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZimbraWithResponse(ctx context.Context, params *GetIndexZimbraParams, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error) {
	rsp, err := c.GetIndexZimbra(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZimbraResponse(rsp)
}

// GetIndexZoomWithBodyWithResponse request with arbitrary body returning *GetIndexZoomResponse
func (c *ClientWithResponses) GetIndexZoomWithBodyWithResponse(ctx context.Context, params *GetIndexZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error) {
	rsp, err := c.GetIndexZoomWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZoomResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZoomWithResponse(ctx context.Context, params *GetIndexZoomParams, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error) {
	rsp, err := c.GetIndexZoom(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZoomResponse(rsp)
}

// GetIndexZscalerWithBodyWithResponse request with arbitrary body returning *GetIndexZscalerResponse
func (c *ClientWithResponses) GetIndexZscalerWithBodyWithResponse(ctx context.Context, params *GetIndexZscalerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error) {
	rsp, err := c.GetIndexZscalerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZscalerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZscalerWithResponse(ctx context.Context, params *GetIndexZscalerParams, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error) {
	rsp, err := c.GetIndexZscaler(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZscalerResponse(rsp)
}

// GetIndexZusoWithBodyWithResponse request with arbitrary body returning *GetIndexZusoResponse
func (c *ClientWithResponses) GetIndexZusoWithBodyWithResponse(ctx context.Context, params *GetIndexZusoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error) {
	rsp, err := c.GetIndexZusoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZusoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZusoWithResponse(ctx context.Context, params *GetIndexZusoParams, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error) {
	rsp, err := c.GetIndexZuso(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZusoResponse(rsp)
}

// GetIndexZyxelWithBodyWithResponse request with arbitrary body returning *GetIndexZyxelResponse
func (c *ClientWithResponses) GetIndexZyxelWithBodyWithResponse(ctx context.Context, params *GetIndexZyxelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error) {
	rsp, err := c.GetIndexZyxelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZyxelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZyxelWithResponse(ctx context.Context, params *GetIndexZyxelParams, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error) {
	rsp, err := c.GetIndexZyxel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZyxelResponse(rsp)
}

// GetOpenapiWithResponse request returning *GetOpenapiResponse
func (c *ClientWithResponses) GetOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiResponse, error) {
	rsp, err := c.GetOpenapi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiResponse(rsp)
}

// GetPdnsVulncheckC2WithResponse request returning *GetPdnsVulncheckC2Response
func (c *ClientWithResponses) GetPdnsVulncheckC2WithResponse(ctx context.Context, params *GetPdnsVulncheckC2Params, reqEditors ...RequestEditorFn) (*GetPdnsVulncheckC2Response, error) {
	rsp, err := c.GetPdnsVulncheckC2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPdnsVulncheckC2Response(rsp)
}

// GetPurlWithResponse request returning *GetPurlResponse
func (c *ClientWithResponses) GetPurlWithResponse(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*GetPurlResponse, error) {
	rsp, err := c.GetPurl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPurlResponse(rsp)
}

// GetRulesInitialAccessTypeWithResponse request returning *GetRulesInitialAccessTypeResponse
func (c *ClientWithResponses) GetRulesInitialAccessTypeWithResponse(ctx context.Context, pType GetRulesInitialAccessTypeParamsType, reqEditors ...RequestEditorFn) (*GetRulesInitialAccessTypeResponse, error) {
	rsp, err := c.GetRulesInitialAccessType(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesInitialAccessTypeResponse(rsp)
}

// GetTagsVulncheckC2WithResponse request returning *GetTagsVulncheckC2Response
func (c *ClientWithResponses) GetTagsVulncheckC2WithResponse(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*GetTagsVulncheckC2Response, error) {
	rsp, err := c.GetTagsVulncheckC2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsVulncheckC2Response(rsp)
}

// ParseGetBackupResponse parses an HTTP response from a GetBackupWithResponse call
func ParseGetBackupResponse(rsp *http.Response) (*GetBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseArrayParamsIndexBackupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBackupIndexResponse parses an HTTP response from a GetBackupIndexWithResponse call
func ParseGetBackupIndexResponse(rsp *http.Response) (*GetBackupIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackupIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataV3controllersBackupResponseDataV3controllersBackupResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCpeResponse parses an HTTP response from a GetCpeWithResponse call
func ParseGetCpeResponse(rsp *http.Response) (*GetCpeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCpeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayStringV3controllersResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetEntitlementsResponse parses an HTTP response from a GetEntitlementsWithResponse call
func ParseGetEntitlementsResponse(rsp *http.Response) (*GetEntitlementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntitlementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelsEntitlements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexResponse parses an HTTP response from a GetIndexWithResponse call
func ParseGetIndexResponse(rsp *http.Response) (*GetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseArrayParamsIndexList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexA10Response parses an HTTP response from a GetIndexA10WithResponse call
func ParseGetIndexA10Response(rsp *http.Response) (*GetIndexA10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexA10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryA10PaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAbbResponse parses an HTTP response from a GetIndexAbbWithResponse call
func ParseGetIndexAbbResponse(rsp *http.Response) (*GetIndexAbbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAbbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryABBAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAbbottResponse parses an HTTP response from a GetIndexAbbottWithResponse call
func ParseGetIndexAbbottResponse(rsp *http.Response) (*GetIndexAbbottResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAbbottResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAbbottPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAbsoluteResponse parses an HTTP response from a GetIndexAbsoluteWithResponse call
func ParseGetIndexAbsoluteResponse(rsp *http.Response) (*GetIndexAbsoluteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAbsoluteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAbsolutePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAcronisResponse parses an HTTP response from a GetIndexAcronisWithResponse call
func ParseGetIndexAcronisResponse(rsp *http.Response) (*GetIndexAcronisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAcronisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAcronisPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAdobeResponse parses an HTTP response from a GetIndexAdobeWithResponse call
func ParseGetIndexAdobeResponse(rsp *http.Response) (*GetIndexAdobeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAdobeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAdobeAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAdvisoriesResponse parses an HTTP response from a GetIndexAdvisoriesWithResponse call
func ParseGetIndexAdvisoriesResponse(rsp *http.Response) (*GetIndexAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAdvisoryRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAlephResearchResponse parses an HTTP response from a GetIndexAlephResearchWithResponse call
func ParseGetIndexAlephResearchResponse(rsp *http.Response) (*GetIndexAlephResearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAlephResearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAlephResearchPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAlmaResponse parses an HTTP response from a GetIndexAlmaWithResponse call
func ParseGetIndexAlmaResponse(rsp *http.Response) (*GetIndexAlmaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAlmaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAlmaLinuxUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAlpineResponse parses an HTTP response from a GetIndexAlpineWithResponse call
func ParseGetIndexAlpineResponse(rsp *http.Response) (*GetIndexAlpineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAlpineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAlpineLinuxSecDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAmazonResponse parses an HTTP response from a GetIndexAmazonWithResponse call
func ParseGetIndexAmazonResponse(rsp *http.Response) (*GetIndexAmazonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAmazonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAmdResponse parses an HTTP response from a GetIndexAmdWithResponse call
func ParseGetIndexAmdResponse(rsp *http.Response) (*GetIndexAmdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAmdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAMDPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAmiResponse parses an HTTP response from a GetIndexAmiWithResponse call
func ParseGetIndexAmiResponse(rsp *http.Response) (*GetIndexAmiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAmiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAMIPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAnchoreNvdOverrideResponse parses an HTTP response from a GetIndexAnchoreNvdOverrideWithResponse call
func ParseGetIndexAnchoreNvdOverrideResponse(rsp *http.Response) (*GetIndexAnchoreNvdOverrideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAnchoreNvdOverrideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAnchoreNVDOverridePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAndroidResponse parses an HTTP response from a GetIndexAndroidWithResponse call
func ParseGetIndexAndroidResponse(rsp *http.Response) (*GetIndexAndroidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAndroidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAndroidAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheActivemqResponse parses an HTTP response from a GetIndexApacheActivemqWithResponse call
func ParseGetIndexApacheActivemqResponse(rsp *http.Response) (*GetIndexApacheActivemqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheActivemqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheActiveMQPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheArchivaResponse parses an HTTP response from a GetIndexApacheArchivaWithResponse call
func ParseGetIndexApacheArchivaResponse(rsp *http.Response) (*GetIndexApacheArchivaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheArchivaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheArchivaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheArrowResponse parses an HTTP response from a GetIndexApacheArrowWithResponse call
func ParseGetIndexApacheArrowResponse(rsp *http.Response) (*GetIndexApacheArrowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheArrowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheArrowPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheCamelResponse parses an HTTP response from a GetIndexApacheCamelWithResponse call
func ParseGetIndexApacheCamelResponse(rsp *http.Response) (*GetIndexApacheCamelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheCamelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheCamelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheCommonsResponse parses an HTTP response from a GetIndexApacheCommonsWithResponse call
func ParseGetIndexApacheCommonsResponse(rsp *http.Response) (*GetIndexApacheCommonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheCommonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheCommonsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheCouchdbResponse parses an HTTP response from a GetIndexApacheCouchdbWithResponse call
func ParseGetIndexApacheCouchdbResponse(rsp *http.Response) (*GetIndexApacheCouchdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheCouchdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheCouchDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheFlinkResponse parses an HTTP response from a GetIndexApacheFlinkWithResponse call
func ParseGetIndexApacheFlinkResponse(rsp *http.Response) (*GetIndexApacheFlinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheFlinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheFlinkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheGuacamoleResponse parses an HTTP response from a GetIndexApacheGuacamoleWithResponse call
func ParseGetIndexApacheGuacamoleResponse(rsp *http.Response) (*GetIndexApacheGuacamoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheGuacamoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheGuacamolePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheHadoopResponse parses an HTTP response from a GetIndexApacheHadoopWithResponse call
func ParseGetIndexApacheHadoopResponse(rsp *http.Response) (*GetIndexApacheHadoopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheHadoopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheHadoopPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheHttpResponse parses an HTTP response from a GetIndexApacheHttpWithResponse call
func ParseGetIndexApacheHttpResponse(rsp *http.Response) (*GetIndexApacheHttpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheHttpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheHTTPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheJspwikiResponse parses an HTTP response from a GetIndexApacheJspwikiWithResponse call
func ParseGetIndexApacheJspwikiResponse(rsp *http.Response) (*GetIndexApacheJspwikiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheJspwikiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheJSPWikiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheKafkaResponse parses an HTTP response from a GetIndexApacheKafkaWithResponse call
func ParseGetIndexApacheKafkaResponse(rsp *http.Response) (*GetIndexApacheKafkaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheKafkaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheKafkaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheLoggingservicesResponse parses an HTTP response from a GetIndexApacheLoggingservicesWithResponse call
func ParseGetIndexApacheLoggingservicesResponse(rsp *http.Response) (*GetIndexApacheLoggingservicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheLoggingservicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheLoggingServicesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheNifiResponse parses an HTTP response from a GetIndexApacheNifiWithResponse call
func ParseGetIndexApacheNifiResponse(rsp *http.Response) (*GetIndexApacheNifiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheNifiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheNiFiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheOfbizResponse parses an HTTP response from a GetIndexApacheOfbizWithResponse call
func ParseGetIndexApacheOfbizResponse(rsp *http.Response) (*GetIndexApacheOfbizResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheOfbizResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheOFBizPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheOpenmeetingsResponse parses an HTTP response from a GetIndexApacheOpenmeetingsWithResponse call
func ParseGetIndexApacheOpenmeetingsResponse(rsp *http.Response) (*GetIndexApacheOpenmeetingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheOpenmeetingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheOpenMeetingsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheOpenofficeResponse parses an HTTP response from a GetIndexApacheOpenofficeWithResponse call
func ParseGetIndexApacheOpenofficeResponse(rsp *http.Response) (*GetIndexApacheOpenofficeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheOpenofficeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheOpenOfficePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApachePulsarResponse parses an HTTP response from a GetIndexApachePulsarWithResponse call
func ParseGetIndexApachePulsarResponse(rsp *http.Response) (*GetIndexApachePulsarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApachePulsarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApachePulsarPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheShiroResponse parses an HTTP response from a GetIndexApacheShiroWithResponse call
func ParseGetIndexApacheShiroResponse(rsp *http.Response) (*GetIndexApacheShiroResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheShiroResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheShiroPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheSparkResponse parses an HTTP response from a GetIndexApacheSparkWithResponse call
func ParseGetIndexApacheSparkResponse(rsp *http.Response) (*GetIndexApacheSparkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheSparkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheSparkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheStrutsResponse parses an HTTP response from a GetIndexApacheStrutsWithResponse call
func ParseGetIndexApacheStrutsResponse(rsp *http.Response) (*GetIndexApacheStrutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheStrutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheStrutsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheSubversionResponse parses an HTTP response from a GetIndexApacheSubversionWithResponse call
func ParseGetIndexApacheSubversionResponse(rsp *http.Response) (*GetIndexApacheSubversionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheSubversionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheSubversionPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheSupersetResponse parses an HTTP response from a GetIndexApacheSupersetWithResponse call
func ParseGetIndexApacheSupersetResponse(rsp *http.Response) (*GetIndexApacheSupersetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheSupersetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheSupersetPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheTomcatResponse parses an HTTP response from a GetIndexApacheTomcatWithResponse call
func ParseGetIndexApacheTomcatResponse(rsp *http.Response) (*GetIndexApacheTomcatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheTomcatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheTomcatPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheZookeeperResponse parses an HTTP response from a GetIndexApacheZookeeperWithResponse call
func ParseGetIndexApacheZookeeperResponse(rsp *http.Response) (*GetIndexApacheZookeeperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheZookeeperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryApacheZooKeeperPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAppcheckResponse parses an HTTP response from a GetIndexAppcheckWithResponse call
func ParseGetIndexAppcheckResponse(rsp *http.Response) (*GetIndexAppcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAppcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAppCheckPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAppgateResponse parses an HTTP response from a GetIndexAppgateWithResponse call
func ParseGetIndexAppgateResponse(rsp *http.Response) (*GetIndexAppgateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAppgateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAppgatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAppleResponse parses an HTTP response from a GetIndexAppleWithResponse call
func ParseGetIndexAppleResponse(rsp *http.Response) (*GetIndexAppleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAppleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAppleAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexArchResponse parses an HTTP response from a GetIndexArchWithResponse call
func ParseGetIndexArchResponse(rsp *http.Response) (*GetIndexArchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexArchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryArchIssuePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAristaResponse parses an HTTP response from a GetIndexAristaWithResponse call
func ParseGetIndexAristaResponse(rsp *http.Response) (*GetIndexAristaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAristaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAristaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexArubaResponse parses an HTTP response from a GetIndexArubaWithResponse call
func ParseGetIndexArubaResponse(rsp *http.Response) (*GetIndexArubaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexArubaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryArubaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAsrgResponse parses an HTTP response from a GetIndexAsrgWithResponse call
func ParseGetIndexAsrgResponse(rsp *http.Response) (*GetIndexAsrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAsrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryASRGPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAssetnoteResponse parses an HTTP response from a GetIndexAssetnoteWithResponse call
func ParseGetIndexAssetnoteResponse(rsp *http.Response) (*GetIndexAssetnoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAssetnoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAssetNotePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAsteriskResponse parses an HTTP response from a GetIndexAsteriskWithResponse call
func ParseGetIndexAsteriskResponse(rsp *http.Response) (*GetIndexAsteriskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAsteriskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAsteriskPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAsusResponse parses an HTTP response from a GetIndexAsusWithResponse call
func ParseGetIndexAsusResponse(rsp *http.Response) (*GetIndexAsusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAsusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAsusPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAtlassianResponse parses an HTTP response from a GetIndexAtlassianWithResponse call
func ParseGetIndexAtlassianResponse(rsp *http.Response) (*GetIndexAtlassianResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAtlassianResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAtlassianAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAtlassianVulnsResponse parses an HTTP response from a GetIndexAtlassianVulnsWithResponse call
func ParseGetIndexAtlassianVulnsResponse(rsp *http.Response) (*GetIndexAtlassianVulnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAtlassianVulnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAtlassianVulnPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAtredisResponse parses an HTTP response from a GetIndexAtredisWithResponse call
func ParseGetIndexAtredisResponse(rsp *http.Response) (*GetIndexAtredisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAtredisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAtredisPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAuscertResponse parses an HTTP response from a GetIndexAuscertWithResponse call
func ParseGetIndexAuscertResponse(rsp *http.Response) (*GetIndexAuscertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAuscertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAusCertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAutodeskResponse parses an HTTP response from a GetIndexAutodeskWithResponse call
func ParseGetIndexAutodeskResponse(rsp *http.Response) (*GetIndexAutodeskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAutodeskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAutodeskPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAvayaResponse parses an HTTP response from a GetIndexAvayaWithResponse call
func ParseGetIndexAvayaResponse(rsp *http.Response) (*GetIndexAvayaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAvayaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAvayaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAvevaResponse parses an HTTP response from a GetIndexAvevaWithResponse call
func ParseGetIndexAvevaResponse(rsp *http.Response) (*GetIndexAvevaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAvevaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAVEVAAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAvigilonResponse parses an HTTP response from a GetIndexAvigilonWithResponse call
func ParseGetIndexAvigilonResponse(rsp *http.Response) (*GetIndexAvigilonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAvigilonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAvigilonPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAwsResponse parses an HTTP response from a GetIndexAwsWithResponse call
func ParseGetIndexAwsResponse(rsp *http.Response) (*GetIndexAwsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAwsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAWSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAxisResponse parses an HTTP response from a GetIndexAxisWithResponse call
func ParseGetIndexAxisResponse(rsp *http.Response) (*GetIndexAxisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAxisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAxisPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAzulResponse parses an HTTP response from a GetIndexAzulWithResponse call
func ParseGetIndexAzulResponse(rsp *http.Response) (*GetIndexAzulResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAzulResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAzulPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBandrResponse parses an HTTP response from a GetIndexBandrWithResponse call
func ParseGetIndexBandrResponse(rsp *http.Response) (*GetIndexBandrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBandrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBandrPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBaxterResponse parses an HTTP response from a GetIndexBaxterWithResponse call
func ParseGetIndexBaxterResponse(rsp *http.Response) (*GetIndexBaxterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBaxterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBaxterAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBbraunResponse parses an HTTP response from a GetIndexBbraunWithResponse call
func ParseGetIndexBbraunResponse(rsp *http.Response) (*GetIndexBbraunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBbraunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBBraunAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBdResponse parses an HTTP response from a GetIndexBdWithResponse call
func ParseGetIndexBdResponse(rsp *http.Response) (*GetIndexBdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBectonDickinsonAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBduResponse parses an HTTP response from a GetIndexBduWithResponse call
func ParseGetIndexBduResponse(rsp *http.Response) (*GetIndexBduResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBduResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBDUAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBeckhoffResponse parses an HTTP response from a GetIndexBeckhoffWithResponse call
func ParseGetIndexBeckhoffResponse(rsp *http.Response) (*GetIndexBeckhoffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBeckhoffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBeckhoffAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBeldenResponse parses an HTTP response from a GetIndexBeldenWithResponse call
func ParseGetIndexBeldenResponse(rsp *http.Response) (*GetIndexBeldenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBeldenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBeldenAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBeyondTrustResponse parses an HTTP response from a GetIndexBeyondTrustWithResponse call
func ParseGetIndexBeyondTrustResponse(rsp *http.Response) (*GetIndexBeyondTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBeyondTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBeyondTrustPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBinarlyResponse parses an HTTP response from a GetIndexBinarlyWithResponse call
func ParseGetIndexBinarlyResponse(rsp *http.Response) (*GetIndexBinarlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBinarlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBinarlyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBitdefenderResponse parses an HTTP response from a GetIndexBitdefenderWithResponse call
func ParseGetIndexBitdefenderResponse(rsp *http.Response) (*GetIndexBitdefenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBitdefenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBitDefenderPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBlackberryResponse parses an HTTP response from a GetIndexBlackberryWithResponse call
func ParseGetIndexBlackberryResponse(rsp *http.Response) (*GetIndexBlackberryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBlackberryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBlackBerryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBlsResponse parses an HTTP response from a GetIndexBlsWithResponse call
func ParseGetIndexBlsResponse(rsp *http.Response) (*GetIndexBlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBLSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBoschResponse parses an HTTP response from a GetIndexBoschWithResponse call
func ParseGetIndexBoschResponse(rsp *http.Response) (*GetIndexBoschResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBoschResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBoschAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBostonScientificResponse parses an HTTP response from a GetIndexBostonScientificWithResponse call
func ParseGetIndexBostonScientificResponse(rsp *http.Response) (*GetIndexBostonScientificResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBostonScientificResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBostonScientificAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBotnetsResponse parses an HTTP response from a GetIndexBotnetsWithResponse call
func ParseGetIndexBotnetsResponse(rsp *http.Response) (*GetIndexBotnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBotnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryBotnetPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCaCyberCentreResponse parses an HTTP response from a GetIndexCaCyberCentreWithResponse call
func ParseGetIndexCaCyberCentreResponse(rsp *http.Response) (*GetIndexCaCyberCentreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCaCyberCentreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCACyberCentreAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCanvasResponse parses an HTTP response from a GetIndexCanvasWithResponse call
func ParseGetIndexCanvasResponse(rsp *http.Response) (*GetIndexCanvasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCanvasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCanvasExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCarestreamResponse parses an HTTP response from a GetIndexCarestreamWithResponse call
func ParseGetIndexCarestreamResponse(rsp *http.Response) (*GetIndexCarestreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCarestreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCarestreamAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCargoResponse parses an HTTP response from a GetIndexCargoWithResponse call
func ParseGetIndexCargoResponse(rsp *http.Response) (*GetIndexCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCarrierResponse parses an HTTP response from a GetIndexCarrierWithResponse call
func ParseGetIndexCarrierResponse(rsp *http.Response) (*GetIndexCarrierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCarrierPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCblMarinerResponse parses an HTTP response from a GetIndexCblMarinerWithResponse call
func ParseGetIndexCblMarinerResponse(rsp *http.Response) (*GetIndexCblMarinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCblMarinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCBLMarinerPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCentosResponse parses an HTTP response from a GetIndexCentosWithResponse call
func ParseGetIndexCentosResponse(rsp *http.Response) (*GetIndexCentosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCentosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCESAPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertBeResponse parses an HTTP response from a GetIndexCertBeWithResponse call
func ParseGetIndexCertBeResponse(rsp *http.Response) (*GetIndexCertBeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertBeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCertBEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertInResponse parses an HTTP response from a GetIndexCertInWithResponse call
func ParseGetIndexCertInResponse(rsp *http.Response) (*GetIndexCertInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCertINPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertIrSecurityAlertsResponse parses an HTTP response from a GetIndexCertIrSecurityAlertsWithResponse call
func ParseGetIndexCertIrSecurityAlertsResponse(rsp *http.Response) (*GetIndexCertIrSecurityAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertIrSecurityAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCertIRSecurityAlertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertSeResponse parses an HTTP response from a GetIndexCertSeWithResponse call
func ParseGetIndexCertSeResponse(rsp *http.Response) (*GetIndexCertSeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertSeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCertSEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertUaResponse parses an HTTP response from a GetIndexCertUaWithResponse call
func ParseGetIndexCertUaResponse(rsp *http.Response) (*GetIndexCertUaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertUaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCertUAPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCerteuResponse parses an HTTP response from a GetIndexCerteuWithResponse call
func ParseGetIndexCerteuResponse(rsp *http.Response) (*GetIndexCerteuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCerteuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCERTEUAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertfrResponse parses an HTTP response from a GetIndexCertfrWithResponse call
func ParseGetIndexCertfrResponse(rsp *http.Response) (*GetIndexCertfrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertfrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCertFRAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexChainguardResponse parses an HTTP response from a GetIndexChainguardWithResponse call
func ParseGetIndexChainguardResponse(rsp *http.Response) (*GetIndexChainguardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexChainguardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryChainGuardPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCheckpointResponse parses an HTTP response from a GetIndexCheckpointWithResponse call
func ParseGetIndexCheckpointResponse(rsp *http.Response) (*GetIndexCheckpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCheckpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCheckPointPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexChromeResponse parses an HTTP response from a GetIndexChromeWithResponse call
func ParseGetIndexChromeResponse(rsp *http.Response) (*GetIndexChromeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexChromeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryChromePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCisaAlertsResponse parses an HTTP response from a GetIndexCisaAlertsWithResponse call
func ParseGetIndexCisaAlertsResponse(rsp *http.Response) (*GetIndexCisaAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCisaAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCISAAlertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCisaKevResponse parses an HTTP response from a GetIndexCisaKevWithResponse call
func ParseGetIndexCisaKevResponse(rsp *http.Response) (*GetIndexCisaKevResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCisaKevResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryKEVCatalogVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCiscoResponse parses an HTTP response from a GetIndexCiscoWithResponse call
func ParseGetIndexCiscoResponse(rsp *http.Response) (*GetIndexCiscoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCiscoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCiscoAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCiscoTalosResponse parses an HTTP response from a GetIndexCiscoTalosWithResponse call
func ParseGetIndexCiscoTalosResponse(rsp *http.Response) (*GetIndexCiscoTalosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCiscoTalosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTalosAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCitrixResponse parses an HTTP response from a GetIndexCitrixWithResponse call
func ParseGetIndexCitrixResponse(rsp *http.Response) (*GetIndexCitrixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCitrixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCitrixAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexClarotyResponse parses an HTTP response from a GetIndexClarotyWithResponse call
func ParseGetIndexClarotyResponse(rsp *http.Response) (*GetIndexClarotyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexClarotyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryClarotyVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCloudbeesResponse parses an HTTP response from a GetIndexCloudbeesWithResponse call
func ParseGetIndexCloudbeesResponse(rsp *http.Response) (*GetIndexCloudbeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCloudbeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCloudBeesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCloudvulndbResponse parses an HTTP response from a GetIndexCloudvulndbWithResponse call
func ParseGetIndexCloudvulndbResponse(rsp *http.Response) (*GetIndexCloudvulndbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCloudvulndbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCloudVulnDBAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnnvdResponse parses an HTTP response from a GetIndexCnnvdWithResponse call
func ParseGetIndexCnnvdResponse(rsp *http.Response) (*GetIndexCnnvdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnnvdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCNNVDEntryJSONPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnvdBulletinsResponse parses an HTTP response from a GetIndexCnvdBulletinsWithResponse call
func ParseGetIndexCnvdBulletinsResponse(rsp *http.Response) (*GetIndexCnvdBulletinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnvdBulletinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCNVDBulletinPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnvdFlawsResponse parses an HTTP response from a GetIndexCnvdFlawsWithResponse call
func ParseGetIndexCnvdFlawsResponse(rsp *http.Response) (*GetIndexCnvdFlawsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnvdFlawsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCNVDFlawPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCocoapodsResponse parses an HTTP response from a GetIndexCocoapodsWithResponse call
func ParseGetIndexCocoapodsResponse(rsp *http.Response) (*GetIndexCocoapodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCocoapodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCodesysResponse parses an HTTP response from a GetIndexCodesysWithResponse call
func ParseGetIndexCodesysResponse(rsp *http.Response) (*GetIndexCodesysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCodesysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCodesysAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCompassSecurityResponse parses an HTTP response from a GetIndexCompassSecurityWithResponse call
func ParseGetIndexCompassSecurityResponse(rsp *http.Response) (*GetIndexCompassSecurityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCompassSecurityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCompassSecurityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexComposerResponse parses an HTTP response from a GetIndexComposerWithResponse call
func ParseGetIndexComposerResponse(rsp *http.Response) (*GetIndexComposerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexComposerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexConanResponse parses an HTTP response from a GetIndexConanWithResponse call
func ParseGetIndexConanResponse(rsp *http.Response) (*GetIndexConanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexConanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCrestronResponse parses an HTTP response from a GetIndexCrestronWithResponse call
func ParseGetIndexCrestronResponse(rsp *http.Response) (*GetIndexCrestronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCrestronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCrestronPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCurlResponse parses an HTTP response from a GetIndexCurlWithResponse call
func ParseGetIndexCurlResponse(rsp *http.Response) (*GetIndexCurlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCurlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCurlPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCweResponse parses an HTTP response from a GetIndexCweWithResponse call
func ParseGetIndexCweResponse(rsp *http.Response) (*GetIndexCweResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCweResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiCWEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDahuaResponse parses an HTTP response from a GetIndexDahuaWithResponse call
func ParseGetIndexDahuaResponse(rsp *http.Response) (*GetIndexDahuaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDahuaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDahuaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDassaultResponse parses an HTTP response from a GetIndexDassaultWithResponse call
func ParseGetIndexDassaultResponse(rsp *http.Response) (*GetIndexDassaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDassaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDassaultPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDebianResponse parses an HTTP response from a GetIndexDebianWithResponse call
func ParseGetIndexDebianResponse(rsp *http.Response) (*GetIndexDebianResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDebianResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVulnerableDebianPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDebianDsaResponse parses an HTTP response from a GetIndexDebianDsaWithResponse call
func ParseGetIndexDebianDsaResponse(rsp *http.Response) (*GetIndexDebianDsaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDebianDsaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDebianSecurityAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDellResponse parses an HTTP response from a GetIndexDellWithResponse call
func ParseGetIndexDellResponse(rsp *http.Response) (*GetIndexDellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDellPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDeltaResponse parses an HTTP response from a GetIndexDeltaWithResponse call
func ParseGetIndexDeltaResponse(rsp *http.Response) (*GetIndexDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDeltaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDjangoResponse parses an HTTP response from a GetIndexDjangoWithResponse call
func ParseGetIndexDjangoResponse(rsp *http.Response) (*GetIndexDjangoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDjangoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDjangoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDnnResponse parses an HTTP response from a GetIndexDnnWithResponse call
func ParseGetIndexDnnResponse(rsp *http.Response) (*GetIndexDnnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDnnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDNNPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDotcmsResponse parses an HTTP response from a GetIndexDotcmsWithResponse call
func ParseGetIndexDotcmsResponse(rsp *http.Response) (*GetIndexDotcmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDotcmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDotCMSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDragosResponse parses an HTTP response from a GetIndexDragosWithResponse call
func ParseGetIndexDragosResponse(rsp *http.Response) (*GetIndexDragosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDragosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDragosAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDraytekResponse parses an HTTP response from a GetIndexDraytekWithResponse call
func ParseGetIndexDraytekResponse(rsp *http.Response) (*GetIndexDraytekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDraytekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryDraytekPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEatonResponse parses an HTTP response from a GetIndexEatonWithResponse call
func ParseGetIndexEatonResponse(rsp *http.Response) (*GetIndexEatonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEatonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryEatonAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexElasticResponse parses an HTTP response from a GetIndexElasticWithResponse call
func ParseGetIndexElasticResponse(rsp *http.Response) (*GetIndexElasticResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexElasticResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryElasticPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexElspecResponse parses an HTTP response from a GetIndexElspecWithResponse call
func ParseGetIndexElspecResponse(rsp *http.Response) (*GetIndexElspecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexElspecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryElspecPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEmergingThreatsSnortResponse parses an HTTP response from a GetIndexEmergingThreatsSnortWithResponse call
func ParseGetIndexEmergingThreatsSnortResponse(rsp *http.Response) (*GetIndexEmergingThreatsSnortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEmergingThreatsSnortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryEmergingThreatsSnortPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEmersonResponse parses an HTTP response from a GetIndexEmersonWithResponse call
func ParseGetIndexEmersonResponse(rsp *http.Response) (*GetIndexEmersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEmersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryEmersonAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEolResponse parses an HTTP response from a GetIndexEolWithResponse call
func ParseGetIndexEolResponse(rsp *http.Response) (*GetIndexEolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryEOLReleaseDataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEpssResponse parses an HTTP response from a GetIndexEpssWithResponse call
func ParseGetIndexEpssResponse(rsp *http.Response) (*GetIndexEpssResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEpssResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiEPSSDataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExodusIntelResponse parses an HTTP response from a GetIndexExodusIntelWithResponse call
func ParseGetIndexExodusIntelResponse(rsp *http.Response) (*GetIndexExodusIntelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExodusIntelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryExodusIntelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitChainsResponse parses an HTTP response from a GetIndexExploitChainsWithResponse call
func ParseGetIndexExploitChainsResponse(rsp *http.Response) (*GetIndexExploitChainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitChainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiExploitChainPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitdbResponse parses an HTTP response from a GetIndexExploitdbWithResponse call
func ParseGetIndexExploitdbResponse(rsp *http.Response) (*GetIndexExploitdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryExploitDBExploitv2PaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitsResponse parses an HTTP response from a GetIndexExploitsWithResponse call
func ParseGetIndexExploitsResponse(rsp *http.Response) (*GetIndexExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiExploitV3ResultPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitsChangelogResponse parses an HTTP response from a GetIndexExploitsChangelogWithResponse call
func ParseGetIndexExploitsChangelogResponse(rsp *http.Response) (*GetIndexExploitsChangelogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitsChangelogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiExploitsChangelogPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFSecureResponse parses an HTTP response from a GetIndexFSecureWithResponse call
func ParseGetIndexFSecureResponse(rsp *http.Response) (*GetIndexFSecureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFSecureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFSecurePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFanucResponse parses an HTTP response from a GetIndexFanucWithResponse call
func ParseGetIndexFanucResponse(rsp *http.Response) (*GetIndexFanucResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFanucResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFanucPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFastlyResponse parses an HTTP response from a GetIndexFastlyWithResponse call
func ParseGetIndexFastlyResponse(rsp *http.Response) (*GetIndexFastlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFastlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFastlyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFedoraResponse parses an HTTP response from a GetIndexFedoraWithResponse call
func ParseGetIndexFedoraResponse(rsp *http.Response) (*GetIndexFedoraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFedoraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFilecloudResponse parses an HTTP response from a GetIndexFilecloudWithResponse call
func ParseGetIndexFilecloudResponse(rsp *http.Response) (*GetIndexFilecloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFilecloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFileCloudPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFlattSecurityResponse parses an HTTP response from a GetIndexFlattSecurityWithResponse call
func ParseGetIndexFlattSecurityResponse(rsp *http.Response) (*GetIndexFlattSecurityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFlattSecurityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFlattSecurityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexForgerockResponse parses an HTTP response from a GetIndexForgerockWithResponse call
func ParseGetIndexForgerockResponse(rsp *http.Response) (*GetIndexForgerockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexForgerockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryForgeRockPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFortinetResponse parses an HTTP response from a GetIndexFortinetWithResponse call
func ParseGetIndexFortinetResponse(rsp *http.Response) (*GetIndexFortinetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFortinetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFortinetAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFortinetIpsResponse parses an HTTP response from a GetIndexFortinetIpsWithResponse call
func ParseGetIndexFortinetIpsResponse(rsp *http.Response) (*GetIndexFortinetIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFortinetIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFortinetIPSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFoxitResponse parses an HTTP response from a GetIndexFoxitWithResponse call
func ParseGetIndexFoxitResponse(rsp *http.Response) (*GetIndexFoxitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFoxitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryFoxitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFreebsdResponse parses an HTTP response from a GetIndexFreebsdWithResponse call
func ParseGetIndexFreebsdResponse(rsp *http.Response) (*GetIndexFreebsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFreebsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGallagherResponse parses an HTTP response from a GetIndexGallagherWithResponse call
func ParseGetIndexGallagherResponse(rsp *http.Response) (*GetIndexGallagherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGallagherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGallagherPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGcpResponse parses an HTTP response from a GetIndexGcpWithResponse call
func ParseGetIndexGcpResponse(rsp *http.Response) (*GetIndexGcpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGcpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGCPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGeGasResponse parses an HTTP response from a GetIndexGeGasWithResponse call
func ParseGetIndexGeGasResponse(rsp *http.Response) (*GetIndexGeGasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGeGasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGEGasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGeHealthcareResponse parses an HTTP response from a GetIndexGeHealthcareWithResponse call
func ParseGetIndexGeHealthcareResponse(rsp *http.Response) (*GetIndexGeHealthcareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGeHealthcareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGEHealthcareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGemResponse parses an HTTP response from a GetIndexGemWithResponse call
func ParseGetIndexGemResponse(rsp *http.Response) (*GetIndexGemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGenetecResponse parses an HTTP response from a GetIndexGenetecWithResponse call
func ParseGetIndexGenetecResponse(rsp *http.Response) (*GetIndexGenetecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGenetecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGenetecPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGigabyteResponse parses an HTTP response from a GetIndexGigabyteWithResponse call
func ParseGetIndexGigabyteResponse(rsp *http.Response) (*GetIndexGigabyteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGigabyteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGigabytePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGiteeExploitsResponse parses an HTTP response from a GetIndexGiteeExploitsWithResponse call
func ParseGetIndexGiteeExploitsResponse(rsp *http.Response) (*GetIndexGiteeExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGiteeExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGiteeExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGithubExploitsResponse parses an HTTP response from a GetIndexGithubExploitsWithResponse call
func ParseGetIndexGithubExploitsResponse(rsp *http.Response) (*GetIndexGithubExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGithubExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGitHubExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGithubSecurityAdvisoriesResponse parses an HTTP response from a GetIndexGithubSecurityAdvisoriesWithResponse call
func ParseGetIndexGithubSecurityAdvisoriesResponse(rsp *http.Response) (*GetIndexGithubSecurityAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGithubSecurityAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGHAdvisoryJSONLeanPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGitlabAdvisoriesCommunityResponse parses an HTTP response from a GetIndexGitlabAdvisoriesCommunityWithResponse call
func ParseGetIndexGitlabAdvisoriesCommunityResponse(rsp *http.Response) (*GetIndexGitlabAdvisoriesCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGitlabAdvisoriesCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGitlabAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGitlabExploitsResponse parses an HTTP response from a GetIndexGitlabExploitsWithResponse call
func ParseGetIndexGitlabExploitsResponse(rsp *http.Response) (*GetIndexGitlabExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGitlabExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGitLabExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGnutlsResponse parses an HTTP response from a GetIndexGnutlsWithResponse call
func ParseGetIndexGnutlsResponse(rsp *http.Response) (*GetIndexGnutlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGnutlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGnuTLSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGolangResponse parses an HTTP response from a GetIndexGolangWithResponse call
func ParseGetIndexGolangResponse(rsp *http.Response) (*GetIndexGolangResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGolangResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGoogle0dayItwResponse parses an HTTP response from a GetIndexGoogle0dayItwWithResponse call
func ParseGetIndexGoogle0dayItwResponse(rsp *http.Response) (*GetIndexGoogle0dayItwResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGoogle0dayItwResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryITWExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGoogleContainerOptimizedOsResponse parses an HTTP response from a GetIndexGoogleContainerOptimizedOsWithResponse call
func ParseGetIndexGoogleContainerOptimizedOsResponse(rsp *http.Response) (*GetIndexGoogleContainerOptimizedOsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGoogleContainerOptimizedOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryContainerOSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGrafanaResponse parses an HTTP response from a GetIndexGrafanaWithResponse call
func ParseGetIndexGrafanaResponse(rsp *http.Response) (*GetIndexGrafanaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGrafanaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGrafanaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGreynoiseMetadataResponse parses an HTTP response from a GetIndexGreynoiseMetadataWithResponse call
func ParseGetIndexGreynoiseMetadataResponse(rsp *http.Response) (*GetIndexGreynoiseMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGreynoiseMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryGreyNoiseDetectionPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHackageResponse parses an HTTP response from a GetIndexHackageWithResponse call
func ParseGetIndexHackageResponse(rsp *http.Response) (*GetIndexHackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHarmonyosResponse parses an HTTP response from a GetIndexHarmonyosWithResponse call
func ParseGetIndexHarmonyosResponse(rsp *http.Response) (*GetIndexHarmonyosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHarmonyosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHarmonyOSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHashicorpResponse parses an HTTP response from a GetIndexHashicorpWithResponse call
func ParseGetIndexHashicorpResponse(rsp *http.Response) (*GetIndexHashicorpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHashicorpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHashiCorpPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHaskellSadbResponse parses an HTTP response from a GetIndexHaskellSadbWithResponse call
func ParseGetIndexHaskellSadbResponse(rsp *http.Response) (*GetIndexHaskellSadbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHaskellSadbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHaskellSADBAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHclResponse parses an HTTP response from a GetIndexHclWithResponse call
func ParseGetIndexHclResponse(rsp *http.Response) (*GetIndexHclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHCLPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHexResponse parses an HTTP response from a GetIndexHexWithResponse call
func ParseGetIndexHexResponse(rsp *http.Response) (*GetIndexHexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHikvisionResponse parses an HTTP response from a GetIndexHikvisionWithResponse call
func ParseGetIndexHikvisionResponse(rsp *http.Response) (*GetIndexHikvisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHikvisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHIKVisionPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHillromResponse parses an HTTP response from a GetIndexHillromWithResponse call
func ParseGetIndexHillromResponse(rsp *http.Response) (*GetIndexHillromResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHillromResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHillromAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHitachiResponse parses an HTTP response from a GetIndexHitachiWithResponse call
func ParseGetIndexHitachiResponse(rsp *http.Response) (*GetIndexHitachiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHitachiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHitachiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHitachiEnergyResponse parses an HTTP response from a GetIndexHitachiEnergyWithResponse call
func ParseGetIndexHitachiEnergyResponse(rsp *http.Response) (*GetIndexHitachiEnergyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHitachiEnergyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHitachiEnergyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHkcertResponse parses an HTTP response from a GetIndexHkcertWithResponse call
func ParseGetIndexHkcertResponse(rsp *http.Response) (*GetIndexHkcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHkcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHKCertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHoneywellResponse parses an HTTP response from a GetIndexHoneywellWithResponse call
func ParseGetIndexHoneywellResponse(rsp *http.Response) (*GetIndexHoneywellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHoneywellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHoneywellPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHpResponse parses an HTTP response from a GetIndexHpWithResponse call
func ParseGetIndexHpResponse(rsp *http.Response) (*GetIndexHpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHuaweiEulerosResponse parses an HTTP response from a GetIndexHuaweiEulerosWithResponse call
func ParseGetIndexHuaweiEulerosResponse(rsp *http.Response) (*GetIndexHuaweiEulerosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHuaweiEulerosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHuaweiEulerOSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHuaweiIpsResponse parses an HTTP response from a GetIndexHuaweiIpsWithResponse call
func ParseGetIndexHuaweiIpsResponse(rsp *http.Response) (*GetIndexHuaweiIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHuaweiIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHuaweiIPSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHuaweiPsirtResponse parses an HTTP response from a GetIndexHuaweiPsirtWithResponse call
func ParseGetIndexHuaweiPsirtResponse(rsp *http.Response) (*GetIndexHuaweiPsirtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHuaweiPsirtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryHuaweiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIavaResponse parses an HTTP response from a GetIndexIavaWithResponse call
func ParseGetIndexIavaResponse(rsp *http.Response) (*GetIndexIavaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIavaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIAVAPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIbmResponse parses an HTTP response from a GetIndexIbmWithResponse call
func ParseGetIndexIbmResponse(rsp *http.Response) (*GetIndexIbmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIbmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIBMPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIdemiaResponse parses an HTTP response from a GetIndexIdemiaWithResponse call
func ParseGetIndexIdemiaResponse(rsp *http.Response) (*GetIndexIdemiaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIdemiaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIdemiaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIlAlertsResponse parses an HTTP response from a GetIndexIlAlertsWithResponse call
func ParseGetIndexIlAlertsResponse(rsp *http.Response) (*GetIndexIlAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIlAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIsraeliAlertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIlVulnerabilitiesResponse parses an HTTP response from a GetIndexIlVulnerabilitiesWithResponse call
func ParseGetIndexIlVulnerabilitiesResponse(rsp *http.Response) (*GetIndexIlVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIlVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIsraeliVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIncibeResponse parses an HTTP response from a GetIndexIncibeWithResponse call
func ParseGetIndexIncibeResponse(rsp *http.Response) (*GetIndexIncibeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIncibeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIncibeAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexInitialAccessResponse parses an HTTP response from a GetIndexInitialAccessWithResponse call
func ParseGetIndexInitialAccessResponse(rsp *http.Response) (*GetIndexInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiInitialAccessPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexInitialAccessGitResponse parses an HTTP response from a GetIndexInitialAccessGitWithResponse call
func ParseGetIndexInitialAccessGitResponse(rsp *http.Response) (*GetIndexInitialAccessGitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexInitialAccessGitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiInitialAccessPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIntelResponse parses an HTTP response from a GetIndexIntelWithResponse call
func ParseGetIndexIntelResponse(rsp *http.Response) (*GetIndexIntelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIntelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIntelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel10dResponse parses an HTTP response from a GetIndexIpintel10dWithResponse call
func ParseGetIndexIpintel10dResponse(rsp *http.Response) (*GetIndexIpintel10dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel10dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel30dResponse parses an HTTP response from a GetIndexIpintel30dWithResponse call
func ParseGetIndexIpintel30dResponse(rsp *http.Response) (*GetIndexIpintel30dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel30dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel3dResponse parses an HTTP response from a GetIndexIpintel3dWithResponse call
func ParseGetIndexIpintel3dResponse(rsp *http.Response) (*GetIndexIpintel3dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel3dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel90dResponse parses an HTTP response from a GetIndexIpintel90dWithResponse call
func ParseGetIndexIpintel90dResponse(rsp *http.Response) (*GetIndexIpintel90dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel90dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIstioResponse parses an HTTP response from a GetIndexIstioWithResponse call
func ParseGetIndexIstioResponse(rsp *http.Response) (*GetIndexIstioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIstioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIstioPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIvantiResponse parses an HTTP response from a GetIndexIvantiWithResponse call
func ParseGetIndexIvantiResponse(rsp *http.Response) (*GetIndexIvantiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIvantiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIvantiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIvantiRssResponse parses an HTTP response from a GetIndexIvantiRssWithResponse call
func ParseGetIndexIvantiRssResponse(rsp *http.Response) (*GetIndexIvantiRssResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIvantiRssResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryIvantiRSSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJenkinsResponse parses an HTTP response from a GetIndexJenkinsWithResponse call
func ParseGetIndexJenkinsResponse(rsp *http.Response) (*GetIndexJenkinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJenkinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryJenkinsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJetbrainsResponse parses an HTTP response from a GetIndexJetbrainsWithResponse call
func ParseGetIndexJetbrainsResponse(rsp *http.Response) (*GetIndexJetbrainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJetbrainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryJetBrainsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJfrogResponse parses an HTTP response from a GetIndexJfrogWithResponse call
func ParseGetIndexJfrogResponse(rsp *http.Response) (*GetIndexJfrogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJfrogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryJFrogPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJnjResponse parses an HTTP response from a GetIndexJnjWithResponse call
func ParseGetIndexJnjResponse(rsp *http.Response) (*GetIndexJnjResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJnjResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryJNJAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJvnResponse parses an HTTP response from a GetIndexJvnWithResponse call
func ParseGetIndexJvnResponse(rsp *http.Response) (*GetIndexJvnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJvnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryJVNPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJvndbResponse parses an HTTP response from a GetIndexJvndbWithResponse call
func ParseGetIndexJvndbResponse(rsp *http.Response) (*GetIndexJvndbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJvndbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryJVNAdvisoryItemPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKasperskyIcsCertResponse parses an HTTP response from a GetIndexKasperskyIcsCertWithResponse call
func ParseGetIndexKasperskyIcsCertResponse(rsp *http.Response) (*GetIndexKasperskyIcsCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKasperskyIcsCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryKasperskyICSCERTAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKorelogicResponse parses an HTTP response from a GetIndexKorelogicWithResponse call
func ParseGetIndexKorelogicResponse(rsp *http.Response) (*GetIndexKorelogicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKorelogicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryKoreLogicPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKrcertSecurityNoticesResponse parses an HTTP response from a GetIndexKrcertSecurityNoticesWithResponse call
func ParseGetIndexKrcertSecurityNoticesResponse(rsp *http.Response) (*GetIndexKrcertSecurityNoticesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKrcertSecurityNoticesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryKRCertAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKrcertVulnerabilitiesResponse parses an HTTP response from a GetIndexKrcertVulnerabilitiesWithResponse call
func ParseGetIndexKrcertVulnerabilitiesResponse(rsp *http.Response) (*GetIndexKrcertVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKrcertVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryKRCertAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKubernetesResponse parses an HTTP response from a GetIndexKubernetesWithResponse call
func ParseGetIndexKubernetesResponse(rsp *http.Response) (*GetIndexKubernetesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKubernetesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryK8SPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLenovoResponse parses an HTTP response from a GetIndexLenovoWithResponse call
func ParseGetIndexLenovoResponse(rsp *http.Response) (*GetIndexLenovoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLenovoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryLenovoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLexmarkResponse parses an HTTP response from a GetIndexLexmarkWithResponse call
func ParseGetIndexLexmarkResponse(rsp *http.Response) (*GetIndexLexmarkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLexmarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryLexmarkAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLgResponse parses an HTTP response from a GetIndexLgWithResponse call
func ParseGetIndexLgResponse(rsp *http.Response) (*GetIndexLgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryLGPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLibreOfficeResponse parses an HTTP response from a GetIndexLibreOfficeWithResponse call
func ParseGetIndexLibreOfficeResponse(rsp *http.Response) (*GetIndexLibreOfficeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLibreOfficeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryLibreOfficePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLinuxResponse parses an HTTP response from a GetIndexLinuxWithResponse call
func ParseGetIndexLinuxResponse(rsp *http.Response) (*GetIndexLinuxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLinuxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryLinuxPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMFilesResponse parses an HTTP response from a GetIndexMFilesWithResponse call
func ParseGetIndexMFilesResponse(rsp *http.Response) (*GetIndexMFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMFilesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMacertResponse parses an HTTP response from a GetIndexMacertWithResponse call
func ParseGetIndexMacertResponse(rsp *http.Response) (*GetIndexMacertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMacertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMACertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexManageengineResponse parses an HTTP response from a GetIndexManageengineWithResponse call
func ParseGetIndexManageengineResponse(rsp *http.Response) (*GetIndexManageengineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexManageengineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryManageEngineAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMavenResponse parses an HTTP response from a GetIndexMavenWithResponse call
func ParseGetIndexMavenResponse(rsp *http.Response) (*GetIndexMavenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMavenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMbedTlsResponse parses an HTTP response from a GetIndexMbedTlsWithResponse call
func ParseGetIndexMbedTlsResponse(rsp *http.Response) (*GetIndexMbedTlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMbedTlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMbedTLSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMediatekResponse parses an HTTP response from a GetIndexMediatekWithResponse call
func ParseGetIndexMediatekResponse(rsp *http.Response) (*GetIndexMediatekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMediatekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMediatekPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMedtronicResponse parses an HTTP response from a GetIndexMedtronicWithResponse call
func ParseGetIndexMedtronicResponse(rsp *http.Response) (*GetIndexMedtronicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMedtronicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMedtronicAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMendixResponse parses an HTTP response from a GetIndexMendixWithResponse call
func ParseGetIndexMendixResponse(rsp *http.Response) (*GetIndexMendixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMendixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMendixPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMetasploitResponse parses an HTTP response from a GetIndexMetasploitWithResponse call
func ParseGetIndexMetasploitResponse(rsp *http.Response) (*GetIndexMetasploitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMetasploitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMetasploitExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMicrosoftCvrfResponse parses an HTTP response from a GetIndexMicrosoftCvrfWithResponse call
func ParseGetIndexMicrosoftCvrfResponse(rsp *http.Response) (*GetIndexMicrosoftCvrfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMicrosoftCvrfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMicrosoftCVRFPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMicrosoftKbResponse parses an HTTP response from a GetIndexMicrosoftKbWithResponse call
func ParseGetIndexMicrosoftKbResponse(rsp *http.Response) (*GetIndexMicrosoftKbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMicrosoftKbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMicrosoftKbPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMikrotikResponse parses an HTTP response from a GetIndexMikrotikWithResponse call
func ParseGetIndexMikrotikResponse(rsp *http.Response) (*GetIndexMikrotikResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMikrotikResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMikrotikPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMindrayResponse parses an HTTP response from a GetIndexMindrayWithResponse call
func ParseGetIndexMindrayResponse(rsp *http.Response) (*GetIndexMindrayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMindrayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMindrayPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMispThreatActorsResponse parses an HTTP response from a GetIndexMispThreatActorsWithResponse call
func ParseGetIndexMispThreatActorsResponse(rsp *http.Response) (*GetIndexMispThreatActorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMispThreatActorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMispValuePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitelResponse parses an HTTP response from a GetIndexMitelWithResponse call
func ParseGetIndexMitelResponse(rsp *http.Response) (*GetIndexMitelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMitelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitreAttackCveResponse parses an HTTP response from a GetIndexMitreAttackCveWithResponse call
func ParseGetIndexMitreAttackCveResponse(rsp *http.Response) (*GetIndexMitreAttackCveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitreAttackCveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiMitreAttackToCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitreCvelistV5Response parses an HTTP response from a GetIndexMitreCvelistV5WithResponse call
func ParseGetIndexMitreCvelistV5Response(rsp *http.Response) (*GetIndexMitreCvelistV5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitreCvelistV5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMitreCVEListV5PaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitsubishiElectricResponse parses an HTTP response from a GetIndexMitsubishiElectricWithResponse call
func ParseGetIndexMitsubishiElectricResponse(rsp *http.Response) (*GetIndexMitsubishiElectricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitsubishiElectricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMitsubishiElectricAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMongodbResponse parses an HTTP response from a GetIndexMongodbWithResponse call
func ParseGetIndexMongodbResponse(rsp *http.Response) (*GetIndexMongodbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMongodbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMongoDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMoxaResponse parses an HTTP response from a GetIndexMoxaWithResponse call
func ParseGetIndexMoxaResponse(rsp *http.Response) (*GetIndexMoxaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMoxaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMoxaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMozillaResponse parses an HTTP response from a GetIndexMozillaWithResponse call
func ParseGetIndexMozillaResponse(rsp *http.Response) (*GetIndexMozillaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMozillaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMozillaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNaverResponse parses an HTTP response from a GetIndexNaverWithResponse call
func ParseGetIndexNaverResponse(rsp *http.Response) (*GetIndexNaverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNaverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNaverPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNcscResponse parses an HTTP response from a GetIndexNcscWithResponse call
func ParseGetIndexNcscResponse(rsp *http.Response) (*GetIndexNcscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNcscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNCSCPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNcscCvesResponse parses an HTTP response from a GetIndexNcscCvesWithResponse call
func ParseGetIndexNcscCvesResponse(rsp *http.Response) (*GetIndexNcscCvesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNcscCvesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNCSCCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNecResponse parses an HTTP response from a GetIndexNecWithResponse call
func ParseGetIndexNecResponse(rsp *http.Response) (*GetIndexNecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNECPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetappResponse parses an HTTP response from a GetIndexNetappWithResponse call
func ParseGetIndexNetappResponse(rsp *http.Response) (*GetIndexNetappResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetappResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNetAppPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetgateResponse parses an HTTP response from a GetIndexNetgateWithResponse call
func ParseGetIndexNetgateResponse(rsp *http.Response) (*GetIndexNetgateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetgateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNetgatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetgearResponse parses an HTTP response from a GetIndexNetgearWithResponse call
func ParseGetIndexNetgearResponse(rsp *http.Response) (*GetIndexNetgearResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetgearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNetgearPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetskopeResponse parses an HTTP response from a GetIndexNetskopeWithResponse call
func ParseGetIndexNetskopeResponse(rsp *http.Response) (*GetIndexNetskopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetskopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNetskopePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNginxResponse parses an HTTP response from a GetIndexNginxWithResponse call
func ParseGetIndexNginxResponse(rsp *http.Response) (*GetIndexNginxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNginxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNginxAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNhsResponse parses an HTTP response from a GetIndexNhsWithResponse call
func ParseGetIndexNhsResponse(rsp *http.Response) (*GetIndexNhsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNhsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNHSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNiResponse parses an HTTP response from a GetIndexNiWithResponse call
func ParseGetIndexNiResponse(rsp *http.Response) (*GetIndexNiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNIPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNistNvdResponse parses an HTTP response from a GetIndexNistNvdWithResponse call
func ParseGetIndexNistNvdResponse(rsp *http.Response) (*GetIndexNistNvdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNistNvdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiCveItemsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNistNvd2Response parses an HTTP response from a GetIndexNistNvd2WithResponse call
func ParseGetIndexNistNvd2Response(rsp *http.Response) (*GetIndexNistNvd2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNistNvd2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiNVD20CVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNistNvd2CpematchResponse parses an HTTP response from a GetIndexNistNvd2CpematchWithResponse call
func ParseGetIndexNistNvd2CpematchResponse(rsp *http.Response) (*GetIndexNistNvd2CpematchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNistNvd2CpematchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiNVD20CPEMatchPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNodeSecurityResponse parses an HTTP response from a GetIndexNodeSecurityWithResponse call
func ParseGetIndexNodeSecurityResponse(rsp *http.Response) (*GetIndexNodeSecurityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNodeSecurityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNodeSecurityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNodejsResponse parses an HTTP response from a GetIndexNodejsWithResponse call
func ParseGetIndexNodejsResponse(rsp *http.Response) (*GetIndexNodejsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNodejsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNodeJSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNokiaResponse parses an HTTP response from a GetIndexNokiaWithResponse call
func ParseGetIndexNokiaResponse(rsp *http.Response) (*GetIndexNokiaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNokiaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNokiaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNozomiResponse parses an HTTP response from a GetIndexNozomiWithResponse call
func ParseGetIndexNozomiResponse(rsp *http.Response) (*GetIndexNozomiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNozomiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNozomiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNpmResponse parses an HTTP response from a GetIndexNpmWithResponse call
func ParseGetIndexNpmResponse(rsp *http.Response) (*GetIndexNpmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNpmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNtpResponse parses an HTTP response from a GetIndexNtpWithResponse call
func ParseGetIndexNtpResponse(rsp *http.Response) (*GetIndexNtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNTPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNugetResponse parses an HTTP response from a GetIndexNugetWithResponse call
func ParseGetIndexNugetResponse(rsp *http.Response) (*GetIndexNugetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNugetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNvidiaResponse parses an HTTP response from a GetIndexNvidiaWithResponse call
func ParseGetIndexNvidiaResponse(rsp *http.Response) (*GetIndexNvidiaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNvidiaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySecurityBulletinPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNzAdvisoriesResponse parses an HTTP response from a GetIndexNzAdvisoriesWithResponse call
func ParseGetIndexNzAdvisoriesResponse(rsp *http.Response) (*GetIndexNzAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNzAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryNZAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOctopusDeployResponse parses an HTTP response from a GetIndexOctopusDeployWithResponse call
func ParseGetIndexOctopusDeployResponse(rsp *http.Response) (*GetIndexOctopusDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOctopusDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOctopusDeployPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOktaResponse parses an HTTP response from a GetIndexOktaWithResponse call
func ParseGetIndexOktaResponse(rsp *http.Response) (*GetIndexOktaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOktaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOktaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOmronResponse parses an HTTP response from a GetIndexOmronWithResponse call
func ParseGetIndexOmronResponse(rsp *http.Response) (*GetIndexOmronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOmronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOmronPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOneEResponse parses an HTTP response from a GetIndexOneEWithResponse call
func ParseGetIndexOneEResponse(rsp *http.Response) (*GetIndexOneEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOneEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOneEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpamResponse parses an HTTP response from a GetIndexOpamWithResponse call
func ParseGetIndexOpamResponse(rsp *http.Response) (*GetIndexOpamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenCvdbResponse parses an HTTP response from a GetIndexOpenCvdbWithResponse call
func ParseGetIndexOpenCvdbResponse(rsp *http.Response) (*GetIndexOpenCvdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenCvdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOpenCVDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenbsdResponse parses an HTTP response from a GetIndexOpenbsdWithResponse call
func ParseGetIndexOpenbsdResponse(rsp *http.Response) (*GetIndexOpenbsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenbsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOpenBSDPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpensshResponse parses an HTTP response from a GetIndexOpensshWithResponse call
func ParseGetIndexOpensshResponse(rsp *http.Response) (*GetIndexOpensshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpensshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOpenSSHPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpensslSecadvResponse parses an HTTP response from a GetIndexOpensslSecadvWithResponse call
func ParseGetIndexOpensslSecadvResponse(rsp *http.Response) (*GetIndexOpensslSecadvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpensslSecadvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOpenSSLSecAdvPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenstackResponse parses an HTTP response from a GetIndexOpenstackWithResponse call
func ParseGetIndexOpenstackResponse(rsp *http.Response) (*GetIndexOpenstackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenstackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOpenStackPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenwrtResponse parses an HTTP response from a GetIndexOpenwrtWithResponse call
func ParseGetIndexOpenwrtResponse(rsp *http.Response) (*GetIndexOpenwrtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenwrtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWRTPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOracleResponse parses an HTTP response from a GetIndexOracleWithResponse call
func ParseGetIndexOracleResponse(rsp *http.Response) (*GetIndexOracleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOracleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryMetaDataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOracleCpuResponse parses an HTTP response from a GetIndexOracleCpuWithResponse call
func ParseGetIndexOracleCpuResponse(rsp *http.Response) (*GetIndexOracleCpuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOracleCpuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOracleCPUPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOracleCpuCsafResponse parses an HTTP response from a GetIndexOracleCpuCsafWithResponse call
func ParseGetIndexOracleCpuCsafResponse(rsp *http.Response) (*GetIndexOracleCpuCsafResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOracleCpuCsafResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOracleCPUCSAFPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOsvResponse parses an HTTP response from a GetIndexOsvWithResponse call
func ParseGetIndexOsvResponse(rsp *http.Response) (*GetIndexOsvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOSVPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOtrsResponse parses an HTTP response from a GetIndexOtrsWithResponse call
func ParseGetIndexOtrsResponse(rsp *http.Response) (*GetIndexOtrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOtrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOTRSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOwncloudResponse parses an HTTP response from a GetIndexOwncloudWithResponse call
func ParseGetIndexOwncloudResponse(rsp *http.Response) (*GetIndexOwncloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOwncloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryOwnCloudPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPalantirResponse parses an HTTP response from a GetIndexPalantirWithResponse call
func ParseGetIndexPalantirResponse(rsp *http.Response) (*GetIndexPalantirResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPalantirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPalantirPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPaloAltoResponse parses an HTTP response from a GetIndexPaloAltoWithResponse call
func ParseGetIndexPaloAltoResponse(rsp *http.Response) (*GetIndexPaloAltoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPaloAltoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPaloAltoAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPanasonicResponse parses an HTTP response from a GetIndexPanasonicWithResponse call
func ParseGetIndexPanasonicResponse(rsp *http.Response) (*GetIndexPanasonicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPanasonicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPanasonicPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPapercutResponse parses an HTTP response from a GetIndexPapercutWithResponse call
func ParseGetIndexPapercutResponse(rsp *http.Response) (*GetIndexPapercutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPapercutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPaperCutPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPegaResponse parses an HTTP response from a GetIndexPegaWithResponse call
func ParseGetIndexPegaResponse(rsp *http.Response) (*GetIndexPegaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPegaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPegaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPhilipsResponse parses an HTTP response from a GetIndexPhilipsWithResponse call
func ParseGetIndexPhilipsResponse(rsp *http.Response) (*GetIndexPhilipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPhilipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPhilipsAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPhoenixContactResponse parses an HTTP response from a GetIndexPhoenixContactWithResponse call
func ParseGetIndexPhoenixContactResponse(rsp *http.Response) (*GetIndexPhoenixContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPhoenixContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPhoenixContactAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPhpMyAdminResponse parses an HTTP response from a GetIndexPhpMyAdminWithResponse call
func ParseGetIndexPhpMyAdminResponse(rsp *http.Response) (*GetIndexPhpMyAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPhpMyAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPHPMyAdminPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPostgressqlResponse parses an HTTP response from a GetIndexPostgressqlWithResponse call
func ParseGetIndexPostgressqlResponse(rsp *http.Response) (*GetIndexPostgressqlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPostgressqlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPostgresSQLPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPowerdnsResponse parses an HTTP response from a GetIndexPowerdnsWithResponse call
func ParseGetIndexPowerdnsResponse(rsp *http.Response) (*GetIndexPowerdnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPowerdnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPowerDNSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexProgressResponse parses an HTTP response from a GetIndexProgressWithResponse call
func ParseGetIndexProgressResponse(rsp *http.Response) (*GetIndexProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryProgressPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexProofpointResponse parses an HTTP response from a GetIndexProofpointWithResponse call
func ParseGetIndexProofpointResponse(rsp *http.Response) (*GetIndexProofpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexProofpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryProofpointPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPtcResponse parses an HTTP response from a GetIndexPtcWithResponse call
func ParseGetIndexPtcResponse(rsp *http.Response) (*GetIndexPtcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPtcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPTCPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPubResponse parses an HTTP response from a GetIndexPubWithResponse call
func ParseGetIndexPubResponse(rsp *http.Response) (*GetIndexPubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPureStorageResponse parses an HTTP response from a GetIndexPureStorageWithResponse call
func ParseGetIndexPureStorageResponse(rsp *http.Response) (*GetIndexPureStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPureStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPureStoragePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPypaAdvisoriesResponse parses an HTTP response from a GetIndexPypaAdvisoriesWithResponse call
func ParseGetIndexPypaAdvisoriesResponse(rsp *http.Response) (*GetIndexPypaAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPypaAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryPyPAAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPypiResponse parses an HTTP response from a GetIndexPypiWithResponse call
func ParseGetIndexPypiResponse(rsp *http.Response) (*GetIndexPypiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPypiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQnapResponse parses an HTTP response from a GetIndexQnapWithResponse call
func ParseGetIndexQnapResponse(rsp *http.Response) (*GetIndexQnapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQnapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryQNAPAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQualcommResponse parses an HTTP response from a GetIndexQualcommWithResponse call
func ParseGetIndexQualcommResponse(rsp *http.Response) (*GetIndexQualcommResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQualcommResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryQualcommPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQualysResponse parses an HTTP response from a GetIndexQualysWithResponse call
func ParseGetIndexQualysResponse(rsp *http.Response) (*GetIndexQualysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQualysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryQualysPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQubesQsbResponse parses an HTTP response from a GetIndexQubesQsbWithResponse call
func ParseGetIndexQubesQsbResponse(rsp *http.Response) (*GetIndexQubesQsbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQubesQsbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryQSBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRansomwareResponse parses an HTTP response from a GetIndexRansomwareWithResponse call
func ParseGetIndexRansomwareResponse(rsp *http.Response) (*GetIndexRansomwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRansomwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRansomwareExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRedhatResponse parses an HTTP response from a GetIndexRedhatWithResponse call
func ParseGetIndexRedhatResponse(rsp *http.Response) (*GetIndexRedhatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRedhatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRedhatCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRenesasResponse parses an HTTP response from a GetIndexRenesasWithResponse call
func ParseGetIndexRenesasResponse(rsp *http.Response) (*GetIndexRenesasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRenesasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRenesasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexReviveResponse parses an HTTP response from a GetIndexReviveWithResponse call
func ParseGetIndexReviveResponse(rsp *http.Response) (*GetIndexReviveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexReviveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRevivePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRockwellResponse parses an HTTP response from a GetIndexRockwellWithResponse call
func ParseGetIndexRockwellResponse(rsp *http.Response) (*GetIndexRockwellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRockwellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRockwellPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRockyResponse parses an HTTP response from a GetIndexRockyWithResponse call
func ParseGetIndexRockyResponse(rsp *http.Response) (*GetIndexRockyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRockyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRockyErrataResponse parses an HTTP response from a GetIndexRockyErrataWithResponse call
func ParseGetIndexRockyErrataResponse(rsp *http.Response) (*GetIndexRockyErrataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRockyErrataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRockyErrataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRuckusResponse parses an HTTP response from a GetIndexRuckusWithResponse call
func ParseGetIndexRuckusResponse(rsp *http.Response) (*GetIndexRuckusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRuckusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRuckusPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRustsecAdvisoriesResponse parses an HTTP response from a GetIndexRustsecAdvisoriesWithResponse call
func ParseGetIndexRustsecAdvisoriesResponse(rsp *http.Response) (*GetIndexRustsecAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRustsecAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryRustsecAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSacertResponse parses an HTTP response from a GetIndexSacertWithResponse call
func ParseGetIndexSacertResponse(rsp *http.Response) (*GetIndexSacertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSacertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySAAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSaintResponse parses an HTTP response from a GetIndexSaintWithResponse call
func ParseGetIndexSaintResponse(rsp *http.Response) (*GetIndexSaintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSaintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySaintExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSalesforceResponse parses an HTTP response from a GetIndexSalesforceWithResponse call
func ParseGetIndexSalesforceResponse(rsp *http.Response) (*GetIndexSalesforceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSalesforceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySalesForcePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSambaResponse parses an HTTP response from a GetIndexSambaWithResponse call
func ParseGetIndexSambaResponse(rsp *http.Response) (*GetIndexSambaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSambaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySambaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSapResponse parses an HTTP response from a GetIndexSapWithResponse call
func ParseGetIndexSapResponse(rsp *http.Response) (*GetIndexSapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySAPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSchneiderElectricResponse parses an HTTP response from a GetIndexSchneiderElectricWithResponse call
func ParseGetIndexSchneiderElectricResponse(rsp *http.Response) (*GetIndexSchneiderElectricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSchneiderElectricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySchneiderElectricAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSecConsultResponse parses an HTTP response from a GetIndexSecConsultWithResponse call
func ParseGetIndexSecConsultResponse(rsp *http.Response) (*GetIndexSecConsultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSecConsultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySECConsultPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSecuritylabResponse parses an HTTP response from a GetIndexSecuritylabWithResponse call
func ParseGetIndexSecuritylabResponse(rsp *http.Response) (*GetIndexSecuritylabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSecuritylabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySecurityLabPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSeebugResponse parses an HTTP response from a GetIndexSeebugWithResponse call
func ParseGetIndexSeebugResponse(rsp *http.Response) (*GetIndexSeebugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSeebugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySeebugExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSelResponse parses an HTTP response from a GetIndexSelWithResponse call
func ParseGetIndexSelResponse(rsp *http.Response) (*GetIndexSelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSentineloneResponse parses an HTTP response from a GetIndexSentineloneWithResponse call
func ParseGetIndexSentineloneResponse(rsp *http.Response) (*GetIndexSentineloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSentineloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySentinelOnePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexServicenowResponse parses an HTTP response from a GetIndexServicenowWithResponse call
func ParseGetIndexServicenowResponse(rsp *http.Response) (*GetIndexServicenowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexServicenowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryServiceNowPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexShadowserverExploitedResponse parses an HTTP response from a GetIndexShadowserverExploitedWithResponse call
func ParseGetIndexShadowserverExploitedResponse(rsp *http.Response) (*GetIndexShadowserverExploitedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexShadowserverExploitedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryShadowServerExploitedVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexShielderResponse parses an HTTP response from a GetIndexShielderWithResponse call
func ParseGetIndexShielderResponse(rsp *http.Response) (*GetIndexShielderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexShielderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryShielderPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSickResponse parses an HTTP response from a GetIndexSickWithResponse call
func ParseGetIndexSickResponse(rsp *http.Response) (*GetIndexSickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySickPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSiemensResponse parses an HTTP response from a GetIndexSiemensWithResponse call
func ParseGetIndexSiemensResponse(rsp *http.Response) (*GetIndexSiemensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSiemensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySiemensAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSierraWirelessResponse parses an HTTP response from a GetIndexSierraWirelessWithResponse call
func ParseGetIndexSierraWirelessResponse(rsp *http.Response) (*GetIndexSierraWirelessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSierraWirelessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySierraWirelessPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSigmaRulesResponse parses an HTTP response from a GetIndexSigmaRulesWithResponse call
func ParseGetIndexSigmaRulesResponse(rsp *http.Response) (*GetIndexSigmaRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSigmaRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySigmaRulePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSingcertResponse parses an HTTP response from a GetIndexSingcertWithResponse call
func ParseGetIndexSingcertResponse(rsp *http.Response) (*GetIndexSingcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSingcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySingCertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSlackwareResponse parses an HTTP response from a GetIndexSlackwareWithResponse call
func ParseGetIndexSlackwareResponse(rsp *http.Response) (*GetIndexSlackwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSlackwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySlackwarePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSolarwindsResponse parses an HTTP response from a GetIndexSolarwindsWithResponse call
func ParseGetIndexSolarwindsResponse(rsp *http.Response) (*GetIndexSolarwindsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSolarwindsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySolarWindsAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSolrResponse parses an HTTP response from a GetIndexSolrWithResponse call
func ParseGetIndexSolrResponse(rsp *http.Response) (*GetIndexSolrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSolrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySolrPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSonicwallResponse parses an HTTP response from a GetIndexSonicwallWithResponse call
func ParseGetIndexSonicwallResponse(rsp *http.Response) (*GetIndexSonicwallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSonicwallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySonicWallAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSpacelabsHealthcareResponse parses an HTTP response from a GetIndexSpacelabsHealthcareWithResponse call
func ParseGetIndexSpacelabsHealthcareResponse(rsp *http.Response) (*GetIndexSpacelabsHealthcareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSpacelabsHealthcareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySpacelabsHealthcareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSplunkResponse parses an HTTP response from a GetIndexSplunkWithResponse call
func ParseGetIndexSplunkResponse(rsp *http.Response) (*GetIndexSplunkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSplunkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySplunkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSpringResponse parses an HTTP response from a GetIndexSpringWithResponse call
func ParseGetIndexSpringResponse(rsp *http.Response) (*GetIndexSpringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSpringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySpringPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSsdResponse parses an HTTP response from a GetIndexSsdWithResponse call
func ParseGetIndexSsdResponse(rsp *http.Response) (*GetIndexSsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySSDAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexStormshieldResponse parses an HTTP response from a GetIndexStormshieldWithResponse call
func ParseGetIndexStormshieldResponse(rsp *http.Response) (*GetIndexStormshieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexStormshieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryStormshieldPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexStrykerResponse parses an HTTP response from a GetIndexStrykerWithResponse call
func ParseGetIndexStrykerResponse(rsp *http.Response) (*GetIndexStrykerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexStrykerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryStrykerAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSudoResponse parses an HTTP response from a GetIndexSudoWithResponse call
func ParseGetIndexSudoResponse(rsp *http.Response) (*GetIndexSudoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSudoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySudoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSuseResponse parses an HTTP response from a GetIndexSuseWithResponse call
func ParseGetIndexSuseResponse(rsp *http.Response) (*GetIndexSuseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSuseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryCvrfPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSwiftResponse parses an HTTP response from a GetIndexSwiftWithResponse call
func ParseGetIndexSwiftResponse(rsp *http.Response) (*GetIndexSwiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSwiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSwisslogHealthcareResponse parses an HTTP response from a GetIndexSwisslogHealthcareWithResponse call
func ParseGetIndexSwisslogHealthcareResponse(rsp *http.Response) (*GetIndexSwisslogHealthcareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSwisslogHealthcareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySwisslogHealthcareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSymfonyResponse parses an HTTP response from a GetIndexSymfonyWithResponse call
func ParseGetIndexSymfonyResponse(rsp *http.Response) (*GetIndexSymfonyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSymfonyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySymfonyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSynacktivResponse parses an HTTP response from a GetIndexSynacktivWithResponse call
func ParseGetIndexSynacktivResponse(rsp *http.Response) (*GetIndexSynacktivResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSynacktivResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySynacktivPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSyncrosoftResponse parses an HTTP response from a GetIndexSyncrosoftWithResponse call
func ParseGetIndexSyncrosoftResponse(rsp *http.Response) (*GetIndexSyncrosoftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSyncrosoftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySyncroSoftPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSynologyResponse parses an HTTP response from a GetIndexSynologyWithResponse call
func ParseGetIndexSynologyResponse(rsp *http.Response) (*GetIndexSynologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSynologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisorySynologyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTeamviewerResponse parses an HTTP response from a GetIndexTeamviewerWithResponse call
func ParseGetIndexTeamviewerResponse(rsp *http.Response) (*GetIndexTeamviewerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTeamviewerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTeamViewerPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTenableResearchAdvisoriesResponse parses an HTTP response from a GetIndexTenableResearchAdvisoriesWithResponse call
func ParseGetIndexTenableResearchAdvisoriesResponse(rsp *http.Response) (*GetIndexTenableResearchAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTenableResearchAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTenableResearchAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTencentResponse parses an HTTP response from a GetIndexTencentWithResponse call
func ParseGetIndexTencentResponse(rsp *http.Response) (*GetIndexTencentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTencentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTencentPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexThalesResponse parses an HTTP response from a GetIndexThalesWithResponse call
func ParseGetIndexThalesResponse(rsp *http.Response) (*GetIndexThalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexThalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryThalesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexThemissinglinkResponse parses an HTTP response from a GetIndexThemissinglinkWithResponse call
func ParseGetIndexThemissinglinkResponse(rsp *http.Response) (*GetIndexThemissinglinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexThemissinglinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTheMissingLinkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexThreatActorsResponse parses an HTTP response from a GetIndexThreatActorsWithResponse call
func ParseGetIndexThreatActorsResponse(rsp *http.Response) (*GetIndexThreatActorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexThreatActorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryThreatActorWithExternalObjectsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTiResponse parses an HTTP response from a GetIndexTiWithResponse call
func ParseGetIndexTiResponse(rsp *http.Response) (*GetIndexTiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTIPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTibcoResponse parses an HTTP response from a GetIndexTibcoWithResponse call
func ParseGetIndexTibcoResponse(rsp *http.Response) (*GetIndexTibcoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTibcoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTibcoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTpLinkResponse parses an HTTP response from a GetIndexTpLinkWithResponse call
func ParseGetIndexTpLinkResponse(rsp *http.Response) (*GetIndexTpLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTpLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTPLinkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTraneTechnologyResponse parses an HTTP response from a GetIndexTraneTechnologyWithResponse call
func ParseGetIndexTraneTechnologyResponse(rsp *http.Response) (*GetIndexTraneTechnologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTraneTechnologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTraneTechnologyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTrendmicroResponse parses an HTTP response from a GetIndexTrendmicroWithResponse call
func ParseGetIndexTrendmicroResponse(rsp *http.Response) (*GetIndexTrendmicroResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTrendmicroResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTrendMicroPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTrustwaveResponse parses an HTTP response from a GetIndexTrustwaveWithResponse call
func ParseGetIndexTrustwaveResponse(rsp *http.Response) (*GetIndexTrustwaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTrustwaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTrustwavePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTwcertResponse parses an HTTP response from a GetIndexTwcertWithResponse call
func ParseGetIndexTwcertResponse(rsp *http.Response) (*GetIndexTwcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTwcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryTWCertAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUbiquitiResponse parses an HTTP response from a GetIndexUbiquitiWithResponse call
func ParseGetIndexUbiquitiResponse(rsp *http.Response) (*GetIndexUbiquitiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUbiquitiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUbiquitiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUbuntuResponse parses an HTTP response from a GetIndexUbuntuWithResponse call
func ParseGetIndexUbuntuResponse(rsp *http.Response) (*GetIndexUbuntuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUbuntuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUbuntuCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUnifyResponse parses an HTTP response from a GetIndexUnifyWithResponse call
func ParseGetIndexUnifyResponse(rsp *http.Response) (*GetIndexUnifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUnifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUnifyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUnisocResponse parses an HTTP response from a GetIndexUnisocWithResponse call
func ParseGetIndexUnisocResponse(rsp *http.Response) (*GetIndexUnisocResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUnisocResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUnisocPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUsdResponse parses an HTTP response from a GetIndexUsdWithResponse call
func ParseGetIndexUsdResponse(rsp *http.Response) (*GetIndexUsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUSDPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUsomResponse parses an HTTP response from a GetIndexUsomWithResponse call
func ParseGetIndexUsomResponse(rsp *http.Response) (*GetIndexUsomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUsomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryUSOMAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVandykeResponse parses an HTTP response from a GetIndexVandykeWithResponse call
func ParseGetIndexVandykeResponse(rsp *http.Response) (*GetIndexVandykeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVandykeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVanDykePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVapidlabsResponse parses an HTTP response from a GetIndexVapidlabsWithResponse call
func ParseGetIndexVapidlabsResponse(rsp *http.Response) (*GetIndexVapidlabsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVapidlabsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVapidLabsAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVcCpeDictionaryResponse parses an HTTP response from a GetIndexVcCpeDictionaryWithResponse call
func ParseGetIndexVcCpeDictionaryResponse(rsp *http.Response) (*GetIndexVcCpeDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVcCpeDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVCCPEDictionaryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVdeResponse parses an HTTP response from a GetIndexVdeWithResponse call
func ParseGetIndexVdeResponse(rsp *http.Response) (*GetIndexVdeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVdeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVDEAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVeeamResponse parses an HTTP response from a GetIndexVeeamWithResponse call
func ParseGetIndexVeeamResponse(rsp *http.Response) (*GetIndexVeeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVeeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVeeamPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVeritasResponse parses an HTTP response from a GetIndexVeritasWithResponse call
func ParseGetIndexVeritasResponse(rsp *http.Response) (*GetIndexVeritasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVeritasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVeritasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVmwareResponse parses an HTTP response from a GetIndexVmwareWithResponse call
func ParseGetIndexVmwareResponse(rsp *http.Response) (*GetIndexVmwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVMWareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVoidsecResponse parses an HTTP response from a GetIndexVoidsecWithResponse call
func ParseGetIndexVoidsecResponse(rsp *http.Response) (*GetIndexVoidsecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVoidsecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVoidSecPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckResponse parses an HTTP response from a GetIndexVulncheckWithResponse call
func ParseGetIndexVulncheckResponse(rsp *http.Response) (*GetIndexVulncheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVulnCheckPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckConfigResponse parses an HTTP response from a GetIndexVulncheckConfigWithResponse call
func ParseGetIndexVulncheckConfigResponse(rsp *http.Response) (*GetIndexVulncheckConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVulnCheckConfigPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckCvelistV5Response parses an HTTP response from a GetIndexVulncheckCvelistV5WithResponse call
func ParseGetIndexVulncheckCvelistV5Response(rsp *http.Response) (*GetIndexVulncheckCvelistV5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckCvelistV5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVulnCheckCVEListV5PaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckKevResponse parses an HTTP response from a GetIndexVulncheckKevWithResponse call
func ParseGetIndexVulncheckKevResponse(rsp *http.Response) (*GetIndexVulncheckKevResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckKevResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVulnCheckKEVPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckNvdResponse parses an HTTP response from a GetIndexVulncheckNvdWithResponse call
func ParseGetIndexVulncheckNvdResponse(rsp *http.Response) (*GetIndexVulncheckNvdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckNvdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiCveItemsExtendedPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckNvd2Response parses an HTTP response from a GetIndexVulncheckNvd2WithResponse call
func ParseGetIndexVulncheckNvd2Response(rsp *http.Response) (*GetIndexVulncheckNvd2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckNvd2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiNVD20CVEExtendedPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulnerabilityAliasesResponse parses an HTTP response from a GetIndexVulnerabilityAliasesWithResponse call
func ParseGetIndexVulnerabilityAliasesResponse(rsp *http.Response) (*GetIndexVulnerabilityAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulnerabilityAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayApiVulnerabilityAliasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulnrichmentResponse parses an HTTP response from a GetIndexVulnrichmentWithResponse call
func ParseGetIndexVulnrichmentResponse(rsp *http.Response) (*GetIndexVulnrichmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulnrichmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVulnrichmentPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVyaireResponse parses an HTTP response from a GetIndexVyaireWithResponse call
func ParseGetIndexVyaireResponse(rsp *http.Response) (*GetIndexVyaireResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVyaireResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryVYAIREAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWatchguardResponse parses an HTTP response from a GetIndexWatchguardWithResponse call
func ParseGetIndexWatchguardResponse(rsp *http.Response) (*GetIndexWatchguardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWatchguardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWatchGuardPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWhatsappResponse parses an HTTP response from a GetIndexWhatsappWithResponse call
func ParseGetIndexWhatsappResponse(rsp *http.Response) (*GetIndexWhatsappResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWhatsappResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWhatsAppPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWibuResponse parses an HTTP response from a GetIndexWibuWithResponse call
func ParseGetIndexWibuResponse(rsp *http.Response) (*GetIndexWibuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWibuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWibuPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWiresharkResponse parses an HTTP response from a GetIndexWiresharkWithResponse call
func ParseGetIndexWiresharkResponse(rsp *http.Response) (*GetIndexWiresharkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWiresharkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWiresharkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWithSecureResponse parses an HTTP response from a GetIndexWithSecureWithResponse call
func ParseGetIndexWithSecureResponse(rsp *http.Response) (*GetIndexWithSecureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWithSecureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWithSecurePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWolfiResponse parses an HTTP response from a GetIndexWolfiWithResponse call
func ParseGetIndexWolfiResponse(rsp *http.Response) (*GetIndexWolfiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWolfiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWolfiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWolfsslResponse parses an HTTP response from a GetIndexWolfsslWithResponse call
func ParseGetIndexWolfsslResponse(rsp *http.Response) (*GetIndexWolfsslResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWolfsslResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWolfSSLPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWordfenceResponse parses an HTTP response from a GetIndexWordfenceWithResponse call
func ParseGetIndexWordfenceResponse(rsp *http.Response) (*GetIndexWordfenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWordfenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryWordfencePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXenResponse parses an HTTP response from a GetIndexXenWithResponse call
func ParseGetIndexXenResponse(rsp *http.Response) (*GetIndexXenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryXenPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXeroxResponse parses an HTTP response from a GetIndexXeroxWithResponse call
func ParseGetIndexXeroxResponse(rsp *http.Response) (*GetIndexXeroxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXeroxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryXeroxPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXiaomiResponse parses an HTTP response from a GetIndexXiaomiWithResponse call
func ParseGetIndexXiaomiResponse(rsp *http.Response) (*GetIndexXiaomiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXiaomiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryXiaomiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXylemResponse parses an HTTP response from a GetIndexXylemWithResponse call
func ParseGetIndexXylemResponse(rsp *http.Response) (*GetIndexXylemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXylemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryXylemPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexYokogawaResponse parses an HTTP response from a GetIndexYokogawaWithResponse call
func ParseGetIndexYokogawaResponse(rsp *http.Response) (*GetIndexYokogawaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexYokogawaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryYokogawaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexYubicoResponse parses an HTTP response from a GetIndexYubicoWithResponse call
func ParseGetIndexYubicoResponse(rsp *http.Response) (*GetIndexYubicoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexYubicoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryYubicoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZdiResponse parses an HTTP response from a GetIndexZdiWithResponse call
func ParseGetIndexZdiResponse(rsp *http.Response) (*GetIndexZdiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZdiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZeroDayAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZebraResponse parses an HTTP response from a GetIndexZebraWithResponse call
func ParseGetIndexZebraResponse(rsp *http.Response) (*GetIndexZebraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZebraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZebraPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZeroscienceResponse parses an HTTP response from a GetIndexZeroscienceWithResponse call
func ParseGetIndexZeroscienceResponse(rsp *http.Response) (*GetIndexZeroscienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZeroscienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZeroScienceAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZimbraResponse parses an HTTP response from a GetIndexZimbraWithResponse call
func ParseGetIndexZimbraResponse(rsp *http.Response) (*GetIndexZimbraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZimbraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZimbraPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZoomResponse parses an HTTP response from a GetIndexZoomWithResponse call
func ParseGetIndexZoomResponse(rsp *http.Response) (*GetIndexZoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZoomPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZscalerResponse parses an HTTP response from a GetIndexZscalerWithResponse call
func ParseGetIndexZscalerResponse(rsp *http.Response) (*GetIndexZscalerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZscalerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZscalerPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZusoResponse parses an HTTP response from a GetIndexZusoWithResponse call
func ParseGetIndexZusoResponse(rsp *http.Response) (*GetIndexZusoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZusoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZusoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZyxelResponse parses an HTTP response from a GetIndexZyxelWithResponse call
func ParseGetIndexZyxelResponse(rsp *http.Response) (*GetIndexZyxelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZyxelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataArrayAdvisoryZyxelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOpenapiResponse parses an HTTP response from a GetOpenapiWithResponse call
func ParseGetOpenapiResponse(rsp *http.Response) (*GetOpenapiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPdnsVulncheckC2Response parses an HTTP response from a GetPdnsVulncheckC2WithResponse call
func ParseGetPdnsVulncheckC2Response(rsp *http.Response) (*GetPdnsVulncheckC2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPdnsVulncheckC2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPurlResponse parses an HTTP response from a GetPurlWithResponse call
func ParseGetPurlResponse(rsp *http.Response) (*GetPurlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPurlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RenderResponseWithMetadataV3controllersPurlResponseDataV3controllersPurlResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRulesInitialAccessTypeResponse parses an HTTP response from a GetRulesInitialAccessTypeWithResponse call
func ParseGetRulesInitialAccessTypeResponse(rsp *http.Response) (*GetRulesInitialAccessTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesInitialAccessTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagsVulncheckC2Response parses an HTTP response from a GetTagsVulncheckC2WithResponse call
func ParseGetTagsVulncheckC2Response(rsp *http.Response) (*GetTagsVulncheckC2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsVulncheckC2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z965IjuZEnir8KLHfN1P23zKzqKs3sqP+fskhWVXZXZuWQWSypVbIYMMJJohkBRAMI",
	"ZrJnZTbS2LE5a7O2Y+c8wPlyXqBHK+32SCPNK2S90bFAXBhBAohLBpmXbn1oZTFwcTgcgMPh/vO/P3BZ",
	"EDIKVIqDz//+gMM3EQj5gnkE1A8h5jgQx6fe9RC+uVD/iH92GZVAZfwnDkOfuFgSRp98LRiNfxPuHAIc",
	"//WfOUwPPj/4T0/W/TxJvoonurZ//etfHx54IFxOwrjJg88TEkACF0gy5DIqJMeEIjkHtIx8ChxPiE/k",
	"CgnA3J0fHKphEA7eweeSRxA3mfapCPaWRDC+Oj757KkaImchcJkOGE+n4Mq46t8fEAnJcOUqhIPPD4Tk",
	"hM4Ofn2Y/YA5x6v43+4SmlXwsAQHe17S0VbxKbluSgKHKXCgbkNCRBQEmK/0ZYn0QfslCuMBeA6W+s/c",
	"1/y+7p1NvgZXxiXXk/HixUn6t2ZSJhOnNNUOueMJajPC/kVNcbMtmry5s5Osqob6ACQnrmje6jjyKSfu",
	"PAAqz1QjuuZDzpbEA34GEntY4vpEX2zWrODZWX+bZ5PI90ESmgrB1tx0PdfqcyrxTddJCzE5O90ectdD",
	"MnBuB8t6NHxllnon5MyLXKkfk4tDcLuZYXcphHluLVNfPIk030POJj4ETvJBUyDflUUzgrsVqfFgfGLZ",
	"XZewxNr9tQPGX3UruGE08YmYg+dM9GcWxzL+a/fL9P1o98u05eHcYjSTCZPy3g6o+21pIpgfSXhMU+gu",
	"KLvywZtBkKrm5ZFRHEBzheB0jH3dsFMK6/KpgnTOKBEdTMau9nnSfHLbTKHHJmDZp1vriknDFn0xU6lO",
	"96NR+YQu9AyNVyVhVLQc4yit31QAS/zZYnzoYzllPDCpALEKo/22BC70IlVNTj6Ue0COXSL1IoEpZRF1",
	"DRLgYgkzZlg6LuMc3JZy0MsrazcIDh4x6ZsdS3nAvMiwv2d78XYXLCRud/tJ8kcfJCa+0N2kZt8S369/",
	"f3uRVVizq1a9t0vs98YDtZUKESUMq3f+JMXjvQGWwIlc2VSE2s2+S8vXY+AQXMa93SsLcC2BU+w3Nm/4",
	"2KDzGgWNw1SwiLsGMcSzhheWNuJp3HA9LPEEC3BECC6ZJiuibBW8nAMKAFNCZ4hNE2Mg9iMQ6IrIeWoe",
	"TDpFRCCgknDwV8iDKaHgoclKlch6Utx3mVgJCcHuu827Uls2dhd41mAxjcYXaRV14aEzaLFPDuN6Wotg",
	"YZ01a3KU1dS0mp49ojulMZWePkwIphdrHuq13s4Ow1K3Q/Ahlp6tbpUB1zH3cXhAmSew+YvDAQtDVZ70",
	"6lgWd8gEkYyTNpKxOcS0Le20CollJAwH1gyou7otg/Pet3icj3Ll7GqWXxJfO7k+OD4W0gmYR6bEaMT3",
	"jXNUq/eLtS6nvwmk4ifMbwjWEj5cB5gvzpgHvmhL5BB8DYEFlXFbzzLYygr7oEmttYl8sibiE7btUN5N",
	"Iioj41Yy4YAXjsuCgEin4f1XTUfruilnzKPPCmRcWC/LZku/xIFUdkZJW7ozPxSSAw6ceGydGgR8COdD",
	"SN/zHpGNxg9wH+vMTv95Q24JlTADXqO9N4RG14k6qxFZ4cS7ZKpP1tv9/QC/VV2d9nfymlJhaplyFgjJ",
	"LWaYVsNIrh359lC7DTVd8QpbzHwiZKO66Tp6E9dTtmsxd1lEZZOXgtqdDfP3X+3jcK6nbHdMZnPDjdh6",
	"5RIFA8X2R7Ne0G61GV9Ykpufo1+Na9tx64lPGiB0ykyPIm11jKKEbm8ITNtbZYvG0yvbSrcvnSEzfIkV",
	"GOORYzmJJ4xJR0SzGYjyk2m+q9kl0nIxFVHQ9RwUV2n960N64rZcrIX725ZGPWdcttIaS5vA1kjmirb6",
	"tu3GS7GCuJBQUGfVCNz+C418hgvTGo5FV9ytv4dHhOTMdp+7jUCUeWMRjvgwN4pkxP2Qw5Rc33ZyjHtI",
	"pR4qwI2vHbdmQhSfOi/JdWO9UduISYHUX5mctnsJdeeMw/m4/3YJnBNvD6+LrNBTTUNsWqGlAks9zoi3",
	"kzeqtGnLKxX2SXaXvbudgBiN/WZLQO610L3ml3DNqvyZFa5ac2200urtpbXIHrhs1Nr+mRLWgQ00457J",
	"FNq90TLpcLDUvtDnXp/bQkelMoCA13IWjVv62hLdQMmr02PC1O3+lpmvcaupSjinc5hqo5RsLp4tas23",
	"jhZ7Z4jdOZy4kizh7G8tTnFFqdv5I+X+bB/J8Lk7J0tsPzge36A5u3pMZiw1qh4OtKbffU6kecfs2jUn",
	"GTILgnRh7nYq27qN7lsEWOTOtZe5R7yaX2beS/dS7ttKTmt2vIqwiwPmw6Pb4F5fXl7sflC7IBx7jIUP",
	"cmveATe+GF28Jwvyw9qkvsTTBX50K/INm80InY2AL0m6wz2qTXjP7DwnL0n1PWR/vLTffB4IU9++fEG+",
	"/VE9yNkRAj0DkITOxA9rC45H/nY6Je7j04wuIl9gfsfT+UD2g9GccHa3EtCe9hDzxQ9r1Y4kj6S4swhc",
	"EoTYEL1hiWzkEIBHsNkbo0MeHh5kkaI+FFWEbuzjyRxEk0LD91T22ktYFAIXIO94bDtYO5cscLF8kFfm",
	"rxj7EiAE/qjO6rA3B3fxuIY0w/sI2yX3PH45DH1LpGgZ1KfhQ1vcdC8rsI8XdZtDSyvGrKnXYB1g4quj",
	"a8p4R/tsVeyw+Ugn8sqB69BnpPh9wpgPmLZ+f+XuXEXNGd3ySVOV+Z5cXpUPr9gOynKXIA4OG1DQzKuv",
	"PvRS05uI1b3W7EEribsA2Z1vHidC6oyFAk+NfrU/vNscjyYGJu2FQeSuj14hQJ6zfRy+918WhAROxOLO",
	"9JA9c6h7/UVEe7hje+u499qjtZMtfSwEwbTaAbLN1fhwRxwAzylMfPnsZEvgPsMeoTNEKAp97KbBzOgn",
	"QyIW8bIXIgAqf4Iw9RCTc+DFYh/oT/rrFn9ycNjcrdYCCFIECNv9gVwRRFh1YrdYXPXE7aLAhS7gKlvA",
	"S7bSRDP6x5FPd7/ctbJS786zxeg7PV0kB4+IO2LY7rTdbo2QQD3GO/TMjUQPuObGOGGenuauMZPaYlcZ",
	"9854FMpmPDI7+NrggjKvdW5QQSwBgBWslsyDO9Se9reSl3iFzdHxDo2CCfD9QG5hIR0OSyIsoSRLAlfN",
	"z72OWUZmxGf0ByAcV1iHKYQDY4iwG3HeClLjeh+nyf4Y922k8TtO8IJcxmEv6ynkJNC/f9XSOC7i6uO0",
	"dsOAbdOR+G3kR+0p+iryIyNB1vl48YLjyHYlkhKo7MyTqGtIWfgmImEGmbk7hN5MZbE+qRKfyIbWWfvU",
	"9N+Z52XiRWlIe/lK+KL/7vNnT589O3r6/G+eP9dd6NI5K1f75a+SAn//4aA3HhypFp79zWc/++mHg183",
	"ss5milA9RLr+u15cPq33vGnF5wWRKo+n935w9NlnP9ONvz7EhcOj7ZZv/q+b72/+9eZPN9/f/OXjb2/+",
	"cPPHm++QTybXgf8M3fz+5i/o5nc3f/j4Dx9/c/P9zffo2fHPjj97hm7+fPMHdPPHm798/IeP/xBX+vjb",
	"mz/HZf9y868f/+Hmu5t/vfnu428//vPN726+u/nDx9+in5+9OYpbu/njx3+8+febP9z8Of58iD7+5uYv",
	"N7+PO7j5XzffffxvN9/HDf/l5j9Us7+/+cPNn+LCN3/++M83f0Aff/PxHz/+t7inj7/5+Nub74/Rzf+N",
	"VMn//fEfb/708b9//G3cb9zEv9/85eZ/fvzHj79FN//68Z8//vbjf0c3v/v4zzf/cfOXmz/F5MdNItXP",
	"X26+v/nfN7+LP3z872lP8dhu/v3mu5s/3/z+4z8f6xgPdEk4o9lqrTvRg0I1BbOnnlxSlBwH6PYUDZIi",
	"4GmpKNfXTbG1/pRc2/p+qW7n9nq6Po31iBfvv9NVbtco10vW+s+Onn6mqxxf/LXdlbeJz9HN//vxX9Sc",
	"fh8LQiws8fzHMvF7JSj/gnoTxiT6RMKM44nvuBN27H6Kbv7j5rubP8YSe/Mduvm9EuV/SxbAzV9ufhc3",
	"8f3NH9U/Esn5n6rIv9/8eyyUN/8zXQI3f/j4m5v/uPnDx39Swvv9x39Rwvfxn26+//ibeK2plZZK28f/",
	"I+72T7HgovPxaf/0BH0BUjB6iJS0ZqL5Lx//x8f/dvNd3Nafb777+A8f//Hj/5m39D/K0v19MmC9dP9b",
	"It2/Rzffx7QkNeMi36laH//p5rtkeX38p6x8vDX88ea7m/+NYibEi/w3N3/6+I83/+vme7XE/xxvDroZ",
	"y5R17ay9JrO5tlJ6mdNvWP/Pzb8qZv8uGfzGNMWLep+TpNkjnz87/uvjz3Lu/quakz/ElCbT+Xu1/fyb",
	"fuQRd3XPinMpQ/H5kyd06R1TIuTxjC2fxCf1k8Ss+qR8zDU64yRcyx/Phk7PhlTt0s/hxIuOp0KCe8yj",
	"eA6f2BWcZeTXOB3wxIeK2pazwVI7c68TbCqvMIcmZ904rz7KalfqiL1U4yrrh0twZaKv1u47qVGrv+f7",
	"7HBQ1hvK3bJG2uZbUd3dW9EEScgG5x3vE40vE+3wS17038USs3PK4x8acfxSVdjVmC8zcjYi/23kt+hm",
	"nMt2uR+zxcJAQWVH2+t/u9N0nuvOgJKLip7fjO4wf0PImedGch/OzyYZtHMHU28PrqUec6N4j3PIA3Ws",
	"eIGvJXCLY+MuUnsp0/je8nu9AHcxZ9OpxS6Tlri3SZjWXLM9KDR06zw8WHrQneEr3m5pn7gLQgWj+5Oo",
	"7E3VaY+ElT1C26CwOhZJ3wNqE8j4+wMQxy4XcXudAlaMepc8EvIH76f+glDM/dUPxU+uDYNkH6ZAPV3k",
	"CfY8Et8Zse/YXNnqZVMsOKblnhPba1mlx7nrnIs2r70AfEJhDxPjY3fxArh2PxRcPq7YxxdMuHPLARB/",
	"fuDqSNf8koyOXKIM68TtUL/omjsdj1tS0DpJxb+bcWFbbB7g3AYXszceWDExq1J3YT8Ej2CnDY8KSbV2",
	"A8Fs7b530ltNgPeASm4NEaOSM99JwB+FPvyo6/1sLgPfGFEigBPs23yi2vHjxZszzAnVH7CpI9aeMknb",
	"Mpx07lrcuWLbGwwvBxZ/gqygwSESl7Pa7Afeck5EljyoQTY1k0clB5cFAVAPy/3C1IA7p8TFfr/riIbe",
	"YHRizhVw71CWVQRg3+Sdz8TQ4jbVHqA93kuZsMKyd5vl2z5lp6OTE1/rq1xrieG4bpJyQou0T5alObnN",
	"ceAuATJHiNPL96ZW290TiFvKn1ZokbgiMHwKiCQz6+pVAmQUsX0ZjHvn5+P+gEq++mL09lybuVNy/M3R",
	"ng6uCtDzI2PAjPIecakdFf2oMt7G1ET+HWjTTCI2dJOjogeXoWtVzpoDR5WIf7U2oQpA88P4fNx/kUYg",
	"aLQ7KvW5BV269Paws+8xB3e+98aKpditD2fljLz08ZUlJjA3DhsEIl3VRnU0nTxNwmTfT3IeO5IE+3GA",
	"nmMeOD4swW8yW2rNu+YAu9vMpogmARHCygU14yb2p6mkjJWNWwb2SaISOipPlGm5bxQz7FnJgeGEWLpz",
	"287hYCmxOw+2YD4qGaVq19zinNwxzFbIvMvZl8zbkSlznTvHdNY4rhGwjPgeoiGr9iJTcpxoK7FuNfKi",
	"8U3DztqLwVksQRrOciLjq7bB8CHdeS8tYbjIrR2UdDpWFVXnTJsYJ4Sc3IbKeTZQXdAqzMobTUETTKLj",
	"Wmhmo5OXmozV6cu72u59/+304PNf1hxAP616BhJ7WOKDX/9q4zA8yIogl1GJCRUoSAsjPGGRVDmlY8JQ",
	"RgciUoA/Pf5AP9DMB85jrjhmWBBxxEKgx4zPnrgCT5P/LJ8dP33ChPrHUfyPIyaO5zLw/9PzZ58dZe0e",
	"pcNO2Mukzm/yPP4ZzZnvCaSKICwEc0ksxklkeUzu1Zz5kNN73AmZ/2WbzqOjo4TMw6ZyNTp5qeAudPlY",
	"02y0kgO0mPH0evaCYxrL7dZ0p98vOcB6xuMjgwfq+ChMekoJiilBn0xUiyAQo/7q044m/9lR2slR3ElJ",
	"ADRhK+WRjMsFqkaz0d7hB/oJOYZj1BsPxKeHRTGScw5YikOFSZAxIfG57GjYz482qFmPvI0oFTmxaujM",
	"ENfvk3h3mmzeNgyl9TgtOPKI8XRysYQZMxqgTN5wrSwYo5OXlqQ7Vko6hmRMSPETi8CchA2pmUa+72zm",
	"pm6yBxR3E7v2wGMqQTiSOXUqVI66LJCmd6vycj47vRwO4mVGPcw9lKRDQZuLPF6Sg+uQiYiDQJ/0xoNP",
	"keTYXRA6Q4l5H00Z31rxq65W7jPj0j06OooHpout8fFMs4GdYXdOKCAO2Is1HqTKKfKzyxxKZsZDkpWH",
	"09Fo/so2moTsphvSSx8b1FoNC94QIRGbotN+PNSQg4gbRRj56YeIkm8iQD6egC9QPLHZZMdVtDONPiFT",
	"JCJ3XjoI4JoIKbo6t57/tY1x8VCbsu0yHVeSUXpL2byNNlRajShZsp3oRM//xsaF3alGa/i6tRfLRWmH",
	"aYmwGGtHS+IBSv1EEKOKg0mHsTzG/8q3xrV2UFimO9t5fmZjdqZGpazRbNDldwSzKrVajy8TrfVyLHza",
	"ljQiNhZiPAtdjf6zp7bhFwbXRuDq5De32ZVyhGwNb7dEKubiusIWH3F5vXbFvmd29hVG0JSBw3Xlvrpi",
	"aqxnLuM6uRup31MpUwst+WG/u9hnz228SUj6QHsKIEP6K3UBQr3xaISWzxERSERhyLgE77gx7xQDtNbj",
	"5A5SS5zSshpJ2sk+9NlPbezKCG98/ql6egGy65vjQfJyrYftGNlQO0i714J1LFkjxTgjVLzRJnmzWIAj",
	"aNGZ7RbUsb2+zeVoPLTd06qmoFWPo1GTGCk7LpEpeatRNtq7xoxHo/FPn2qxT7C76LEg9OHaRGhSaAjf",
	"RCTe5anp4V4VG5uJx5FkAZaZZba8KQXMQ+fjvu7uk4Jiqx1ok4rajegWcurLlX21TZbL6DTBKcC3IiP1",
	"NzjDMjL2RaiEGb9NL9nD90md6S0XrpzmcnHLdGcFLzhZEh9mINK27Y/1o2gi4JsIqExw4U4Ks9+KCZsN",
	"9spT2Umbp9mUtWrtnQAet8Cxa9ytsrKF+Mlu2LPZYBfs2WyzHXvCeoITJuoMf8dnBvSxxDNuCbxZ/wJP",
	"oSHJoivhFR0KrehEWKMaQqr0jD5QYdprkqNtlPy72QFXNuevhiBCRgUMplNmCHdYdrVUlh0ukWUHS6PO",
	"WZ8ow3qFNvlmPw3TMrYzsfossxP63vTYetVWqyaNQj3t1GG6xGKwzn6xayxw+8gyTKcQu4udZynpYQ5C",
	"csCBxUE/L7Mv7/Q7CIbuYc5JG8/8TZeqh5gOrOxWvMWCKfHBKHTGD20vMMDli8GPcZo2/rwc1oD9T+Np",
	"nCnfb9qUTtnKQUQBmMbAiVgYB5i7ixm/R9w1Np245xk+tpy20/MfxdrKn+EodUwzRBXcs/QuzhTbZAd3",
	"yZvRYG+4yY5YWoZl+NhyWO9O7v8sR7ZZjrqb5Tkm9FWkh+IOFyaDL+buXNyGX+WbSESPIqEH77xF2FI+",
	"NGvoUshsqm3IYUqu23PVqN4YOxXgTsn17QY8AvcluW76SrFZ/fZrpK02Ngd3ccEIlXuCQLIp/LtRMfaX",
	"UaA35yyAB5aVtkeEyyyXw/jzi2h2qtlLgsiXJNRjS1ZlqzO21CReiBu6uIJmxDbRuZRJPzGupGjHxBBE",
	"btx3Uv8Qh0MBEbZhmLY5Z2M7lU4yif3eRkKIwlibR3gfHlwxvsCcRdQTxu9Tn12NTIOpEFzJybVNcuPv",
	"p3uyaFQYfTpOO9ZqT7Nz08ecyVWFr2ZuLDEm60ya6S6Zp7sUwlk+1xo303XeBsLRZMiRmM+gBQ6qCqSq",
	"4E4F/1nkvQAQjz8djRpqLGj9F9VmjhHwJTFtkZ2nLjLDMewz7J55IFbChqiiCvwIk1TkWRBiIUaFwLfN",
	"7LnU3Zd5G5TsmhwCkt3HdFDYNqfWRrY0gexuk221BiBIInWAvx3dqeqsLiZt7oJ5aKkuprKNKHMOuYBs",
	"rnz1DbwTvYQwWzYn8zc7PTlSX5kWHxsefs3eUK1819Tj1D7StLXe5PP32Y5UsVRodqwF0CmrLeNvFU0t",
	"5Tni/kkBorY8LI5pO5NTxP1hXNdiDOkuu1XcW+/9QO+ZWF/Jqu7DsNaMV8k2GPFr1m31A8utGH9TUIWJ",
	"nesOdQbA7gaRXv5vuUjyUJpm0peFSVfEplymUbtN4vRUHfNuVBOTcGiPYrDYAdLIo8asyEKWqpLM1Wr0",
	"VjGsV7pLFI115hacTD1bdDy0WkysJPZfjEJwyZS424Sm20ztTTAuH7ed5fisl4Zalc6StRYBxLtDEjRp",
	"iVdXV00Xe//83J6QfOcqfY7ccXfX5j6eR/jxWwf6WAgc+bIGuFEV+vRaCdiD/c8Ml9j2ltU5RnofS7gk",
	"uhcKQzSbvTWYEEx7Y/PDtYZLcZVJNNPbmKuMqOkFpk3a/VQoEpoz7EZ9bFrYnSir3nKfh2qXnvYvsOUB",
	"Wl5hOxd8gfewJ4CvuxGxYEJojkH5hog9Oeft7UGxD77E1XLTLc5tezT9lk8gOdYteCdmw1irq3T/a0xn",
	"zK473B30bLeysgnu1AxfxBV46tge87wNWJja4dQlPBmlchrsRgZYg0iAhyYrRF3hdgsgkKKC1s8DeJHX",
	"uO0FrSrMPBeNMi9OZjOukMZQtgkhIhBGS5gT1wck51jGv6SBNIpvcr4Gv0ohCoAjyZDL6BKS71EScIMw",
	"9T5QlxNJXBUPkYQOX82Jm4RdMwqIcRQwvgWhhOLrPZfgITFnke+hCSDseRyESGKhb3/VXF8xa60EPTRR",
	"Y4ChdvaJjIiLopBtA+NjV1ozrhAhIkJnDo7knFXGn5aFJZ6wrwWjKTAKEbFkKNxKOnsy4WxR8IWoeW/d",
	"vOtvjymJix9WgBubQLcpkQT7VbXVqxJh9LUGcr0mSEHSgFYDNHtWtPSx6jPZO9O9bXSYAueWZ7O63lq3",
	"f4WHbnpAW2NdP1DPrT7HMyb2l7vNqAu103I4XklY/CDUnMHbN+vtQaPkYJ8D9lYOMF+PxpkgF2qOVj8k",
	"FNAbQqNrbdS5qudocz9X1XWZZw6wcQ0XTmC+GWUm++jAtVSas5PijmwT95bjWDVQxB2iEfMxJ0Ib0J61",
	"GXIICPCOmgRfCvtArAVmRDpt52xdt928+bpg/XeTiMpoXbyE+U8Zd4pmCmt/9VeY3SugEpEoKWD2g04i",
	"ZUwGW5UThPlstlqjcG+M6/Tn2gDZNlmU828ODommK+pxRjx9d0k9D/MrosmlHmD37chWUUSU6XCJzPJ9",
	"RajHroSTqj3OJCK+xlH2jLicCTaV6H1SwdaWR0To41XxNL5Fa5C83qUn9y0aIlQQD3i8OSwJXDVqrR5k",
	"8wDLTvOndu3WBDF9DtnHIeeyJKRcg1Bj9QoO/c4uMAMfC6l7oOrcW0pgY1BbjiXW8E2iYmQiBPf+Pijt",
	"TesdBMBnhM4SgAAxouw+B+Vx0Eem8ciHeNPEE9+UTkgVMR9/Jv/+7l9gYo7vNUk0JB3uZ9dagi6MyCzp",
	"mTOk6ZJU+Tbtk0B7gbaTec28SJxSCXvwsvKIcH0mwHOSfCQVhSwa012/y6b4Gf0X6R/LZzrYbzln+wlH",
	"B2+yF6F+qZ7v4I5Pi73N8ktMI/e+GhL2yAUh95FLfH8DIj6osIsf3WhekuuT6dSGq0FMEajVVtIklVIb",
	"qnw8q+2WcXgw4ywKnRREvUG6UTwxJNHKwLQbNlk1JiktERkPdjExPoMhcxf3HtqgncdRh3yShIK0ODC4",
	"C8qufPBmkKU0qpXMd4dHkLsUohRuWD9KmFsSSnceWZah3+xBMGpN8unF6I7PFggNfivkHq2tDu+SL9k1",
	"kTVVtXq5OuIG80iNR6XPlUa2xTKbdb3lm++r3sUPBQuqc8F+NXiFxSPSF14NXgP25dzFHMxn4QQLcIQN",
	"n/4OIBirPXK7jYtux9/XGVe/GL09fwNYFyvoYyHIlLhma3JrR8lam+ur1724ePIs0cBRLC6cTBeOJeTU",
	"a+c6PZsLU5JNky9ODm7Swr/t1evTNTaKPuwqnwxxATzARgWJcTIjhtuWtWKe9PukUTR1zfFZvffsjzQ2",
	"bM9kLZ7IStRkAk2o3UiclrzrybnH8RU9kc0XXC8VfXv2hDVSRwVYdEVvpyWcnVAThthVsPGr13oc40IQ",
	"VE2OF1zw7VFStWbch3Gih+Rxm81GZcRGA5eJ/KWxE7Tl4tKomdWkor3xtth3EtuXTna3oX2vsO/jmdbf",
	"E7uSLCE1n2+eQ4XXqr3emup4BgrD/pn4+75Y3fEz5iugIMF9TBojmeHJSsJDc0R8ReTraGJGWvcZBUcl",
	"nbIASMVlhJjXK+G42J2blkqWo8uRHKhXPnoK680YrdYFyk2G9m48p6aML4ReqZvLwDeygZgeTeksMsXr",
	"5iqPsVUO08QbzLjknSQTLZZzcxHjxTRkjgUVL2QOu6IGC5qQmIvm2zGRb/D9kcgHKWk/itSmSAH8KFE/",
	"SlSXEuXjSY34YG7Q/ncW9Z6gLz4zNLaJzLiFwNpMTdlF0Kk1tUXpPbehBWs2TwKfG9RQs2w5z61gsiZz",
	"TB2EG4cEIa4C+HACTPHM0HtWxsjKrIDwo5nJGmOc4+wtq7li3ZAXUdQclukVjS7fjB6VMb/NjYTjKab4",
	"gWFbv+KwOmdEQD++IBog9axR0Xu+bRvjImW8+k2B9UavDssxlobcOxOfldJQFb1mWzvqJvDWEs/aWGWy",
	"ObuMq+sk27TF3EZALlNaG8hGq7kyOyHrR2Wl/nXvzd2nM9ubUeT16ZdjIrRruCqH171B+25lVXn9ZU+b",
	"Led+OGUmukVTpxe1Q7whdNEZlG3RH6YrTPwWYTOv7+7d38ju7tHiX2PuXWEOKfCtUTTHFbeRhrM/T7u9",
	"8LGcMq5/tLC8Z6SPLeN2Ph2vMQ8YXe0Dpnh/myoWc9JjPGwLtzbB7mKmcjzoP0e+D5LQ/e3MZiyN9uFk",
	"3TN9Ab4/OrEC4NfOS9kaNKxIh8XtC/tkC3WtzjEjGodramsUjEoNhWEBqyvGvcbqa1HtNcHfNvB12ZSD",
	"TD9eRn6HEMW6yTSvaZdRITlO8z6VA3nfQwYThLKWenlxNMECPMRo/i3f4w9rmqVaC2m2b+tklCf4AB3A",
	"nLGG82sGSK07X4XzqJPQOXu/xPc5C+5xnHW3ey2R2J2TfYHn1Yl/sfY4T+g99e6vv13K0gEFPtNm2sDT",
	"7vL/7FVWGIXVlR5r8pGh7L6O8BWQPSiy2LFERex5uIPI30+WkUZmvoJ+U1Tl9pEpTKwoCwUR+5oAbZCI",
	"S+lyj2nnbe7Olkyhthu0gk9wjCgCnWbLOT0Za1LqZr/eloX2rl+cPTD7/+nl+wbg1O0IqyLA6CmACxpY",
	"y/dcTLG/EsTsaTCJZk6mKhI6c9w5pjNwfCKkLYUfCVRARwnvtU65vR376rNHhMuWwG1lVEBu67djLmTW",
	"Qo2w3zrMtQN5JQ6VzkQvE5wx6bg4EuBUTrwNequYW8NpY+M8HWONijRu43B96kFA9vCsKCZ3rXGdUpdM",
	"oNrJ4148YCRmtP1Gsna46+4H26WxGb7r2NvTUI10CC7TJpUXho3bpMi4LKKSW785bhofcXsRnQJ4zSEM",
	"5kzIWE1rWI2ERoihEYCeT4Ha+Ztag1IMrW09UAgDImm2BdeELo4n+zKuUiEcgmPwyYkP+wD1Su3uzlwv",
	"HHNMPT9WQAzfu99UkrVm6k8tN/3HOkytyJJ8+mZ8fmq32u8HNai1X1VzvohIZ29uk1fmVEhiSdlgVcQe",
	"7Dvc6RJTSR7Rw2IyoOHoMT2WfvGSMx3mfdjm8e183H/2tDce9C4GZ/FBsw9fDdvto33MqvEK0nESzi/O",
	"v9gfcGK3gjO25K9zDOpH/v1rvO87gYmkYhEDVV27saZHmImi/LuBnEwPAOuTv6l2oiaA5QA11eweFeOL",
	"8Xkm/adaZOAUR77ZLvTF+Lx3MegMOalNqtLRaCcX2EphrnK4z1Wa7YsB8+J6XuewAl+Mz9umbbVJqmmH",
	"jrivr1IliLHImOSv0aHTCiG+ijpL/LnJCGSOJmp1Mf8C6IJQcfdgi3vwTv0C5AuOtaNt60nQdRCQ3egq",
	"mL8Ez0kwRjp6WGuxv3/5NyN9iigTMF7n5qztDD9F60W38SRfDsY9LLHPZhV36c61nMicV2pB2RUdYipY",
	"cIU59HAQYjKj7wTY89U1FLhvIsKtqQ7FnHHZrxDqZOu84EzxttLQf94CyuPLYQ+43J/OXTy0F6zZ3sWW",
	"wJcErkwVb+U5o2/UzjssQuBisTrtjXqD4eU99rda+C5wuRc07S8n2+NfmGMigyQvkO3ub87WJqIQuAse",
	"mOB8WyEEfTlJsiVsLM8NsxcTtoBqI969BCEdwaYy3n6yPEL6slkinvpSwHwPeL3WE6x6f+XkyPTW+IhO",
	"bvdfMg5v2Iy41Z7oVS/mRp3yTmyId/3w+ObVIzLBvQHKlmwPb3vUi4RU3vct464rsRV9NZS9bLtv4DrA",
	"fNEsk3S7BORpC3tJPW7Lm2qJSsNCruOW6msYyaZYnZu0dXYbItpEplwxvsAqAEc0Fgsy4fB2OiXuHpCm",
	"zL7se8arbbF8VL6+R7SJstkot3g0iHj2YKoy9La4ZotYO3cba1tnJ/bQVycJ9hPO1HDgCwFCBEClqcRu",
	"wmFNvfGiaaq7vYOIhbFHIhZG9uTWc8P35PJj+NhC8M7MkUlbj2jVnhZpEGjTarcyR7Y4Gc+MYUt2Xr3I",
	"k56WObX+vSEdaUUNT15Gvp8e3JmdoGHbmy1oOjnNWmzYtHrt0AHbmJy19dnQPTKdNs13ftbTQZ60R9g/",
	"s6Lrq3TgbZ5Qkjziur1qzYE2nO8Xq2uaD0By4rZpWVU0rM6JD8HlqtWb+tlFsbq++SXxgJ+BxF6aP7p2",
	"y+Wat3zqOat46AnAJ7TFSrzMajZ4PqpYA4xKTGh6AdqM3WjAwngxVfW1hOLUbPozCjKjwN/ymcm7Ki0x",
	"mjMuz40Jt5dwanYZv8hgw7e3kJenPz8bfI6mPgmRZCieJF3Qa9zKEGKN55aNvFvfHlu1IWQL96uz3lKI",
	"8bOn+gwFo7YQ360f9BJ6njemR321vdHsmODPHhjBP70/M97fOLbKRPnY1F0be+5Zn7lRfEG45NhdpCMp",
	"d9hLcISrbv6n8dUI+1XFMoPSOhNFTTWoXK9gMpgTIdMr27bKgwhF14H/5GvBaDHlfD1n42FmldBdv3PT",
	"e7lXPMOEoiOUhMPE/cd9P7kOfI361V5IBhdrRX7D/bZvyrKa5FVvJSYviQ+PKSnNmUbn3xD7xMljq7O0",
	"koHLraKAzk5HF6riOUua3XhOqXgKDaCJJkdEGOsYBSSOFtobEeEwqWy6nrQTs9PL4eBESuwuXnEWhXp+",
	"tAJkqWKi+ToF7pySb6JWWi6RHJLxXGbNNL0Hn25tmBpu1KZIxa7lrzINqlQQqXXJ6/rKa1Rp7WvyssmF",
	"uO0Svti4uRmXcAuGXFxW3EUrSYu5M8oPrDJtJeY1xfXpxMyQUnDJAR6LvadywFv38O3Ikdvef5jxoigs",
	"F0Q75RbnQvMOugmEWg1U3OJAH5bhzcq0ZYanXI1p97oXV9fRa9R24w+jENxNf9lC+NuGJ0WjXfwluQbv",
	"RUR8r3pbrM/9IQiJuRymnlqNqRpFk0sTZH7DvfidwTOmwrnFLimj3nj4cltG8ptQpmfW2wpG5XrxjGqu",
	"VDUtjps115OYbY61zXV5pVj5Sds1pzLISuROfdoJanh9OmdSu1yyzrIUdbx2kxmDLvKam45+bR4oSvUb",
	"buWjLbHpABbgzAiJ5oMQl3NswN1NP77lg28i7Df1GLN5BaXfLlvAJZxVuLiW1JO2Zu+CgqPd0fKzoZ2t",
	"en20aFpPPOJaNDxMamoB/fLU4LFstTmyNnKLmx1StJktVC5DAa1GpUxmI5CGdAytogUNOwnjHqHYlCbl",
	"Tu1DstExUueSpRJUDOgsfRjZ0HD649PR2+EvtKw48TzwnEtiUNB644HTTyPY36T+PzWjlwZpPVUtbcpw",
	"DeuNRyMns/A6QyxNdtOXRleZl4xnTpCOgAz0ctsU2bepQ/XX/aDgzZX+qeBtWmwhA4tjWNa0SBRF1yl4",
	"djW8KKYbYdpQMje6LkcWO9vYcgwQ6sG1MyXgNwbeLIrv/nzqk6wuDuSrpt50FZda56bHCXjalCrJw7p4",
	"XJH9Z+rkhIUNjHdOwq2jpnKAax+o1KX7bvMAVOaJ2Fs+0DPwJGeUuHcSubKP8VGPXN/XfBC5n2cDcJ47",
	"X6IS9/UuBwUJqqd1pn+kWsFdLLT2ePDxPaU3B3dRSF5tR0dv1v7bJfZbxTdXzp5QcTVmqMVIzhO/vrtb",
	"F11LLCfajMdCjJ85Txs45aTeHum1Z/y8ceXnxcqfNa38WV75p417/unTKjYRl7P4eNQbvFpAHPBpA8OY",
	"6rVaMvKosJa69enl+51jfuec1EXwtURUXUxa7CFfTrRjTewI9RvZDuJrvf2QBWeSLB4YJM0ZoV7c7SPy",
	"aMge9re3/zVC7ZHL6JSYY0LdKT8SUXwRleAdKQe6IxEyKgxu4eXyS+JK0tQhPW5CYj4DeVSMvmjYwCqE",
	"IzY9ItRVDkYNW7AAP3KYNo3LWVFGV0F3wE+b3ha612V5ZEju2eb5rQ0obkxkbut+BP4rRna2c2whdwnJ",
	"uucIs86xn7RuNFvMFNHEkcXPmr24UMKxvFe7MtEuGyyZvFnTKqzqt5oDvfHgDRFy/Fd7MJvF/TlqKTVx",
	"dcopHMJ0z4ffZu9aLJm1H39NNXtdJ7kSNQ+cKLr0J3zHxsfx+GPL5HxnRIpoQsScDHxw49vRPUbcqJd+",
	"P8iH5EA6pr1Ei58xOmP9F/cgteyG6/nOxnuN2+fhu99aPvuW+D6uDvx31mu4hTaR9NLLiuhGPYlmqtD9",
	"NlIr42VjKDAL2EC7pD1pJghzRO/eJGc9p9vBIXua0apcSmbmW9nY6rJ/3hv19BnP6j8Zj05e7hFm5rYA",
	"6tS3RIZTvytxixnbGw/uKW8fChMHvd0f2nTpOeQeZyc8f70HyPHWAtEWZFuXY2xHO//56e75x5ZwpeD6",
	"7rEcXV48oifWe4+xswWHvy2DnEjgBJtztfTSEgan/9SFc0C9wbXrR15F2OqAeqe0RrmRxFzWalGVrGgz",
	"dRUtMTZ3lq/BQUanZBZxQxgAhVnZU7/gh0+Z1zqPwTnz9O6JIXAsm2c5XDeqA4rJBaT7jAs2BrUezFf3",
	"xxFljsMQqEn6jNhnPmOLl4zvabe+mmN5yfqNMVfP8TJR9h/Ji9Y5yJMw3IPV3HyFohKHDxO07RxktpQf",
	"jzjMAO9BwNsZLUKxpLZkz13zQixYCHdvr9vf9M8Ivb4/Jwll0om1FadNnp8sZWo4Cy0JVU2w0C2g9xPN",
	"yuk8J1Gso5zk3mUmr7NtIgVw4/PbFUwEaQ7cE5PyxT2++3a7GJgHI3Ajro2oKqRWWhLO6HYIUbV3dT55",
	"NeNzcjlQ/hRJXI4kdGbDo3bjS735pbhVCh5HGAF71OcEtaeNv5YpNUTAvMi3PCdn0PzmlV6V5zqNk3Q8",
	"M+quy4IAqIeN+9UOxLbNO3/ximcbdIX0L/aRNPlO3Ca62yF0yp8tXk7CtWxI84ajUD24h3P2LQvI3ScH",
	"uqd49edL4hE8LOBh18opWq2xWCC2rQS97aWj6AoGNG7PhgTaCt+nPXxoxH0LhCiWeIIF5MF59UPVX2Rh",
	"eJVg7S3SrIVFmEaN50BMjDXNg1me7cIwGu9B944/2/ZDJpb1oy5G47eTr/e6hNMurUumHIrsMt8HlREJ",
	"xdLmIUbRXMpQfP7kCRNiejwjch5Njgl7wsTyKBnkk8YBy52vuv2K9a2Cb0Zja+yNzpf0Vif9FZFzj+Mr",
	"2kJ6sgCkLQkClyWQ780wzMJ2QmwB+zECibTp6XI4ussEDMRrkcXMnD1oPw4qb13Jwkj0IfSZzW3LYpF6",
	"sKagtwuJq9Mkie4ulfqWdpOtsX0Glf3lu38bcJ1q+nAFisLgMQ0nBPpi1L97I6lpZ80eMBvtqy0Z0Rvr",
	"fHnXm0W7NBpr9IEks4u4Y8fOLFGdyRqjcns6RF45abjlpqWo8NAbYBph3+FlQD2zrmbq896/kcXiMRq9",
	"vmNTxANh05sRuCfe8h7c/qbEB3PwTsORl+HjSKurRcKf28DIaZu4Pae3PaVqDegluT6ZThs78LVyKVYj",
	"l9hdWPFw7m5nJQ910XLs+tC7eLe39/LOKVfuzPfTI7rNsJbY17p4z9Mwu7qi126ZlbBHtmjgMLV4NZtf",
	"ovM0es1oAc6JzrnNwZQy2SwzRNbaybrqesIbtRDPTj3KT0pkbq0uMyuxMJljKQ7FnBkeYDjBM3By7MR6",
	"mZBUpXNVp96o9AEIRY/KVqA3aeMlz8yGp6O2jW3vznYenL2Lgd5/007TFe35LPIe0bXx4tXLKlyt2lY1",
	"e0evL85WJ15A6A8lJL7FZFz2HpNoXVZkNXKvjEnJKmwMxnxIbVAsjIZ3650j+1B+0xGMSx0sv83GIbjb",
	"ZSqpdDgjiaXWk9y0pB1T6rQcXs3s7pLhs7aBObjAPqaS8LbG3Ql2FzOVDFr/OfJ9kITuyzfS9jpmW3pt",
	"Fhj22YkvWXWosz5zYBj6xMUTH8Y2RySsMDh6LAh9uDZdA5NCY7OfFV5i4qeX3FOz73UGVSQJrirZxqav",
	"S+5mSYVYlaHwVt5kRYBdCTNuH27IyZL4MANRTNGgW4gT3/BSaM1V7TLDzmAP32v5+kCtgmm6eUQC+CmV",
	"wLFr7HSdGr75aqKxpq6HGHyoRzAOgfci+ej85lqwAmZ7cB80w3fsb6Bz4pNQ7NFrPkd2sRlwOx4jA0qu",
	"FVSPK+8x6k0Ly7QHnXnqXzAhZxzE6G/f7MEiOHOmyVWyIX69uoHe6dbAroD3z0d3/Ca0v/FyEoAx28zX",
	"3pcmDSSA7i5dpkymlXcMu+eOU84168zBDxNXGOx5JP4J+xcar6btacuIrjOMdb66DbwY9Tu0z+pgzmdX",
	"xM1s4BTWMB1GIYOFcpaLbwlzEraxuI1OXg4LTTTdyrRZLvaSB9eaqfCWXLk9R8RJYY+qiVHcLi1qFTXx",
	"SfOY0gVfcMamISM6IKhHG3F5UUzPtjGRth3HTVQxx+ocLERE6MxJ4sxMd0qrxU2EuPnb00XEYSQZ1xr5",
	"uvMNvG0Og25fVC9WFye1Ef7KRszTPiICyTmgi1+MBr0jlJ2pwHW2TbOHe7Y1oSvi+8gnQiIWSdXyOiIM",
	"ZRFhx0XX9jK54d35RnNMNxNLbJCw3Iq03DQjG52QqVSTXvs1Zcv/UxHnNFDAtlJ2dxQdbIks2JCJ5APC",
	"HBCTc+AF6YqFDkukbAkqye2ciEMkIneOsEAY9caDoow03FTLdPSxBJUiLZP14cve8+fPf3aOKUO5m5vK",
	"syskDkKd5Bc2u43Gkw/II8KNhChJvDKBIkKnjAfJo+ahPWCi3PRZ+iUmmzJ69C1whi5JAIhMEVDJV+gK",
	"C5RdxQ8r4i3KjefWz4wpcSMxC9DVHKiaD9V6+pzh6Z86ipagcvu5N0Iy/z6hCxFPdMA4oISb4KF0cyIg",
	"DlG8eMQhAulatgcOU+F0EJ2wKT9XWDilkI7yaN5j8b6PCPXiywaIeAJinmV7q+JUXh0xjiiTx2uWFbwv",
	"bZ3kDRQnXHVFxLqvORZoAkDXHW7PjfW8+Nvzk4uWDwn7fmIp2JrM4dFGXB+7QTtLVWgJobBkU22jptln",
	"ZfTix+dyI3Mi7Lss0CRHaJdd7pFiPcdsWu3hYpY6md8lRMZwI7F6ecCtbv9DfVA9jjxizKiyo4h7TSbb",
	"CcireNe/Dnz0IXr69NlfJ/9FaW7bRkH6w9sHoNczemzkIDLutXZq85TD22Y3FbxtXF0VlkQJQcg49i0t",
	"GAFF7BRf5imbNrLQm7gbf0hNXqVFV1Ad+i0mIEvan5qQEqNZ/SXbKJ+/nSPx/aXWlarWuAZLAxI7h5B1",
	"ZroeYipYcIU5GJPvtTAqqMwbrSOde+OBNdK5MmOuH4JHsNHpl+djdqY4IH5jDIEhuIx7meRsXpCpERzU",
	"sEYXpPkD/xC8OZZah9f1jaNhRFhmRnEFnjpLuM4Y2CKorJjDsryyIgEemjKOInoUYC7mvk/oDE05CxBX",
	"g2p0K857LDiltYMUGIJflfdAc1lIPjpV2lGrNbQ5D9o8988tO/v6e4JjZXRoqoM7VaeZK7vLXe6U1/D5",
	"qOAEqEWis8qaZEgl/UaESqYMF+4c3AV6O2qMPlEnv6oySLg2pKsk5qANOF7FjjB9N3yj13aqFV2n6NNm",
	"LRhgGRmvnGZf1sY53NpozOb4kCxGpZ6Ha2OY9lZHbwLYMYx8Db0mCtr2kz3LbVujE7WpxDqdxy+WIC7Z",
	"Re3ShNHLVsTmMbv6jM7WhxuLZm9+yQGq5rUFxuCMsyh0iNcUOjNX2ZsjJEjMpcMLXpM1X2ZVRcXRKv5T",
	"EPgxvXwOkyQynlG/7T5SrsjuhgJslNOKDjsHW2t5j4UlWcJDg8a798bBIXMXV+DfXQJOa5KmB8C8VfVr",
	"wEUr0OxJRHxv2JIF7rLN9ViNp7eENsm21AtUyy4Nno2Wd+n0/e3EJDgTxuQoms1ASJNFqDWYUNh0eMO4",
	"RuWTypxx2UvzWjSLIBArykJBDOSzkLjdaXyZhGi2CyGev7AGjqgio+SyN25+1zOKQ3LtebGyfHyjf+aq",
	"HuuAc+1Ziwurvr4k5HvFDs6m4mW1xRq0XDzb7ozakNnK157Wkxlv7u4CZCtajdGNHhGSs2YC2TIkcb1Z",
	"WPxw689o5rpc3afRyZkuOe4OEX8YuYtI3JmmcV9Sdg8jIQW41V5n9ac7afElZ1SeYSmBFzeaoobcpLki",
	"Iuotn3CL7lMtR5QHX9ZjrtHbF/ONBFHVSEERdaUx7pN1uT6M07g9DJPjWAknCaXFDhEcz45RbzxAp32B",
	"PmFhsrWgSSRRjpAP3qcf6BC+iUDIxI1MmdNXLOIopm0ErrJyis9zAF5yhanE7hKOGZ89aWRfT2+rumPh",
	"4G1K3+eol5fa8OSZYt8XKKIe8GM0xj7x0LpFhDl8/oF+OHCZB0dwDa7Snj4cHKIPBy5fhZIdTTHxIw7J",
	"bx5Qgv0jNj1KQeuSn6fEh6MUQE6VjdtMPNKOCP06gSVOigYQML46chnnUbj1M1yHaQvxj3mU6hEIFycm",
	"rQ8HzbiXutea+IZRjwUBo6gsD6n2hUbKGxQpw/wxOmMciq52H6iLKZoAmrKIKsBlOQfUG49GKM1AcphL",
	"wNXV1fGUcCGVBMRkPTnWOgGm5oIND8Cct8qHDrEN3zAsEKZo+LKHnj9//rOkzCcBph6WjK8+1VpY1+NI",
	"fAtMLDrNPdLiLuN24u5L1ZFIE4mgnKQPFB2hDwcRFTFvPhyoJaL+piAEIkJEIPJCASZJmvyspMvTHrFU",
	"vn2UIZ/RGXBUKJrUpkwqQVT1Uh/QEnFJAaFjwgJWV4x7GhF5yQHiRlBWBF3NiTtHSakJJMus5IV5iAQJ",
	"iI+Vs2kP8xlb7yCfNpLagoNymapzHKwnP3OHVryqmm6bH+W74ZuY5LUqhebgh9PIR+taiMMMcy9eFCXJ",
	"aznCAlb2pk+n+oA2IPUK/Xyg+SYdzzhGPeSTCcd8ha44DkPw0GSFMDoSK5HwpiFpyfGi92XPnYtV32VO",
	"rCfgGL0nvh/vDFgIMqPgIYw+HAzfjS5Hg97RL37xi18cnZ+fn8cb5dpfOTl8skLPnn72N0dPnz797Bhd",
	"qIdVFAkoNPL06dOn6j8fDhCh6GIotPtJqnjpJ1ytqSMl5oUCiYCRdJGmZyJGr4h8HU2SH59cDA8/UIzc",
	"OaYzQD6bJc7Ch0jNyMRns5DFpyOlLKJuJjXpE3FZaOyw5xvuq3NQC7zEeFL0i7U13VCrKOJYbAYQqJQ7",
	"DZ/TqDm0Iesq3WSuIN7yYAm8GNnQaqlZxzw6uT/Z0IwetjvJFJ1kgxYGLdyYbuoKc0rozOhhlX4/b2W6",
	"H51c/EByj40GvR6jIvLlvX2o2JtxfDQ6GeUYiBs2FeZGAdD68bUjAgFQ0c/qFZ46ZRpv2qSdYqhqFyi3",
	"abO3QbkdjfqWyx7F/spk4E2y++wnosC0lYXM1SVuUfqsQNiVEfZRyFwU38cqg210ni0ho0L5/u0noGAU",
	"K+PGd93J3kCyWmHIM7H0Jno+xcNymnmAtFv82AfxkmlX/51yqZCc0DebkVtJTDDBd7zrJ5fPDo9H+4jd",
	"OQXiAR/44EpOLBZN5W9o9jW8Y/SZ0LPA+GaDdCAdpUP2gNyTP6LVgyog9MvBWP/MSei4Z/yYS0U8/la4",
	"DMozUKekbrwC1nN0t8cqjDoONMiyxL5IA/M0q9ddUHblgzeDTF8xhvWdep355xZ8dRr7t6eQH81XwRxz",
	"7wrzFLivReevSw3oKPCxkDZcQMtVKfFCakHVRs7IpvcpwabyVlwZlRpocgOpJbtv8OTOHtQU4Q6PmgF3",
	"mS6hFcOFSTQzKmSWfNp2OA5Klw2tHW7zGpl07OnmRz1HkqCpD4VYOsZ300lApDSE+bY53MBvt9XuW3Ns",
	"NTYqCQX/LYWHiSbZaszqyeycXf0IoHk8KpwmZVZY4phbeGKN5thjVzHrgaf7InhVSXLSvWsf6M7J26hI",
	"EC8/czy80t/CNos+fxqXFfUK/5cGZX9maxgMF2ZCnQUsDZq1cEgpK0X52zoWUF+kOZCR1YJberEzbeXl",
	"Qn4Lp7jRnIDvaXGvHqob/4joMix1fGVtiYZlR3HsyNRdwR1l2zzJj+c8mmUbkLIhPYzPMCXfmtPotUzE",
	"nZG8L3PEkptbq7p0ycA31iWVuC6NzRntBEcIXP++k5v9W8XmWQLhrqXTanUrYegeejRteBRNukUfrTOa",
	"3ng0Gj+vZyVZB9uqr7bLbmJGGSX/7tCxNaP6/aB2OOItmNMncelJpEc3MQOL+GHTub98c1GTpMKDl+na",
	"E7QDczDsz02FMY0IN03vYeIHXeBqo3e7Yt14cpm8xYpL83YZAqQzUM5G74F5xVtm0k/bK0TtNNviOHYX",
	"6dprJIdZvVrCOKAzoruddu3Onnb3CmKVMzXPbgCY5JQ0GW1Kf63OzzNJaxAp2Rh6qA4h+wfybvEgflpq",
	"63XSVJPhaRvYGnLAPPBT6LgOn6NKlIxy9Lly30my5+Kr3A4612Ng31rVMOkZtSjbIWBx91DE2/toM6q7",
	"NnBl5JSyfncSfH2LmP3bDCR5DXlNhNRekMxwkTDD7sqqKNggIW91nzO+iQrhLJ83XUypCt3yTlSL3vxm",
	"sJNbx51cPEr9NlsDnSVb2DhRa9Eda+pb5Pp4Am2X0GVBVdtgQsQ5UJnBRpnxemZFxajJyNcalS1ZGpEE",
	"+9VUZE+rzny9GbRUesubis6OYIaEvZ2OWS85vCnSuNG28X6wyxtMehasGdViRaSqzz6uMnx9It6mi/Wx",
	"avIkucVOqU6NDq2hnOP3JF5Wd53FQ1ztxROJzAKsR5LqfLBxVw5P+6o5ySl1isL9vhoUe27ikdAaOCd/",
	"0TLHh0segYbqKfYFOCETRJJlUzP9lIDfVDc1ma5hCXrDtM9m64z5tab+DZutDc3FRACdvRkXYrlapCtK",
	"8deaHYPdGcwrhJfOesD3kPCy++iX20TxN+aTj91F9oT7kEALWuxnZT81oyPz2HL1cxvvLXEPWBI6G5nT",
	"02QueBe2B/NkfscttUjmY/6eUE9UgznZs2y3ehi24KzWCfOx3sbtzo37Ey7/UXkMMErc99j3a2eOMmaD",
	"ctq9yHbngJCYTyoAfLclrADhe9VKdC24b0Q46/zUGXysb3CjKWbUda7mQO2IYeYiXUpP4mnj2O67efhr",
	"LgGOT4TszggVYhd8PBGvAfty7mIO+4uJ7Xa1hX5EF10vsXrXC9V1IbunBsP70eU2LA/afBDajh27z3P1",
	"sWVzjmtrKgq53l63Z6fi3YR9dyoAhrezsF0ejFberZLxQChfw7sNb+iOp3y1sAI6ZctqvR/dbVqmbocf",
	"eeyOgyNtb3BpRvYmSkpzlWCt0zTm3hURwmezOkf5/uWo63DMbgVvFUwZXf1QctaPVhS7C0mWP+JPjFbU",
	"5WzEphVYHHe3w+ZMuo9hLCvKfDarawi5OyZWO0l7+1PDOs552WrmLk/3oDFRV/mdOXdttby8yMCANxws",
	"tLlWCwE/+9b6ux31+x5wWUcHoPabscEUkkDKmGqnX4HuO0bTRFCxCDQE4cqA1U1t59/BMq+myslHU80l",
	"JY01wUvsM7FHO07c3V4ALy4BB2MCVzoHxX0nTu54YBRPfBiCAMzdecvc0T/mMs656WrjKHaksdtXtttZ",
	"2PjlHPsgHq5xqttJnsMZEYLQmf5w37RAiv1daexd7m8ZGDLk2m2ELexwSUcnrmT8PZHzwbUETrH/VpXU",
	"y+u9TtAaEBGajhH1LcHPdLDbxC/z7HR0McZ+BOfstJ80JTk4WErsLhyVy61BW5fDwYmq+SquWG7SdBQX",
	"qHYscTzUS78LZ8p4abAtJmus2jvHAbxkvCApDV+qkpqdpjRr7VVvJ5RMXHYP8OzMRkm2BL4kcLWHHYgE",
	"4GvDyMyJOlNQmg088tOfnw0+R1OfhEgypAppACJbJaXvwEn7du7VtahL3lM2NnLlDmNeyoYYtar+KFyC",
	"OzdZdiYc0ztVP22vfh2H9FxyoN4ZcfnOnyXaQj+s/Z4bOvVYU4XtTUPhBM/AEH65AzDKSx4JeYWXd+ep",
	"d+/vTu9G/ft569wjB96e7c94Aoq1juSW6B/fKaT0MBVtLVmZ7crQbnKJNX3kpLOste8m5JuISHJna9Mn",
	"dNEulfK9XcyTiMqoNx7YHmhaZwTM0mclvVhSA6bzV1bpeph6RGlEh61nttyiil52+0mT5vWRo9hupl7J",
	"189ho+Vjz6afv/WUe8OuJEtA//W/Ig5S5dLWZS9RjDW2HQna2clYmsNhoq+aPHw0p0HB1XLzUXfzk9Wj",
	"yy95TJcwiBVJpnzvSr32meFOkRWwukCbHuXsbKNk2sKv9554DnSetPAdJSIB+d/Er3HB7kC8foyak1CA",
	"wXE+L5V5+98LANAkNsGsnjfXzmXp/tWRo3Ep9LXRrBqCPe4Gor+8jwrGJXryBC1gpU3zJkTUIKdlfHZc",
	"kgCS/AhOlgVSkzvB7pfa+ki1HKK3MZharaUtXUbNiSDW/hQNmV5DCr3aMBTWxsa93sWgT1ScJNap+RMs",
	"oHcxqMxT2snhO+4POrxwdO1ppz4rTxmFAtDRc+jhwdJrPm1n761ujdmXxFi21WP2+d3wjfZ7bzwaLZ8P",
	"MZ3pR3Ia7ybG7FdW0LyRLft6Ktpv9+ErYefvL05Oh4MHGgEyxrS/WsCP6NLHYxwS7w2e2AIVLVj4ez7W",
	"YY3XX98jx8yvZTx4Q5qNusjIjRkOgIN9KEjmp6zbmn/2IJWmh8Bt9M1aD5V2+GunDX7RON7AsXhkzkVj",
	"RrwRuD9ujMfjyKe9ObhGd5H0HtdA2crz6t1dWO5z28V6V1PW9aXhFpPZGw/eECHHf7V7CU/8K9IEg/U8",
	"NeIaOYVDmN6NwPcYnRLdE3f+e8OESeP+s6dJoxE3ojLtU3XNRpqmMSsPU+W6ERIHoX4dEYGdiqnv/DC3",
	"XCUU/ugwTw3Rw0GIyYy+E9D4RZzDNxHh4MWnqdH2OWdc9ivUtORYveBMsd6kQrnxFDgcQsaV63ii2+Vo",
	"mE3NFkkzWUYnDZPXfV4nyTma9fDz/gtTq7kyeN5Gkcik8WKdy37jvDHZlhSENjM4F/pgVIcC768aIiqa",
	"FahWodNt4fWWQog0o1+DmPssB2CNC0bRHFe2HubSk2f/L7791HNv25xp8yth8p7SCqUuB+vr0irYGw9f",
	"Wi2DhTThzVpOPU8bWsFysIs+TAim5qUjBHOJerrYwhKqZ3FU7ffGg07OrFS82l04Ip9y4s6DvbirN9de",
	"ivQlXre3UEQ2GtLpIhITmsJ9N6dvXT2ZxjOQ2EsdRuvpar1CpYSd+NKkscYfx+13Sg3VmmfEsMWrfP9C",
	"n5GwCR8objgErfyaMk+HLaFAi52+DU1KJ2emy4dVB1zefi7PQHKiuWcz2STdRGmUqmZ9Ct6Getzxk0iy",
	"AMsNgKT14AcbetpWAeURSlzso1OTY3F9IqUeYX4tRq3Wfpryv00Aw/vhpfkR3/oSPbYGlyjjgLgXVtaA",
	"SDJbY/B2CH+p7hd5Xprd3mffY+nOX0WYe+2RnvYyHRzsHrZmv4B9mQbez7EUJ2F4t4h7bQgnk+jxI22+",
	"JxzEHPPFvcXoeKgezu+JnKvE2PCIwCbfM386Gr25eyedW4GNVg5R4xyMw4XJkIG5Oxe3GX3ZWhDRo0jo",
	"PTXbe/yoUVndfkJmewILOehxqap5abxgm/N/gxvPb9thjsB9Sa4bmgWKNW8v3S21/PeMe1NlJnk8KEH3",
	"fqP+ef+FZsZ9RsERYt42mWpqknaMT1HX3sSkQsaf2gwE6ENTWBKPpJPOPIN/DpxdP6Lz9ucEs2AfoSo0",
	"iaVvg6FUB51iL7gVP1/5EPww3A8OD66TNMhN+PMLtmAzfIUfvBNoY1+dlcDcaQ5w9ItoQvYRZH/Xl8Cv",
	"+nqYNtFp+oCW4O6lJ0uXLYE3TNSpHjQlxAIgHG/ZrGoJ0d0QwdIe0vur/qkFz1vhxLuO1UC4xpK3JFUT",
	"IaOtHgS/6p8O09rNgHa+9YjjYmr8lgythZw2T10bcVLhpFmXFYlnYTWNOcvq5/vujsis86bEjvOeavG1",
	"qtmGzZk4YO8GJhw/ImXvK+Csj1f31y9erd0mwlhjwCOXxLpUdfKSU+8WLyT3BxXH6Goesl63LyZELDqU",
	"Z+M91ujsbp96EmgX7yTS5xwroKXuzs+12vjRNDAz9VDrNAPxV4wF93JvEJPGQxEu9uExZWP6KvKjgrtG",
	"eVRfe4tma+vbyI+aUyC6uLK0XSQt5AY3v5l9tbpOcjc+cLEJyfELLCDx6Bg/04W0n1IRTU/plOkRC+J5",
	"SipaD+WQHKsk488KtsnUh3K0cWNbZ9NKjjHzdzaRmNAT37/gZEl8mBnSYiXllD9GrZLvRGVBa2BAJICf",
	"Ugk8cUYepr7JupZqzMpzfZr38fPaTH/eHdNN9KZBxGUyIXU21WPS01mEDRGouSeR5gWKy+ZwaVeOjRSJ",
	"+QykM7+yfRVXFgty4yi8Zs8zCX/PsNTmmQ/h2bN3hvtb/PG55WPuzVnvXp4QojzFzY9OA+oNrl0/8kxK",
	"ybrcKa1RbiQxl7VaVCUr2sy9b5usxmzQHTLfx0KepYl6+w1C+9Wa1qy13njgeFhiJ4AarqBJK30s8Rms",
	"nUCdBH3L6AdqfkxSX622s/KNpYq4YpRGsrgnPgRZ91W1L5Liyqd16wZTVbmY5N0yAznvtp0QR6PTV+eD",
	"oT62vt9sorNuBtcSqKfDhTh5c3oy0uMANCbk8GB0eXL5btSMRjNttxHKvNV4JSXIt+RbXFeAeqUaxbYe",
	"qaAXh9hW4NdtmGdb6XAG5KMeC0Ifrk1qUVJobEFHiuQcqCSu2UE3TYCqdJhTs5VjggWYVRwVDejFPeGK",
	"dtS1n9vLJE8KI8krTqdGi0ppbdtsVlDYVWxWhWxs7oKH6qtNCe6WyWGmjguNNl1yODVF3pZ18r3N5Hsd",
	"KOFESBsdVea9BSwdl0WlhKIFA5Ut8ZLkkSsjwwvZOsqQLj1bD1eAFxSEMRtK/t1obr8CMpsriLOmFw39",
	"xr791IFnt0cuivsrBv8KyxFnOxQo85o8f4Xk+FzVqE/lEk6zpnWRz0X6K4/Oco21hbPG4V02PldVSNd7",
	"PW248NZoLLF0ex0Md+muY/R6F4NuxCidILPAVsVu73UeNxQm61sEc6MAqHylMHzjvrLpKbuVyjkgDyBE",
	"Es8QoclOJNRPx4NvIuwjyRCZUcYByTkRaErA99AnkQAPeVHcHXobAh2p1EHIZzi+5H2qhcNrKIHF0daS",
	"xFJKC4ViSL6JGq5whZiQ5La4BHdufIC3CjwHP/UMUKSEWErgtBkhw6SNhJSLpAXt9f7OF1cpU7wbQicr",
	"M8fluxXi3oYqv91WIS1bFqxZe4YKLffTmM2aY9uoWD8/RaMUEyE5HlyMRhoDYCiEEwJ3YzXQ1yuSqoww",
	"6pnKASZIF2RDgvRjrtpoDQH8tx6LkdLEMNubY0JruEFVCUuxOUPsd8WO3uz9YLO/2ogITSIY1/2Mnw9B",
	"RL6smtfy4bN9rlzNgSKl7MYHy5Rx5JFpdhF+4s4xnSmIbF02/wC4S7CfwX4404081sXnkViJbjJvYvy8",
	"pxTvGi7eYfJEhn3/7fTg81/W6CNepb/+1cYN4wCUcRVQ/BlNOQtQMn6fFV3JmyqwPMA++TaHNRk/H1DJ",
	"Vzp5NOaVSUFuttlK6Lhn/Bjg63xqAiwj4xU1dXCrMY23RHop8SOBe7GwY7MzqEkUeM5k5UyYpGDGF9dV",
	"4TkET5NaWwmztivKQmKk+vKfp1NSmReAZsb8ui1cZnWSm2jIaMz26mmu2HlEb55Bpm5scOp3J0vptL1j",
	"pN9NNkW1IenvjXDlZCfxrw8PmO+t/1mP2ngJGwhudaxkTDD7wTTbzteTtUXljMh5NGkzUdkWuu3ds7U2",
	"CkaN4ja3/XW9RpwpDohPwOQeZFgWeZFq6s35xBSC1wKWlShepXJeZBI8LmS+LvLbRpOyTmGBMe7Mycz0",
	"cps0kG8lyVTUKandnYylN3MWbt/dmCoeq3E1h16sUYd+bfmKUWjrVI6FLj1nS0He0HzkTwRiUwkUxTdw",
	"FwtQf9Clhzi4jHvoCguUupgfokkkEaEIoyu8QnKOJSICEc7BhyWmUqWli9tJkCjEB8qmCKOli7Llk7Z6",
	"rNOdYnrtvF6bIGtIuaaw1+jWsjY4b8OiF31iqjbHkg9Nahwvem80qK98NYLk758+baDereGuRqO45raa",
	"p7RfIuhPJHKx74OH1nQeogm4OBKASPyVohSlCClXDJQQJNDREZKrkMTVV0hEYegrSAzsZyWqeG22f901",
	"z13GufLkfXHLhjK1vJ4yvjHZzab48EBCEDKO/Sacu9yss93O8xbtPC+2Ex/BKT9bN6V2v7O23MnA2Yzy",
	"mGStPFGPkjrgQkmmOI2qKa+jk+wTmjPfE2o/FCBRvBMmT2s+oLy+uluqpVeCWzxEInLnCIts4zxEYs48",
	"TNE3EXAC4hBd9E4ukOTYjf+BqZesRXFcG7xvc5QZ4fWTV40HKHnDmxLg6UgAzcgSKErTfqLkWde27ecX",
	"uXLrp/HP8fEieQSITBMuZYxT5w5FvdPRyU8E+pKyK4oG2f0DFVEYCQj0yZeD8afIwxLHU/H/T1h1RQQc",
	"oin2BRTo0l8jN0lTH6qIy1ER61CoWmxOo8bkWaa1bE9VJM8B+UQoiVxXR72LAUomRaA1uCC6InKejC6e",
	"7ljOslF+Ij49bpAlrNZKy2XQuOIyTyv9oou/xmPESDnAxvpIPpbCULLGtPKYr800Q4Zheb8bvkGYA3o3",
	"fCMyvWd7gR83yqPmAhUr8bfJEtcsuOJn1Xm6G6i1B9c4IJTQGQqZTF7WkXrTpiCP4Dpk6qkElsQFgT5E",
	"T58++2uEw9BPHSpEwp+kj1h84wFOGQ/aDGGIrypGsS6hBsLx1c4G03AAPqMwGr3Wzn5v/TFbSjMiFask",
	"Q6pqIgjZThCToZWyWB890UOs9LNPcRfKElneXYBKvlJ6ubrdIKUCZyJYWk75dqIloZBzokxAuk0hQr2Y",
	"n6CoUJoe44gyiTDNziW12HKpJ9S4vgp71ozDijIiwCgirzZKbMn6lCizgBpx6eBES4LRnFFYhUyq4Teb",
	"fRrgcKQo2abqPP9m5UzcBErqKVqFi6mSZKBLwhmNVWIE10RIUZNhoYs1VmulAGgImSaEoBSOB7k4lBGH",
	"+EPMrmziLlgv+zsmDhfPgiSndkMi1y7WG3QmH9QcKmUoTVuX3B/nWGzPYrM5SzQjozCNip93tGsmfbTf",
	"NZMh2HbN0UaJHe6aSVcNB0AZl8PI15zNo+yTZdUgVQjxuJQHgsxosqN5IMGVRblVhGayXF76bAmJBkpB",
	"XjG+aCa/IuIxcdgwiMJX6zjScnc6lCQooc/cRWJtKw/lsvDVPJT470SVooUN3ktrBfHGkupTmrVrImkE",
	"PJY9E03p5wJRyeUp+fWT15eXF4foZfwfkO6nyf6h2JHtaUkvQnvarQMuNhRk9fvmNPiAsg3t0BxREO/s",
	"oG2z+N3K5NJ+7GKq5IQHhCbXCjWgbD8u3BL9hP0skkgkJvK8oRCvfIa9mrKywkmga3kAvzgZntjEXH2v",
	"IeKIUaUsUC9kpOmx9y1w5uHVNnVfJR/MBKZ6yfoGhtK2dB2ZLiabLjjbXhssSB/l62KmmDHloknuKGR4",
	"LMOuJG5Dh5hmb/XFATPTY70TXx27jeXNBp76izZ2jTKNJ0nPYguNelNw5zKBF2MjyCgnEjjBlQE8epN+",
	"TFQvbeLUUqapa2g6aFMYlsX99/5HaFXNtDEM69y08NJvp17j3rTrgwh8ojy3+4ZHtbhEer068cyvc5kb",
	"+4nZDTwuNq6RokXnHLqLNEeFLbqFxG5Eumw2DkvsR1gy3mNBliZi+z6bFbJECuRlRjZkasP2Xb2o02eO",
	"uqNOsfKLzpxNUDZq9WFPe6wS95/mRtzaftO7kKBbOn8qPS6VjxZ8Ghfrm7xLR+bdM4tqaDNH79O69a2m",
	"2R7UJvLPGMV3aPWS26OLdpcRfT/oPbk2UFD3W7bZ89+8KT/G3b0oi0FZdd1xXMDujpLimLb9E7cDBnYT",
	"cvDj4dXZ4ZX7ynw5GFdshctbDLOLM9Ise/azcilEH0v8EOKTi8WG69QyrWKZ/Xgtcez3cYBncJGZhW8Z",
	"lLtRsorIwssH9s3UlkFoWkcD52WqyIo/eURN1xtYgm8BSeulA3bBAgPTJ/EvE0sq8dSRxcyCHQQZl8X/",
	"ruPGu5PtDmPMdyTOpWI2SlPB7zEPzmwhCZ1Kf+YVelJn+suFLWKQF6wnDlnxXu25ymqc1uBFVvaiHj5A",
	"VnxkxAnISryrgRdQE5Sgu03IDG9Qve/kJRogl+0LJSHfwG4BRFe9WaQbZH0b61qheCSgdUqdbpix/vZY",
	"dpuzawC0azc3z7ucm+YMqjvmxH+15aA1fr8dU2qNXe4sSLhoEdVyo7j8G76HFGsb4EQz8Xt6q+afVzX/",
	"2U6b/+ntqE+9xuvfqjZMHD9O272ZtuaRBpkKsEbxqkXHZbnaVkMjcBn1UpzaZkPUNL2Z46FY4vnTdi0/",
	"17TUFdXPq6n+rDOqP9st1SpkIjtlardbqrXZzG0I3mq4/ra1fhPb2rFsR2dD0Kim/hcGG6sWecSa282e",
	"Lct4YBu9U0IOS8IiYcw2x2Fq4Zvtk9kkuRduZ1J/kgc8rOO19EFoe1MPL7e2440rj4bkFtu2duT1bHEd",
	"ms/uzC62se3V4/Lzrrlcafh5FKxWG/Z9XGmbB1sNEWh8ApokIB5pUsJu6UzL1LAiWgTJyobyG5IGKtD8",
	"Nlv5dMr4DNPCc34TunLnCBtsVufP1x3LWDaIuFfzyd78aDadyK0u31tPbN1yXMuD3bI+Q9bcRDghvseB",
	"doG5mQDlB5mLaROk/MQvVdNiTCuW9dMW2QCVWuQOLpVwXOzObfkwq5MMF598rAWtcEyVKYuNayR3eWip",
	"v8bnqkmZbqhzGmCemqr4tqFaBtKM2LejkTE5ein+vUrU1w3lwbNpTHlDBd8nLmyliqwO6TNea6qzU4Yp",
	"y5okFBfKv83BMnkLhoY8GqYNnKzrW3WutUdGGkveaBta91vyW6t/n9ZN7rY6R2jTO/663T67oj7Dnnrc",
	"sR4XnTdePehS/a1xz7GYt56Q11jMTWPmRQOG8ZTcCGEDQHrCL1ch/P+Qy6iQWlDDtvtGPoLt/cOfMU7k",
	"PKgiM2vixJ8xG4l1hpy1VTXcXHcqNzaH6xQgAXlkBkIixpFP6AJJhuKZ3m6rmkWa1a4BhMfUY9QE9AfM",
	"N8AgCic+bVzCImHCQkw/O1XH35x8HRNsyIxzeCC+ibCU4Dnh+shozIzyFqRRPiWYH56n5Bo8p/nd1HjG",
	"TYkPxrODamEoBOPaeEEOPmBhMIFxt6NbdjGxzdZoCrlDmkMMF1puBjG8WbGzC0WxYdtFriZh3d949AQ2",
	"d140DHR3z7AVhN+jO6suv81O5b757FkeGuaq77o7CPG6yYhbSah+mba8cOzahl+i+hE9mNzdq8iwFB5Q",
	"ZuP6Ht14IZXFq/nysZiktqnSgtnEHaP4f7/81ZatBCX/+7uvBaOff8gtDXF7hyyIBxnK1YeDv/tAP8gP",
	"MrXnupJx1egvf1X4JaOz1GARqdPU6jBHAE0o/eWv1r+UuJe3WsCcNbSZpS3Pxv7LX2W/lMgsUJo5E5la",
	"XAdbZFSufym3mbW4BojbbrMJVJ1+qTeQJE1MybZtDIfgmraB5KNxzSefTQvesIeYyK16/Hv8r3NVD3M/",
	"kJezSw2CpybbbyNkz8ydpmaft8owvOlWYurzXZ4pd7c5s6uSpxFPr5OhJ0/QAlZa1UyIqB6OaZ5M5teH",
	"B0w48b1f/1omrPnC0it2M7tSds21GZNEuzNda5SzPVQ21lqzTMoNuWwStpKd4cQnWGd0yX6unQKm6plB",
	"R03APPDF8YAqluTBfxtb3cZX7CXpqrF/USrXYJGUNaRC+yjkbEk8EAijAIeITRFnPiiES5zDhpYo2hqW",
	"bqAhnhGKJRwbwFjMWQ6a3ArzXi6SP7Q3ZTfiQgcE1VO/5zC2bsQ5UInCeNUcmpDlY55vN/UywWWkHvKx",
	"kOg0LnSoyQZAqAfXGjSsOSAO30QgJHgoKXSof3XPCdhu3CeBDtzxAvjRBZ4BSr7ryGqKO7MxuRqBC/C1",
	"E2Z71naHFK6lU3Ne4rLGSWEh0PT95ZsIuAY76vzt5eBzJK7wbAY8rp/AGQhEAWLlVbAEV0yVYE/i/0M8",
	"oknim78L8AJQ3AkOyd8hj4FQeFMegQQWf0o4HGgEk3HPmLJ+BnoJyARQTVaqZOhmK9w6CyrXf4g5DkAC",
	"bzHHF3FdA4bh1dYkF03E8fd8VnTxJ4bk/faMXJJJ7DsZ2oDQ81IVSpkYb2DJkHXcTJrLh1HdVFJU19QV",
	"5pTQ2yca3WC9zlAtwahzWpJZG+4yeho4DsTxqXc9hG8UHRr2qNMMcQg5iPiISAFa19KmQHIZFZJjQjWw",
	"h8nSPTg0ncUbrzshuGS6QpgidYjHrSctKGw8LbazoBo47/CUSvDRW+qvPkfFVkfnNdpMcn3ocanzxtAL",
	"VQopgOrqNl3i8dqEotOL5U8R4/H//zWKq9bpgUWZ60G9TtIKiNYcQVI8vp8178NlXq0+lhaWMwoxTwLG",
	"AfXGA4E+cVkQYOSBOvjA+3SjBy1q5JwJqX/rMY0hfSJct51KeqY7ZS1qnx4JXmKroJ+ejE9qcObrJfUm",
	"NnH8Ynzef4FO+zXaMugRb+KfkxM53wvzXRhxkBGn4OkaLKgXt2Np2lACNKTtiYjw1LPx4ex0dFGPDQq7",
	"paqxy+GgXmu5QlBua6jYhrhKYqhwMrFwU3xPxlFcOP+Xp/QBoFFw8PkvD7BwDxLF/uBXhxZfFxv9eSEU",
	"X7ZqjCKvMKCeVWxTorc7SM6u6g4UNKCNdhEXaNXH2o76EgfEX1Xt5Gu7LEoq1N3UMwXHOuVCJXdCk1Uu",
	"1dkMF7C5SmYO3XTLtUW6ajiJ8RqpsnVHEv+gWwrlBdybMwU0HXPKfRbLb5oU5CjBUjG1/CWhlW2/TOY0",
	"49pkhX4SVz1eEOr9ROvDkhgQagqqurZlwf51BSntor6otujFppvF98QX2F1EYeMnMKuvg5jjZ3/1142e",
	"ciOu8p8SDsL4XUrfCQjNfF7qJMLbHumbFI3W+mi/fapr315fc5iik4vTNVzxu+FpimuMSZIRK+4TEZoo",
	"1XG1w07U6nhA+x2Ksip0OZKI+5mR8d3wzRejt+cNnpGVQhRig+X9mwj76gmpwXU1Judvs3qKGt2VNZqE",
	"WM6bmSKbGfE1hGyxZQGrW5u+OFAP+PEQRMiogCM1RieRL6dywTgToO48wHyhfdho9N5rWKS1rrrVo9gv",
	"/a0pf0/k/AwkjntOR5G/rZ589vQou9M7NktlxaicAKrhIXQm0aYcySEmTj572j03XrzIXqUfKlfWI+ie",
	"O2f9h8qVs/4OuHH6YLlx2j03RsNXD5Udo+Gr7vkxHoxPHvpeUhxD9xx6P3qofHk/6p4bkwmT8qEyRBG/",
	"A54I5kcSHixXEvK754vLGSXiobIlob57rnhsAg99xy2OYQcceuDM2TFfhiov8APnTjKI7nnkQzjPAsQe",
	"KouKY9gBhwL8htDoOnEffLA8Ko1iB1wKCQXVwwjc/osHy6byMLrnE3XnjMP5uP92CZwT78EK1NZAdsAr",
	"jzPiPfTjrTyK7rkUYncOJ64kSzj724fKpNIgdsUj7s7JEj9sFiVj2BmHOLt64Pzh7GpH3OnhAPwHzR01",
	"gl1xhwUBo+Jh8ycZw844FLnzh6saFcewIw699AldPGj+qBHsiDuvIuzigPnwoDmUj2JHXHp9eXnxoBkU",
	"D2BXvMEeY+HD5o4awo7488Xo4j1ZkAfNoHQMO+LQl3i6eNgatBrBjrjzhs1mhM5GwJfEhYetC22MZUcc",
	"OycvH/ZyiwewI968ffmCfPugmaNGsCvuhEDPACShs4e90IoD2SGv3k6nxIUHz6lkGDvi00XkC8wfNI+S",
	"IeyIP6M54exBs0eNYFfcCTF/2LdXNYJdcUfySD7snToZwq74E01Sr++HzaN8GDvjUwhcgHzgXEoGsSMe",
	"XbLAxQ+bQ8kQdsSfrxj7EiCEh33U56PYAZfC3hzch3uYJeTvgi+zB+wDklC/C674D95DrziG7jnE3fmp",
	"ENGDlZyM/h1whgj5YA2Kivgd8CSaPFyWRJMdcEQIkOfs4e68Gf074IwETsSDPalT8nfAl+jB3jVFtIM7",
	"pvSxEATTh35O/3/s/W1z2zi2KPp/FZb3i3/PPlFPuvvMrj1T9a97bVlJ3HEcj+U458zpXb1BEpIQUQAb",
	"AGUrp/b3ua/uh7j3i93CAklRttNiD8EH0OtNLCm21sLiEn7i8+NxtFepuyzhvlfJjKGFCkka+3ueis3e",
	"fVUyNaXS25Vum30LVdEipv76lKfvvi5bsvP2O57JvYWKsCVL/N36mafvvi4P/k61D23Ms18zbw/C/Zq5",
	"P/r27EySzPevdYeDcF+j80++F2g/AvfVufT1jP2zS/dn7J8RHvu6XwByb6EiD5pK3z9AB4NwXyMarVdi",
	"sfC9So+G0UadtODnLFozrgT3v1zPjaaFqiUx9b9Y1UG0UKOd4PGtzJT2tkDlCNxXh3EiE29bx2bfQlX0",
	"OV3A73tbmXIE7quTkGh9RqW/M045APe1ESpa+T4hV8fQRoW04POI2XvzRf4X69nhtFA3zb09us0m77wm",
	"09PpLqRySrmWvh9p8uxY3Ffs7PIDkYx7C9t+AO5rM7u5nfm+QehwEC3UaH7qbWXmp+7rcTE/PU383b9X",
	"5u++MldXd+czruXu5/nHK1/LczCIFmp0d36WJQnVjHtbof0QWqnPm4Tce1wbk777uhC+JSq/g7ivxamO",
	"oYUKSaq0pGTju+dPBtJGrSTz9wuhzd59VajUZzNfiwLJt1KTNze+f6IOBtFKjS6uPK7NxVU7NbmZ0wju",
	"le/19+WnI2mlWnOfZ555OzPPp1OPa/KphXXPFWH8bUa8vYb1fgAt1IZG62vBuLcTTTmAFmojxYZ6WxeT",
	"vPuaMBUJ37/YVMfQQoW0ZA/el6g6CPc1SogUendXvbG4r5V6Zigt1Etk8Rn19opoZf7tVMYU/9z3O9Q9",
	"MxL31RIxVTvle6UOR9FClTYpUapYefG2SgejaKFKXBPGqfw497ZC5QjcVwe2Rnp7Nk6Rvvu6ZNLXs09M",
	"6u7rsZULX+uxlQvn9Ti/8nWT4PmV++2B52SV+XqWI+TeQkWUIlmivS2KTd99XWjICC+3t/r9Be/5wbRQ",
	"syTxtkJJ0kY9NPG+dSpjcF+hL4Qvfb2Aq03efU2Enn7wdRXAJu++JpIshe+r2YeDaKNGO03X/hbHZO+8",
	"KrOPlzc0oUTRc+Ltdd0OB+G+RkR7f+bjwRjcVyghSrPI19rY7Fuoikqpv0UxybuvyYbKJePL25WkRKs5",
	"F94ecvLcUFqpl//nXT8ahfsqPYg4Uxdce3u/x8oIWqgOHMt7fpY/2P7obZEeD8R5rd7AVgBfD8LIs3df",
	"FcIzXyGD3FuoiNLenp5vk3dfE5ZQ2Kvsa1mK/N1XJiFae75/92AM7isk5JLeCG9vYVDm30ZlNONUe/4V",
	"8PEwWqvTxfXc8xJdXM9bqM6Dt2ekQe7OK/J26utth99O3d9v+O3sLfH1aD/IvYWKvKMk0auIeH8Ji+eG",
	"4r5e74q3/nn+8eqSEl+PRXo6EPe1IklClitvz+0s83dfGcqp9najaZ69+6qwJQl33t5OpUi/hbrod1no",
	"9/n2B2Noo0KXxP8K7cfQRoUo9b5A5RDaqE9CQt+/AR0Mwn2NeHbr7UW5bfLuayLJgnBfDynIs2+hKnR3",
	"JZii5+aLgvb37sFPB+K8Vu+ml54W59300n01Lt7fMY9vN13m774y7z2+kZNN3n1NfN249c79tq13RG4E",
	"33l73liZfwuVUSs2FTL1tjJ5/m1UZk2TZH7q/Xm+z4zEfbVYkkjh+yXdHo2ihSppEq2Yt9WB7NuqyoxT",
	"udz5XRs7BvcVEpzu7v09eajM331lMnJPvf1AQfIt1WSWJR6fKX8whpYq5O9xAmX+zitzcXrn67XcTOru",
	"63H2wddynH1wX43bz35vJ98PwH1tYrphvm7stMm7rwmPWOj7sROHg2ihRv6es9DO2QoXKbzvDY2EtxfQ",
	"PBiD+wopSWjCfL5cb3UIbdVnDFf7e24oLdRLM+FtgTRzf42Biy3h2tf1Spt8SzW5mc+9LsvN3P1a089v",
	"pFh6WhXI3X1Frn72/GtfZQTuq3Pn6zXHfr67aqMaRaUvNN34W5nqKNxXifI1474eoZ9n30JV9JkkPtcl",
	"z995Zd7/u69Ov/9390K/n91NiSaJWI5hpeAbo3FftZsplb6fd3g4CPc1IiqlUq13F9P5dHZz63u1vjEc",
	"93UTkl6KpbfXDCrzd16Zy7eeluTyrftaUC62vm6asMm3UJMHM0jPJ5pHo3BfJRZK+nGxYJGvJ01VRtBC",
	"dXj24G1dePbgvCIfTj0+htgm774mb1ji7S1gbPLua0I4WdIZXzLu+57N54bivl4hjf09NSrP3n1VaMyI",
	"vxejLdJvoy5aCs4i3z9aj8fRQqV4zB68LY9JvoWaaOLxVYyL9Fupi4LDnvw+fOvJONxXikVSKLHQ07ub",
	"N75WqTqG9ir0PvS9Pu/DFqqzlkIzb13P02+hLjyWxFvNbfYtVEWldyTJqLd1yfNvoTL+HhUJubdREUmn",
	"d7NLpvTdX/wtTWUQbdRIZSFTKzZLaKSl/6sR3xyQ+9oJvhTnZ74WymbfQlUefL9BVXUILdTnK0sS/0t0",
	"MArnVbqazqeelsak3ko9pnczj0syvZu5r8rM2yaZtdAj73zdZnz1zv324qsLX4tx4b4Wt75e2ubq1v21",
	"ba7+4Tm++wG4rw3ZenuFXcjdfUWoPk19vdiPTb6NmiyJt5fWzbNvpSqUSI+rQkkrnx+1FqnHzQLpu6/L",
	"kvEH3yGqjsF9hURMf/b2Ky0k30pNPL8pUnUILdRn7e0lJSD3FiryVWyYtyUxyTuvycf5nacF+Ti/c1+N",
	"2xtfZ1mTuvt6RFqkmTqnaSJ8nWQPxuC+Qmtvjxgyqbuvx0Z6e41pyN19RTj1dWO1Sd19PVLKz+bnvpbE",
	"Zt9KVaZ33u5CLdJvpS7z+TuPyzKfv2upKpdzGp3GW69rk4+hnQpp4u0dYcv83VdGkiih0+tPvlamyL+9",
	"ykznp298r44Zg/sK3XOfb9FdpO+8Ltfvrj/sTuMN8/Wr734A7mtz6+uRCde37o9MuCYJ4Zr5umukSL+N",
	"uojTRAvPdwM8HkYLdeJECe7tlS/K/FuoTErlNNPeFsam774udOnrFiqTuvt6rFjCUuX7RHM4ihaqJChn",
	"D1PBNYm098V6bjDuayaUXkqq5n/39c6DlRG0UJ17Ks+v5t6Wxqbvvi5SmJL7eqWMIv026iIWqWBc+1uZ",
	"fADua5NJOtdCkqWvBxNVRuC+OrvrU9/FqgzBeX3+fnV67Xl9qkNwX5+5r7th/j53vwfm7xlJIrHx9dLK",
	"Rfqt1GWnPK7Kzr3ZN4Qrsbknkvp9rZAn43BfKRqviPb3PLYy/xYqw6kiytu6QPYtVGXLttTbopjk3ddE",
	"RGuPb2xapN9KXXYzKf29mFVlBO6rk0XrzNvpBZJvoSZKK+r7BS8ejcJ5lea+r1XOT1uszbW3RXF/Xu18",
	"Np0KrrLE1y/A+wG4r8383PeP0X4E7qtDGPf8QovVIbRQn4SqN0J6e2H2/QBaqM0mJN6WZRO6/643j1ac",
	"spjKkVzS65vjcV+5/LTEsyxJqPb2uLbHw2itTpck9LxElyRsoTo0zJaec1YdQwsVSrytS9JCNbhmnCYf",
	"ube870fQQnXklkX0Stx7W5xiAO5rsyKxuDcBqMw/qzQew+36jg+shVoymsTeXvyoSN99XZi3pxOZ1Fuo",
	"B91Q7vuRlI9G0UaVpCSfmaSJv0d5HQ6ihRotN+QmS7xVv8i/hcrwpcf3FivSd1+XhETreyK97Zgif/eV",
	"EQmRnxmPvZ+YnwykjVpJf6vTwjccwVn0mSSJ963zaBzuK5WSiCYkVO8oSfQqItL3G/r9zohaqF6ScW+/",
	"S0PyLdREMr70tiYmefc10UJuFKzP+VqY/QhaqI7cran0fd45HIX7KmWxr/cAN6m7r8c9UyoRy/HA9c0B",
	"ua/dbrMQ3NtC2exbqAon0Vqzrbd1yfNvozKRFHOx0P6WJh9AG7URiVj6+2Gy6Tuvy62vd+u4dX+3jtvr",
	"S+bteoJN3n1NPk+p9P2M/MNBuK8RSYTvm78OxuC+QpRs7hi993Yv334ALdSGkzChN1RRIqOV7330/Gja",
	"qFpEvT1ZP8/efVVWJKG+7vWzybdQE/qBKcX40mfdDwbRQo0kJfo00kKaX5s9aCo5ST7Ce/nbT783KPc1",
	"ZGHk66YfyN19RSTh9JZGK69XvR6NooUqUR7Djf69LVAxgBZqkyl9T7w9FbnM33llPnl7TftPLVzP/tP8",
	"4wfPvzhXh+C+PiH7LWPa17sRFem3UJeM68zf62KU+buvDGcLbz9KJvc2KqJE5G9JlHB/FdxPaezv7Uht",
	"8s5rcjedXs/OWWSSI95y9GgU7qt0PvMc7MoI3Ffnw2f/95QfDsJ9jf7n6cWN9010MAj3NSL8fLf2dYLO",
	"s2+hKimLL0no+z6bJ+NwXylKia+XYoTcW6iIZNrb68Xl2buvimDxnPr65TjP3n1VsoRPV9Tb0/jK/Nur",
	"zPRudsmUvvuL7yUqB9JirQRfsKX3hYJRtFel97M730v0fnbXSn2oJGFCz2nICL8m0drf67l/YzStVE2y",
	"aLXx91CD6hCc1+fzza2nZfl8c+u+GkRHq7cZkb6ePrIfgPvarIhWp2nqa2Xy9N3XhYWZrzVhYdZCPSRV",
	"KyLX3hYlz7+FyugVXD2LeluaYgDuayOSxXzu632w8uxbqQrzuCashYrIeEG5t5fzLPN3Xpn/QX296OL/",
	"oLyFakjx4G09pHhwXxFGxMbXycQm774mu4T6unUccndekf8p1mJJ7onnO1YeD8N9nbKQeXuwsE3eeU3+",
	"QUPp6/WkIfcWKiLFOdl5/mF6NIpWqjSPmPlWNIJKPRqJ+2qxjccfM0jefU2E8JVxk7r7eqiIJN6eqpln",
	"774qmfJVbJO6+3rsHry9mjjk7qwiKft1+tm3Q8hT9v3088xpDbb0woT2sBB55m1UY/agze/H/lalGIHL",
	"6syu5/Nz/+4YmLLvi8ydVsNeaX26It7d+sRUpJJ9C1W5++mGenhvs31higG0UBs1XRG+pIlYelud/RBc",
	"1ueCM81IchpF/l0FPWXfH6Tvsi4fmJb0VGsSrW+Ff+e9pez7xyNwWZ2ru/MfX0+vZx+Ijlb+leYgffd1",
	"8bFbiszbqIa/3+wej8BldT7O534eW5iy7/e5u6yIlydJpsz1+ZEp+/XgRkKnCSMe0vx0DK4qpDRcknv7",
	"UyS4liJJqFS/Fr9f/G47xTmI+f2TmM/VKQ9kk25egsNRn5FonaXFL54f+4Uui/ONyH+0lVIiyUZ9f8Fj",
	"+mDf0nUNrzOZ/E4Fq//dZf2ejVup3j/3TnaN/LmC1Vp6T8bNzHJ5vs3ZhipNNukz/3s8/pOcn0SOtvZn",
	"TFUkWWonxJOEKR2IRUCUEhEjmsbB9G4W/P/UyavaH8lXJ9vK3MVqhnn8N6/+GU7/iTvI1eiaJ7VLM5mY",
	"aTSLtHlKkuTj4uRv/+vIJzGTyfd5np9uLn+ef7w6+a//ePWoMqbRJyZqQEKR6UCvaGD+8klLHP6Z+S9T",
	"UPPrWhKuCJxRf/LqmYUlNEl+jUWUbUx+T9/LfuzMu0nYnqCChch4vH8vxjVdmg/m8Xoer2Vk/v6ZnopS",
	"Winx0W2I17NjH5pnR358RP/16kTl95Kdm4A26zNKJJX2E3zyt5MVJTGVJ69OONmYPz7N9EpI9pUcLgSS",
	"svfU9OF/vTphfCFg/IJrYgdJN4QlJuMsTYXU/6f5SEQrGq2/j8Rm/+bl+TvB6fVFMLe/DFPbwWK8o1Ix",
	"wYOfir44+DuTFJUb9XGR377SjELrVP3tz38+iPtn+DXz60wnT8KfvDrZ2jgnfzv56fvXJg2RUk5SZl/4",
	"/vXJq5OU6BWU7c+hJehv//tkSfXT1ruhOpM8IEExQcD8SFVwz/QqsH8cEB4HlMepYFwHCeNrFegVsR+V",
	"TFEZrIgKCGzSCLQ4gYQkLImL+ORvJ2+pziE0ytn2hOR+fP26WCCU2w92miYsgj/98xdlvzHarjvWk4/4",
	"zL95WYx/rWB8yZS2/XBYiI/vTSX/++v//ocyeszEk7e9Ejp4Ax/m/3p18pc/ON6j737B7ZUPA3tfz2Am",
	"pZAHnyCYJIvPzv/6DzP9qWyzIXL3zy9805pkqU7+9r9Oiv9QJ/9houbd9uf/DW/0X7/XdZLRLa2E3je5",
	"fQ8VhDubz7f76SL/b1jKVFOpYLiPlgCxEzXhAbUbJl8d0Ld7FQgZFDsQy5Awy5iP0X4aKP5L0t8yJml8",
	"8jctM/qqssAozzamLOQH8yEkYWj/FVrDAyWSTFPzMJKCM1NIEosQXrHxrcMkoelqIvMr7cILGwI/Usbh",
	"tzfkK0xzZBPDv8z8y6OVkHTCt/FEbKmULIbf5bEUDH4tJdGKTgxUW7r5rfKKjFZsS6ovSHG/fxqRDU0q",
	"T8VmI7iqvpBFqzjcv7AwfbJ/usxIRDYiofuXViQWIq0817ry7ItK79ma7V9Yk8W6kl8ilkvGl8pOpJVM",
	"OFtU/kosQva18jSlfEOpNn95+KpYLMyEXL6WZokicv9crZgUlaep+dq8f6plpivvqLKwmKIrr6VUKqr3",
	"r2ixiUjl+Vch1pSm1IZNgQP7cEls06SprWDeE5IpDTWRWQg/lVzCD0U1F/ZPlKaSKXgflUGKOiFKMcKr",
	"jyfm82D/V9LY9mWmIiohvUyLmNr32JIdRNpS2y1btmSJHeY9/NWD/eOvmWmX0LQe/HzQMKwwlCQzvx3G",
	"8E9m/qXReiUWC3iYxBT+m+4EjydaZspkEDJOZLKDRzqmC5jpzbOEROuQSgn/lZjIoVBQnFAoLfhERYxy",
	"zRYsgtc0p7CcIjKJdiGVk4hyLSm8wrfE/pekSktKNvbJUtifkkHIKEwmGyIZt88o1wL+iko9gc8xPGK8",
	"fCQnxUw8IQmVuvxtVf52RvJHNMsfLODNV4TxJZyyZ57QaA0zLTyRYgN/zhSpvK15tqZb+zASxc+JJonN",
	"kmnJzAQWJUQKvYNHIotDCh8heGw6AT7JEedbiGymkzBLEvO5UcULi8Qu8EhEgqQito9jqnb20SYlSpVD",
	"z18SylZNcGi/CCoN3ROZ79uvTqJ7M6qYrKAkMVGKZIkZcQznApcPJrGCX6BJYn/A5yD+QjgsrpjDrwod",
	"wdeoWJKlyB/sNDWNTImGuDQhSkNz0ESlFB5sqDRzy0TDRYbVRHEBnwPzH8r+lTBhaarMm9IHEWdqYr7P",
	"wquWmAksPbV/AWqaP668rMwv5jvJXp0sbMVMERaEZxH8VBpaf0FjIc0wFyyhsKjM44RoXS3zQsgllQJm",
	"joWQmnGYcoqHE5YqePrA4GVJaajMGy1JkpDlCpbPMjIz8ZJOlvCJWNLJqrwjEjzfwL+caijYki1JuIPp",
	"Zsk0pZPKKJdMr7LwmVf2H4qqe0umExJWXgNqMm7Hlv9v9c14puFjvxQJ4Ut4IJYJnbyOyW7C9P3+FfjS",
	"bz62E5FqtmFfaTyBplhKsiCcwCO644IpOtkU606vTlb5VmPzSG4E38EfrYhasUjI1D5e0ySZKALLeBWZ",
	"NljBF4UVW29Z7sCKJYmElYoV0yRasf2jCeVULs0QV+t80l0JTnf3tr9XECUj95RNaJZQaVOwL9gFmj9J",
	"FYO/ZgSmZxaacCymGwZPk/1cwZLJM6v/PGIwiTG7k3Jiv9I/eWGyhO4pWp6l8Gjyw+u48uynw2fVJ3+1",
	"/6U0M59WtiVcs/LBRELEL5Sv7QfoC9WhzD9MXxYSPihf+Bfz75bbf6Hwa6IMsevdhEVqktdxLaT5bMFH",
	"fC3ziTdvPS50/uUh/5+nFVlnIZWm0c2ThHKxFfDgYWO/ACQmmYSF0nzXyL9CJIxnZuFvJuaTav5wQ/Js",
	"NoSTJaV8ab/FbcgWuNuENJ7YRt7QmBE7R21obGZHSH1DeQwzt+lMBf1vnrBICiUWehJt5eLghXUIT9dS",
	"aAZvxriZ/eCRSvO5zXwTFBLCMrsoN0xLOiGwD3YSbWn5UrSl5ov6ZPsX+5LKQqZM5yY00tLmKPhSwJLY",
	"iAcCP76yJCHw/Xlr19UjFeU/JrA17NUJhzmEU03S1D7Iv+2YRxS+gxm01yKFF5eMmzLwFfwtg3+Unliq",
	"ioc/Vh9PopRuYLfpqxMuYlqdLc3zL/BOYg0fES6+CvguzVNY/YfvpDxbwiTKtyy2v/X1cNoSkRZppiYx",
	"TRNh3lesYe4QG6ub4HRCYS0GvlWYL5yTaAulMo/tDGweKbUqHyUmURJvixfMIskf30MzCUki+D5oH0yi",
	"NDt4MokUMU0hFLyHhgUt7nlhR0oS83mT9qGYkARW3VPCicrbLiUplVFmoqV0aYaUrlhip5x0JShnD5Ni",
	"a4p5JZ1szIy+ge8/qVB6KalSvyXw7J7KGD7EqRTwun0oFsXXmlRDzCyEf6X5Xi2knXvTXUoOa57uUrOc",
	"fuPELKLfMpIYKvKH8CXktyykavKbMm8nCVdic28BkzRewRdvSTlVYJykWwbdbujMp13zcFf8nFApLQgy",
	"i9bwTdp8OVU0OkxLFR91ReygFEmoWggJU4MiG/imriBpFa04ZTGV1U+RecdIcGW/9xS9mpAQntEwW8KD",
	"BP7lBvVEwGSSrwtxWG9TZvXqXsFGgQJMGsN/MPMl2yx0xaChFKMbCstFwb35J/fFzfnNK8sNmcjMTmOK",
	"8WUxuvKu469OlEiIvGccvgMqkcB7mwa6J1BHVdwP+PBrhLJ3vzUPYOvGqxMFnwNVudGpeQY39TSPsljA",
	"D/jirO7ZQtufcM/GR++d36DQPCpuyQeP8+nRPrEX/X91oinZbO0dgMwTuMtNufJ9uHh1fneXVyfa3tLE",
	"PKAbe/+OfJ338dwKtmm4DcOrE51Oil+ThNOJ3t99wLxEeQxzODwpLjD/6kTf53XPistlm4cZ1+YTn8E1",
	"keGnEqaFMqhjpuDLxpbweLem8ChlsVkO5nFkpsVJvL8K7KuTLWwt2FK76rPNryf36mRbfG62gsUKputy",
	"c2X1sWnbBVsevlRlY/+yXUnZP7fT98HzH08Od2qY1SdGFJR8W73wzauT7Y4wSPDeTPPFGtP9imhlUbln",
	"YQY/igs4mMd6tf+yfQ+npNufSiXwqDgd+9XJAyD9ACffvjp5sGecvjp5gPMsX53s8lMKzUN7/tyrk6+x",
	"+Y2vcO6Y+SmFsmf/mGf2VJdXJ18FLKGv+VkNr06+Zgr+GA5h/48nOxL+6z+623zawh5c3OZabHN9vOnz",
	"mQ2e39q+mu+7eXaj6hlRNA4Eh83yZm2WLRiNg+n1LPhuCpvsguuE6IWQm2DGs02+SfVPwaebi8CO91Wg",
	"V0ztN/fesyQJ5OOtxI++J9t9AUTSQNIE9ixqYfei2XWn74PPNMj3sATbH7//ETYpb3/8/qfntuxO4Yve",
	"727RNSOKqWJLe7CHCZcIYfcvwGbb3zIKU1q+3TZK6e9utR3K5+yPHCyCn6bqHgy7x7y6cxv2YJDiYxAF",
	"VxfzW/NR+J3Plvk6pRNa7qn8/T0X1d8OFkJCx0eZlJRr2Cn2XHPPqiFa7LKNiGmivj8Ihx1zOP/Cjkt6",
	"uEC+1RrlQSP19qGSLWGJ+Rp5uEOt2S7Ui3LvU297UHHf6e/sO6210I/12J/JD6+/2Wf/8i//EnzcmvU8",
	"ev8Lvz2QmiSJuFfBTmSGQ7n/klEcHRnvE02SoDwkI1hIsYEuJD+8tpl/H/zyyy/8bBfEdEGyRL8KSLAh",
	"D2yTbcyf//D6deXPDftqJe55kFJpgtHvf+G/8H/9V2iY4Hw/gL/9678Gpz+8Dq6ovhdyrYJ5XubgtFzF",
	"Mn9qRglHci5hsMElkUsamO+ZwXdRJpWQf/qFX/BAyJhKM1gYOnyIzEcnYNp8cGggzB8n8McwrMC4qahW",
	"j7/kpFJsWUyV4cKuMSsW01/4Lyc23C8nwYZGK8KZ2nwf3AoTqpjtlZCvggWTSgeRqet/vp3dBvtF+X8o",
	"TaT+1f7if76Cvyo+v/Dl6he+IrCY/pPTh/IXAxbb2SFKGFQZvodxar9apUQZ6gISwPecoPyuVHzvMm8V",
	"mK87VJm2W9Nf+OO8bKD//y/Z69c/RZXQv7IYXqP/+Qv/5iR0+sPrY1/RFM0PpCJLGuwPb6qO/xtf1hK2",
	"gY2bTz7JlSOGnh7ctmE23j7UgvGY8aUKGK8TNrUbmv5IVDMVMZ7RatfYj9syyJT5l+QtEsDu92e/msL/",
	"n/zet9EncYsl+zTsN4JUm/DkucMVzBfib65wQrAzEe++5cf+VxjdH/4aP9zQ367hiT26tbcv1OV57ac/",
	"vH72qHQUrSrawVYXmDQDpYWksfkk2Zn0lxPyw+tfTiqYmQ9bRB9RFoZ9URaG7VN2dhbcHa4Ij0uvMBym",
	"XmHYUC84Kgv1Qr080+vs7HevgoWK/XHFwrCOYkLr/iATWrdvmQ1zLUWcRXq062MwyqGiZlJr6po9zhhp",
	"Q9o8ow1aF1VzpprQugZs+ekIfdFmw3eAWx5o9Nsb84EOVLg8uYbGlafQoHKonG/K2eZF51w5Z+t5XLr8",
	"bLueoLPR23cujzN65uw4h6lcnlsz5MqTQ9E4NM4z42zvInGOiLPlPC4cnEXek28mdvu6QZRR73AzIxym",
	"apBZM9PyyxygaCiaZ6KZzsUdb45dM0WtoVp56lVftBUJtO5b5RpPI11tK4c1UOPK9BpCVz1JFbVD7TzT",
	"zj64oZH4xs3ukbt/grtySj9q3uGlv3py7yCJ9tftTLjgpgh3cEnR4IamQuqRWXhQ32F6eJhiMxPNe93s",
	"r2aHLCKLnrFY7WBU0ZGKB1NMDRntEHrxcEM6UHBDgkvGs4fRrgImGzJQ7DakKXFwgVaUDWXzTbYNgUnn",
	"d+5lg7b9E7ZtSA3R4HLOfZlmgnegGoQZuWtmjAOVDVJraFt+1XHUDXXzTTfTujD5zGl0foa8ueLN1PU4",
	"cPY2BT0BB8HbB86GscCVx15OqVkY41IOBjpM5WxqzZQrbqmByqFyfimHq25ObYOJoIZtcW+wxe2r9uF8",
	"j9lZcfePkXkWDxSzuKlkMTKGjPm3svbhHA1zZVhcAzDWG2CsA8Auxn8m3IYNVDDWVDCGgqFgHgp2gYK5",
	"EowdF+y5G572RNozqbRvnA0aXN2dW74+5pFHxtwztR2me88l2gxC+45X2/jj/oa+6CK66JmLeRvfnRdt",
	"jEw6YvKZKaeGm/aO4H1RCdE70NHGGftmTDvMgYJoc2toYHH/eoQP4fMNPuhdPH3ctXpQ1uPQpSRa0QmJ",
	"NNvSzW99gXeYRfvwQbzgFOJ9+Pv4N4Me1neYEj7KsZmI8GanRVcjjAijdzBWWvjD39FFRy4ezjK1fZTR",
	"im1JzzzaJDrTMQ9X4jjqS4sdlHjQQOYpuvAx72rkEXn0lEfbwaijWx1tVevjKMV93zRKcd8djCZYyeKF",
	"UtlYNZTiftgWmgSdSGhaGB1EB311UIp7VNCxglLc1zUwIhua9GsgpNCVgVMI9kK2m0Jlh+ygTdCBg7BY",
	"0UF00FMHoX/RQacOwuRS20Gx2QiuepbQJtGZhXm499z84UvaXJoXetA05im6wDHvbeQRefSUR9vBCKRb",
	"IG1V6xOZRas47JtISKI7IrNodX72Ejaa5pUdtok2RScm2mZGE9FEX02EqQlNdGwizAt1TVwkjK/7FRFS",
	"6MrDNxCs1NBenmiUHEJZh4yhTdABhbBMEUKE0FMIoX+RQacMwuRSF8FlRiKyEQntF8Iyja4wfFsGLEEc",
	"5S2NHpV3yCjuk3QAY7l8EUfE0VMcyx5GIJ0CWU40dZFckViItF8hbQ5d8fjORpvezUbpoS3mkDHMM3Qg",
	"oV2UyCAy6CmDtoHRQKcG2vmlNoBa982f1t3hd3t7/aIOqTHFHTSGJj8XFJo2RggRQk8hvL29RgbdMqh1",
	"bQS/qPSerVm/DuZJdEXhz/PrzybcWFcE83IOGb8iRQf+/Zx3MBKIBPpJYD4foYJOFcynmLoQrsli3fNl",
	"aSCFrhB8D8Fe0gohlHfIKNoEHZAIyxZBRBA9BRH6Fzl0yiFMLnUxTMTSNKtpX/iVXll8lExXQF7asLCE",
	"IK49K/EFQPmo4EMm83GqDvC8fNT7yCgy6iejeScXExiC6hTUR1NPXVo5W/S8tdVk0BWiV+wNe1Ermaa4",
	"QwYT8nOg5JVpY6QRafSTRjMvoYdOPTQzS10ExSJkX/tVEFLoisGPb87Y1xflIJR3yBDaBB1I+BF6GSlE",
	"Cv2kEOYmtNCphTC51MYwpXxDqTafzp5NrGTSGY0p5R+KmC9KyEqxBw1lNU8XXlbbHdlENj1lszJvoZ5u",
	"9azMEH8EUbFYsIj2T6jNo0tAP9qIY7/98OMSD53NPEtHaObtjWQimf6SaWcqBNM5mHZ2qMtlmiWKyH6p",
	"tDl0xeS1jfZCbrRhaztkH/MMHdholyy6iC566qJtYDTRqYl2fqnroVoxKfrlEFLoSsM5BLs7qOeILxUH",
	"tR2yhjZBBxjCgkUL0UJPLYT+RQqdUgiTS20JUyJ7voA4pNCZhBDs0R2nxntTDajtoCWEBF1ICI2MEqKE",
	"nkpo+hcldCuhqWltCbXMdM9H5NgcOrPQRnsZuxFtaQdNoc3QhYW2lRFDxNBTDKGBUUO3GkJRa3OYhVsq",
	"FbMD65HEMo/OWNxHfCG7D/c1HrSP+yxdGLnvb3QSnfTUybKJ0Uq3VpaFre9lSqWyTPappc2iOyvzeGO9",
	"uGpR0GHDmOfohMW8jRFFRNFXFG0LI4mOSbRlrQuiFpuI9MyhzaErDG9ttMpZjXz0pzXaCg9ZxzxDBzba",
	"5YsyooyeymgbGF106qKdX+qq+FWINaUp7flkjDKNrmz8hxDvbcAXcxRqWeMh67hP0gGQ/yibG41EI/00",
	"spyokEmnTJYTTQ0p02hFo/6OSrXhO5AxnUKg/V7GhI7PQlvNgRqYJ9fQvrxfET1Ezz/07CSE2rnSzk4G",
	"dZRbEt3f5WsgehfGQZz5+fULOJgGxjpU6SC3ptBBy6Jz6JyHzpneReacMWfKWUe5pEfjkk6ESyqXYvuU",
	"xkSPD7ZksKwlzVFLkDQkzUvSEpp/l94hbM5gS2qwJqNVX6rJaNU+aibIJePZw7ggk9FqmI6ZxJoxZjoS",
	"FUPFvFNMRiu4/gYK5kgwGa1qAMaU7u3+9xC8A8QgzBXV90Ku1fi3P8J4B+obpNZQOGhZNA6N888407oI",
	"nCvgTDVrEJeF/QmXhV0AZ6KMn7UsHKpqJrOGqJkmRdPQNP9My0IkzRlpWVhDNCWXfYGm5LJ9z+Y3b8fP",
	"mZLLYWpmEmuGmelPtAwt886y+c1bpMwRZUoua0imqOaiv8Mfi/jtm2YiXZlI44ctr+lAdSuya0hc0bjo",
	"HDrnnXPFZITYucIunw5qiKepZKq3k9ry8B14lwcaP3d2oAPVLk+uIXZ5z6J1aJ1/1tnmRepcUWfrWUO6",
	"rLe7KKisg5snzD/Nb+k6mIpNmpkp+YJH34+MtmygN0owiTUkLcP7IiBnPnKW4f0QnFGW1bgNgk6IUoz0",
	"dvuDIn77oJWRRr/OVox0mLqV2TUjrmxcdA6d8865onvxxDbH6BWFrS/fxLyx6ts/m0WHClYvUDlaAW1V",
	"h+1gnqMbDe+gl5FEJNFbEk0LI4eOObSTTA0UJY1ZfxhC9A4QtHGuidTc2DX+NUIY8EAdtLk19M/2LcKH",
	"8PkHH/QukueKPCjnceoyFVHZ2517bPT2qcvUdHZzO9abntsqDtO1PLdmruVNiq6ha965lqkplXgfHleu",
	"2amghmtaxLS/QzDz8B3Ilgca/cpbPtCBKpcn15C5vGfROXTOP+ds8yJ0rqCz9Twu3Zbserv0iYndvnEQ",
	"ZfTAmVEOUzfIrBlt0KToGrrmnWumcxE1R6iZYtYQjW77E41uOxDtbnZ3GryVIkuDSzMP0XhkltHtUC0z",
	"mTW0zLQnWoaWeWeZmXbwWEvXptFtHdPYkiWitxMM8vAdrKvlgca/umYHOlDl8uQaQpf3LFqH1vm33mab",
	"F5lzxZyt53Hp7ns7cPK+g4MmP8/3tI30cJL7gR4ied/08Mh7PDQSKfOQss9zVMyRYvc1Dol86O/Q/4cu",
	"jvs3QT7Ox7+G9jDUY/0fGh/o/4BH+SNlPlL2gIf4O7Psoc7x/V+zpC/MvmZJ+5iZIFOx2Ygn53IHhMfB",
	"7CEVKpNjo+1rlgyTNpNYM9pMwyJtSJt3tH3NEqTNEW1fs+QobSHhsezJNojdOm5nZrr88d9uRr+qBuUc",
	"JGg2s0ainUGfImlImm+kQeeiaW5Mg5mkBmoPmvanmgnePms2zPhRM8McqGqQWkPWoFPRNXTNP9dM6+KB",
	"kK6BM1U9LlwoSdbXcZA2ePvCfR+cQaAPNGYRVH/k1kFdh2mdTa2ZdbZn0Tq0zjvrYCJC6xxbBxPCcevi",
	"vpyL2zeORlrw4JxFa8aV4KOlLR4ma3FD0mLkDDnzjzOYdcpJB11z7Fpcw7SsN9Sy9lU7/zReyLKBSpY1",
	"pSxDy9Ay/yw7/4R+ufYrOw4YjdYrsVj0pVgevosVNBto9Bsf84EOU7ciuWbEFT2LzqFzHq6zQfMido6x",
	"y+taQ7wkpr3tcoPgHWgHYZ6em/0C+DMjHyh+kFpD+qB5ET6Ezz/4TOsie67ZM1Wtgd5O8HiiZaZ0b/Tt",
	"U+gAQBMsuIVg4zdvX9mByldJsKF/5p1gsSKCiKCHCJb9iwK6EnA/uRx3kHEik11fBNro7euXxxmrd3Z4",
	"w6Quz62ZcnmXonAonHfC2d5F3RzpZstZAzYd0wUspt5wKzPoALh9rNGv3e3HOlDx9vk1VG/fwigfyuef",
	"fPo871/Uz5V+5ZRwXMCEROuQStnb2l2ZQPv+mVBnEGr0/JVVHaZ++/Sa4bfvXrQP7fPOvnJCQvoc0VdO",
	"CDXkU72Rp7qxLrgkUPoXwJ0aqHOqKXB4kWaUzUPZLvF+A85IO36J5lCoaNWXZiZ2+55BlNE7ZkY5TMkg",
	"s2aWQZOiZqiZd5qZzsVjMB27ZopaRzYt+ERFZk5jCxb1p9xhHl2IpwUP5vuI40XvsLRDBfBRlk0x1ILv",
	"Fy66iC766OJBEyORzok8nHNqcKk51b1t2LTRW6fxLkv4dEWjdXBmI47MQxjTQBW0uTW0zzYpkofk+Uee",
	"6V0EzhVwdvo+xlpEJtEupHISUa4l7Ym3R1m0ztyUcBIzwoOpjbcQMpiaBCrbQRMqtb1N3UjXDh8VfZAq",
	"Ps6xkY5TAsvYLnM0Eo30zsjpaaWDcZ3QLZmP5poadPItUb2JaYK3D+Xp1d3pPJg9pIlgOrgm0XpsCJo6",
	"DtQ+SK0hedCjaB1a55110Lr5zIPGuTLOFLUGbZIqLSnZ9MZbkUAH64JlqGsp4iwa/wVa9tUdKHxleg3x",
	"K7sYAUQA/QOwaF9c03OtYFHZOhIuRX8ILkUX/i1F8N1NpvSfgpREa7KkZkLXq+JZsKVSMcFHh+BSDNW/",
	"pWhM31KgeqieN+ql7NeP8/m1nXEQOmfQLUUd4yTr7TotefQunIM4L2glz4x3qMJBbk2Ng7ZF5VA5D9ft",
	"TO+ic86cM+U8Ll2YTDZEMt6fdvsM2hfv7HLyIY91Vynj6KTb13SY2lXyayZemOTLE9FD9PxD7+wyb190",
	"z5F7+5nluH2Ua9Hb4SoQvH3xKNcf5+NftYNqDtM6m1oz5mynInFInHfEzeaniJsj3GAaqOGa1JOwtzMX",
	"bPQOZJM6OJu9ANqgngO1zebWEDepz/DsA8TNQ9xM686QN1e8wWxSzzfG+/SNtX+H2Ons5ja4uHoZvjE+",
	"XN8Yb+7bBd4RFn3z07eLK/TNoW+M1/RNTooEJgTOvO7VuyfZdLN+d3Gz9+8zkdzMTyPU70l1B6zh01yb",
	"6yiLhWyvMYBWopV+Wnlz0MgIp0s4n0w89SBVvW4IVR1tCJ2/kA2hasAbQpWDDaFz3BCK+PmJ3xw3hLr0",
	"TtXcEJqRPn3LSDe+fTp9Gb5lZLi+ZaS5b58I+oa+eenbJzyOxaVvGanlG8165I1mnezmm8w+BbcrGkzF",
	"Js3MpDzbULmkPNoFRXMGt5Rs4KqcJrfZp+CCK810psd3FjrUfbAK0qw5gjRDBBFBDw/lvLmdfcJLr7jH",
	"kGa1LFzIHi1cyG7W9N7cPL7k9Oh4W8jB8raQzXlb4Ml4yJuf63hvbpA397wtapyLtyKMLzMi476IKxNo",
	"nzkT6i2EGv02zbKqwxRvn14z9fbdi/KhfN7JV05IqJ4j9coJoYZ8NFrDLNybfEUCHchHo/U1hBq/fEVV",
	"BypfmV5D+cruRflQPv/kKyYklM+VfMWEUEM+KTa9HZ0JwVsX760Qy4QGUxvthiaUKBp8SmOiRweeGeJA",
	"sYPUGkIHzYrIIXL+IWdaF4FzBZyp5nHcmCI9n7i3z6D9FbuL+Qs4QHNf0GEyV8mvmXVMETwTD73z1buL",
	"+Smef+eSvP3EUs+9Nd32id6abrsR7/3sLvjuPTd/k9+WkcaPLyz9p/EZuKbb4QJokmus33u6RfqQPu/o",
	"ez+7mxJNErGszkJ4MItLCNd0W0fBSPRHYNTBTfIgygtY5YvEUK2LRGPoIrwlHjLn4Rqe6Vw8UtM5bpGo",
	"J9vEfMVQffpmM+hIuVuINWbibDmHC12eX3PuYFGieWied+ZB56J5LZhnJ5ca8mnJHnpDzwTvwDsIM/7V",
	"OjPMgXIHqTWUDjoVlUPl/FuzM62LzLlmzlT1uHAJkULv+iLORm/dOLiSyr//+Dd7yZU86A1VlMhoBf87",
	"LuvsCIeJXZ5bM+3yrkXukDvvuLO9izvr2kDP1raGeiKLQ0p7255ZxG9/7c5EOjORRr+CV9R0oOwV2TWE",
	"r2hcpA/p84++fDJC71x5l08H9cQz7xmHfZpnM+hGPfMN6/xsfMbZGg5XuTy/5s7l7YrSoXReSmcnINyw",
	"2YJ5dmo4rh7n296uLmZit79lc0WD6YpxqmhwBYuPJAenI+zAuZAoOi4JTXWHaSBk1kw/aFt0D93zzr2r",
	"q7vzGddy9/P8I95F1hV5Zj6ogd02noRZklDNeG9bNg+SaH9F7+ruPDgrwo1MuGolB0rdQYoNzdvG5YJE",
	"+9A+D+27Oy86GOVzJV91hqlH4CIh973yBwl0Q98bE2p87EEFh0ueTa8xd7DwkDqkzkvqTPcicw6Zg1nl",
	"OHEiEiQVcW/CFfHbB85EujaRUhKtyZKaqVyvimfBlko1vlvhFeUdpn5lds3wK3sY8UP8fMEvZb9+nM+v",
	"7eyD8jmSr5gKasAXU7Xrjz2I3gF6Ns5YD9K0wxsobja3hrTZLkXYEDbv1ups7+IBK66Jg7LWAG5jprDJ",
	"PoGepDtMowPyIOD4T1B4VNiBIvgoyYYawrsVSxZVRBU9VPGgh1FFVyoeTjS1eBSKyh5ZNOFb5/D63TWQ",
	"CMFe1JZPO+bBsgjJNeYQWhgdRAdxs+cL18/MBDXU44T3Rh4nvP3Vvz9P/9t/e1nQccIHqpzJrCFxpl/R",
	"N/QNfXvRvnHCj+MmqdJS9OZbHr594opAo9/EmQ90mLoVyTUDruhZNA6N825bZt68yJwj5vJ6Hpcuk0lf",
	"ymUyaV84E2R6NxsZZ5lMhkmZSawZY6YhkTAkzDvCMpkgX474ymRynK572pdc97SLg082ggefKVlzqlQw",
	"49kmny9HeuGUezpM0u5pQ9HuKYKGoPm03XH6eYaUOaLsnh6VLCarjPRkGcRuXbNziDL2rYxQy0EiZjNr",
	"xBgsQoQMIfNuzQw6Fz1z4xnMJDVEU8oQ0htqNnwHruWB5jul/9//a/MCbmdQ1HagzuXJNaQu717UDrXz",
	"TzvbvAieK/BsPY+bR0PW2yGRNnj73tkwozcOhjlM4WxqzXyznYq6oW6+6VZcQT6htonx8Ei32EFRa1I3",
	"iRXplTuTAJLnkjxT0QGzB+k5oO9c4ZZM1M/DdTvo3mIqwuuhtIGfmWNqAJgkvdGXJB2glyQvgLwkGSh2",
	"SdKUuQSPokThfBQuwaMonXmWJHUk0/2txSW6ixU4E2UquJYiqeyfG+fdeaCmQ1VNN157M82KrqFrHrqm",
	"Ca6wOQdO11hX+0L4UvRFHARv3zgbprTtQqlsbGtrMMRhymZTa0ab7VK0DW3zzjZoXUTNEWpQzeOq8d4O",
	"NeEdHGdydTX+zY98oEeY8KaHl3A8tgQd89CxK7wxuCvEeI2DSISONn3dNscGb98xoacf5uOnDKo5TM1s",
	"as1As52KpqFp3pkGExCy5og1mAiOyybJUvQmGwRvXzYbZvSywTCHKZtNrZlstlNRNpTNO9mgdXGXmmPh",
	"oKp1hNtpuu6POBO9C+N2t3T9EpAz9RyqcpBbU+agXdE5dM5D50zvInDOgDPlPCocJbq36/9D7NZ1m0GU",
	"kZIGJRwkaDazRpzBkkPMEDPvMIPOxXU2t6TBjHIctIQozaK+SLPR20ctjzP2Vba8nsMULs+tmXF5u6Jy",
	"qJx3ytneRd8c+WbLWUM4ldL+gDPBO/ANwoyfNzPMgeoGqTXEDToVbUPb/LPNtC7S5oo2U83jsm2oNL05",
	"0StJiVYTxYXs6+LKzyfTvnx52ODWhg3mJuy41Hu2ssNU8PlUm6mYv2e+gGH5opFopH9GPtPIKKYjMZ+d",
	"eGoJqvrboWejd2KkiTPdmcmpXEm8Epot8sWrRiemGuqOvjy3xiYq3NmHDHrKoMLdfW0IqOrs8BN9XaKS",
	"ivavUHmXJXy6otE6mH28DKZGIrIc1x1RqRjm5SlNXs1QE3hxSgTNQ9A+Xt7QhBJFzWyCnjnyTBy/SiVN",
	"VV/n05nQ7a+4Xc/nQNS4AEvVME+dg8SaEWYaEg1Dwzy6q7eZZBAuh3Cl6viZcvRBxJmamI9Qb6tjlRTa",
	"lwyCBWYxJAlbUh7R8R+tUinwML2rJtjMPXgnWLrIH/Ln3yrcvn+RQUcMViaXGhymiWB6Eq0I472t0h0k",
	"0eWmShs4mELgkRlYrelAFTxIsaGD8F52QaKEKKFXK4KV5kUFXSlYnVzqOhiH/RIYh63rd7uipXvGtZAo",
	"Okb54nDI6MWhE+/iEK1D6zxc64PuPT/LH2x/RPacsheHdcXreZ2vj7W9g22h49vJlxd2yPq5WdnD9Ty0",
	"z8f1vLufbqjKEjwFwa15tVfylFkp5EuaiGXP+O0TaZ3BaRlpIWRwNy00VOMVcF/dQVtYSdOJiuWSRh6R",
	"Rw953DcwAukWyP1Mc5TKxQSyoD0BWYRvncU3k7kNNPZjYoqKDpLCMrlGAL6xixLZQ/a82yKa9y6K50a8",
	"YkI57hzhWV+XKIPY7QsHUUbPmxnlMG2DzJrBBk2KrCFr3rFmOhdRc4SaKWYN0ZROdr2RZoJ3YBqEGT9q",
	"ZpgDVQ1Sa8gadCq6hq7555ppXYTNFWymmsdlo7GQpC/ZIHj7stkwo5cNhjlM2WxqzWSznYqyoWy+yfYp",
	"jYnG7ZCuZIOJ4LhsLKFRIrK4L9yK+O37xhI6hUijJ66o6TCVK7NrBl3ZuGgdWufdWlwxGSF3jrgrpoPj",
	"4iVE68k+gX7YO0iifftMuPG7d1DUYeJ3mGIzAc17FcsUFUQF/VOw2sEooSMJD6aY4xwKuaRSROu+JCzi",
	"t4+giXRjIo0ewqKmwzSwzK4Zf2XjIn1In3f0FZMRsueIvWI6qCOeZpzq/sCD8F14p9nbjMjYPuRUj005",
	"GNRQkbPJNTXOtioSh8R5SBw0L971x7l0djKvC92Epapn7EwK3YBnZL0kocpvDhvMeLSLEpHSmJFR8mdK",
	"O2gCIUEnDF6keOEVlNBfCS+u54igWwTN5FIDwgfW3+reA+tiXc9EKbdrnmVJQvXYLiwNpRwodSazhsY9",
	"MFzPQ9181O2B4RXFnLn2wGqs2UlKQ9XbMZs2evuoSUrP5ufj311n6zlM2fLcmtmWtyvqhrr5phtuvXQM",
	"nJ0LjhK3JElClisTrhfkyvitM/e2jDR26MqaDpK6fXaNsCsXJ3KH3HnHXdm96J0b78pZ5bh4UdqXdVHa",
	"vnLT67Fvn1xG6TBhi9KGpEUpYoaY+YfZ9BoZc8RYlB4HjE6WpK8jTWzw9hmbBW+JCq6liLNo/KfU2aoO",
	"UzWbWjPY6FuCh5QgbR7SNntLFOLmCDeYSur4tqIk0auI9HZ7goMcutDu3T7aeI3bl3So1FUybCjefoEi",
	"fAifh/DtGxj3zTl3cD/P1OBw0xuCm9bpu8nCXfDdkm7+FKQkWpMlNZO6XhXPgi2ViomxbcKkm4EKuGnq",
	"3ga5Q+58uindx/n82s416Jsr3zY1VONU06g32SB6+yt2eZzxb7+EcQ7UNJtbQ9dsu6JtaJt3q3K2d1E3",
	"V7pBOY8Lx5Yk3OnetmDm4ds37uLt6dn/vJ2NH7m8osNUrkiuGXNFz6Jz6Jx3zuXNi9A5gi6vZw3pNKWT",
	"4h7kvXlXTaJ99Uy4oLih/cicq1ZyoNodpNjQPE1psSARPoTPQ/j2HYz4ucKvOsPUIXCVhQMwsJpFFwi+",
	"y8LRKlit5VAZPMixqYOrLEQIEUKfIXxXtjBK6EzC6iRTl8Iijwkptwb2q+IzCXUB5CoLX8CW0W9VeMhs",
	"PpeuA0GLhb1f1mgpWuqfpe+Kwz5/nn+8uqSEI6hOQX1m+qlja0LCyl9MIrHZZLy/O+z9TkZd6HpJwgLV",
	"HcgZEkXHZuu3CjxUXL+Zb1NdExLuVZ2WnY+8Iq8erqruuxnPrHBH67cmn7q29r8Jt5pFV4aOdRNutZZD",
	"5tLZJtyE4CZcdNFrFy8JbsJthcX6m3B5ppPeBITg7cPHs9vL+fg3zUI1h0mfTa2ZeLZTUTqUzjvpYAJC",
	"4hwRBxPBcdlEQviyL9kgePuy2TAv6XR6GPEwkbOpNUPONi0ih8jhefUv2TiYB2oYJ5YJnbyOyW7C9H1v",
	"2B1k0bp611J8oZEO/kGlCC7sBPSZJfFIN20eVneg9B3m2NBA82bmvS70PVKIFHq3vndx+xk3azr28GCC",
	"qQujGSthnMqJSDXbsK80ngjVL5PP59Q6mtMibPBxHtzQhBJFgyuh6Si1fL7IQ7bzGxk7kLRc8h+LN/6I",
	"m1GRVf9Y3Tcybkt16+rzk89xZSVZEE768tRGb38jax7nkoRqvxPxDXsYG512nMNEMs+tGYd5u6J9aJ93",
	"uxBt76J7jtyz5awhHN1xwRSdbPIF0xt2jxPpwD26uzIhg6IpR8bd44oOVL4naTZEMH+/YqEih8ihhxzm",
	"c9M51TQysVBGVzI+nm+OIrmy+357kjGP3jqH7/I4370jak2T5EXdxSIv8iCFLHJrxGK+dBFDxBCPvHnJ",
	"/uWzSQ305EbwXW97E8v4HcAHkT5WzqD4lMZkbHsOy4IOFLkiu4bMFV2L0CF0vq31lTMRYucKu3w6qMGd",
	"WrFIyLQ37vL4HXCnVmxqIo2cu7ygA+WuyK4hd0XXInfInX/c5TMRcueKu3w6qMPdmibJRJE47E+8MoUu",
	"0DPBnpwjvwvOz8bGXlnVocq3T7Apfuad5qaFkT/kz0P+oH9Pz8/w4mnOISwnmeMWRklfBEZJ+/JNL+di",
	"oe/NX5X6nWVJQjUb2068KBkmeVHSULooQeFQOP+Em16iaI5Ei5LjkNGHviCjD+1DRh+C72YyIXz5sg5N",
	"oQ/DVI0+NFSNPqBqqBoejvKiXaMPx11j6y1TzA6jD92K+O0bV0Ya+8U8y5oO07Yyu2bClY2LzqFz3q29",
	"Xby/g+5F6xxZV0wHNcRLEik2vXkH0TvQzsYZLXEwvIECZ3NryJvtUsQNcfMON9u7uOPNNXFQ1hrAaRKt",
	"WG/AQfQOgLNxyh1wd5Uajo87GOxAubO5NeTO9ixyh9z5xx30LjLnijkoZ13mJpRTudz1q12eRGfozWy4",
	"6S6kUj3dmhkQHgdXQrNFvshHqWFe9CGjWKTowka7zFFIFNJXIW0Ho5NOncynmONcriMqdV9MQvD2eRR8",
	"Gbw3/0xnN7ejPyQTijpM/mxqzdizDYveoXfeefd+SiXev8EVdDARHAdOcLq7p0lvJxwU8btgLo8EK4B7",
	"50a8ylcMeZjcldk1E6/sYEQP0fMOvaJ70T1H7hUFPU5fb1dW6eCSKtejX48b6GVUml4/BS+cgox5yNg1",
	"+uXIrxqXSsnIPWUTmiVU9nc1zIMkWgftY0r5zMQyj8y8yZfBfKc03Yz/xISDSg9TvcMUmwkI7zXLmxsx",
	"RAy9w3DfwXjhTGcuHkwxdY1kac8+srSDy0VDqODiej7uwznLig7ZQJOeA/8uUrQP7fPVvotrdM+teyyt",
	"bV6qWH+HrFRS6Mq9sW/orJR0yPDZBB3Qdw39i/ghfn7ih/I5lQ/mlaP2MbLt60axJnTr1l3whZAbWGzB",
	"qVKZJDw6PHtvF5wmVGoVfHdxenf6p1EZaEo8SPsgsUbmXZjGRewQO9+wM7MMUueGOjONHCcu7OvyKyxs",
	"/9IrF2cfxr4mx8JhXnrF5NXMsBAvuYKEeUjY2QcUzJFg4fFLrLCYblhva2kQvH3GbJhrKeIs0nvRxrxj",
	"zpZ2mLTZ1JrpZtsWgUPgvAMOWheNc2QcVPM4c8mEwJa4vqQr4reO3Vux/Z5Vb2EHYcdlW1HMYfJWZtdM",
	"uMQuOTQOjfPPOCUJTRh0MErnSLpiXqmD3fZw1aY/9R4l0hV/07vZWE89eFrUoTL4OM2GHj5aXUcYEUZf",
	"YTw4RgCBdAbkoxnnuJQ8YiHtS0cI3sFRKhAGriM2IzLZBZ+J5GZeGheLMMxhUmhTa8af7VQ0D83zzjxo",
	"XbyHgmPtoKo1hGOakWRCooiq3tYDD5JoXTzz7Wq6otE6uLCBg1Mb2CyeJGFLyiM6MvyqBR4oggcpNsQQ",
	"3ssuVTQRTfTp7rAHzYsautKwOrv8QRUnS6YHIaNJZBg6Bm+ZDs5ItM7SYCFkMM9C8yYhlWrEcJr6e4An",
	"pOkO0LcMz+xDQ9FQNPTxJFPDUU2T3ujUNOlg66mmyf/zfz89eHRKzZIZ7U5GM+yBUmgya6if6VokD8nz",
	"b1OqpnhVamfeaXr8itQshd+b/PA67gu6fQatc/fD68k52QUX14drg/Z3xeLxKuOtIUrbu/RNxWZjftrH",
	"XEuRBBd8IYnSMot0Jke2yXW/VIbpZCW/ZlraNzL9j2Qimd6RmcJMdkMjIWOk0xGd+8mlNqA/9Q7oTx0A",
	"+hMC+gcB/WnggP7kCNCfEFAEFAFFQKuA/vRHAO3dzw74RD3/oJ4Dx9ORnUgn0ol0Ip1VOuvL+dfeVz3/",
	"2sGq519x1fMP4vnXga96/tXRqudfcdUT/UQ/0c+qn3+ts+qpNBN90Wlit398D0QZ+0VOzSCHKR1k1sw4",
	"6FHkDXnz72IAmglkzRFrppjHQdsSrllfokHw9kmzYUrTPqUx0WM7PhXGOEzSbGrNTLNtiqghat6hBq2L",
	"qjlSDapZk7WJ7O8M/zKBznkb6xkYZUUHrByk50C6GzyNH7HzFrubOd5Z16l3Zlo5at4XyteM9wVeHr11",
	"7X7O44ydu7yeg7SuyK0RdPmCROaQOe+Yy3sXkXODXD6f1BBOh5L0aVwevwPl9JmNVDp3oVQ2OuPyeg5U",
	"uSK7hs4VTYvSoXT+SZdPRGidK+vy6eC4dgspln1JZ2K3r9wbE2X0a3KmlsMUDjJrphs0KcqGsnknm5l8",
	"UDVHqplp4Lho/EtfnvEv7WsmVlwJHphJ88d/K5+OVTX+ZZim8S8NReNf0DP0zD/Prn7GW0o4Vo1/OW7a",
	"lvdl2pa3bxpJCT+4L/wuuBJjO3jyy5YP07Itb2jZlqNlaJl/lt1doWGODNvyOobFYX+KxSE65sqxOByq",
	"ZHHY2LI4RM1QMx81K9bMLjTdoGzOZIvDo7atiUqpVOvdhEVqElHZ152NnibSunrvi5DBxXQON7wdFXdP",
	"KzpI+55JsxGE5VK9iNTU9DOaiCb6ZuK+iadzMzHhpku3OD6ddI5LKSRNxJJFfQFZxG/fRSHpJUQ6XCO8",
	"oYoSGa3gsl8j3W9XVnmYVpbZNSOybGW0EW30zsZiekIMHWFYTAfHDZSGykmRwYQLDb/Tk4jPZ9O+jzcT",
	"850suLLxxuXf8zUdpobfyLWZjfCmxUG3+SJGJ9FJ/5y8mVKpcc3RMZbPTzp16azGYH3L+SiZzuC8O4w7",
	"RkAflXbIfj5O1QGfjxYw8ol8Ip/I557PR3POcT2zkEpOdX9ilgm0r+Q+1JjPbt9XdJg47tNrBuK+c1FB",
	"VNA7Bf8dr1Xmir5yJjjKXUK52PZ1IwUbvHXmLm2YayniLNKjP83dVnWQ1OWpNWLOLk0kDonzjjjbuqic",
	"G+XsZFJDuIcNkeveiIPoHRhn44wfNxjnQHWzuTXkzbYr+oa++ecb9C5uyXQNHZT1uHR9XaQsaf8KZZdv",
	"x34rvGSYlyZLGl6X7BIvSoaUeUjZW9TLkV7HL0eWsFDSiVgsWET7IqySQvuYmWDBRxts9GtslcoOU7hq",
	"gs2sM+9kFyuih+j5h96+f1E/R/pVJpcaDvLsoTcAefbQgXwmynsqOU1egHw8exgoeSazhtaZXkXlUDn/",
	"lOPZA/rmyjeePRyFbTNZsKS3Iyrz6K3j9mHyBuKM3bW8noOUrcitkW0fYDkiboibd7jZ1kXd3OiWzybH",
	"fSM9Xs/MBm9fNyFFFBEOly8b+844W9NhCkeaX7nsg+1XBA6B8w640ymVGoFzBBypdUWyDeFkSSlfMk57",
	"U26fQvvWQbCZDVZS9ymNydiuVF0t60C5qyTYEL1KEyN9SJ939FVmJTzG0jWE+8mhBodbyntzcEt5BwCa",
	"KN/9TLbkT0FKojVZUjOx61XxLNhSqZgY3XrflvKBOmgyawigaVuUD+XzRb6U/fpxPr+2Mw5S54q6LT1+",
	"K6JNSOOJTnrbZ5eHb1+6kMbB7eV8/Hvt8ooOU7ciuWbAhTS+TXDHHRLn4cqd6d1LvASKK+TyCeW4czRm",
	"RNO+zg8vwrfvnAl0S9ej33OXF3SYzBXJNWOuaFl0Dp3zzrm8eRE6R9Dl9awDnZaC93ZXoTJ+F9TlkcZv",
	"nR3oULHLs2uqXd63yB1y5yF3tntxh51z92xha8DHY/bQm3omeAfkQZjRb8OEYQ5UO0itIXXQqegcOuef",
	"c6Z1ETdXuJlq1pBNE5UmgvV26kGZQAfClaE+iDhLRidbMbyB6lam11C4smNROVTOP+WK9p09wA8EzxV4",
	"RWGPo8ciKZRY6Em0lYu+4DtIon38inAjPxnhoKrDhPAwxWYYFu81NY2MHqKH3nlYdvDdzRu00JGFB1PM",
	"H/BwHfau4Trs0ML3ZzaxcBdM72YjlXAdDtzBdehIwfchGogG+mvg+xAFdC3gOqzh31oKzXo7gDMP34F7",
	"aylu2fhv8VNUdKDu5ck1NC/vWQQPwfMPPNu8qJ0r7Ww9a0jHY0l2vUEH0TtwzsaZ7kIq1eitg8EOlDqb",
	"W0PpbM8idAidf9BB76JzrpyDctZgTqUTvZKU6AmJtJC9nYP+JJH28buYXwe3EDI4hZAj4+5xRQcq35M0",
	"GyKoUrtQ7TJFDVFDDzVU6R1JMrwOizMPH88yNWjUNOlNQ02TDtb+9Au4MxDUcqD0mcwaameaFIlD4vwj",
	"TtMEeXPFm6ZJHdEknRCtSbSeRFvaH24HaXSwond7MwtOb2/NfPrjv03fB7c0WnH2W0aDi3MzjOndLLhk",
	"So8NvoM6D9XAwySbcijpKbzZdIsXnkYXvbr8ZqV7b8X0boY6OtPxYI6pCWW0pUayyfYvvUK5T6MjKKd3",
	"M2NhcPeXEXK4r+aAOawk2ZzDqX2zu78gh8ihj6uJkuYz0t1fUESXIu6nmToiqixkasUmNKGRlv1d2uxp",
	"Jl1sKM1jBrMi5l2lziPcZPq4xkPV8kmeTcHM37BYzogmoukjmo/aGK+I5hzQxzPPcUMFX4q4t/MGbfQO",
	"bl3Ll+L8rLJbMaFSj8xHW8thmpjn1szBvFURP8TPO/zsBITSOZLOTgU1dHsgvdH2QDpw7YGM/1gZ8UAG",
	"qtoDaUraA0HP0DMPPXsguPrmGrUHUkO0ryxJ+kMNonfgmo0DyxWW3QtQDoY8UOhsbg2ts52L3CF3/nEH",
	"vYviuRYPynoUPU62JlQv5EHs1sG7gihjNw5qOUjhbGaNfINFiLqhbt7pBp2LprkxDWaS46JFqq9jVUzo",
	"9j2bzqejVSxSwzzyBBJrZphpSyQMCfOOsOl8ioI5EixSUS3AJtGWqh4Vg/jdUDa9m40PMajfYCWz2TXm",
	"bGp6FElD0nwkDc+3c6oaTCnHaaO9rZrRDtbMZtP9dsYLvhByY3ewXQltSjEu5ehA19Ro0xU1iutpiJqH",
	"qM1wNc0VaLTGWhrVJE1708wEbx80qk/TdPz7zqCaA9UMUmsIGnQqmoameWcaTEDImivWzERQR7Yl0bQ/",
	"2kz0LmyDOC8ANzPOoeoGuTXlDdoVfUPfPPTN9C4C5ww4U85awlEiexSOkg4OfJzdvp2d3rwI4SiRgxXO",
	"5NZYONOuKBwK56NwlOAhkA6Fo0TWEU6tRdrjShyE72ItzgZ6AcjBQIeqnE2uKXO2Z9E5dM5D56B5ETpn",
	"0EE9j0u3ZPyhL+ZM7PaNgyijB86Mcpi6QWbNaIMmRdfQNe9cM52LJ2c7xs0U9bhsq97OAFh1cOz/u7m9",
	"DfkYLxjJVwM9+H/V9LD/FR7xj4x5yNi7OeLlCK9VjeP8WV9ysQ6uJ2IekSS44ErL/C3KtbNPaUz02FbN",
	"2DAxYw0tY0gZUuYfZRcomSPJWA3IlJ7wbdwbZzZ8+6hdzG+Dq7vz4IfvX8PdUaFkYcYSbbMpf+HH/BeM",
	"YyNTztZ6oNblyTUUT+mrbYzsIXs+3Sd1uqUXmm4UuufKPTuZ1Nbvx575+7E7/378/vUoVftx0Kz96MS1",
	"HxE2hM0n2K7uzn98jRcicQ7bj/Vlm0Qp3RAdrfomrkykU+uC6fUs+GDCjlO9sqrD5m+fphMHp0VPo4fo",
	"oXceXs9gQkIUHaNYTjLHdRQxnewT6QfGag7tmyhi+v2Xyn68z0KuzeTwVoosHe0xl9UaD1PIgwyb4Shi",
	"WixehBFh9G/HX6WBEUdHOFbnl1ouflE9gvhFdSLhz/Pxn24A1RyseV9Uc+y+4KGayJyfzP2MR2s6BO5L",
	"jQM2xZqR3mBbM9KBaybKtRRxFukXwNuakYHqZjJriJtpVrQNbfPPtjUjSJsr2tasxg1OxVex6e10BAje",
	"gW0Q5orqeyHX6gXoZsY7UN4gtYa+QcsicAicf8CZ1kXhXAlnqnmcuHTTl2/ppn3crj8E3/08//Pt/E9B",
	"SqI1WVIzZ+tV8SzYUqmY4CMzLt0ME7h001C3dIO0IW0+HZfycT6/tnMNyuZItnRznDXd2+11dAf31rm9",
	"rtwsTqlsbOtoeqB31NFNb6ej8V466JeHq2a316iXI710jbvoZDlcffhlYrcvGET5bvovf37zLy9r1cwM",
	"fJi4QWbNeIO+ReAQOFxBe8nEmWngOHJbFvd33AgEb5+5u4vzi9P9utpZliRUs7GZBsUcJmo2tWaq2UZF",
	"1pA139bbiomnmHdQOEfCwZRwnLivE1IeRdGXdNUcWgdvOru5Da7+Mf6jSKpVHaZ8Bxk2A/Drfikig8ig",
	"f5sv/4F3IXAMYHV2OeqgiLRIMzWJaZqIvk4KP0yidQk/2nDBuQ03dhAPqztIER+l2IjEfOnahYsmoone",
	"mXjQwciiGxYPp5jjLq51XxtATej2DTRBRi/fWg9z2yck1kw505+IG+LmHW5rjafKuTJtrY9v6RQbacfQ",
	"B2UmdvuWQZS7g4qNVTQz1GGSBpk1Mw06FVFD1LxDzXQuquZINVPM46xxOqF9sWZit87aD7PgOgsTplY0",
	"Lq9wUlVudLiZsg4TN8isGW6cztA2tM0/2zjFOxm4os3MI8dpS0lfZ36b0K3DBkG++zglm+RFnWBgxj1M",
	"3kxizXQzLYu6oW54dsFL5i0lmxq6UT6JtnHYG3F5/Nadu13R4GNKeTBNRBY/2kBp5tQf/+3RueKgWkgU",
	"HZl7ecUHil+RXUMBKZ+arkYFUUHv1vFM896dnyGEriDM55RaGoYq7tHCULV/H3LTX2fz8712b9jD2DZe",
	"2lIOljiTW2PgTKeib+ibj76dzc+RN3e8hSquhZtSqx5xU2rVCW7z+bvxH01p6zlY4UxujYUz7YrCoXA+",
	"Cjefv0Ph3Amn1KqmcMlE0YjE216hK5LoyLvLF+JdUdYBs1em6EC/ZG47GQ1EA/008HJOo9N4ixK6lLCY",
	"YuqBqEm07tNCE78bBiHSi4DQjHS4BkJ2zfmDxkX6kD4v6TPdi+w5ZM8UtJZ491L36N291J1o91nqF2Hd",
	"vdSDlc7k1tg5066oHCrnm3Kfb27RN3e+3cvjl4IWkkRJb+fZQfD2bbNhRk8bDHOYstnUmsFmOxVdQ9d8",
	"c828biYUxM0RbjAV1LRtEqVZr76ZBLoybiqZZhFJgmuio1XwKY0NTaMGz5R3wOhBeg7gm6YZ2of2+bfl",
	"0nbv9SfEzyV+Zlr5AwBOIkUWvSsIWfRKoQqm89M3I1UQyjtwCm2Objycmp5GE9FEb000kxG66NpFmGOO",
	"46h6O55TdXMQZzAXmYzo42uKjfQkdDXQQzhV0+M2FR6tich5iNz8DmlzRJuqcWCmln3d586Ebh+025v5",
	"+HfhaTnMW9pBYs0YM/2JjqFj3jl2ezNHyBxBpmWNW9bd8ygRWW/XTMnDty/aPbcXDhu9anlFhylbkVwz",
	"3YqeReFQOO+EyyciVM6RcvlkcFS6lCSEayZ7kq4I37p010WgUrrirvjjgq4o6CChK5NrBF2xKBE6hM47",
	"6IrmRejcQFdMKXWgExOSaNGfdDZ+F9SJ4NREuqL6Xsi1Gv3qXVncobKXZ9fUPWEWK7qH7vnoHjRvPgHh",
	"Pcfd+WfnlhoAcqIEZ1FvAObxOwCwiPTsDVt3wSVTemT+5SMeqH9Fdg39KxoYAUQA/QMw716Uz5V8eUFr",
	"yJdSGWW6N/hs+A7cS6mcZpUrqIz5Vq5FWQdKXp5cQ/HyxkXwEDz/wLOzEXrnyjs7GRznji5JX9TRJWmf",
	"ORNk7Lvx6JIMEzaTWDPUTHsiaAiad6DRJV4+xRVmdEmOQ7ZiCUv7OqUgj94+Z3mc0e+js+Mcpmp5bs1g",
	"y9sVbUPbvLPN9i7unXPMnC1rDekE5exhYgZJot42VB5m0YF8EC+Y5vHGL+BBfQcq4WGODUWEN8uXL8KI",
	"MHoIY7WF0UfXPh7MNjWcTCeb3YTEG8Z7Q3KfQutCpqv0w+4UQo0fx31dBypjJcGGLBZLFUlEEv0j8d11",
	"3r7IoCsG91PLcQOF0ktJlfot6YvAfQbtryPmseZ/v3whh7XsiztMBiv5NVOw0sfIIDLoHYP7mQkddOTg",
	"fkqoweA9lTHvbe9gHr4DAO+pPL8a/4XHiooOVL08uYbk5T2L3qF3/nlnJyLEzhV2djI4Lp0UgGJf0uXh",
	"25euCHQtRZxFOjhNqNRjPcAzH+wwtSuSa6Zd0beoHWrnnXZ586J2jrTL61lHO7GAubc/7/IEuhCvCDX6",
	"tbtyqEMVr0ivqXlF96J6qJ6H6uXti+45cy+v6HH5dG+XZtEdXJTldjp+5PRAL8Cim156ReNFV9AzDz27",
	"nSJkjiDTNS60koV9CZaF7QuWhcF350TqP79JMq2p/FOQkmhNltRM13pVPAu2VComxrbBMguHaVsWNrQt",
	"C9E2tM0b21L268f5/NrONaibI92ysIZukk7Mn5oPV1/M7VPowDtJg3kebOzXW6kUdqDMVRJs6J2k+VJF",
	"99A9/9bp9v2L+rnSbz+5HGdwl5IJKTfg9SXhYRbtY7i7Ph3/9svDog4Twkc5NrNwl5L9skQOkUP/ONxd",
	"n+Jp6Y49PJxj6pDI+nOQdYEfC7673umV4C9ro+cuZUNVkDWmjyF4CB5u93zh0rGjvP3GSdoTbyZ067z9",
	"/er0evTrdqaSg6QMEmtE2d9NfyJlSJlv625m4sF1N7eimenkuGgZSSKx2fSlWh6+fdmKQCPffVcUdJjA",
	"Fck1Q65oWYQOofMOurx5ETlHyOX1rAXdTvXI3E51gtxu/PdPsNUcrHA71dy3He6CQ9381G2HZ4o7tG2n",
	"asgWUjX5TYW94ZbH78C3kKqna3Ajwy2v5kB9K7JrSFxI1d8Vnm6AyHmI3PwMhXMlXD6dHEVOEq7E5p7I",
	"vk442CfQOnN3WcKnKxqtg5sy6KiM29dykMhV0muk3H7poXPonHfO7dt39pAmguGVUBypt59fjrNH4xXp",
	"6/pfNnjr3N3QOHhHxn/hL1vOYYpnU2umnW1VlA6l8046aN3p3QyFcyQcFLSGbpwqonrjDaJ34JuNM37f",
	"YJwDBc7m1lA4265IHBLnH3HQuwicK+CgnDWE27Jtb5ssIXgHvkGY8fNmhjlQ3SC1hrhBp6JtaJt/tpnW",
	"Rdpc0WaqeVw2Ea3vadLXnVeL8O3rVgQ6zbTYwAIcP3X5mIeJXZFcM+6K9kXwEDzvwMubF8lzRF5ez1ro",
	"7XoUb9cJd7vgkvHsYcy67QZL2665aztEDVHz6Womn9KYaFyBc6jZrh5lEyol0aRP0fIUOoJtBsHGx1le",
	"xeGqViTYHDe7CJE4JM7L9ba8fxE7h9jlk8tx87JonfV2uAkEb985G2bklzmxxRwmdza1ZtDZRkXj0Djv",
	"jIPWRd4c8QbVrAGb0opG/d+M4GkiHYCn9JxGo91a+aSiA1XvSZoNBYT3w1sSIIZeY1jtYryypTMVH082",
	"R4VUJKKyrxPpbPDWJZyTLGbBdHZzOyoBbfUGqV6eWiPp5rYzkTfkzTfe5ni/Hcey2QmlhmaM94eZeZ/W",
	"LTu9uLoN8gsPqJF5xvhQOTOZNdTMdCZihph5h5npXLzSiWPOGK+jWULVQsiI9kZakUAH62gJVW8g1NjP",
	"IthXdaDYlek1FK/sXmQP2fOPvWJCQvRcoVdMCDXk24SkN/Q2IenAOxOlpO6GJpSo0UG3CclAjTOZNeTN",
	"tCjKhrL5J9smxOMsnaG2CUkNz9LeNEs72CZZuTnqNdHRKjgnu7FZlg5UsrSpY3hnVFTMx31s12iYK8OO",
	"3w9VRStOWUzlhCY00pJFfYH2JJH2fStCBrMiZMndldBskS/mkYn3pNDDBPBpms08LN6vWNaoI+ron46P",
	"uxgPSHFs5pNp5zihNJpEgqss6e0QlX0G7aM5mwbTPNbo9+jt6zpMIyv5NcORRvkyRRVRRf9UnE3z9kUG",
	"HTG4n1nq+AfBExL251+RQfv+FeZdknDE7hX1HKp7ZX5N3StbF+FD+LyDL+/fSxKifM7kK6aEGvLRMFv2",
	"hp4J3oF3EOauUrvxcWeGOFDpILWGyEGXom/om3++mdbFkxQcC2eKWgO3pDfZki72/d1Tpr+aUvMl45Sa",
	"JWNW6oQk2l7J5SXsDKTJQN1LmqKHtzpA8XwUD+9y4My5pAZy5vNBE8F7Oxdvn0EH63I21kdOR75CV9Z0",
	"oLrt82uo3L59UTvUzj/tygkJ1XOlXjkl1NBPbllEubjvDb8igQ7sg1BX4j6Y3s1ewKErRWUHKmCZXkMA",
	"yw5G/9A///wrJiXkzxV/xYRwXL8VicV93rPUbmOmcV8SPptM+ypWwtoGsHd8HfXa4bOlHiaTz6fajMzK",
	"e87Krkc9UU/v9IROnh92cnXmwrMiXKn67DxUQ1hGk9gE78lUG74DRfNAY12ZzMc3UCPz5BqqmLcqQogQ",
	"+gehbV7kzhV3tp7HgWPRui/cWLRuH7aL6fvxbypl0XqYspnEmqlm+hNFQ9G8E41Fa9TMkWYsWteQjG4o",
	"V71hBtHb9yyPM37SYJwDVc3m1hA2265oG9rmn23Qu3jlFtfMQVnrSCclmdwzSROqehSvmkUX8klJgs9F",
	"vJHfL/1ReYcK4UGOTUGUkhSLF11EF310sdLCyKIzFquzTA0elxsykVlC+6OxzKADFpcbEtyYWCPzr6zh",
	"QO3b59fQveWGwPJD89A8D83L2xe5c8VdObHUoI4v+7xLeh6+deSm89PgNKHS/CGPx7vN05ZzoN7lyTXE",
	"Lm9YpA6p8486vpxSiZdxcSadnQyOM5eQaH1PZG9nuBfx21+bKyONfgdfMdJhaldm14y7snHRO/TOO++K",
	"7kXwHIFXFPS4eCIh8p7xuLdNmGUC7ZtnQn2GUCV6oz57ryztMOnbp9fMvn0LI36In3f4lbMSHubiWMFy",
	"YqjDoOwPQNkFfRIu5nJDUyH16JyTQxVONrYNz7ND1bxUDc+xc+dYjfPrBGfRPUl6uxJ1Eb8DyziLPptI",
	"o990WdR0oLoV2TUkrmhcdA6d88+5fDLClTfX6OXTwnH5UhLRhIRqsqIk0auox/13z6TSvodF0PF7+Ex5",
	"h0njc4k2U7J4x3f7Hkcv0UvvvHzaxyinYzmfmXxqIJpkvLcLtEDwDqCEMONX0gxzoC5Cag0lhE5F/BA/",
	"//AzrYvOuXLOVLOGbJBrX7LBvfLalw3CjF82M8yBygapNZRN2jkUZUPZfJPNjAtlcyWbSeK4bKq3WzCo",
	"Du63MD+3oNHgnKkoEco8HKtsaqB3VVBNb6Gg8IYJCJqHoM3PcbukY9VUjdsgaCE39prSfdG2z6B94iqx",
	"xgrbfojDBK6SXzPoKp2L4CF43oG3718EzxF4+5LWgE/u1v3d/sdG7wA8G2f0GyrtOAcqns2toXa2XVE6",
	"lM4/6aB3cfXOtXZQ1uPSZbHoi7ksFu0bZ4KMHrgsFsPUzSTWjDbTn+gauuada1ksEDNHmGWxqCGZ6u1E",
	"AzNPty7Zp/nsBUimBnoOgUmsoWQKTxJAyfyTbLqVC5TMlWSqxtH/92zR27WdTez2LYMoKYnWZEnNTK1X",
	"xbNgS6ViYmy39TEDHiZskFkz2aBfkTakzRfaUvbrx/n82s44aJsj28w0UAc3pRKxHMDp4U8z6QI+iBns",
	"T7iEC4Htj6kcnXuPazxUBZ/k2dREeEM8QRyB9Hkr5pM2xh11ztV8PPMcN3S3WQi+68tNG719K/M4o9/m",
	"acc5TBfz3JpZmLcrAogAegeg7V3UzpF2tpw1hOMkWmu27c24PH4HyhWRxu9cPtKBSldk19C6onFRO9TO",
	"P+3y7kXvXHmXF7SOeJEUSvS3569MoAvzIinmJtQLQC+v6lDVK9Jryl7Rvegeuuehe/mEhPA5gy+fEOrI",
	"JxKx7G9zpg3fhXo20LUUcRa9CPtgwEOVzybX1D3bu6gequehetC8aJ4z86CeR8XTlGwMZr2dYb5PoHX1",
	"binZ3NlQpXdnWZJQzUZ2jOe+qIMEr5JeI/Ju982L6CF6vqG3n4+QPTfs7SeWGvBxEiZ0IqmiREarCSnX",
	"fHqT8JsZdUAjxA5u8thjXQ/8nRoPVMpv59uQTnjjYnnvFzdKipJ6KOlz3Yxrk85Y/eYsVMfZKB9wP6aa",
	"6F34CXHuDsp5w9Q6uBLaFGVsjJrhDpVMyK0pj9C1iCFi6CGGpncRP2f4mXIeh25Fkv7WHSF4+8zZMOXW",
	"009pTPTYbIMxDpM2m1oz2WybImwIm3ewQeuia45cg2rWYI1umDIfh4T1dh/YwyRaZ86EzOMFEHDsh8cc",
	"1neg9h2k2NDAg55GC9FC/yykH2wLXzK8c6w7E6sTQw0bJSV6QiItZH9rfpUcWpfxLkv4dEWjdXALcYNT",
	"G9eYNzIRK2UdKIjVDBt6aN7KLkrUEDX0UMOygc2vzR6sGB/DLzTSuMboTMfKjHMcR9aXiKyD3X0PRAUX",
	"XGmZ//3YDyhlwzSQNYSPIXfInX/cXSBpjkhjNRwLI9EbZWHU/o2Jbi/Oph/Hv43T1HKgipnMGkJmmhQt",
	"Q8u8s8x0LnLmirMwOn57Ip1O+tyXZ6O3r9r15PJF7Luz9RymbHluzWxLL3EvHeLmJW7XuHfOoW52Njnu",
	"myScTjSNVr1ezeVxGu2LZwIGt/uAL+XqLo8rPUwLHyfZDEXzbvtFjTqijv7peNjDyKQjJh9NNDW8pDze",
	"sEj2tpmzTKADIymPgw8Qa+z77MqqDtTDMr2GEpbdiwgigv4hSHkM8xH658q/YkKoIV+m9D3Z0t7gy+N3",
	"4F4Rafwrg/lIB6re/8fe3f22jSMBAP9XhD7tAsn14KL3cG9Z23cXNE2CunW7CywWtMjEusiiT5QcO4f+",
	"74vhh53mS+6SMj86j20cz2g04o+URcdkZ4meaVw0D82LzzzdvUieK/J0QbvFu81Z7e3bWGTw/q0jxS2p",
	"suH4w8cHX8hyzpPbrS5LGiZ1KjU751S7InKIXHTIfR6yusGvInMsnRwQOplrZ8X/2sLbFgQTvnfqPplA",
	"D1d1qd7UNJUNUrxtclbmmXOK6qF60alnmhe9c+OdGVL2EK+tmtabdxD8ANrJMFvrUvxqTVXKQHmTqVni",
	"JtsUaUPa4qMNWnc4HaNtrmyDgnbLVhVXvp7hlLH7d01GeeFpzYxU9Bv2UkMPChCmeTIzO/Jk/6J4KF50",
	"4kHnonaOtINi7oOd4Lk/7QTP++fu/HRyMUz98UtVzFBRg9RsVYNGRdaQtQhZEzxH15y5JnjeDZugvlQT",
	"tHfSIEbqD1a2goapmaCWlAmKjqFj8Tk2GSFijhATdA/B+MIbYXzR/7JscvE+8c/WBF8EShhf2BrGF4gY",
	"IhYhYhfv8SFJ15rxRSdnK1LRzY2vnW86ev9/sIBUI4iT+uJM1zNI3UxuVsBNdbuicWhcbMbpQQh5c8Ob",
	"Hk/2EG5Z0JLMhDfjdPwDKLcs6BlEur/fLT3jdD0DVc5kZ+mcaVqUDqWLTzo9EOGSzrV5eljoVi8/zpfs",
	"mBY5ZCkj+dHvYR4H/ON0w8txNtoGTgvBh2UNE8NHWdqhmA+XbHdCkUakMT4ah8PL8a6HEUZHMD4cabqB",
	"pN5uetID3PAcjdU3n6R6o5MGepOT2t7gpHhzE12L0LXRGBd7jk2je9zcZIz4ehxFxu5fMhkl+Q/u4CjD",
	"FE1mZmeabFJUDVWLTjXoXPTMkWdQzD1Eq4uGePuwTkU/gGoqzs61ktVNaqbJYwxUNZWbpWuqVVE2lC0+",
	"2WTvom2ubJPl7NZtcUtqbzceZfD+bXv/GX4h+SWbrGaYuqnU7HBTnYq2oW3R2SYHILwd6Zg4OSB0C8cL",
	"Kpiv7y7R0fs3jhd0wvJkbVNlDBM3nZudbrpLkTfkLTre1NiDrjlyTQ0F3bC1ZZXPWX7jizYT/4BPUCa/",
	"hjM1DVO6bXZ21m0bF7VD7aLTzgxG6J0j78xwsL94xzmvropr3/DpNA65g0AGbNWgmih9uqphC2iSdAOh",
	"Oq3IIXIYL4eqhxFFxyjqgeZ7bFwxAOx49da/j9tUDmnkdHwGCU7fpurjtqqhG7lL1JGT6g2nb5FKpDJi",
	"KtUINX2LWjrXcjvkfIeYN2zlncobtjqgke/G00RxvGGrwFWEDN1w+I6tEEKEMF4I342nSKBrAm/Y6jvs",
	"q1bUu33Vih7QvvPpKFH7qhUN3D7I0I195yv86whoXzz2LYs/hit22rCFGK8beD1F+lzTV63o99E3CMG+",
	"wWHxy6aDdP0bhA/gwJ2AAyQQCYyJwPPpaPD34XSMBPZI4GAvA7fveUzKguiO8ETho1wOIuKuqicqanIs",
	"PqprsDo+ztQaye1b6rOLVqKVMVn5uIdRS3daPhpw9kKzLvL5Qh+vJytNCr0TOTydnEgnTcTkeDQHFqyK",
	"2wStMdw2LiKICMb4eaFpYDTQnYHbgb2Tvg0p/H1LjAze/4pQhdnuMPylLUvWFKntspBHGSZ4KjU76lSj",
	"InKIXHTI/Xpy+gG/s9o1c3JA6ATuljT5/Lolta+HYXYJ9A7d512o1LfT76oapHj30rNSb3dGUT6ULzr5",
	"ZPv+G9oX1XOj3m5g6ZZvThpBlktf7unw/asHgU6Wy/TN0xUNUzyTnJ13pmdRO9QuOu30QITWObJODwbd",
	"0hWz1pdyxaztXzgIMtmIhi1E+soVszZM4SAxO92gT1E2lC062YpZi6o5Uq2YtXuIVjMxJ/WNN9Z0/APY",
	"ZiKlD5s+0kB1M9lZEmcaF51D5+JzTncvYucKO13QPcRr5scyPvNm3jaDA6jXzBV47Adwb1vXQOXb5Wdp",
	"XzNX5xTxQ/wixM+0L+rnSr/tyNLtHy+vCl/yQez+zZNRktcOjjJM52RmdsLJJkXcELfocIPORdccuQbF",
	"3Es0IUqPpglRHkS1yeTsm23nKZomRBmsapCbtWvQqigbyhajbJPJGdrmzjYhyj10q+kVq3JvdytN/AMI",
	"ZyKlbZw+ykCVM9lZOmeaFqVD6eKTTncvWufKOl3QTu3WrPLk3JpVvQv3hVWp3o5csypI0CAvK8q+sAoR",
	"Q8SiQ+wLq5AvN3ytWbUHXDVfe6Or5usD4AVREv9yE1nKQCGDzCwpgx5FzBCz+DCr+Ro5c8VZzdfdoBWE",
	"L3w9KKKC90+aCpO6afIow0RNpWanmmpUZA1Zi4412bromiPXZDW7YduUbOHLNYjdP2sySuoPQMpahqma",
	"zMwONdmkaBqaFp1p0LlImiPSoJidom34Db8mt8QTaiZ87679agKlTpupaJC6bZOzAs6cSzQOjYvOONO8",
	"+FXLbrkzQ0u3eO2syLkv72Tw/rVTYZK3Th5mmNKp1OycU52KyqFy0SknWxdtc2SbrGanbHfU12dud7T/",
	"D9x+YzXPRmSTnVZFU5CmWLFUXbujYX7kBnlZifYbxQ/bkLP4OIOxZ0Q2uGZz69od7f7I7Y7Nal93J2Xs",
	"A8AGUXZrtZLVTWKewRGGKZrMzM402aCoGqoWn2qzmqBljiyDYu6hWc1FXnjck30vg4Ms2SY6Vsr7su/V",
	"NFDldvlZWrdrXxQPxYtxHacHJFzLufZvOzR0K1gsPC7qZPD+7VNhUv8ITlUzTPVUanbgqU5F69C66KyT",
	"rYu8OeJNVrNbNs597Q+A0P2rBkES3/MGhQwTNEjMjjNoT8QMMYsOM85xY4Aryjjv3hdwJ3JSQiQ/lqno",
	"/XOm4yS/SlPHGaZqOjc72HS7om1oW3S2qd5F3hzxpsrZLVwrfO0CgND92/ZpcvHNp26b7Jw3xZU+i4kB",
	"14ow9wHIxOxogz5F19C16FxrBe4AcIVaK/Z4/n+zZr7+lI2M3b9pMkryqzU4yjA1k5nZcSabFD1Dz6Lz",
	"DDoXQXMEGhTzBdH4klVk+fx+Nh0LLk1Y4wznLL/JTi5Ps59Wb37OLpasgn+IJcu3K56nhqQLHcaywwil",
	"BfyIlJc1xGgKeB+4LrZXBZ/9l+XN860S6Ml8rpLmrBkMzXlb0kq8hg7I4Ywc54OXzqCZZZi5xZyLBgYd",
	"cZQVlFWwWGUUvKrbqoIRccgXC1LRDJgZ/CMb8qqpOUw7rmoimrrNm7Zmf3vqRF/SSkxNWsNBF0D/4vWC",
	"NMac/5i8HmqQ/TRScxyRfeT/zBq2bn5+ZhS9ku/49Pi5hv+Xp/joFbzHs4OpRYt29ssPOmI97MHhYHe6",
	"X+rztn5+qv0LEYxmXPWKvnIYzS4/fTh7OIeU07NaXWu7JFbfPiytZnQwVa5ZKWfjerq2JPkNTJmzz3JS",
	"WbOqKTeZaJdLXjfZnK2Psmtekur6KJurlx5l1XJxlMFFtNzIge/xpQKH1nF9fPpwlqmzApNamY++Yjfy",
	"vUuew1SaZIJfNbeQuU71ufmTiglzgaJm1Iydz3fC757mBKs3uRp0SlaLP6BU5mWjl39s3gEvPXPpqWno",
	"w1a/1+FEXjEvXIR1WzLxupD7wctjkudMiNf/h8y/drMDawx+lX372xllDcvhpZl882y2yWQlnrhOPsAL",
	"1Gb08kT+9kf1yhevHHgNxJVvD8uc3XrbXBtL0sx3l4YO//ylYRgRFa8lMG0Np5WgIodWZK+WeqGf4f//",
	"8uTp9DIjlNZMCMv501O9/pFc//Xp0+lldmIywxnUjzCDut+Lz/W7jAAhVQPJ+dSr16s3r77+/vXPAAAA",
	"//8pNGzh5u0PAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
